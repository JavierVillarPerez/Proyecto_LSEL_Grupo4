
AquaSmart_22420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000855c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800899c  0800899c  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a4  080089a4  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a8  080089a8  000189a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080089ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bac  20000114  08008ac0  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc0  08008ac0  00024cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6e9  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003704  00000000  00000000  0003a82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  0003f108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024e11  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001058f  00000000  00000000  00064f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2bd0  00000000  00000000  000754e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001480b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  0014812c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086d4 	.word	0x080086d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	080086d4 	.word	0x080086d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <send_data>:
//{
//	return(HAL_GetTick() >= +LoRa_timer);
//}

sensor_buf_t send_data(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	 sensor_buf_t data;

	 data = ringbuf_get(&data_ring_buff);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <send_data+0x2c>)
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fcc7 	bl	8001f12 <ringbuf_get>
	 return data;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	461c      	mov	r4, r3
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800058e:	6020      	str	r0, [r4, #0]
 8000590:	6061      	str	r1, [r4, #4]
 8000592:	60a2      	str	r2, [r4, #8]
}
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	20004a58 	.word	0x20004a58

080005a0 <LoRa_initialization>:
//	  {-1, NULL, -1, NULL },
//};

//fsm_t* LoRa_initialization(uint16_t period)
void LoRa_initialization(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
//	fsm_t* fsm_LoRa;
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 80005a4:	2103      	movs	r1, #3
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <LoRa_initialization+0x10>)
 80005a8:	f001 fc59 	bl	8001e5e <ringbuf_init>
//	fsm_LoRa = fsm_new(send_wireless);
//	LoRa_timer = HAL_GetTick() + period;
//	LoRa_period = period;

//	return fsm_LoRa;
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20004a58 	.word	0x20004a58

080005b4 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ringbuf_put(&data_ring_buff, data);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <save_new_data+0x20>)
 80005c6:	f001 fc67 	bl	8001e98 <ringbuf_put>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20004a58 	.word	0x20004a58

080005d8 <SX1278_hw_init>:
#include "main.h"
//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005e0:	2101      	movs	r1, #1
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f80d 	bl	8000602 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2201      	movs	r2, #1
 80005f4:	4619      	mov	r1, r3
 80005f6:	f002 fcf3 	bl	8002fe0 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6958      	ldr	r0, [r3, #20]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	b299      	uxth	r1, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	bf0c      	ite	eq
 800061c:	2301      	moveq	r3, #1
 800061e:	2300      	movne	r3, #0
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	f002 fcdc 	bl	8002fe0 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000638:	2101      	movs	r1, #1
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ffe1 	bl	8000602 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6858      	ldr	r0, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	f002 fcc7 	bl	8002fe0 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 f855 	bl	8000702 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6858      	ldr	r0, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
 8000662:	2201      	movs	r2, #1
 8000664:	4619      	mov	r1, r3
 8000666:	f002 fcbb 	bl	8002fe0 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f000 f849 	bl	8000702 <SX1278_hw_DelayMs>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffbb 	bl	8000602 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6998      	ldr	r0, [r3, #24]
 8000690:	1cf9      	adds	r1, r7, #3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	2201      	movs	r2, #1
 8000698:	f003 f94e 	bl	8003938 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800069c:	bf00      	nop
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fc1e 	bl	8003ee4 <HAL_SPI_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d1f7      	bne.n	800069e <SX1278_hw_SPICommand+0x26>
		;
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af02      	add	r7, sp, #8
 80006bc:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80006c6:	2100      	movs	r1, #0
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff9a 	bl	8000602 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6998      	ldr	r0, [r3, #24]
 80006d2:	f107 020e 	add.w	r2, r7, #14
 80006d6:	f107 010f 	add.w	r1, r7, #15
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	f003 fa5d 	bl	8003ba0 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80006e6:	bf00      	nop
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fbf9 	bl	8003ee4 <HAL_SPI_GetState>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d1f7      	bne.n	80006e8 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f001 fe46 	bl	800239c <HAL_Delay>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	b29b      	uxth	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	4610      	mov	r0, r2
 800072e:	f002 fc3f 	bl	8002fb0 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	bf0c      	ite	eq
 8000738:	2301      	moveq	r3, #1
 800073a:	2300      	movne	r3, #0
 800073c:	b2db      	uxtb	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8c 	bl	8000678 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffa6 	bl	80006b6 <SX1278_hw_SPIReadByte>
 800076a:	4603      	mov	r3, r0
 800076c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff44 	bl	8000602 <SX1278_hw_SetNSS>
	return tmp;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
 8000790:	4613      	mov	r3, r2
 8000792:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff31 	bl	8000602 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	4610      	mov	r0, r2
 80007b0:	f7ff ff62 	bl	8000678 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	78ba      	ldrb	r2, [r7, #2]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5b 	bl	8000678 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff1a 	bl	8000602 <SX1278_hw_SetNSS>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 80007d6:	b590      	push	{r4, r7, lr}
 80007d8:	b087      	sub	sp, #28
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	461a      	mov	r2, r3
 80007e2:	460b      	mov	r3, r1
 80007e4:	72fb      	strb	r3, [r7, #11]
 80007e6:	4613      	mov	r3, r2
 80007e8:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80007ea:	7abb      	ldrb	r3, [r7, #10]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d927      	bls.n	8000840 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff03 	bl	8000602 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7afa      	ldrb	r2, [r7, #11]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff37 	bl	8000678 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	75fb      	strb	r3, [r7, #23]
 800080e:	e00c      	b.n	800082a <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	18d4      	adds	r4, r2, r3
 800081a:	4608      	mov	r0, r1
 800081c:	f7ff ff4b 	bl	80006b6 <SX1278_hw_SPIReadByte>
 8000820:	4603      	mov	r3, r0
 8000822:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	3301      	adds	r3, #1
 8000828:	75fb      	strb	r3, [r7, #23]
 800082a:	7dfa      	ldrb	r2, [r7, #23]
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	429a      	cmp	r2, r3
 8000830:	d3ee      	bcc.n	8000810 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fee2 	bl	8000602 <SX1278_hw_SetNSS>
 800083e:	e000      	b.n	8000842 <SX1278_SPIBurstRead+0x6c>
		return;
 8000840:	bf00      	nop
	}
}
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}

08000848 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	461a      	mov	r2, r3
 8000854:	460b      	mov	r3, r1
 8000856:	72fb      	strb	r3, [r7, #11]
 8000858:	4613      	mov	r3, r2
 800085a:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d929      	bls.n	80008b6 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff feca 	bl	8000602 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4619      	mov	r1, r3
 800087c:	4610      	mov	r0, r2
 800087e:	f7ff fefb 	bl	8000678 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000882:	2300      	movs	r3, #0
 8000884:	75fb      	strb	r3, [r7, #23]
 8000886:	e00b      	b.n	80008a0 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	7dfb      	ldrb	r3, [r7, #23]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f7ff feef 	bl	8000678 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	3301      	adds	r3, #1
 800089e:	75fb      	strb	r3, [r7, #23]
 80008a0:	7dfa      	ldrb	r2, [r7, #23]
 80008a2:	7abb      	ldrb	r3, [r7, #10]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d3ef      	bcc.n	8000888 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fea7 	bl	8000602 <SX1278_hw_SetNSS>
 80008b4:	e000      	b.n	80008b8 <SX1278_SPIBurstWrite+0x70>
		return;
 80008b6:	bf00      	nop
	}
}
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af02      	add	r7, sp, #8
 80008c4:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7919      	ldrb	r1, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	795a      	ldrb	r2, [r3, #5]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7998      	ldrb	r0, [r3, #6]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	79db      	ldrb	r3, [r3, #7]
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	4603      	mov	r3, r0
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f804 	bl	80008e8 <SX1278_config>
			module->LoRa_BW);
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4603      	mov	r3, r0
 80008f8:	70fb      	strb	r3, [r7, #3]
 80008fa:	460b      	mov	r3, r1
 80008fc:	70bb      	strb	r3, [r7, #2]
 80008fe:	4613      	mov	r3, r2
 8000900:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f8aa 	bl	8000a5c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000908:	200f      	movs	r0, #15
 800090a:	f7ff fefa 	bl	8000702 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f8b4 	bl	8000a7c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000914:	78fa      	ldrb	r2, [r7, #3]
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	4a43      	ldr	r2, [pc, #268]	; (8000a2c <SX1278_config+0x144>)
 800091e:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000920:	2303      	movs	r3, #3
 8000922:	2106      	movs	r1, #6
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff8f 	bl	8000848 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 800092a:	78bb      	ldrb	r3, [r7, #2]
 800092c:	4a40      	ldr	r2, [pc, #256]	; (8000a30 <SX1278_config+0x148>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	461a      	mov	r2, r3
 8000932:	2109      	movs	r1, #9
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff25 	bl	8000784 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800093a:	220b      	movs	r2, #11
 800093c:	210b      	movs	r1, #11
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ff20 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000944:	2223      	movs	r2, #35	; 0x23
 8000946:	210c      	movs	r1, #12
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff1b 	bl	8000784 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 800094e:	787b      	ldrb	r3, [r7, #1]
 8000950:	4a38      	ldr	r2, [pc, #224]	; (8000a34 <SX1278_config+0x14c>)
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	2b06      	cmp	r3, #6
 8000956:	d131      	bne.n	80009bc <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000958:	7e3b      	ldrb	r3, [r7, #24]
 800095a:	4a37      	ldr	r2, [pc, #220]	; (8000a38 <SX1278_config+0x150>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000962:	3303      	adds	r3, #3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	211d      	movs	r1, #29
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ff0a 	bl	8000784 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000970:	787b      	ldrb	r3, [r7, #1]
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <SX1278_config+0x14c>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800097a:	3307      	adds	r3, #7
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	211e      	movs	r1, #30
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fefe 	bl	8000784 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000988:	2131      	movs	r1, #49	; 0x31
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fedb 	bl	8000746 <SX1278_SPIRead>
 8000990:	4603      	mov	r3, r0
 8000992:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f043 0305 	orr.w	r3, r3, #5
 80009a2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	461a      	mov	r2, r3
 80009a8:	2131      	movs	r1, #49	; 0x31
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff feea 	bl	8000784 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80009b0:	220c      	movs	r2, #12
 80009b2:	2137      	movs	r1, #55	; 0x37
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fee5 	bl	8000784 <SX1278_SPIWrite>
 80009ba:	e017      	b.n	80009ec <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80009bc:	7e3b      	ldrb	r3, [r7, #24]
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <SX1278_config+0x150>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80009c6:	3302      	adds	r3, #2
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	211d      	movs	r1, #29
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fed8 	bl	8000784 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80009d4:	787b      	ldrb	r3, [r7, #1]
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <SX1278_config+0x14c>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80009de:	3307      	adds	r3, #7
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	211e      	movs	r1, #30
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fecc 	bl	8000784 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	211f      	movs	r1, #31
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fec7 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fec2 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000a00:	220c      	movs	r2, #12
 8000a02:	2121      	movs	r1, #33	; 0x21
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff febd 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2141      	movs	r1, #65	; 0x41
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff feb8 	bl	8000784 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f80d 	bl	8000a3c <SX1278_standby>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	080087f4 	.word	0x080087f4
 8000a30:	080087f8 	.word	0x080087f8
 8000a34:	080087fc 	.word	0x080087fc
 8000a38:	08008804 	.word	0x08008804

08000a3c <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000a44:	2209      	movs	r2, #9
 8000a46:	2101      	movs	r1, #1
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fe9b 	bl	8000784 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	725a      	strb	r2, [r3, #9]
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000a64:	2208      	movs	r2, #8
 8000a66:	2101      	movs	r1, #1
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fe8b 	bl	8000784 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	725a      	strb	r2, [r3, #9]
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000a84:	2288      	movs	r2, #136	; 0x88
 8000a86:	2101      	movs	r1, #1
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fe7b 	bl	8000784 <SX1278_SPIWrite>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	2112      	movs	r1, #18
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe6e 	bl	8000784 <SX1278_SPIWrite>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	7afa      	ldrb	r2, [r7, #11]
 8000ac2:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff fefa 	bl	80008be <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000aca:	2284      	movs	r2, #132	; 0x84
 8000acc:	214d      	movs	r1, #77	; 0x4d
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff fe58 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	2124      	movs	r1, #36	; 0x24
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe53 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff fe4e 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000ae8:	223f      	movs	r2, #63	; 0x3f
 8000aea:	2111      	movs	r1, #17
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f7ff fe49 	bl	8000784 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ffcf 	bl	8000a96 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000af8:	7afb      	ldrb	r3, [r7, #11]
 8000afa:	461a      	mov	r2, r3
 8000afc:	2122      	movs	r1, #34	; 0x22
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fe40 	bl	8000784 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000b04:	210f      	movs	r1, #15
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff fe1d 	bl	8000746 <SX1278_SPIRead>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	461a      	mov	r2, r3
 8000b14:	210d      	movs	r1, #13
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fe34 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000b1c:	228d      	movs	r2, #141	; 0x8d
 8000b1e:	2101      	movs	r1, #1
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f7ff fe2f 	bl	8000784 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b2e:	2118      	movs	r1, #24
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff fe08 	bl	8000746 <SX1278_SPIRead>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d104      	bne.n	8000b4a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2203      	movs	r2, #3
 8000b44:	725a      	strb	r2, [r3, #9]
			return 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e013      	b.n	8000b72 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d109      	bne.n	8000b6a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fd68 	bl	8000630 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff feac 	bl	80008be <SX1278_defaultConfig>
			return 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e003      	b.n	8000b72 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fdc9 	bl	8000702 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b70:	e7dd      	b.n	8000b2e <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fdc6 	bl	8000718 <SX1278_hw_GetDIO0>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d030      	beq.n	8000bf4 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	330a      	adds	r3, #10
 8000b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 fc8e 	bl	80074be <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fdce 	bl	8000746 <SX1278_SPIRead>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	210d      	movs	r1, #13
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fde5 	bl	8000784 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	799b      	ldrb	r3, [r3, #6]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a1b      	ldrb	r3, [r3, #8]
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e005      	b.n	8000bd6 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000bca:	2113      	movs	r1, #19
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fdba 	bl	8000746 <SX1278_SPIRead>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f103 020a 	add.w	r2, r3, #10
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2100      	movs	r1, #0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fdf8 	bl	80007d6 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff51 	bl	8000a96 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	7afa      	ldrb	r2, [r7, #11]
 8000c14:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff fe51 	bl	80008be <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000c1c:	2287      	movs	r2, #135	; 0x87
 8000c1e:	214d      	movs	r1, #77	; 0x4d
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff fdaf 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000c26:	2200      	movs	r2, #0
 8000c28:	2124      	movs	r1, #36	; 0x24
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fdaa 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000c30:	2241      	movs	r2, #65	; 0x41
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fda5 	bl	8000784 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff ff2b 	bl	8000a96 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000c40:	22f7      	movs	r2, #247	; 0xf7
 8000c42:	2111      	movs	r1, #17
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff fd9d 	bl	8000784 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000c4a:	7afb      	ldrb	r3, [r7, #11]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2122      	movs	r1, #34	; 0x22
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fd97 	bl	8000784 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000c56:	210e      	movs	r1, #14
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff fd74 	bl	8000746 <SX1278_SPIRead>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	461a      	mov	r2, r3
 8000c66:	210d      	movs	r1, #13
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fd8b 	bl	8000784 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000c6e:	2122      	movs	r1, #34	; 0x22
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fd68 	bl	8000746 <SX1278_SPIRead>
 8000c76:	4603      	mov	r3, r0
 8000c78:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000c7a:	7dba      	ldrb	r2, [r7, #22]
 8000c7c:	7afb      	ldrb	r3, [r7, #11]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d104      	bne.n	8000c8c <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2202      	movs	r2, #2
 8000c86:	725a      	strb	r2, [r3, #9]
			return 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e00e      	b.n	8000caa <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ea      	bne.n	8000c6e <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fcc7 	bl	8000630 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fe0b 	bl	80008be <SX1278_defaultConfig>
			return 0;
 8000ca8:	2300      	movs	r3, #0
		}
	}
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fdbd 	bl	8000848 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000cce:	228b      	movs	r2, #139	; 0x8b
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fd56 	bl	8000784 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd1b 	bl	8000718 <SX1278_hw_GetDIO0>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00b      	beq.n	8000d00 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000ce8:	2112      	movs	r1, #18
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fd2b 	bl	8000746 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fed0 	bl	8000a96 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f7ff fea0 	bl	8000a3c <SX1278_standby>
			return 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e013      	b.n	8000d28 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc8d 	bl	8000630 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fdd1 	bl	80008be <SX1278_defaultConfig>
			return 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e003      	b.n	8000d28 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff fcee 	bl	8000702 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000d26:	e7d7      	b.n	8000cd8 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	70fb      	strb	r3, [r7, #3]
 8000d42:	460b      	mov	r3, r1
 8000d44:	70bb      	strb	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fc42 	bl	80005d8 <SX1278_hw_init>
	module->frequency = frequency;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	78ba      	ldrb	r2, [r7, #2]
 8000d5e:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	787a      	ldrb	r2, [r7, #1]
 8000d64:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7c3a      	ldrb	r2, [r7, #16]
 8000d6a:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7d3a      	ldrb	r2, [r7, #20]
 8000d70:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fda3 	bl	80008be <SX1278_defaultConfig>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d003      	beq.n	8000da2 <SX1278_read+0x22>
		length = module->readBytes;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000da0:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	330a      	adds	r3, #10
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	4619      	mov	r1, r3
 8000daa:	68b8      	ldr	r0, [r7, #8]
 8000dac:	f006 fb7c 	bl	80074a8 <memcpy>
	rxBuf[length] = '\0';
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4413      	add	r3, r2
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <PreSleepProcessing>:
void PreSleepProcessing(uint32_t *ulExpectedIdleTime);
void PostSleepProcessing(uint32_t *ulExpectedIdleTime);

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e01c      	b.n	8000e62 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d113      	bne.n	8000e5c <fsm_fire+0x44>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	4798      	blx	r3
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00c      	beq.n	8000e5c <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00c      	beq.n	8000e6c <fsm_fire+0x54>
        t->out(this);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	4798      	blx	r3
      break;
 8000e5a:	e007      	b.n	8000e6c <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3310      	adds	r3, #16
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	dade      	bge.n	8000e28 <fsm_fire+0x10>
    }
  }
}
 8000e6a:	e000      	b.n	8000e6e <fsm_fire+0x56>
      break;
 8000e6c:	bf00      	nop
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <error>:

int error (fsm_t* this) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	889b      	ldrh	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <error+0x26>
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	889a      	ldrh	r2, [r3, #4]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d901      	bls.n	8000eb6 <error+0x2a>
		return 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <error+0x2c>
	else return 0;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <no_error>:

int no_error (fsm_t* this) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	889b      	ldrh	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <no_error+0x2a>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	889a      	ldrh	r2, [r3, #4]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d801      	bhi.n	8000eee <no_error+0x2a>
		return 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <no_error+0x2c>
	else return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <timer_sleep+0x2c>
 8000f16:	f001 fa35 	bl	8002384 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d301      	bcc.n	8000f28 <timer_sleep+0x2c>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <timer_sleep+0x2e>
	else return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <timer_adc>:

int timer_adc (fsm_t* this) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>adc_timer);
 8000f3c:	f001 fa22 	bl	8002384 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <timer_adc+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	bf8c      	ite	hi
 8000f4a:	2301      	movhi	r3, #1
 8000f4c:	2300      	movls	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20004ad0 	.word	0x20004ad0

08000f5c <timer_setup>:

int timer_setup (fsm_t* this) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000f6e:	f001 fa09 	bl	8002384 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	bf8c      	ite	hi
 8000f7c:	2301      	movhi	r3, #1
 8000f7e:	2300      	movls	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <warned>:

int warned (fsm_t* this) {
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	bfd4      	ite	le
 8000fa4:	2301      	movle	r3, #1
 8000fa6:	2300      	movgt	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	long debug = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	60fb      	str	r3, [r7, #12]

	debug = HAL_GetTick();
 8000fcc:	f001 f9da 	bl	8002384 <HAL_GetTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	617b      	str	r3, [r7, #20]
	if(config->measure_count>=(config->measure_average))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	7f1b      	ldrb	r3, [r3, #28]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d301      	bcc.n	8000fe6 <timer_measure+0x30>
	return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e009      	b.n	8000ffa <timer_measure+0x44>
	else return (HAL_GetTick()>=(config->measure_timer));
 8000fe6:	f001 f9cd 	bl	8002384 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	bf2c      	ite	cs
 8000ff4:	2301      	movcs	r3, #1
 8000ff6:	2300      	movcc	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <warning_limit>:

int warning_limit (fsm_t* this) {
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	2b01      	cmp	r3, #1
 800101a:	bfcc      	ite	gt
 800101c:	2301      	movgt	r3, #1
 800101e:	2300      	movle	r3, #0
 8001020:	b2db      	uxtb	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <measuring>:

void measuring (fsm_t* this) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8001038:	2300      	movs	r3, #0
 800103a:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <measuring+0x54>)
 8001048:	f001 fb07 	bl	800265a <HAL_ADC_GetValue>
 800104c:	4603      	mov	r3, r0
 800104e:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	885a      	ldrh	r2, [r3, #2]
 8001054:	8afb      	ldrh	r3, [r7, #22]
 8001056:	4413      	add	r3, r2
 8001058:	b29a      	uxth	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	7f1b      	ldrb	r3, [r3, #28]
 8001062:	3301      	adds	r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 800106a:	f001 f98b 	bl	8002384 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001074:	4413      	add	r3, r2
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	619a      	str	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20004a88 	.word	0x20004a88

08001088 <process_data>:

void process_data (fsm_t* this) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	885a      	ldrh	r2, [r3, #2]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <process_data+0x50>)
 80010a4:	f001 faa6 	bl	80025f4 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	889a      	ldrh	r2, [r3, #4]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d809      	bhi.n	80010c8 <process_data+0x40>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	889a      	ldrh	r2, [r3, #4]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010bc:	429a      	cmp	r2, r3
 80010be:	d303      	bcc.n	80010c8 <process_data+0x40>
	{
		config->alarm = 0;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2200      	movs	r2, #0
 80010c4:	719a      	strb	r2, [r3, #6]
 80010c6:	e002      	b.n	80010ce <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2201      	movs	r2, #1
 80010cc:	719a      	strb	r2, [r3, #6]
	}

}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20004a88 	.word	0x20004a88

080010dc <alert>:
void alert (fsm_t* this) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	615a      	str	r2, [r3, #20]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <sleep>:

void sleep (fsm_t* this) { // led orange
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 8001116:	f001 f935 	bl	8002384 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001120:	4413      	add	r3, r2
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <sleep+0x5c>)
 8001132:	f001 ff55 	bl	8002fe0 <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2201      	movs	r2, #1
 800113a:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	2b01      	cmp	r3, #1
 8001148:	dd03      	ble.n	8001152 <sleep+0x4e>
	{
		config->error = 1;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2201      	movs	r2, #1
 800114e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 8001150:	e002      	b.n	8001158 <sleep+0x54>
		config->error = 0;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2200      	movs	r2, #0
 8001156:	71da      	strb	r2, [r3, #7]
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020c00 	.word	0x40020c00

08001164 <init_adc>:

void init_adc (fsm_t* this) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <init_adc+0x28>)
 800116e:	f001 fa41 	bl	80025f4 <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 1000;
 8001172:	f001 f907 	bl	8002384 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800117c:	461a      	mov	r2, r3
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <init_adc+0x2c>)
 8001180:	601a      	str	r2, [r3, #0]

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20004a88 	.word	0x20004a88
 8001190:	20004ad0 	.word	0x20004ad0

08001194 <setting_up>:


void setting_up (fsm_t* this) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2200      	movs	r2, #0
 80011aa:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2200      	movs	r2, #0
 80011b6:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2200      	movs	r2, #0
 80011bc:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 80011be:	f001 f8e1 	bl	8002384 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80011c8:	4413      	add	r3, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <setting_up+0x64>)
 80011da:	f001 ff01 	bl	8002fe0 <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <setting_up+0x68>)
 80011e0:	f001 f942 	bl	8002468 <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2201      	movs	r2, #1
 80011e8:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2200      	movs	r2, #0
 80011ee:	725a      	strb	r2, [r3, #9]
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	20004a88 	.word	0x20004a88

08001200 <save_data>:

void save_data (fsm_t* this)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	8bdb      	ldrh	r3, [r3, #30]
 8001216:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121e:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	799b      	ldrb	r3, [r3, #6]
 8001224:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	79db      	ldrb	r3, [r3, #7]
 800122a:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800123c:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001246:	f7ff f9b5 	bl	80005b4 <save_new_data>
}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 800125e:	4905      	ldr	r1, [pc, #20]	; (8001274 <fsm_sensor_init+0x20>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fdc7 	bl	8000df4 <fsm_init>
  f->param = c;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	609a      	str	r2, [r3, #8]
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000

08001278 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	4608      	mov	r0, r1
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4603      	mov	r3, r0
 8001288:	817b      	strh	r3, [r7, #10]
 800128a:	460b      	mov	r3, r1
 800128c:	727b      	strb	r3, [r7, #9]
 800128e:	4613      	mov	r3, r2
 8001290:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	897a      	ldrh	r2, [r7, #10]
 80012de:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7a7a      	ldrb	r2, [r7, #9]
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7e3a      	ldrb	r2, [r7, #24]
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8bba      	ldrh	r2, [r7, #28]
 80012fa:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8c3a      	ldrh	r2, [r7, #32]
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800130c:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001312:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001318:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800131e:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001334:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001338:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001344:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001348:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800134c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001354:	e000      	b.n	8001358 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001356:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001358:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f9      	beq.n	8001356 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001362:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001382:	f000 ff99 	bl	80022b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f86f 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f000 f95d 	bl	8001648 <MX_GPIO_Init>
  MX_SPI1_Init();
 800138e:	f000 f925 	bl	80015dc <MX_SPI1_Init>
  MX_ADC1_Init();
 8001392:	f000 f8d1 	bl	8001538 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  LoRa_initialization();
 8001396:	f7ff f903 	bl	80005a0 <LoRa_initialization>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800139a:	f002 fe65 	bl	8004068 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <main+0xa0>)
 80013a0:	2134      	movs	r1, #52	; 0x34
 80013a2:	2001      	movs	r0, #1
 80013a4:	f003 f806 	bl	80043b4 <osMessageQueueNew>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <main+0xa4>)
 80013ac:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (2, sizeof(sensor_t), &myQueueSensor2_attributes);
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <main+0xa8>)
 80013b0:	2134      	movs	r1, #52	; 0x34
 80013b2:	2002      	movs	r0, #2
 80013b4:	f002 fffe 	bl	80043b4 <osMessageQueueNew>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <main+0xac>)
 80013bc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <main+0xb0>)
 80013c0:	2100      	movs	r1, #0
 80013c2:	481b      	ldr	r0, [pc, #108]	; (8001430 <main+0xb4>)
 80013c4:	f002 fee2 	bl	800418c <osThreadNew>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <main+0xb8>)
 80013cc:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <main+0xbc>)
 80013d4:	4619      	mov	r1, r3
 80013d6:	4819      	ldr	r0, [pc, #100]	; (800143c <main+0xc0>)
 80013d8:	f002 fed8 	bl	800418c <osThreadNew>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <main+0xc4>)
 80013e0:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 80013e2:	4a18      	ldr	r2, [pc, #96]	; (8001444 <main+0xc8>)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <main+0xcc>)
 80013e8:	f002 fed0 	bl	800418c <osThreadNew>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <main+0xd0>)
 80013f0:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <main+0xd4>)
 80013f6:	4619      	mov	r1, r3
 80013f8:	4816      	ldr	r0, [pc, #88]	; (8001454 <main+0xd8>)
 80013fa:	f002 fec7 	bl	800418c <osThreadNew>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <main+0xdc>)
 8001402:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <main+0xe0>)
 8001406:	2100      	movs	r1, #0
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <main+0xe4>)
 800140a:	f002 febf 	bl	800418c <osThreadNew>
 800140e:	4602      	mov	r2, r0
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <main+0xe8>)
 8001412:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001414:	f002 fe5c 	bl	80040d0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x9c>
 800141a:	bf00      	nop
 800141c:	080088c4 	.word	0x080088c4
 8001420:	20004c54 	.word	0x20004c54
 8001424:	080088dc 	.word	0x080088dc
 8001428:	20004ae0 	.word	0x20004ae0
 800142c:	08008810 	.word	0x08008810
 8001430:	08001ad1 	.word	0x08001ad1
 8001434:	20004ad8 	.word	0x20004ad8
 8001438:	08008834 	.word	0x08008834
 800143c:	08001ae1 	.word	0x08001ae1
 8001440:	20004ae8 	.word	0x20004ae8
 8001444:	08008858 	.word	0x08008858
 8001448:	08001be5 	.word	0x08001be5
 800144c:	20004ad4 	.word	0x20004ad4
 8001450:	0800887c 	.word	0x0800887c
 8001454:	08001c39 	.word	0x08001c39
 8001458:	20004c58 	.word	0x20004c58
 800145c:	080088a0 	.word	0x080088a0
 8001460:	08001d3d 	.word	0x08001d3d
 8001464:	20004b44 	.word	0x20004b44

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	2230      	movs	r2, #48	; 0x30
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f006 f821 	bl	80074be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <SystemClock_Config+0xc8>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a26      	ldr	r2, [pc, #152]	; (8001530 <SystemClock_Config+0xc8>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <SystemClock_Config+0xc8>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <SystemClock_Config+0xcc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <SystemClock_Config+0xcc>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <SystemClock_Config+0xcc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d8:	2304      	movs	r3, #4
 80014da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014dc:	2348      	movs	r3, #72	; 0x48
 80014de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014e4:	2303      	movs	r3, #3
 80014e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fd91 	bl	8003014 <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f8:	f000 fcaa 	bl	8001e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001500:	2302      	movs	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f001 ffeb 	bl	80034f4 <HAL_RCC_ClockConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001524:	f000 fc94 	bl	8001e50 <Error_Handler>
  }
}
 8001528:	bf00      	nop
 800152a:	3750      	adds	r7, #80	; 0x50
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_ADC1_Init+0x98>)
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <MX_ADC1_Init+0x9c>)
 800154e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800155c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_ADC1_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001574:	2200      	movs	r2, #0
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_ADC1_Init+0x98>)
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <MX_ADC1_Init+0xa0>)
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001586:	2201      	movs	r2, #1
 8001588:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_ADC1_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_ADC1_Init+0x98>)
 8001594:	2201      	movs	r2, #1
 8001596:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC1_Init+0x98>)
 800159a:	f000 ff21 	bl	80023e0 <HAL_ADC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a4:	f000 fc54 	bl	8001e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_ADC1_Init+0x98>)
 80015ba:	f001 f85b 	bl	8002674 <HAL_ADC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c4:	f000 fc44 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20004a88 	.word	0x20004a88
 80015d4:	40012000 	.word	0x40012000
 80015d8:	0f000001 	.word	0x0f000001

080015dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_SPI1_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x64>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x64>)
 8001610:	2208      	movs	r2, #8
 8001612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x64>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPI1_Init+0x64>)
 800162e:	f002 f91f 	bl	8003870 <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001638:	f000 fc0a 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20004aec 	.word	0x20004aec
 8001644:	40013000 	.word	0x40013000

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4ba4      	ldr	r3, [pc, #656]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4aa3      	ldr	r2, [pc, #652]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	4b9d      	ldr	r3, [pc, #628]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a9c      	ldr	r2, [pc, #624]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b9a      	ldr	r3, [pc, #616]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b96      	ldr	r3, [pc, #600]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a95      	ldr	r2, [pc, #596]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b8f      	ldr	r3, [pc, #572]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a8e      	ldr	r2, [pc, #568]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b8c      	ldr	r3, [pc, #560]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a87      	ldr	r2, [pc, #540]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a80      	ldr	r2, [pc, #512]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <MX_GPIO_Init+0x2ac>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2108      	movs	r1, #8
 800170a:	487b      	ldr	r0, [pc, #492]	; (80018f8 <MX_GPIO_Init+0x2b0>)
 800170c:	f001 fc68 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	2101      	movs	r1, #1
 8001714:	4879      	ldr	r0, [pc, #484]	; (80018fc <MX_GPIO_Init+0x2b4>)
 8001716:	f001 fc63 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	2110      	movs	r1, #16
 800171e:	4878      	ldr	r0, [pc, #480]	; (8001900 <MX_GPIO_Init+0x2b8>)
 8001720:	f001 fc5e 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2102      	movs	r1, #2
 8001728:	4876      	ldr	r0, [pc, #472]	; (8001904 <MX_GPIO_Init+0x2bc>)
 800172a:	f001 fc59 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800172e:	2200      	movs	r2, #0
 8001730:	f24f 0152 	movw	r1, #61522	; 0xf052
 8001734:	4874      	ldr	r0, [pc, #464]	; (8001908 <MX_GPIO_Init+0x2c0>)
 8001736:	f001 fc53 	bl	8002fe0 <HAL_GPIO_WritePin>
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800173a:	2308      	movs	r3, #8
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	4869      	ldr	r0, [pc, #420]	; (80018f8 <MX_GPIO_Init+0x2b0>)
 8001752:	f001 fa93 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001756:	2301      	movs	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4863      	ldr	r0, [pc, #396]	; (80018fc <MX_GPIO_Init+0x2b4>)
 800176e:	f001 fa85 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001772:	2308      	movs	r3, #8
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001782:	2305      	movs	r3, #5
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	485b      	ldr	r0, [pc, #364]	; (80018fc <MX_GPIO_Init+0x2b4>)
 800178e:	f001 fa75 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001792:	2301      	movs	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <MX_GPIO_Init+0x2c4>)
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4856      	ldr	r0, [pc, #344]	; (8001900 <MX_GPIO_Init+0x2b8>)
 80017a6:	f001 fa69 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80017aa:	2310      	movs	r3, #16
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	484f      	ldr	r0, [pc, #316]	; (8001900 <MX_GPIO_Init+0x2b8>)
 80017c2:	f001 fa5b 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin MODE_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 80017c6:	2305      	movs	r3, #5
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	484a      	ldr	r0, [pc, #296]	; (8001904 <MX_GPIO_Init+0x2bc>)
 80017da:	f001 fa4f 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80017de:	2302      	movs	r3, #2
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4843      	ldr	r0, [pc, #268]	; (8001904 <MX_GPIO_Init+0x2bc>)
 80017f6:	f001 fa41 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180c:	2305      	movs	r3, #5
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	483b      	ldr	r0, [pc, #236]	; (8001904 <MX_GPIO_Init+0x2bc>)
 8001818:	f001 fa30 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor1_Supply_Pin Audio_RST_Pin Sensor2_Supply_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800181c:	f24f 0352 	movw	r3, #61522	; 0xf052
 8001820:	61fb      	str	r3, [r7, #28]
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	4834      	ldr	r0, [pc, #208]	; (8001908 <MX_GPIO_Init+0x2c0>)
 8001836:	f001 fa21 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800183a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800184c:	2306      	movs	r3, #6
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4829      	ldr	r0, [pc, #164]	; (80018fc <MX_GPIO_Init+0x2b4>)
 8001858:	f001 fa10 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800185c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4823      	ldr	r0, [pc, #140]	; (8001900 <MX_GPIO_Init+0x2b8>)
 8001872:	f001 fa03 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001876:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001888:	230a      	movs	r3, #10
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	481b      	ldr	r0, [pc, #108]	; (8001900 <MX_GPIO_Init+0x2b8>)
 8001894:	f001 f9f2 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001898:	2320      	movs	r3, #32
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4817      	ldr	r0, [pc, #92]	; (8001908 <MX_GPIO_Init+0x2c0>)
 80018ac:	f001 f9e6 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018b0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b6:	2312      	movs	r3, #18
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c2:	2304      	movs	r3, #4
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_GPIO_Init+0x2bc>)
 80018ce:	f001 f9d5 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_GPIO_Init+0x2c4>)
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_GPIO_Init+0x2b0>)
 80018e6:	f001 f9c9 	bl	8002c7c <HAL_GPIO_Init>

}
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	; 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020c00 	.word	0x40020c00
 800190c:	10120000 	.word	0x10120000

08001910 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e009      	b.n	8001936 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fcfe 	bl	800132c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf1      	blt.n	8001922 <_write+0x12>
	}
	return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <Lora_inicio>:


void Lora_inicio(int init){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <Lora_inicio+0xa4>)
 8001952:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <Lora_inicio+0xa8>)
 8001954:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <Lora_inicio+0xa4>)
 8001958:	2201      	movs	r2, #1
 800195a:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <Lora_inicio+0xa4>)
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <Lora_inicio+0xac>)
 8001960:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <Lora_inicio+0xa4>)
 8001964:	2210      	movs	r2, #16
 8001966:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <Lora_inicio+0xa4>)
 800196a:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <Lora_inicio+0xa8>)
 800196c:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <Lora_inicio+0xa4>)
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <Lora_inicio+0xa4>)
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <Lora_inicio+0xb0>)
 8001978:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <Lora_inicio+0xb4>)
 800197c:	2200      	movs	r2, #0
 800197e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <Lora_inicio+0xb4>)
 8001984:	2200      	movs	r2, #0
 8001986:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <Lora_inicio+0xb4>)
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <Lora_inicio+0xa4>)
 800198c:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <Lora_inicio+0xb8>)
 8001990:	f005 feba 	bl	8007708 <puts>
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8001994:	230a      	movs	r3, #10
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2303      	movs	r3, #3
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2302      	movs	r3, #2
 800199e:	2201      	movs	r2, #1
 80019a0:	2100      	movs	r1, #0
 80019a2:	4816      	ldr	r0, [pc, #88]	; (80019fc <Lora_inicio+0xb4>)
 80019a4:	f7ff f9c4 	bl	8000d30 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	printf("Done configuring LoRaModule\r\n");
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <Lora_inicio+0xbc>)
 80019aa:	f005 fead 	bl	8007708 <puts>
	while (ret!=1){
 80019ae:	e015      	b.n	80019dc <Lora_inicio+0x94>
		if (init == 1) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <Lora_inicio+0x7e>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80019b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019ba:	2110      	movs	r1, #16
 80019bc:	480f      	ldr	r0, [pc, #60]	; (80019fc <Lora_inicio+0xb4>)
 80019be:	f7ff f920 	bl	8000c02 <SX1278_LoRaEntryTx>
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	e006      	b.n	80019d4 <Lora_inicio+0x8c>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 80019c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019ca:	2110      	movs	r1, #16
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <Lora_inicio+0xb4>)
 80019ce:	f7ff f86f 	bl	8000ab0 <SX1278_LoRaEntryRx>
 80019d2:	60f8      	str	r0, [r7, #12]
		}
		printf("ret: %d\n", ret);
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <Lora_inicio+0xc0>)
 80019d8:	f005 fe22 	bl	8007620 <iprintf>
	while (ret!=1){
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d1e6      	bne.n	80019b0 <Lora_inicio+0x68>
	}
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20004c5c 	.word	0x20004c5c
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020000 	.word	0x40020000
 80019f8:	20004aec 	.word	0x20004aec
 80019fc:	20004b48 	.word	0x20004b48
 8001a00:	08008750 	.word	0x08008750
 8001a04:	0800876c 	.word	0x0800876c
 8001a08:	0800878c 	.word	0x0800878c

08001a0c <Lora_envia>:


void Lora_envia(sensor_buf_t mensaje){
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b09d      	sub	sp, #116	; 0x74
 8001a10:	af06      	add	r7, sp, #24
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int ret;
	char buffer[64];
	int message_length;
	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d", mensaje.Device_ID, mensaje.Sensor_ID, mensaje.measure, mensaje.alarm, mensaje.error, mensaje.threshold_L, mensaje.threshold_H);
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	461e      	mov	r6, r3
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	469c      	mov	ip, r3
 8001a20:	893b      	ldrh	r3, [r7, #8]
 8001a22:	7aba      	ldrb	r2, [r7, #10]
 8001a24:	7af9      	ldrb	r1, [r7, #11]
 8001a26:	89b8      	ldrh	r0, [r7, #12]
 8001a28:	4604      	mov	r4, r0
 8001a2a:	89f8      	ldrh	r0, [r7, #14]
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	f107 0010 	add.w	r0, r7, #16
 8001a32:	9504      	str	r5, [sp, #16]
 8001a34:	9403      	str	r4, [sp, #12]
 8001a36:	9102      	str	r1, [sp, #8]
 8001a38:	9201      	str	r2, [sp, #4]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4663      	mov	r3, ip
 8001a3e:	4632      	mov	r2, r6
 8001a40:	4910      	ldr	r1, [pc, #64]	; (8001a84 <Lora_envia+0x78>)
 8001a42:	f005 fe79 	bl	8007738 <siprintf>
 8001a46:	6578      	str	r0, [r7, #84]	; 0x54
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a50:	4619      	mov	r1, r3
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <Lora_envia+0x7c>)
 8001a54:	f7ff f8d5 	bl	8000c02 <SX1278_LoRaEntryTx>
 8001a58:	6538      	str	r0, [r7, #80]	; 0x50
	printf("Sending %s\r\n", buffer);
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <Lora_envia+0x80>)
 8001a62:	f005 fddd 	bl	8007620 <iprintf>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	f107 0110 	add.w	r1, r7, #16
 8001a6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <Lora_envia+0x7c>)
 8001a74:	f7ff f91d 	bl	8000cb2 <SX1278_LoRaTxPacket>
 8001a78:	6538      	str	r0, [r7, #80]	; 0x50
}
 8001a7a:	bf00      	nop
 8001a7c:	375c      	adds	r7, #92	; 0x5c
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	08008798 	.word	0x08008798
 8001a88:	20004b48 	.word	0x20004b48
 8001a8c:	080087b8 	.word	0x080087b8

08001a90 <Lora_recibe>:

void Lora_recibe(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b092      	sub	sp, #72	; 0x48
 8001a94:	af00      	add	r7, sp, #0
	int ret;
	char buffer[64];
	ret = SX1278_LoRaRxPacket(&SX1278);
 8001a96:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <Lora_recibe+0x38>)
 8001a98:	f7ff f86f 	bl	8000b7a <SX1278_LoRaRxPacket>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
	if (ret > 0) {
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd0c      	ble.n	8001ac0 <Lora_recibe+0x30>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8001aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <Lora_recibe+0x38>)
 8001ab0:	f7ff f966 	bl	8000d80 <SX1278_read>
		printf("Content (%d): %s\r\n", ret, buffer);
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001aba:	4804      	ldr	r0, [pc, #16]	; (8001acc <Lora_recibe+0x3c>)
 8001abc:	f005 fdb0 	bl	8007620 <iprintf>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	3748      	adds	r7, #72	; 0x48
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20004b48 	.word	0x20004b48
 8001acc:	080087c8 	.word	0x080087c8

08001ad0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f002 fbfd 	bl	80042d8 <osDelay>
 8001ade:	e7fb      	b.n	8001ad8 <StartDefaultTask+0x8>

08001ae0 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af08      	add	r7, sp, #32
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor1;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8001afe:	f107 001c 	add.w	r0, r7, #28
 8001b02:	2304      	movs	r3, #4
 8001b04:	9307      	str	r3, [sp, #28]
 8001b06:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001b0a:	9306      	str	r3, [sp, #24]
 8001b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b10:	9305      	str	r3, [sp, #20]
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	9304      	str	r3, [sp, #16]
 8001b18:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	2201      	movs	r2, #1
 8001b32:	2101      	movs	r1, #1
 8001b34:	f7ff fba0 	bl	8001278 <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b40:	f7ff fb88 	bl	8001254 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8001b44:	f002 fafa 	bl	800413c <osKernelGetTickCount>
 8001b48:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {

	/*Select ADC Channel 1*/

	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	dc24      	bgt.n	8001b9c <StartTaskSensor1+0xbc>
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <StartTaskSensor1+0xf4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d120      	bne.n	8001b9c <StartTaskSensor1+0xbc>
	{
		sensor1_ON = TRUE;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <StartTaskSensor1+0xf8>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	481a      	ldr	r0, [pc, #104]	; (8001bdc <StartTaskSensor1+0xfc>)
 8001b74:	f000 fd7e 	bl	8002674 <HAL_ADC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <StartTaskSensor1+0xa2>
		{
			Error_Handler();
 8001b7e:	f000 f967 	bl	8001e50 <Error_Handler>
		}
		fsm_fire(&(fsm_s1->fsm));
 8001b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f947 	bl	8000e18 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <StartTaskSensor1+0x100>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	f002 fc93 	bl	80044c0 <osMessageQueuePut>
 8001b9a:	e002      	b.n	8001ba2 <StartTaskSensor1+0xc2>
	}
	else sensor1_ON = FALSE;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <StartTaskSensor1+0xf8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]

	if(fsm_s1->fsm.current_state > 4)
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	dd0b      	ble.n	8001bc2 <StartTaskSensor1+0xe2>
	{
		fsm_fire(&(fsm_s1->fsm));
 8001baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f933 	bl	8000e18 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <StartTaskSensor1+0x100>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb8:	6899      	ldr	r1, [r3, #8]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f002 fc7f 	bl	80044c0 <osMessageQueuePut>
	}
	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001bc8:	657b      	str	r3, [r7, #84]	; 0x54
    osDelayUntil(tDelay);
 8001bca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bcc:	f002 fbb2 	bl	8004334 <osDelayUntil>
	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001bd0:	e7bb      	b.n	8001b4a <StartTaskSensor1+0x6a>
 8001bd2:	bf00      	nop
 8001bd4:	20004adc 	.word	0x20004adc
 8001bd8:	20004ae4 	.word	0x20004ae4
 8001bdc:	20004a88 	.word	0x20004a88
 8001be0:	20004c54 	.word	0x20004c54

08001be4 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
  uint32_t tDelay = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  sensor_buf_t data2send;
  tDelay = osKernelGetTickCount();
 8001bf0:	f002 faa4 	bl	800413c <osKernelGetTickCount>
 8001bf4:	61f8      	str	r0, [r7, #28]
  uint8_t master;

  /*master 1 for all devices, 0 for GW*/
  master = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	76fb      	strb	r3, [r7, #27]

  Lora_inicio(master);  //0 es esclavo, 1 es maestro
 8001bfa:	7efb      	ldrb	r3, [r7, #27]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fea3 	bl	8001948 <Lora_inicio>

  /* Infinite loop */
  for(;;)
  {

	if (master == 1)
 8001c02:	7efb      	ldrb	r3, [r7, #27]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10b      	bne.n	8001c20 <StartTaskLoRa+0x3c>
	{
		//for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
		//{
			data2send = send_data();
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fcaf 	bl	8000570 <send_data>
			Lora_envia(data2send);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c1a:	f7ff fef7 	bl	8001a0c <Lora_envia>
 8001c1e:	e001      	b.n	8001c24 <StartTaskLoRa+0x40>
		//}
	} else
	{
		Lora_recibe();
 8001c20:	f7ff ff36 	bl	8001a90 <Lora_recibe>
	}
	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001c2a:	3310      	adds	r3, #16
 8001c2c:	61fb      	str	r3, [r7, #28]
    osDelayUntil(tDelay);
 8001c2e:	69f8      	ldr	r0, [r7, #28]
 8001c30:	f002 fb80 	bl	8004334 <osDelayUntil>
	if (master == 1)
 8001c34:	e7e5      	b.n	8001c02 <StartTaskLoRa+0x1e>
	...

08001c38 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09e      	sub	sp, #120	; 0x78
 8001c3c:	af08      	add	r7, sp, #32
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor2;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]

	fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	653b      	str	r3, [r7, #80]	; 0x50

	sensor_initialization(&sensor2, ID_Device, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 8001c56:	f107 001c 	add.w	r0, r7, #28
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	9307      	str	r3, [sp, #28]
 8001c5e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001c62:	9306      	str	r3, [sp, #24]
 8001c64:	f241 537c 	movw	r3, #5500	; 0x157c
 8001c68:	9305      	str	r3, [sp, #20]
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	9304      	str	r3, [sp, #16]
 8001c70:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001c74:	9303      	str	r3, [sp, #12]
 8001c76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	2302      	movs	r3, #2
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2340      	movs	r3, #64	; 0x40
 8001c88:	2202      	movs	r2, #2
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	f7ff faf4 	bl	8001278 <sensor_initialization>
	fsm_sensor_init(fsm_s2, &sensor2);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c98:	f7ff fadc 	bl	8001254 <fsm_sensor_init>

	tDelay = osKernelGetTickCount();
 8001c9c:	f002 fa4e 	bl	800413c <osKernelGetTickCount>
 8001ca0:	6578      	str	r0, [r7, #84]	; 0x54
	/* Infinite loop */
	/* Infinite loop */
	for(;;)
	{
		/*Select ADC Channel 2*/
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	dc24      	bgt.n	8001cf4 <StartTaskSensor2+0xbc>
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <StartTaskSensor2+0xf4>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d120      	bne.n	8001cf4 <StartTaskSensor2+0xbc>
		{
			sensor2_ON = TRUE;
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <StartTaskSensor2+0xf8>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
			sConfig.Rank = 1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481a      	ldr	r0, [pc, #104]	; (8001d34 <StartTaskSensor2+0xfc>)
 8001ccc:	f000 fcd2 	bl	8002674 <HAL_ADC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <StartTaskSensor2+0xa2>
			{
				Error_Handler();
 8001cd6:	f000 f8bb 	bl	8001e50 <Error_Handler>
			}
			fsm_fire(&(fsm_s2->fsm));
 8001cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f89b 	bl	8000e18 <fsm_fire>
			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <StartTaskSensor2+0x100>)
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	2300      	movs	r3, #0
 8001cec:	2200      	movs	r2, #0
 8001cee:	f002 fbe7 	bl	80044c0 <osMessageQueuePut>
 8001cf2:	e002      	b.n	8001cfa <StartTaskSensor2+0xc2>
		}
		else sensor2_ON = FALSE;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <StartTaskSensor2+0xf8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

		if(fsm_s2->fsm.current_state > 4)
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	dd0b      	ble.n	8001d1a <StartTaskSensor2+0xe2>
		{
			fsm_fire(&(fsm_s2->fsm));
 8001d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f887 	bl	8000e18 <fsm_fire>

			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <StartTaskSensor2+0x100>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2200      	movs	r2, #0
 8001d16:	f002 fbd3 	bl	80044c0 <osMessageQueuePut>
		}

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d20:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(tDelay);
 8001d22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001d24:	f002 fb06 	bl	8004334 <osDelayUntil>
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001d28:	e7bb      	b.n	8001ca2 <StartTaskSensor2+0x6a>
 8001d2a:	bf00      	nop
 8001d2c:	20004ae4 	.word	0x20004ae4
 8001d30:	20004adc 	.word	0x20004adc
 8001d34:	20004a88 	.word	0x20004a88
 8001d38:	20004ae0 	.word	0x20004ae0

08001d3c <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b09e      	sub	sp, #120	; 0x78
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 8001d48:	f002 f9f8 	bl	800413c <osKernelGetTickCount>
 8001d4c:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <StartTaskLEDs+0x108>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d56:	2300      	movs	r3, #0
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f002 fc25 	bl	80045a8 <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <StartTaskLEDs+0x10c>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	f107 010c 	add.w	r1, r7, #12
 8001d66:	2300      	movs	r3, #0
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f002 fc1d 	bl	80045a8 <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 8001d6e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d002      	beq.n	8001d7c <StartTaskLEDs+0x40>
 8001d76:	7d3b      	ldrb	r3, [r7, #20]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10c      	bne.n	8001d96 <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d82:	4832      	ldr	r0, [pc, #200]	; (8001e4c <StartTaskLEDs+0x110>)
 8001d84:	f001 f92c 	bl	8002fe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8e:	482f      	ldr	r0, [pc, #188]	; (8001e4c <StartTaskLEDs+0x110>)
 8001d90:	f001 f926 	bl	8002fe0 <HAL_GPIO_WritePin>
 8001d94:	e039      	b.n	8001e0a <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 8001d96:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d129      	bne.n	8001df2 <StartTaskLEDs+0xb6>
 8001d9e:	7d7b      	ldrb	r3, [r7, #21]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d126      	bne.n	8001df2 <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001daa:	4828      	ldr	r0, [pc, #160]	; (8001e4c <StartTaskLEDs+0x110>)
 8001dac:	f001 f918 	bl	8002fe0 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001db0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d002      	beq.n	8001dbe <StartTaskLEDs+0x82>
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d10c      	bne.n	8001dd8 <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc4:	4821      	ldr	r0, [pc, #132]	; (8001e4c <StartTaskLEDs+0x110>)
 8001dc6:	f001 f90b 	bl	8002fe0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd0:	481e      	ldr	r0, [pc, #120]	; (8001e4c <StartTaskLEDs+0x110>)
 8001dd2:	f001 f905 	bl	8002fe0 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001dd6:	e018      	b.n	8001e0a <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dde:	481b      	ldr	r0, [pc, #108]	; (8001e4c <StartTaskLEDs+0x110>)
 8001de0:	f001 f8fe 	bl	8002fe0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001de4:	2201      	movs	r2, #1
 8001de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <StartTaskLEDs+0x110>)
 8001dec:	f001 f8f8 	bl	8002fe0 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001df0:	e00b      	b.n	8001e0a <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001df8:	4814      	ldr	r0, [pc, #80]	; (8001e4c <StartTaskLEDs+0x110>)
 8001dfa:	f001 f8f1 	bl	8002fe0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e04:	4811      	ldr	r0, [pc, #68]	; (8001e4c <StartTaskLEDs+0x110>)
 8001e06:	f001 f8eb 	bl	8002fe0 <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001e0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d002      	beq.n	8001e18 <StartTaskLEDs+0xdc>
 8001e12:	7cbb      	ldrb	r3, [r7, #18]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <StartTaskLEDs+0xea>
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1e:	480b      	ldr	r0, [pc, #44]	; (8001e4c <StartTaskLEDs+0x110>)
 8001e20:	f001 f8de 	bl	8002fe0 <HAL_GPIO_WritePin>
 8001e24:	e005      	b.n	8001e32 <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <StartTaskLEDs+0x110>)
 8001e2e:	f001 f8d7 	bl	8002fe0 <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e38:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 8001e3a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e3c:	f002 fa7a 	bl	8004334 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001e40:	e785      	b.n	8001d4e <StartTaskLEDs+0x12>
 8001e42:	bf00      	nop
 8001e44:	20004c54 	.word	0x20004c54
 8001e48:	20004ae0 	.word	0x20004ae0
 8001e4c:	40020c00 	.word	0x40020c00

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:A+1 //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <ringbuf_init+0x1a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b24      	cmp	r3, #36	; 0x24
 8001e76:	d003      	beq.n	8001e80 <ringbuf_init+0x22>

	 p=NULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 8001e7c:	2324      	movs	r3, #36	; 0x24
 8001e7e:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  _this->tail = 0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001e98:	b490      	push	{r4, r7}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(NEXT(_this->head) != 0){
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d018      	beq.n	8001ee0 <ringbuf_put+0x48>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d013      	beq.n	8001ee0 <ringbuf_put+0x48>
  _this->buf[_this->head] = item;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	461c      	mov	r4, r3
 8001eca:	463b      	mov	r3, r7
 8001ecc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
 8001ede:	e013      	b.n	8001f08 <ringbuf_put+0x70>
  }
  else
  {
  _this->buf[_this->head] = item;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head = 0;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2202      	movs	r2, #2
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc90      	pop	{r4, r7}
 8001f10:	4770      	bx	lr

08001f12 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001f12:	b490      	push	{r4, r7}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d01e      	beq.n	8001f66 <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	18ca      	adds	r2, r1, r3
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d00a      	beq.n	8001f60 <ringbuf_get+0x4e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f52:	d005      	beq.n	8001f60 <ringbuf_get+0x4e>
		{
			_this->tail++;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f5e:	e002      	b.n	8001f66 <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
		}
    }
	return item;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	461c      	mov	r4, r3
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f70:	6020      	str	r0, [r4, #0]
 8001f72:	6061      	str	r1, [r4, #4]
 8001f74:	60a2      	str	r2, [r4, #8]
}
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc90      	pop	{r4, r7}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_MspInit+0x54>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_MspInit+0x54>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_MspInit+0x54>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_MspInit+0x54>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_MspInit+0x54>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_MspInit+0x54>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	f06f 0001 	mvn.w	r0, #1
 8001fc6:	f000 fe30 	bl	8002c2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_ADC_MspInit+0x7c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d127      	bne.n	800204a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_ADC_MspInit+0x80>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_ADC_MspInit+0x80>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_ADC_MspInit+0x80>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_ADC_MspInit+0x80>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_ADC_MspInit+0x80>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_ADC_MspInit+0x80>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|GPIO_PIN_2;
 8002032:	2306      	movs	r3, #6
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	2303      	movs	r3, #3
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_ADC_MspInit+0x84>)
 8002046:	f000 fe19 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40012000 	.word	0x40012000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000

08002060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_SPI_MspInit+0x84>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d12b      	bne.n	80020da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_SPI_MspInit+0x88>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <HAL_SPI_MspInit+0x88>)
 800208c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_SPI_MspInit+0x88>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_SPI_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_SPI_MspInit+0x88>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_SPI_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80020ba:	23e0      	movs	r3, #224	; 0xe0
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2302      	movs	r3, #2
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ca:	2305      	movs	r3, #5
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_SPI_MspInit+0x8c>)
 80020d6:	f000 fdd1 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40013000 	.word	0x40013000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 f918 	bl	800235c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800212c:	f004 f870 	bl	8006210 <xTaskGetSchedulerState>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002136:	f004 fe47 	bl	8006dc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}

0800213e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e00a      	b.n	8002166 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002150:	f3af 8000 	nop.w
 8002154:	4601      	mov	r1, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	60ba      	str	r2, [r7, #8]
 800215c:	b2ca      	uxtb	r2, r1
 800215e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbf0      	blt.n	8002150 <_read+0x12>
	}

return len;
 800216e:	687b      	ldr	r3, [r7, #4]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a0:	605a      	str	r2, [r3, #4]
	return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_isatty>:

int _isatty(int file)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
	return 0;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <_sbrk+0x50>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_sbrk+0x16>
		heap_end = &end;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <_sbrk+0x50>)
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <_sbrk+0x54>)
 80021f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <_sbrk+0x50>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <_sbrk+0x50>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	466a      	mov	r2, sp
 8002206:	4293      	cmp	r3, r2
 8002208:	d907      	bls.n	800221a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800220a:	f005 f923 	bl	8007454 <__errno>
 800220e:	4602      	mov	r2, r0
 8002210:	230c      	movs	r3, #12
 8002212:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	e006      	b.n	8002228 <_sbrk+0x48>
	}

	heap_end += incr;
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <_sbrk+0x50>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	4a03      	ldr	r2, [pc, #12]	; (8002230 <_sbrk+0x50>)
 8002224:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000130 	.word	0x20000130
 8002234:	20004cc0 	.word	0x20004cc0

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <SystemInit+0x28>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <SystemInit+0x28>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <SystemInit+0x28>)
 800224e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002252:	609a      	str	r2, [r3, #8]
#endif
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800226a:	e003      	b.n	8002274 <LoopCopyDataInit>

0800226c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800226e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002272:	3104      	adds	r1, #4

08002274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800227a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800227c:	d3f6      	bcc.n	800226c <CopyDataInit>
  ldr  r2, =_sbss
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002280:	e002      	b.n	8002288 <LoopFillZerobss>

08002282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002284:	f842 3b04 	str.w	r3, [r2], #4

08002288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800228a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800228c:	d3f9      	bcc.n	8002282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800228e:	f7ff ffd3 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002292:	f005 f8e5 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7ff f871 	bl	800137c <main>
  bx  lr    
 800229a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800229c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022a0:	080089ac 	.word	0x080089ac
  ldr  r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022a8:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 80022ac:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 80022b0:	20004cc0 	.word	0x20004cc0

080022b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC_IRQHandler>
	...

080022b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_Init+0x40>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_Init+0x40>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_Init+0x40>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f000 fc97 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e6:	200f      	movs	r0, #15
 80022e8:	f000 f808 	bl	80022fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ec:	f7ff fe48 	bl	8001f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023c00 	.word	0x40023c00

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_InitTick+0x54>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_InitTick+0x58>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fca1 	bl	8002c62 <HAL_SYSTICK_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00e      	b.n	8002348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d80a      	bhi.n	8002346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f000 fc77 	bl	8002c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <HAL_InitTick+0x5c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200000a0 	.word	0x200000a0
 8002354:	200000a8 	.word	0x200000a8
 8002358:	200000a4 	.word	0x200000a4

0800235c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x20>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x24>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_IncTick+0x24>)
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200000a8 	.word	0x200000a8
 8002380:	20004c78 	.word	0x20004c78

08002384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_GetTick+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20004c78 	.word	0x20004c78

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff ffee 	bl	8002384 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d005      	beq.n	80023c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_Delay+0x40>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023c2:	bf00      	nop
 80023c4:	f7ff ffde 	bl	8002384 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d8f7      	bhi.n	80023c4 <HAL_Delay+0x28>
  {
  }
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200000a8 	.word	0x200000a8

080023e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e033      	b.n	800245e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fdea 	bl	8001fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002426:	f023 0302 	bic.w	r3, r3, #2
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa40 	bl	80028b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
 800244e:	e001      	b.n	8002454 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Start+0x1a>
 800247e:	2302      	movs	r3, #2
 8002480:	e0a5      	b.n	80025ce <HAL_ADC_Start+0x166>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d018      	beq.n	80024ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a8:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_ADC_Start+0x174>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_ADC_Start+0x178>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9a      	lsrs	r2, r3, #18
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d179      	bne.n	80025cc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002502:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d106      	bne.n	8002526 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f023 0206 	bic.w	r2, r3, #6
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
 8002524:	e002      	b.n	800252c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_ADC_Start+0x17c>)
 8002536:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002540:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2b00      	cmp	r3, #0
 800254c:	d12a      	bne.n	80025a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_ADC_Start+0x180>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d015      	beq.n	8002584 <HAL_ADC_Start+0x11c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a23      	ldr	r2, [pc, #140]	; (80025ec <HAL_ADC_Start+0x184>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d105      	bne.n	800256e <HAL_ADC_Start+0x106>
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_ADC_Start+0x17c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <HAL_ADC_Start+0x188>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d129      	bne.n	80025cc <HAL_ADC_Start+0x164>
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_ADC_Start+0x17c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d823      	bhi.n	80025cc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11c      	bne.n	80025cc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	e013      	b.n	80025cc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_ADC_Start+0x180>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10e      	bne.n	80025cc <HAL_ADC_Start+0x164>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ca:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200000a0 	.word	0x200000a0
 80025e0:	431bde83 	.word	0x431bde83
 80025e4:	40012300 	.word	0x40012300
 80025e8:	40012000 	.word	0x40012000
 80025ec:	40012100 	.word	0x40012100
 80025f0:	40012200 	.word	0x40012200

080025f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_ADC_Stop+0x16>
 8002606:	2302      	movs	r3, #2
 8002608:	e021      	b.n	800264e <HAL_ADC_Stop+0x5a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1c>
 800268c:	2302      	movs	r3, #2
 800268e:	e105      	b.n	800289c <HAL_ADC_ConfigChannel+0x228>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b09      	cmp	r3, #9
 800269e:	d925      	bls.n	80026ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	3b1e      	subs	r3, #30
 80026b6:	2207      	movs	r2, #7
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	4603      	mov	r3, r0
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4403      	add	r3, r0
 80026de:	3b1e      	subs	r3, #30
 80026e0:	409a      	lsls	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	e022      	b.n	8002732 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	2207      	movs	r2, #7
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	4603      	mov	r3, r0
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4403      	add	r3, r0
 8002728:	409a      	lsls	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d824      	bhi.n	8002784 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b05      	subs	r3, #5
 800274c:	221f      	movs	r2, #31
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	400a      	ands	r2, r1
 800275a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	3b05      	subs	r3, #5
 8002776:	fa00 f203 	lsl.w	r2, r0, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	635a      	str	r2, [r3, #52]	; 0x34
 8002782:	e04c      	b.n	800281e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d824      	bhi.n	80027d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3b23      	subs	r3, #35	; 0x23
 800279e:	221f      	movs	r2, #31
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43da      	mvns	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	400a      	ands	r2, r1
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b23      	subs	r3, #35	; 0x23
 80027c8:	fa00 f203 	lsl.w	r2, r0, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
 80027d4:	e023      	b.n	800281e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b41      	subs	r3, #65	; 0x41
 80027e8:	221f      	movs	r2, #31
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b41      	subs	r3, #65	; 0x41
 8002812:	fa00 f203 	lsl.w	r2, r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_ADC_ConfigChannel+0x234>)
 8002820:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_ADC_ConfigChannel+0x238>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d109      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1cc>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b12      	cmp	r3, #18
 8002832:	d105      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_ADC_ConfigChannel+0x238>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d123      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x21e>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d003      	beq.n	800285a <HAL_ADC_ConfigChannel+0x1e6>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b11      	cmp	r3, #17
 8002858:	d11b      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d111      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_ADC_ConfigChannel+0x240>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9a      	lsrs	r2, r3, #18
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40012300 	.word	0x40012300
 80028ac:	40012000 	.word	0x40012000
 80028b0:	200000a0 	.word	0x200000a0
 80028b4:	431bde83 	.word	0x431bde83

080028b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <ADC_Init+0x1f0>)
 80028c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	021a      	lsls	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	4a58      	ldr	r2, [pc, #352]	; (8002aac <ADC_Init+0x1f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e00f      	b.n	80029b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0202 	bic.w	r2, r2, #2
 80029c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e1b      	ldrb	r3, [r3, #24]
 80029d0:	005a      	lsls	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	035a      	lsls	r2, r3, #13
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	e007      	b.n	8002a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	051a      	lsls	r2, r3, #20
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a6e:	025a      	lsls	r2, r3, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	029a      	lsls	r2, r3, #10
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40012300 	.word	0x40012300
 8002aac:	0f000001 	.word	0x0f000001

08002ab0 <__NVIC_SetPriorityGrouping>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_GetPriorityGrouping>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_SetPriority>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff8e 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff47 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff5c 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff8e 	bl	8002b68 <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffb0 	bl	8002bd0 <SysTick_Config>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e16b      	b.n	8002f70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 815a 	bne.w	8002f6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_GPIO_Init+0x5a>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d007      	beq.n	8002cd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d130      	bne.n	8002d38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0xfc>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80b4 	beq.w	8002f6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b5f      	ldr	r3, [pc, #380]	; (8002f84 <HAL_GPIO_Init+0x308>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a5e      	ldr	r2, [pc, #376]	; (8002f84 <HAL_GPIO_Init+0x308>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b5c      	ldr	r3, [pc, #368]	; (8002f84 <HAL_GPIO_Init+0x308>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a5a      	ldr	r2, [pc, #360]	; (8002f88 <HAL_GPIO_Init+0x30c>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x310>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02b      	beq.n	8002ea2 <HAL_GPIO_Init+0x226>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a50      	ldr	r2, [pc, #320]	; (8002f90 <HAL_GPIO_Init+0x314>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d025      	beq.n	8002e9e <HAL_GPIO_Init+0x222>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4f      	ldr	r2, [pc, #316]	; (8002f94 <HAL_GPIO_Init+0x318>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01f      	beq.n	8002e9a <HAL_GPIO_Init+0x21e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4e      	ldr	r2, [pc, #312]	; (8002f98 <HAL_GPIO_Init+0x31c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <HAL_GPIO_Init+0x21a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4d      	ldr	r2, [pc, #308]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x216>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <HAL_GPIO_Init+0x328>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x20e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_GPIO_Init+0x32c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x20a>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e00e      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e86:	2308      	movs	r3, #8
 8002e88:	e00c      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	e00a      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e8e:	2305      	movs	r3, #5
 8002e90:	e008      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e004      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e002      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_GPIO_Init+0x228>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	f002 0203 	and.w	r2, r2, #3
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	4093      	lsls	r3, r2
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb4:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_GPIO_Init+0x30c>)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee6:	4a31      	ldr	r2, [pc, #196]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_GPIO_Init+0x330>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	f67f ae90 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3724      	adds	r7, #36	; 0x24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40021c00 	.word	0x40021c00
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e001      	b.n	8002fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e25b      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d075      	beq.n	800311e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003032:	4ba3      	ldr	r3, [pc, #652]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d00c      	beq.n	8003058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003046:	2b08      	cmp	r3, #8
 8003048:	d112      	bne.n	8003070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304a:	4b9d      	ldr	r3, [pc, #628]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003056:	d10b      	bne.n	8003070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	4b99      	ldr	r3, [pc, #612]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d05b      	beq.n	800311c <HAL_RCC_OscConfig+0x108>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d157      	bne.n	800311c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e236      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d106      	bne.n	8003088 <HAL_RCC_OscConfig+0x74>
 800307a:	4b91      	ldr	r3, [pc, #580]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a90      	ldr	r2, [pc, #576]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e01d      	b.n	80030c4 <HAL_RCC_OscConfig+0xb0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a8a      	ldr	r2, [pc, #552]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0xb0>
 80030ac:	4b84      	ldr	r3, [pc, #528]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a83      	ldr	r2, [pc, #524]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a80      	ldr	r2, [pc, #512]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7ff f95a 	bl	8002384 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d4:	f7ff f956 	bl	8002384 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1fb      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0xc0>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7ff f946 	bl	8002384 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fc:	f7ff f942 	bl	8002384 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1e7      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0xe8>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d063      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b62      	ldr	r3, [pc, #392]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313e:	2b08      	cmp	r3, #8
 8003140:	d11c      	bne.n	800317c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003142:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	4b5c      	ldr	r3, [pc, #368]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x152>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e1bb      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4952      	ldr	r1, [pc, #328]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	e03a      	b.n	80031f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003184:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <HAL_RCC_OscConfig+0x2b0>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7ff f8fb 	bl	8002384 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003192:	f7ff f8f7 	bl	8002384 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e19c      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4940      	ldr	r1, [pc, #256]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
 80031c4:	e015      	b.n	80031f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCC_OscConfig+0x2b0>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7ff f8da 	bl	8002384 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d4:	f7ff f8d6 	bl	8002384 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e17b      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d030      	beq.n	8003260 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003206:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <HAL_RCC_OscConfig+0x2b4>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7ff f8ba 	bl	8002384 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003214:	f7ff f8b6 	bl	8002384 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e15b      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x200>
 8003232:	e015      	b.n	8003260 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_OscConfig+0x2b4>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7ff f8a3 	bl	8002384 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003242:	f7ff f89f 	bl	8002384 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e144      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a0 	beq.w	80033ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x2b8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d121      	bne.n	80032ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_RCC_OscConfig+0x2b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <HAL_RCC_OscConfig+0x2b8>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7ff f865 	bl	8002384 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e011      	b.n	80032e2 <HAL_RCC_OscConfig+0x2ce>
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	42470000 	.word	0x42470000
 80032c8:	42470e80 	.word	0x42470e80
 80032cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d0:	f7ff f858 	bl	8002384 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0fd      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x4d4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x2f0>
 80032f6:	4b7d      	ldr	r3, [pc, #500]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	e01c      	b.n	800333e <HAL_RCC_OscConfig+0x32a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b05      	cmp	r3, #5
 800330a:	d10c      	bne.n	8003326 <HAL_RCC_OscConfig+0x312>
 800330c:	4b77      	ldr	r3, [pc, #476]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a76      	ldr	r2, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
 8003318:	4b74      	ldr	r3, [pc, #464]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a73      	ldr	r2, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	e00b      	b.n	800333e <HAL_RCC_OscConfig+0x32a>
 8003326:	4b71      	ldr	r3, [pc, #452]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a70      	ldr	r2, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	4b6e      	ldr	r3, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a6d      	ldr	r2, [pc, #436]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d015      	beq.n	8003372 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7ff f81d 	bl	8002384 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7ff f819 	bl	8002384 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0bc      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ee      	beq.n	800334e <HAL_RCC_OscConfig+0x33a>
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7ff f807 	bl	8002384 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7ff f803 	bl	8002384 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0a6      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003390:	4b56      	ldr	r3, [pc, #344]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ee      	bne.n	800337a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4b52      	ldr	r3, [pc, #328]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a51      	ldr	r2, [pc, #324]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8092 	beq.w	80034dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b8:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d05c      	beq.n	800347e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d141      	bne.n	8003450 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <HAL_RCC_OscConfig+0x4dc>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7fe ffd7 	bl	8002384 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033da:	f7fe ffd3 	bl	8002384 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e078      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	019b      	lsls	r3, r3, #6
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	3b01      	subs	r3, #1
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	061b      	lsls	r3, r3, #24
 800341c:	4933      	ldr	r1, [pc, #204]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <HAL_RCC_OscConfig+0x4dc>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe ffac 	bl	8002384 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe ffa8 	bl	8002384 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e04d      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x41c>
 800344e:	e045      	b.n	80034dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x4dc>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fe ff95 	bl	8002384 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe ff91 	bl	8002384 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e036      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x44a>
 800347c:	e02e      	b.n	80034dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e029      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_RCC_OscConfig+0x4d8>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	429a      	cmp	r2, r3
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d115      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d106      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40007000 	.word	0x40007000
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470060 	.word	0x42470060

080034f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0cc      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b68      	ldr	r3, [pc, #416]	; (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d90c      	bls.n	8003530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b65      	ldr	r3, [pc, #404]	; (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003548:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	494d      	ldr	r1, [pc, #308]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d044      	beq.n	8003614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d119      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b2:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e067      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 0203 	bic.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4934      	ldr	r1, [pc, #208]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e4:	f7fe fece 	bl	8002384 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ec:	f7fe feca 	bl	8002384 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e04f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 020c 	and.w	r2, r3, #12
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1eb      	bne.n	80035ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d20c      	bcs.n	800363c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e032      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4916      	ldr	r1, [pc, #88]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490e      	ldr	r1, [pc, #56]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800367a:	f000 f821 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800367e:	4601      	mov	r1, r0
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	fa21 f303 	lsr.w	r3, r1, r3
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fe2e 	bl	80022fc <HAL_InitTick>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023c00 	.word	0x40023c00
 80036b0:	40023800 	.word	0x40023800
 80036b4:	080088f4 	.word	0x080088f4
 80036b8:	200000a0 	.word	0x200000a0
 80036bc:	200000a4 	.word	0x200000a4

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d007      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x32>
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d008      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x38>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 80b4 	bne.w	8003854 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ec:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ee:	60bb      	str	r3, [r7, #8]
       break;
 80036f0:	e0b3      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036f4:	60bb      	str	r3, [r7, #8]
      break;
 80036f6:	e0b0      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f8:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003702:	4b58      	ldr	r3, [pc, #352]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d04a      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370e:	4b55      	ldr	r3, [pc, #340]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	f04f 0400 	mov.w	r4, #0
 8003718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	ea03 0501 	and.w	r5, r3, r1
 8003724:	ea04 0602 	and.w	r6, r4, r2
 8003728:	4629      	mov	r1, r5
 800372a:	4632      	mov	r2, r6
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	f04f 0400 	mov.w	r4, #0
 8003734:	0154      	lsls	r4, r2, #5
 8003736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800373a:	014b      	lsls	r3, r1, #5
 800373c:	4619      	mov	r1, r3
 800373e:	4622      	mov	r2, r4
 8003740:	1b49      	subs	r1, r1, r5
 8003742:	eb62 0206 	sbc.w	r2, r2, r6
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	f04f 0400 	mov.w	r4, #0
 800374e:	0194      	lsls	r4, r2, #6
 8003750:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003754:	018b      	lsls	r3, r1, #6
 8003756:	1a5b      	subs	r3, r3, r1
 8003758:	eb64 0402 	sbc.w	r4, r4, r2
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	00e2      	lsls	r2, r4, #3
 8003766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800376a:	00d9      	lsls	r1, r3, #3
 800376c:	460b      	mov	r3, r1
 800376e:	4614      	mov	r4, r2
 8003770:	195b      	adds	r3, r3, r5
 8003772:	eb44 0406 	adc.w	r4, r4, r6
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	0262      	lsls	r2, r4, #9
 8003780:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003784:	0259      	lsls	r1, r3, #9
 8003786:	460b      	mov	r3, r1
 8003788:	4614      	mov	r4, r2
 800378a:	4618      	mov	r0, r3
 800378c:	4621      	mov	r1, r4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	461a      	mov	r2, r3
 8003796:	4623      	mov	r3, r4
 8003798:	f7fc fd6a 	bl	8000270 <__aeabi_uldivmod>
 800379c:	4603      	mov	r3, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e049      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	f04f 0400 	mov.w	r4, #0
 80037ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	ea03 0501 	and.w	r5, r3, r1
 80037ba:	ea04 0602 	and.w	r6, r4, r2
 80037be:	4629      	mov	r1, r5
 80037c0:	4632      	mov	r2, r6
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	0154      	lsls	r4, r2, #5
 80037cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037d0:	014b      	lsls	r3, r1, #5
 80037d2:	4619      	mov	r1, r3
 80037d4:	4622      	mov	r2, r4
 80037d6:	1b49      	subs	r1, r1, r5
 80037d8:	eb62 0206 	sbc.w	r2, r2, r6
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	0194      	lsls	r4, r2, #6
 80037e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ea:	018b      	lsls	r3, r1, #6
 80037ec:	1a5b      	subs	r3, r3, r1
 80037ee:	eb64 0402 	sbc.w	r4, r4, r2
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	00e2      	lsls	r2, r4, #3
 80037fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003800:	00d9      	lsls	r1, r3, #3
 8003802:	460b      	mov	r3, r1
 8003804:	4614      	mov	r4, r2
 8003806:	195b      	adds	r3, r3, r5
 8003808:	eb44 0406 	adc.w	r4, r4, r6
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	02a2      	lsls	r2, r4, #10
 8003816:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800381a:	0299      	lsls	r1, r3, #10
 800381c:	460b      	mov	r3, r1
 800381e:	4614      	mov	r4, r2
 8003820:	4618      	mov	r0, r3
 8003822:	4621      	mov	r1, r4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f04f 0400 	mov.w	r4, #0
 800382a:	461a      	mov	r2, r3
 800382c:	4623      	mov	r3, r4
 800382e:	f7fc fd1f 	bl	8000270 <__aeabi_uldivmod>
 8003832:	4603      	mov	r3, r0
 8003834:	460c      	mov	r4, r1
 8003836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	60bb      	str	r3, [r7, #8]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003856:	60bb      	str	r3, [r7, #8]
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	68bb      	ldr	r3, [r7, #8]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	00f42400 	.word	0x00f42400
 800386c:	007a1200 	.word	0x007a1200

08003870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e056      	b.n	8003930 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fe fbdf 	bl	8002060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	ea42 0103 	orr.w	r1, r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 0104 	and.w	r1, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_SPI_Transmit+0x22>
 8003956:	2302      	movs	r3, #2
 8003958:	e11e      	b.n	8003b98 <HAL_SPI_Transmit+0x260>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003962:	f7fe fd0f 	bl	8002384 <HAL_GetTick>
 8003966:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d002      	beq.n	800397e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800397c:	e103      	b.n	8003b86 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_SPI_Transmit+0x52>
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800398e:	e0fa      	b.n	8003b86 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2203      	movs	r2, #3
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d107      	bne.n	80039e8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d007      	beq.n	8003a06 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0e:	d14b      	bne.n	8003aa8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_Transmit+0xe6>
 8003a18:	8afb      	ldrh	r3, [r7, #22]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d13e      	bne.n	8003a9c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a42:	e02b      	b.n	8003a9c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d112      	bne.n	8003a78 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	881a      	ldrh	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a76:	e011      	b.n	8003a9c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a78:	f7fe fc84 	bl	8002384 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d803      	bhi.n	8003a90 <HAL_SPI_Transmit+0x158>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d102      	bne.n	8003a96 <HAL_SPI_Transmit+0x15e>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a9a:	e074      	b.n	8003b86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ce      	bne.n	8003a44 <HAL_SPI_Transmit+0x10c>
 8003aa6:	e04c      	b.n	8003b42 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_Transmit+0x17e>
 8003ab0:	8afb      	ldrh	r3, [r7, #22]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d140      	bne.n	8003b38 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003adc:	e02c      	b.n	8003b38 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d113      	bne.n	8003b14 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	7812      	ldrb	r2, [r2, #0]
 8003af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b12:	e011      	b.n	8003b38 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b14:	f7fe fc36 	bl	8002384 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d803      	bhi.n	8003b2c <HAL_SPI_Transmit+0x1f4>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d102      	bne.n	8003b32 <HAL_SPI_Transmit+0x1fa>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b36:	e026      	b.n	8003b86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1cd      	bne.n	8003ade <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fa44 	bl	8003fd4 <SPI_EndRxTxTransaction>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e000      	b.n	8003b86 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003b84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x26>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e18a      	b.n	8003edc <HAL_SPI_TransmitReceive+0x33c>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bce:	f7fe fbd9 	bl	8002384 <HAL_GetTick>
 8003bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d00f      	beq.n	8003c10 <HAL_SPI_TransmitReceive+0x70>
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d107      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x68>
 8003c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d003      	beq.n	8003c10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c0e:	e15b      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x82>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x82>
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c28:	e14e      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d003      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2205      	movs	r2, #5
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	887a      	ldrh	r2, [r7, #2]
 8003c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d007      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d178      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_SPI_TransmitReceive+0x10a>
 8003ca4:	8b7b      	ldrh	r3, [r7, #26]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d166      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cce:	e053      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d11b      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x176>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x176>
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d113      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d119      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x1b8>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d014      	beq.n	8003d58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d54:	2301      	movs	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d58:	f7fe fb14 	bl	8002384 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d807      	bhi.n	8003d78 <HAL_SPI_TransmitReceive+0x1d8>
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d003      	beq.n	8003d78 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d76:	e0a7      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1a6      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x130>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1a1      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x130>
 8003d8c:	e07c      	b.n	8003e88 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x1fc>
 8003d96:	8b7b      	ldrh	r3, [r7, #26]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d16b      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc2:	e057      	b.n	8003e74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d11c      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x26c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d017      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x26c>
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d114      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d119      	bne.n	8003e4e <HAL_SPI_TransmitReceive+0x2ae>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d014      	beq.n	8003e4e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e4e:	f7fe fa99 	bl	8002384 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d803      	bhi.n	8003e66 <HAL_SPI_TransmitReceive+0x2c6>
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d102      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x2cc>
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e72:	e029      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1a2      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x224>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d19d      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f8a1 	bl	8003fd4 <SPI_EndRxTxTransaction>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ea4:	e010      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	e000      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3730      	adds	r7, #48	; 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef2:	b2db      	uxtb	r3, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f10:	e04c      	b.n	8003fac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d048      	beq.n	8003fac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f1a:	f7fe fa33 	bl	8002384 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d902      	bls.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13d      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f48:	d111      	bne.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f52:	d004      	beq.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d107      	bne.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f76:	d10f      	bne.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e00f      	b.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d1a3      	bne.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <SPI_EndRxTxTransaction+0x7c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <SPI_EndRxTxTransaction+0x80>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	0d5b      	lsrs	r3, r3, #21
 8003fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffe:	d112      	bne.n	8004026 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff ff78 	bl	8003f00 <SPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e00f      	b.n	8004046 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3b01      	subs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d0f2      	beq.n	8004026 <SPI_EndRxTxTransaction+0x52>
 8004040:	e000      	b.n	8004044 <SPI_EndRxTxTransaction+0x70>
        break;
 8004042:	bf00      	nop
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200000a0 	.word	0x200000a0
 8004054:	165e9f81 	.word	0x165e9f81

08004058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800406e:	f3ef 8305 	mrs	r3, IPSR
 8004072:	60bb      	str	r3, [r7, #8]
  return(result);
 8004074:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407a:	f3ef 8310 	mrs	r3, PRIMASK
 800407e:	607b      	str	r3, [r7, #4]
  return(result);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d105      	bne.n	8004092 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004086:	f3ef 8311 	mrs	r3, BASEPRI
 800408a:	603b      	str	r3, [r7, #0]
  return(result);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <osKernelInitialize+0x3a>
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <osKernelInitialize+0x64>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d103      	bne.n	80040a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800409a:	f06f 0305 	mvn.w	r3, #5
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e00c      	b.n	80040bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <osKernelInitialize+0x64>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <osKernelInitialize+0x64>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e002      	b.n	80040bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040bc:	68fb      	ldr	r3, [r7, #12]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000134 	.word	0x20000134

080040d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d6:	f3ef 8305 	mrs	r3, IPSR
 80040da:	60bb      	str	r3, [r7, #8]
  return(result);
 80040dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	607b      	str	r3, [r7, #4]
  return(result);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ee:	f3ef 8311 	mrs	r3, BASEPRI
 80040f2:	603b      	str	r3, [r7, #0]
  return(result);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <osKernelStart+0x3a>
 80040fa:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <osKernelStart+0x68>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d103      	bne.n	800410a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004102:	f06f 0305 	mvn.w	r3, #5
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e010      	b.n	800412c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <osKernelStart+0x68>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d109      	bne.n	8004126 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004112:	f7ff ffa1 	bl	8004058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <osKernelStart+0x68>)
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800411c:	f001 fb7c 	bl	8005818 <vTaskStartScheduler>
      stat = osOK;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e002      	b.n	800412c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004126:	f04f 33ff 	mov.w	r3, #4294967295
 800412a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800412c:	68fb      	ldr	r3, [r7, #12]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000134 	.word	0x20000134

0800413c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004142:	f3ef 8305 	mrs	r3, IPSR
 8004146:	60bb      	str	r3, [r7, #8]
  return(result);
 8004148:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414e:	f3ef 8310 	mrs	r3, PRIMASK
 8004152:	607b      	str	r3, [r7, #4]
  return(result);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800415a:	f3ef 8311 	mrs	r3, BASEPRI
 800415e:	603b      	str	r3, [r7, #0]
  return(result);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <osKernelGetTickCount+0x3a>
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <osKernelGetTickCount+0x4c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d103      	bne.n	8004176 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800416e:	f001 fca9 	bl	8005ac4 <xTaskGetTickCountFromISR>
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	e002      	b.n	800417c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004176:	f001 fc95 	bl	8005aa4 <xTaskGetTickCount>
 800417a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000134 	.word	0x20000134

0800418c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b090      	sub	sp, #64	; 0x40
 8004190:	af04      	add	r7, sp, #16
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800419c:	f3ef 8305 	mrs	r3, IPSR
 80041a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 808f 	bne.w	80042c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041b6:	f3ef 8311 	mrs	r3, BASEPRI
 80041ba:	617b      	str	r3, [r7, #20]
  return(result);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <osThreadNew+0x3e>
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <osThreadNew+0x148>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d07e      	beq.n	80042c8 <osThreadNew+0x13c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d07b      	beq.n	80042c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80041d4:	2318      	movs	r3, #24
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d045      	beq.n	8004274 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <osThreadNew+0x6a>
        name = attr->name;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <osThreadNew+0x90>
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	2b38      	cmp	r3, #56	; 0x38
 800420e:	d805      	bhi.n	800421c <osThreadNew+0x90>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <osThreadNew+0x94>
        return (NULL);
 800421c:	2300      	movs	r3, #0
 800421e:	e054      	b.n	80042ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <osThreadNew+0xca>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b5b      	cmp	r3, #91	; 0x5b
 800423e:	d90a      	bls.n	8004256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d006      	beq.n	8004256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <osThreadNew+0xca>
        mem = 1;
 8004250:	2301      	movs	r3, #1
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	e010      	b.n	8004278 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <osThreadNew+0xec>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <osThreadNew+0xec>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <osThreadNew+0xec>
          mem = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
 8004272:	e001      	b.n	8004278 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d110      	bne.n	80042a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004286:	9202      	str	r2, [sp, #8]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f001 f873 	bl	8005380 <xTaskCreateStatic>
 800429a:	4603      	mov	r3, r0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e013      	b.n	80042c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d110      	bne.n	80042c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f107 0310 	add.w	r3, r7, #16
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f001 f8bb 	bl	8005434 <xTaskCreate>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <osThreadNew+0x13c>
          hTask = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042c8:	693b      	ldr	r3, [r7, #16]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	; 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000134 	.word	0x20000134

080042d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042e0:	f3ef 8305 	mrs	r3, IPSR
 80042e4:	613b      	str	r3, [r7, #16]
  return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ec:	f3ef 8310 	mrs	r3, PRIMASK
 80042f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042f8:	f3ef 8311 	mrs	r3, BASEPRI
 80042fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <osDelay+0x3c>
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <osDelay+0x58>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d103      	bne.n	8004314 <osDelay+0x3c>
    stat = osErrorISR;
 800430c:	f06f 0305 	mvn.w	r3, #5
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e007      	b.n	8004324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <osDelay+0x4c>
      vTaskDelay(ticks);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f001 fa46 	bl	80057b0 <vTaskDelay>
    }
  }

  return (stat);
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000134 	.word	0x20000134

08004334 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433c:	f3ef 8305 	mrs	r3, IPSR
 8004340:	617b      	str	r3, [r7, #20]
  return(result);
 8004342:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10f      	bne.n	8004368 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004348:	f3ef 8310 	mrs	r3, PRIMASK
 800434c:	613b      	str	r3, [r7, #16]
  return(result);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004354:	f3ef 8311 	mrs	r3, BASEPRI
 8004358:	60fb      	str	r3, [r7, #12]
  return(result);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <osDelayUntil+0x3c>
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <osDelayUntil+0x7c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d103      	bne.n	8004370 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8004368:	f06f 0305 	mvn.w	r3, #5
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e019      	b.n	80043a4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8004374:	f001 fb96 	bl	8005aa4 <xTaskGetTickCount>
 8004378:	4603      	mov	r3, r0
 800437a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <osDelayUntil+0x6a>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db06      	blt.n	800439e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f990 	bl	80056bc <vTaskDelayUntil>
 800439c:	e002      	b.n	80043a4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800439e:	f06f 0303 	mvn.w	r3, #3
 80043a2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80043a4:	69fb      	ldr	r3, [r7, #28]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000134 	.word	0x20000134

080043b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c4:	f3ef 8305 	mrs	r3, IPSR
 80043c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80043ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d170      	bne.n	80044b2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d0:	f3ef 8310 	mrs	r3, PRIMASK
 80043d4:	617b      	str	r3, [r7, #20]
  return(result);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043dc:	f3ef 8311 	mrs	r3, BASEPRI
 80043e0:	613b      	str	r3, [r7, #16]
  return(result);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <osMessageQueueNew+0x3c>
 80043e8:	4b34      	ldr	r3, [pc, #208]	; (80044bc <osMessageQueueNew+0x108>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d060      	beq.n	80044b2 <osMessageQueueNew+0xfe>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d05d      	beq.n	80044b2 <osMessageQueueNew+0xfe>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05a      	beq.n	80044b2 <osMessageQueueNew+0xfe>
    mem = -1;
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d029      	beq.n	800445c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <osMessageQueueNew+0x82>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b4f      	cmp	r3, #79	; 0x4f
 8004416:	d90e      	bls.n	8004436 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <osMessageQueueNew+0x82>
        mem = 1;
 8004430:	2301      	movs	r3, #1
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	e014      	b.n	8004460 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d110      	bne.n	8004460 <osMessageQueueNew+0xac>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <osMessageQueueNew+0xac>
          mem = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	623b      	str	r3, [r7, #32]
 800445a:	e001      	b.n	8004460 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d10c      	bne.n	8004480 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6899      	ldr	r1, [r3, #8]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	460b      	mov	r3, r1
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fa58 	bl	800492c <xQueueGenericCreateStatic>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24
 800447e:	e008      	b.n	8004492 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004486:	2200      	movs	r2, #0
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fac1 	bl	8004a12 <xQueueGenericCreate>
 8004490:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	e001      	b.n	80044aa <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ae:	f000 ff0b 	bl	80052c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000134 	.word	0x20000134

080044c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d8:	f3ef 8305 	mrs	r3, IPSR
 80044dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80044de:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10f      	bne.n	8004504 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e4:	f3ef 8310 	mrs	r3, PRIMASK
 80044e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044f0:	f3ef 8311 	mrs	r3, BASEPRI
 80044f4:	617b      	str	r3, [r7, #20]
  return(result);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02c      	beq.n	8004556 <osMessageQueuePut+0x96>
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <osMessageQueuePut+0xe0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d128      	bne.n	8004556 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <osMessageQueuePut+0x56>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <osMessageQueuePut+0x56>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004516:	f06f 0303 	mvn.w	r3, #3
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800451c:	e039      	b.n	8004592 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004522:	f107 0210 	add.w	r2, r7, #16
 8004526:	2300      	movs	r3, #0
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	6a38      	ldr	r0, [r7, #32]
 800452c:	f000 fbce 	bl	8004ccc <xQueueGenericSendFromISR>
 8004530:	4603      	mov	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d003      	beq.n	800453e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004536:	f06f 0302 	mvn.w	r3, #2
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800453c:	e029      	b.n	8004592 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d026      	beq.n	8004592 <osMessageQueuePut+0xd2>
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <osMessageQueuePut+0xe4>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004554:	e01d      	b.n	8004592 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <osMessageQueuePut+0xa2>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004562:	f06f 0303 	mvn.w	r3, #3
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
 8004568:	e014      	b.n	8004594 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800456a:	2300      	movs	r3, #0
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	6a38      	ldr	r0, [r7, #32]
 8004572:	f000 fab1 	bl	8004ad8 <xQueueGenericSend>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d00b      	beq.n	8004594 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004582:	f06f 0301 	mvn.w	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	e004      	b.n	8004594 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800458a:	f06f 0302 	mvn.w	r3, #2
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
 8004590:	e000      	b.n	8004594 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004592:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004596:	4618      	mov	r0, r3
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000134 	.word	0x20000134
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80045c4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ca:	f3ef 8310 	mrs	r3, PRIMASK
 80045ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045d6:	f3ef 8311 	mrs	r3, BASEPRI
 80045da:	617b      	str	r3, [r7, #20]
  return(result);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02c      	beq.n	800463c <osMessageQueueGet+0x94>
 80045e2:	4b28      	ldr	r3, [pc, #160]	; (8004684 <osMessageQueueGet+0xdc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d128      	bne.n	800463c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <osMessageQueueGet+0x54>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <osMessageQueueGet+0x54>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80045fc:	f06f 0303 	mvn.w	r3, #3
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004602:	e038      	b.n	8004676 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	461a      	mov	r2, r3
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	6a38      	ldr	r0, [r7, #32]
 8004612:	f000 fccb 	bl	8004fac <xQueueReceiveFromISR>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d003      	beq.n	8004624 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800461c:	f06f 0302 	mvn.w	r3, #2
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004622:	e028      	b.n	8004676 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d025      	beq.n	8004676 <osMessageQueueGet+0xce>
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <osMessageQueueGet+0xe0>)
 800462c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800463a:	e01c      	b.n	8004676 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osMessageQueueGet+0xa0>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004648:	f06f 0303 	mvn.w	r3, #3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e013      	b.n	8004678 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	6a38      	ldr	r0, [r7, #32]
 8004656:	f000 fbcd 	bl	8004df4 <xQueueReceive>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d00b      	beq.n	8004678 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004666:	f06f 0301 	mvn.w	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	e004      	b.n	8004678 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800466e:	f06f 0302 	mvn.w	r3, #2
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	e000      	b.n	8004678 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004676:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000134 	.word	0x20000134
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800469c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a06      	ldr	r2, [pc, #24]	; (80046bc <vApplicationGetIdleTaskMemory+0x30>)
 80046a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	601a      	str	r2, [r3, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000138 	.word	0x20000138
 80046bc:	20000194 	.word	0x20000194

080046c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <vApplicationGetTimerTaskMemory+0x2c>)
 80046d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <vApplicationGetTimerTaskMemory+0x30>)
 80046d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000394 	.word	0x20000394
 80046f0:	200003f0 	.word	0x200003f0

080046f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f103 0208 	add.w	r2, r3, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f103 0208 	add.w	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f103 0208 	add.w	r2, r3, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d103      	bne.n	80047b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e00c      	b.n	80047d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3308      	adds	r3, #8
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e002      	b.n	80047c4 <vListInsert+0x2e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d2f6      	bcs.n	80047be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6852      	ldr	r2, [r2, #4]
 8004828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d103      	bne.n	800483c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	1e5a      	subs	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	e7fe      	b.n	8004882 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004884:	f002 fa12 	bl	8006cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	3b01      	subs	r3, #1
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d114      	bne.n	8004904 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01a      	beq.n	8004918 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3310      	adds	r3, #16
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fa86 	bl	8005df8 <xTaskRemoveFromEventList>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <xQueueGenericReset+0xcc>)
 80048f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	e009      	b.n	8004918 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3310      	adds	r3, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fef3 	bl	80046f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3324      	adds	r3, #36	; 0x24
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff feee 	bl	80046f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004918:	f002 f9f6 	bl	8006d08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800491c:	2301      	movs	r3, #1
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	; 0x38
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <xQueueGenericCreateStatic+0x28>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 8004952:	e7fe      	b.n	8004952 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <xQueueGenericCreateStatic+0x42>
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	e7fe      	b.n	800496c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <xQueueGenericCreateStatic+0x4e>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <xQueueGenericCreateStatic+0x52>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <xQueueGenericCreateStatic+0x54>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <xQueueGenericCreateStatic+0x6c>
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	e7fe      	b.n	8004996 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <xQueueGenericCreateStatic+0x78>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <xQueueGenericCreateStatic+0x7c>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <xQueueGenericCreateStatic+0x7e>
 80049a8:	2300      	movs	r3, #0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <xQueueGenericCreateStatic+0x96>
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e7fe      	b.n	80049c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049c2:	2350      	movs	r3, #80	; 0x50
 80049c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b50      	cmp	r3, #80	; 0x50
 80049ca:	d009      	beq.n	80049e0 <xQueueGenericCreateStatic+0xb4>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e7fe      	b.n	80049de <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f844 	bl	8004a90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3730      	adds	r7, #48	; 0x30
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b08a      	sub	sp, #40	; 0x28
 8004a16:	af02      	add	r7, sp, #8
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <xQueueGenericCreate+0x28>
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e004      	b.n	8004a50 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3350      	adds	r3, #80	; 0x50
 8004a54:	4618      	mov	r0, r3
 8004a56:	f002 fb27 	bl	80070a8 <pvPortMalloc>
 8004a5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3350      	adds	r3, #80	; 0x50
 8004a6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a74:	79fa      	ldrb	r2, [r7, #7]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f805 	bl	8004a90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a86:	69bb      	ldr	r3, [r7, #24]
	}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d103      	bne.n	8004aac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004abe:	2101      	movs	r1, #1
 8004ac0:	69b8      	ldr	r0, [r7, #24]
 8004ac2:	f7ff fecb 	bl	800485c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <xQueueGenericSend+0x30>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b06:	e7fe      	b.n	8004b06 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <xQueueGenericSend+0x3e>
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <xQueueGenericSend+0x42>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <xQueueGenericSend+0x44>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <xQueueGenericSend+0x5c>
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	e7fe      	b.n	8004b32 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d103      	bne.n	8004b42 <xQueueGenericSend+0x6a>
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <xQueueGenericSend+0x6e>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xQueueGenericSend+0x70>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <xQueueGenericSend+0x88>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	e7fe      	b.n	8004b5e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b60:	f001 fb56 	bl	8006210 <xTaskGetSchedulerState>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <xQueueGenericSend+0x98>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGenericSend+0x9c>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGenericSend+0x9e>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <xQueueGenericSend+0xb6>
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b8e:	f002 f88d 	bl	8006cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <xQueueGenericSend+0xcc>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d129      	bne.n	8004bf8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004baa:	f000 fa7c 	bl	80050a6 <prvCopyDataToQueue>
 8004bae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f91b 	bl	8005df8 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <xQueueGenericSend+0x1f0>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	e00a      	b.n	8004bf0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <xQueueGenericSend+0x1f0>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bf0:	f002 f88a 	bl	8006d08 <vPortExitCritical>
				return pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e063      	b.n	8004cc0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bfe:	f002 f883 	bl	8006d08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e05c      	b.n	8004cc0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f955 	bl	8005ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c1a:	f002 f875 	bl	8006d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c1e:	f000 fe5f 	bl	80058e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c22:	f002 f843 	bl	8006cac <vPortEnterCritical>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d103      	bne.n	8004c3c <xQueueGenericSend+0x164>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x17a>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c52:	f002 f859 	bl	8006d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c56:	1d3a      	adds	r2, r7, #4
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f944 	bl	8005eec <xTaskCheckForTimeOut>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d124      	bne.n	8004cb4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f000 fb13 	bl	8005296 <prvIsQueueFull>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3310      	adds	r3, #16
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f86c 	bl	8005d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c86:	f000 fa9e 	bl	80051c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c8a:	f000 fe6f 	bl	800596c <xTaskResumeAll>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af7c 	bne.w	8004b8e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <xQueueGenericSend+0x1f0>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	e772      	b.n	8004b8e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004caa:	f000 fa8c 	bl	80051c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cae:	f000 fe5d 	bl	800596c <xTaskResumeAll>
 8004cb2:	e76c      	b.n	8004b8e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb6:	f000 fa86 	bl	80051c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cba:	f000 fe57 	bl	800596c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3738      	adds	r7, #56	; 0x38
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08e      	sub	sp, #56	; 0x38
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <xQueueGenericSendFromISR+0x2c>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSendFromISR+0x3a>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueGenericSendFromISR+0x3e>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueGenericSendFromISR+0x40>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <xQueueGenericSendFromISR+0x58>
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	e7fe      	b.n	8004d22 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d103      	bne.n	8004d32 <xQueueGenericSendFromISR+0x66>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <xQueueGenericSendFromISR+0x6a>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <xQueueGenericSendFromISR+0x6c>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <xQueueGenericSendFromISR+0x84>
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e7fe      	b.n	8004d4e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d50:	f002 f96c 	bl	800702c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d54:	f3ef 8211 	mrs	r2, BASEPRI
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61ba      	str	r2, [r7, #24]
 8004d6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d302      	bcc.n	8004d82 <xQueueGenericSendFromISR+0xb6>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d12c      	bne.n	8004ddc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d92:	f000 f988 	bl	80050a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d96:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d112      	bne.n	8004dc6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d016      	beq.n	8004dd6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	3324      	adds	r3, #36	; 0x24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 f823 	bl	8005df8 <xTaskRemoveFromEventList>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e007      	b.n	8004dd6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	b25a      	sxtb	r2, r3
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004dda:	e001      	b.n	8004de0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3738      	adds	r7, #56	; 0x38
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	; 0x30
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <xQueueReceive+0x2e>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	e7fe      	b.n	8004e20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <xQueueReceive+0x3c>
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueReceive+0x40>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueReceive+0x42>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <xQueueReceive+0x5a>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e7fe      	b.n	8004e4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e4e:	f001 f9df 	bl	8006210 <xTaskGetSchedulerState>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <xQueueReceive+0x6a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <xQueueReceive+0x6e>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <xQueueReceive+0x70>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <xQueueReceive+0x88>
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e7fe      	b.n	8004e7a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e7c:	f001 ff16 	bl	8006cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01f      	beq.n	8004ecc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e90:	f000 f973 	bl	800517a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00f      	beq.n	8004ec4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	3310      	adds	r3, #16
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 ffa5 	bl	8005df8 <xTaskRemoveFromEventList>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eb4:	4b3c      	ldr	r3, [pc, #240]	; (8004fa8 <xQueueReceive+0x1b4>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ec4:	f001 ff20 	bl	8006d08 <vPortExitCritical>
				return pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e069      	b.n	8004fa0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ed2:	f001 ff19 	bl	8006d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e062      	b.n	8004fa0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee0:	f107 0310 	add.w	r3, r7, #16
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 ffeb 	bl	8005ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eee:	f001 ff0b 	bl	8006d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ef2:	f000 fcf5 	bl	80058e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef6:	f001 fed9 	bl	8006cac <vPortEnterCritical>
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d103      	bne.n	8004f10 <xQueueReceive+0x11c>
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f16:	b25b      	sxtb	r3, r3
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d103      	bne.n	8004f26 <xQueueReceive+0x132>
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f26:	f001 feef 	bl	8006d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f2a:	1d3a      	adds	r2, r7, #4
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 ffda 	bl	8005eec <xTaskCheckForTimeOut>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d123      	bne.n	8004f86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f40:	f000 f993 	bl	800526a <prvIsQueueEmpty>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	3324      	adds	r3, #36	; 0x24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ff02 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5a:	f000 f934 	bl	80051c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f5e:	f000 fd05 	bl	800596c <xTaskResumeAll>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d189      	bne.n	8004e7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <xQueueReceive+0x1b4>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	e780      	b.n	8004e7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7c:	f000 f923 	bl	80051c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f80:	f000 fcf4 	bl	800596c <xTaskResumeAll>
 8004f84:	e77a      	b.n	8004e7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f88:	f000 f91d 	bl	80051c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f8c:	f000 fcee 	bl	800596c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f92:	f000 f96a 	bl	800526a <prvIsQueueEmpty>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f43f af6f 	beq.w	8004e7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08e      	sub	sp, #56	; 0x38
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <xQueueReceiveFromISR+0x2a>
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <xQueueReceiveFromISR+0x38>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <xQueueReceiveFromISR+0x3c>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <xQueueReceiveFromISR+0x3e>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <xQueueReceiveFromISR+0x56>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	e7fe      	b.n	8005000 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005002:	f002 f813 	bl	800702c <vPortValidateInterruptPriority>
	__asm volatile
 8005006:	f3ef 8211 	mrs	r2, BASEPRI
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	61ba      	str	r2, [r7, #24]
 800501c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800501e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d02f      	beq.n	800508e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800503c:	f000 f89d 	bl	800517a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d112      	bne.n	8005078 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	3310      	adds	r3, #16
 800505e:	4618      	mov	r0, r3
 8005060:	f000 feca 	bl	8005df8 <xTaskRemoveFromEventList>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e007      	b.n	8005088 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800507c:	3301      	adds	r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	b25a      	sxtb	r2, r3
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
 800508c:	e001      	b.n	8005092 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800508e:	2300      	movs	r3, #0
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3738      	adds	r7, #56	; 0x38
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10d      	bne.n	80050e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d14d      	bne.n	8005168 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 f8bb 	bl	800624c <xTaskPriorityDisinherit>
 80050d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	609a      	str	r2, [r3, #8]
 80050de:	e043      	b.n	8005168 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d119      	bne.n	800511a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6858      	ldr	r0, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	461a      	mov	r2, r3
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	f002 f9d9 	bl	80074a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	441a      	add	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	d32b      	bcc.n	8005168 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	e026      	b.n	8005168 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68d8      	ldr	r0, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	461a      	mov	r2, r3
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	f002 f9bf 	bl	80074a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	425b      	negs	r3, r3
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d207      	bcs.n	8005156 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	425b      	negs	r3, r3
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d105      	bne.n	8005168 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3b01      	subs	r3, #1
 8005166:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005170:	697b      	ldr	r3, [r7, #20]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d303      	bcc.n	80051ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68d9      	ldr	r1, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	461a      	mov	r2, r3
 80051b8:	6838      	ldr	r0, [r7, #0]
 80051ba:	f002 f975 	bl	80074a8 <memcpy>
	}
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051ce:	f001 fd6d 	bl	8006cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051da:	e011      	b.n	8005200 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d012      	beq.n	800520a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3324      	adds	r3, #36	; 0x24
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fe05 	bl	8005df8 <xTaskRemoveFromEventList>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051f4:	f000 feda 	bl	8005fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	dce9      	bgt.n	80051dc <prvUnlockQueue+0x16>
 8005208:	e000      	b.n	800520c <prvUnlockQueue+0x46>
					break;
 800520a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	22ff      	movs	r2, #255	; 0xff
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005214:	f001 fd78 	bl	8006d08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005218:	f001 fd48 	bl	8006cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005222:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005224:	e011      	b.n	800524a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3310      	adds	r3, #16
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fde0 	bl	8005df8 <xTaskRemoveFromEventList>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800523e:	f000 feb5 	bl	8005fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	3b01      	subs	r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800524a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800524e:	2b00      	cmp	r3, #0
 8005250:	dce9      	bgt.n	8005226 <prvUnlockQueue+0x60>
 8005252:	e000      	b.n	8005256 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005254:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	22ff      	movs	r2, #255	; 0xff
 800525a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800525e:	f001 fd53 	bl	8006d08 <vPortExitCritical>
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005272:	f001 fd1b 	bl	8006cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e001      	b.n	8005288 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005288:	f001 fd3e 	bl	8006d08 <vPortExitCritical>

	return xReturn;
 800528c:	68fb      	ldr	r3, [r7, #12]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800529e:	f001 fd05 	bl	8006cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d102      	bne.n	80052b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e001      	b.n	80052b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052b8:	f001 fd26 	bl	8006d08 <vPortExitCritical>

	return xReturn;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e014      	b.n	8005302 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052d8:	4a0e      	ldr	r2, [pc, #56]	; (8005314 <vQueueAddToRegistry+0x4c>)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052e4:	490b      	ldr	r1, [pc, #44]	; (8005314 <vQueueAddToRegistry+0x4c>)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <vQueueAddToRegistry+0x4c>)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052fa:	e005      	b.n	8005308 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b07      	cmp	r3, #7
 8005306:	d9e7      	bls.n	80052d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	20004c7c 	.word	0x20004c7c

08005318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005328:	f001 fcc0 	bl	8006cac <vPortEnterCritical>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005332:	b25b      	sxtb	r3, r3
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d103      	bne.n	8005342 <vQueueWaitForMessageRestricted+0x2a>
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005348:	b25b      	sxtb	r3, r3
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d103      	bne.n	8005358 <vQueueWaitForMessageRestricted+0x40>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005358:	f001 fcd6 	bl	8006d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3324      	adds	r3, #36	; 0x24
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd19 	bl	8005da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005372:	6978      	ldr	r0, [r7, #20]
 8005374:	f7ff ff27 	bl	80051c6 <prvUnlockQueue>
	}
 8005378:	bf00      	nop
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	; 0x38
 8005384:	af04      	add	r7, sp, #16
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <xTaskCreateStatic+0x28>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	e7fe      	b.n	80053a6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <xTaskCreateStatic+0x42>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053c2:	235c      	movs	r3, #92	; 0x5c
 80053c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b5c      	cmp	r3, #92	; 0x5c
 80053ca:	d009      	beq.n	80053e0 <xTaskCreateStatic+0x60>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e7fe      	b.n	80053de <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01e      	beq.n	8005426 <xTaskCreateStatic+0xa6>
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01b      	beq.n	8005426 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005400:	2300      	movs	r3, #0
 8005402:	9303      	str	r3, [sp, #12]
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	9302      	str	r3, [sp, #8]
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f850 	bl	80054be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800541e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005420:	f000 f8dc 	bl	80055dc <prvAddNewTaskToReadyList>
 8005424:	e001      	b.n	800542a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800542a:	697b      	ldr	r3, [r7, #20]
	}
 800542c:	4618      	mov	r0, r3
 800542e:	3728      	adds	r7, #40	; 0x28
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	; 0x30
 8005438:	af04      	add	r7, sp, #16
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fe2d 	bl	80070a8 <pvPortMalloc>
 800544e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005456:	205c      	movs	r0, #92	; 0x5c
 8005458:	f001 fe26 	bl	80070a8 <pvPortMalloc>
 800545c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
 800546a:	e005      	b.n	8005478 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800546c:	6978      	ldr	r0, [r7, #20]
 800546e:	f001 fedd 	bl	800722c <vPortFree>
 8005472:	e001      	b.n	8005478 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d017      	beq.n	80054ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	2300      	movs	r3, #0
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f80e 	bl	80054be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054a2:	69f8      	ldr	r0, [r7, #28]
 80054a4:	f000 f89a 	bl	80055dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054a8:	2301      	movs	r3, #1
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e002      	b.n	80054b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
 80054b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054b4:	69bb      	ldr	r3, [r7, #24]
	}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b088      	sub	sp, #32
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	461a      	mov	r2, r3
 80054d6:	21a5      	movs	r1, #165	; 0xa5
 80054d8:	f001 fff1 	bl	80074be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054e6:	3b01      	subs	r3, #1
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <prvInitialiseNewTask+0x56>
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e7fe      	b.n	8005512 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01f      	beq.n	800555a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	e012      	b.n	8005546 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	7819      	ldrb	r1, [r3, #0]
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	3334      	adds	r3, #52	; 0x34
 8005530:	460a      	mov	r2, r1
 8005532:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d006      	beq.n	800554e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3301      	adds	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	2b0f      	cmp	r3, #15
 800554a:	d9e9      	bls.n	8005520 <prvInitialiseNewTask+0x62>
 800554c:	e000      	b.n	8005550 <prvInitialiseNewTask+0x92>
			{
				break;
 800554e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005558:	e003      	b.n	8005562 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	2b37      	cmp	r3, #55	; 0x37
 8005566:	d901      	bls.n	800556c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005568:	2337      	movs	r3, #55	; 0x37
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	2200      	movs	r2, #0
 800557c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	3304      	adds	r3, #4
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff f8d6 	bl	8004734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	3318      	adds	r3, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff f8d1 	bl	8004734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	2200      	movs	r2, #0
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	68f9      	ldr	r1, [r7, #12]
 80055ba:	69b8      	ldr	r0, [r7, #24]
 80055bc:	f001 fa4c 	bl	8006a58 <pxPortInitialiseStack>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055d2:	bf00      	nop
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055e4:	f001 fb62 	bl	8006cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055e8:	4b2d      	ldr	r3, [pc, #180]	; (80056a0 <prvAddNewTaskToReadyList+0xc4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <prvAddNewTaskToReadyList+0xc4>)
 80055f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055f2:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055fa:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005600:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <prvAddNewTaskToReadyList+0xc4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d110      	bne.n	800562a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005608:	f000 fd48 	bl	800609c <prvInitialiseTaskLists>
 800560c:	e00d      	b.n	800562a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800560e:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <prvAddNewTaskToReadyList+0xcc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005616:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	429a      	cmp	r2, r3
 8005622:	d802      	bhi.n	800562a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005624:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <prvAddNewTaskToReadyList+0xd0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <prvAddNewTaskToReadyList+0xd0>)
 8005632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005634:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <prvAddNewTaskToReadyList+0xd0>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <prvAddNewTaskToReadyList+0xd4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <prvAddNewTaskToReadyList+0x74>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <prvAddNewTaskToReadyList+0xd4>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <prvAddNewTaskToReadyList+0xd8>)
 800565e:	441a      	add	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7ff f871 	bl	800474e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800566c:	f001 fb4c 	bl	8006d08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <prvAddNewTaskToReadyList+0xcc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	429a      	cmp	r2, r3
 8005684:	d207      	bcs.n	8005696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <prvAddNewTaskToReadyList+0xdc>)
 8005688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000cc4 	.word	0x20000cc4
 80056a4:	200007f0 	.word	0x200007f0
 80056a8:	20000cd0 	.word	0x20000cd0
 80056ac:	20000ce0 	.word	0x20000ce0
 80056b0:	20000ccc 	.word	0x20000ccc
 80056b4:	200007f4 	.word	0x200007f4
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <vTaskDelayUntil+0x28>
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	e7fe      	b.n	80056e2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <vTaskDelayUntil+0x42>
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e7fe      	b.n	80056fc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80056fe:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <vTaskDelayUntil+0xe8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <vTaskDelayUntil+0x5e>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e7fe      	b.n	8005718 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800571a:	f000 f8e1 	bl	80058e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800571e:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <vTaskDelayUntil+0xec>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	4413      	add	r3, r2
 800572c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	429a      	cmp	r2, r3
 8005736:	d20b      	bcs.n	8005750 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	429a      	cmp	r2, r3
 8005740:	d211      	bcs.n	8005766 <vTaskDelayUntil+0xaa>
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	429a      	cmp	r2, r3
 8005748:	d90d      	bls.n	8005766 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	e00a      	b.n	8005766 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	429a      	cmp	r2, r3
 8005758:	d303      	bcc.n	8005762 <vTaskDelayUntil+0xa6>
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	429a      	cmp	r2, r3
 8005760:	d901      	bls.n	8005766 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005762:	2301      	movs	r3, #1
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fdd2 	bl	8006324 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005780:	f000 f8f4 	bl	800596c <xTaskResumeAll>
 8005784:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <vTaskDelayUntil+0xf0>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800579c:	bf00      	nop
 800579e:	3728      	adds	r7, #40	; 0x28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000cec 	.word	0x20000cec
 80057a8:	20000cc8 	.word	0x20000cc8
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <vTaskDelay+0x60>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <vTaskDelay+0x2e>
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	e7fe      	b.n	80057dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057de:	f000 f87f 	bl	80058e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057e2:	2100      	movs	r1, #0
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fd9d 	bl	8006324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057ea:	f000 f8bf 	bl	800596c <xTaskResumeAll>
 80057ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80057f6:	4b07      	ldr	r3, [pc, #28]	; (8005814 <vTaskDelay+0x64>)
 80057f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000cec 	.word	0x20000cec
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005826:	463a      	mov	r2, r7
 8005828:	1d39      	adds	r1, r7, #4
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe ff2c 	bl	800468c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	9202      	str	r2, [sp, #8]
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2300      	movs	r3, #0
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2300      	movs	r3, #0
 8005844:	460a      	mov	r2, r1
 8005846:	4920      	ldr	r1, [pc, #128]	; (80058c8 <vTaskStartScheduler+0xb0>)
 8005848:	4820      	ldr	r0, [pc, #128]	; (80058cc <vTaskStartScheduler+0xb4>)
 800584a:	f7ff fd99 	bl	8005380 <xTaskCreateStatic>
 800584e:	4602      	mov	r2, r0
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <vTaskStartScheduler+0xb8>)
 8005852:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <vTaskStartScheduler+0xb8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e001      	b.n	8005866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d102      	bne.n	8005872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800586c:	f000 fdae 	bl	80063cc <xTimerCreateTimerTask>
 8005870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d115      	bne.n	80058a4 <vTaskStartScheduler+0x8c>
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <vTaskStartScheduler+0xbc>)
 800588c:	f04f 32ff 	mov.w	r2, #4294967295
 8005890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <vTaskStartScheduler+0xc0>)
 8005894:	2201      	movs	r2, #1
 8005896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005898:	4b10      	ldr	r3, [pc, #64]	; (80058dc <vTaskStartScheduler+0xc4>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800589e:	f001 f967 	bl	8006b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058a2:	e00d      	b.n	80058c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d109      	bne.n	80058c0 <vTaskStartScheduler+0xa8>
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e7fe      	b.n	80058be <vTaskStartScheduler+0xa6>
}
 80058c0:	bf00      	nop
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	080087dc 	.word	0x080087dc
 80058cc:	08005fc5 	.word	0x08005fc5
 80058d0:	20000ce8 	.word	0x20000ce8
 80058d4:	20000ce4 	.word	0x20000ce4
 80058d8:	20000cd0 	.word	0x20000cd0
 80058dc:	20000cc8 	.word	0x20000cc8

080058e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <vTaskSuspendAll+0x18>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <vTaskSuspendAll+0x18>)
 80058ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058ee:	bf00      	nop
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000cec 	.word	0x20000cec

080058fc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <prvGetExpectedIdleTime+0x5c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800590e:	2301      	movs	r3, #1
 8005910:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <prvGetExpectedIdleTime+0x60>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	e012      	b.n	8005948 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <prvGetExpectedIdleTime+0x64>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d902      	bls.n	8005930 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	e00b      	b.n	8005948 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	e005      	b.n	8005948 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <prvGetExpectedIdleTime+0x68>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b09      	ldr	r3, [pc, #36]	; (8005968 <prvGetExpectedIdleTime+0x6c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8005948:	687b      	ldr	r3, [r7, #4]
	}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000ccc 	.word	0x20000ccc
 800595c:	200007f0 	.word	0x200007f0
 8005960:	200007f4 	.word	0x200007f4
 8005964:	20000ce4 	.word	0x20000ce4
 8005968:	20000cc8 	.word	0x20000cc8

0800596c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800597a:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <xTaskResumeAll+0x114>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <xTaskResumeAll+0x2a>
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	e7fe      	b.n	8005994 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005996:	f001 f989 	bl	8006cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <xTaskResumeAll+0x114>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3b01      	subs	r3, #1
 80059a0:	4a37      	ldr	r2, [pc, #220]	; (8005a80 <xTaskResumeAll+0x114>)
 80059a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a4:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <xTaskResumeAll+0x114>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d162      	bne.n	8005a72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059ac:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <xTaskResumeAll+0x118>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d05e      	beq.n	8005a72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059b4:	e02f      	b.n	8005a16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <xTaskResumeAll+0x11c>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3318      	adds	r3, #24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe ff20 	bl	8004808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe ff1b 	bl	8004808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d6:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <xTaskResumeAll+0x120>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d903      	bls.n	80059e6 <xTaskResumeAll+0x7a>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <xTaskResumeAll+0x120>)
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <xTaskResumeAll+0x124>)
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f7fe fea6 	bl	800474e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <xTaskResumeAll+0x128>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a10:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <xTaskResumeAll+0x12c>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <xTaskResumeAll+0x11c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1cb      	bne.n	80059b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a24:	f000 fbd4 	bl	80061d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <xTaskResumeAll+0x130>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d010      	beq.n	8005a56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a34:	f000 f87e 	bl	8005b34 <xTaskIncrementTick>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <xTaskResumeAll+0x12c>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f1      	bne.n	8005a34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <xTaskResumeAll+0x130>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <xTaskResumeAll+0x12c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a62:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <xTaskResumeAll+0x134>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a72:	f001 f949 	bl	8006d08 <vPortExitCritical>

	return xAlreadyYielded;
 8005a76:	68bb      	ldr	r3, [r7, #8]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000cec 	.word	0x20000cec
 8005a84:	20000cc4 	.word	0x20000cc4
 8005a88:	20000c84 	.word	0x20000c84
 8005a8c:	20000ccc 	.word	0x20000ccc
 8005a90:	200007f4 	.word	0x200007f4
 8005a94:	200007f0 	.word	0x200007f0
 8005a98:	20000cd8 	.word	0x20000cd8
 8005a9c:	20000cd4 	.word	0x20000cd4
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <xTaskGetTickCount+0x1c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ab0:	687b      	ldr	r3, [r7, #4]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000cc8 	.word	0x20000cc8

08005ac4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aca:	f001 faaf 	bl	800702c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <xTaskGetTickCountFromISR+0x20>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ad8:	683b      	ldr	r3, [r7, #0]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000cc8 	.word	0x20000cc8

08005ae8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <vTaskStepTick+0x44>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	441a      	add	r2, r3
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <vTaskStepTick+0x48>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d909      	bls.n	8005b14 <vTaskStepTick+0x2c>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e7fe      	b.n	8005b12 <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <vTaskStepTick+0x44>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <vTaskStepTick+0x44>)
 8005b1e:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000cc8 	.word	0x20000cc8
 8005b30:	20000ce4 	.word	0x20000ce4

08005b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3e:	4b4e      	ldr	r3, [pc, #312]	; (8005c78 <xTaskIncrementTick+0x144>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 8088 	bne.w	8005c58 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b48:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <xTaskIncrementTick+0x148>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b50:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <xTaskIncrementTick+0x148>)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d11f      	bne.n	8005b9c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b5c:	4b48      	ldr	r3, [pc, #288]	; (8005c80 <xTaskIncrementTick+0x14c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <xTaskIncrementTick+0x46>
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	e7fe      	b.n	8005b78 <xTaskIncrementTick+0x44>
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <xTaskIncrementTick+0x14c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	4b40      	ldr	r3, [pc, #256]	; (8005c84 <xTaskIncrementTick+0x150>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a3e      	ldr	r2, [pc, #248]	; (8005c80 <xTaskIncrementTick+0x14c>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4a3e      	ldr	r2, [pc, #248]	; (8005c84 <xTaskIncrementTick+0x150>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b3e      	ldr	r3, [pc, #248]	; (8005c88 <xTaskIncrementTick+0x154>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <xTaskIncrementTick+0x154>)
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	f000 fb1a 	bl	80061d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <xTaskIncrementTick+0x158>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d349      	bcc.n	8005c3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba6:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <xTaskIncrementTick+0x14c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb0:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <xTaskIncrementTick+0x158>)
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb6:	601a      	str	r2, [r3, #0]
					break;
 8005bb8:	e03f      	b.n	8005c3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <xTaskIncrementTick+0x14c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d203      	bcs.n	8005bda <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bd2:	4a2e      	ldr	r2, [pc, #184]	; (8005c8c <xTaskIncrementTick+0x158>)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bd8:	e02f      	b.n	8005c3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fe12 	bl	8004808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3318      	adds	r3, #24
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fe09 	bl	8004808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	4b25      	ldr	r3, [pc, #148]	; (8005c90 <xTaskIncrementTick+0x15c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d903      	bls.n	8005c0a <xTaskIncrementTick+0xd6>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <xTaskIncrementTick+0x15c>)
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <xTaskIncrementTick+0x160>)
 8005c18:	441a      	add	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f7fe fd94 	bl	800474e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <xTaskIncrementTick+0x164>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d3b8      	bcc.n	8005ba6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c38:	e7b5      	b.n	8005ba6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c3a:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <xTaskIncrementTick+0x164>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4914      	ldr	r1, [pc, #80]	; (8005c94 <xTaskIncrementTick+0x160>)
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d907      	bls.n	8005c62 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005c52:	2301      	movs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e004      	b.n	8005c62 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <xTaskIncrementTick+0x168>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	4a0f      	ldr	r2, [pc, #60]	; (8005c9c <xTaskIncrementTick+0x168>)
 8005c60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c62:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <xTaskIncrementTick+0x16c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c6e:	697b      	ldr	r3, [r7, #20]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000cec 	.word	0x20000cec
 8005c7c:	20000cc8 	.word	0x20000cc8
 8005c80:	20000c7c 	.word	0x20000c7c
 8005c84:	20000c80 	.word	0x20000c80
 8005c88:	20000cdc 	.word	0x20000cdc
 8005c8c:	20000ce4 	.word	0x20000ce4
 8005c90:	20000ccc 	.word	0x20000ccc
 8005c94:	200007f4 	.word	0x200007f4
 8005c98:	200007f0 	.word	0x200007f0
 8005c9c:	20000cd4 	.word	0x20000cd4
 8005ca0:	20000cd8 	.word	0x20000cd8

08005ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005caa:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <vTaskSwitchContext+0xa4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cb2:	4b26      	ldr	r3, [pc, #152]	; (8005d4c <vTaskSwitchContext+0xa8>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cb8:	e040      	b.n	8005d3c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005cba:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <vTaskSwitchContext+0xa8>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc0:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <vTaskSwitchContext+0xac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e00f      	b.n	8005ce8 <vTaskSwitchContext+0x44>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <vTaskSwitchContext+0x3e>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	e7fe      	b.n	8005ce0 <vTaskSwitchContext+0x3c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	491a      	ldr	r1, [pc, #104]	; (8005d54 <vTaskSwitchContext+0xb0>)
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0e5      	beq.n	8005cc8 <vTaskSwitchContext+0x24>
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <vTaskSwitchContext+0xb0>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d104      	bne.n	8005d2c <vTaskSwitchContext+0x88>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	605a      	str	r2, [r3, #4]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <vTaskSwitchContext+0xb4>)
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <vTaskSwitchContext+0xac>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6013      	str	r3, [r2, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000cec 	.word	0x20000cec
 8005d4c:	20000cd8 	.word	0x20000cd8
 8005d50:	20000ccc 	.word	0x20000ccc
 8005d54:	200007f4 	.word	0x200007f4
 8005d58:	200007f0 	.word	0x200007f0

08005d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <vTaskPlaceOnEventList+0x24>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e7fe      	b.n	8005d7e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <vTaskPlaceOnEventList+0x44>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3318      	adds	r3, #24
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fe fd04 	bl	8004796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d8e:	2101      	movs	r1, #1
 8005d90:	6838      	ldr	r0, [r7, #0]
 8005d92:	f000 fac7 	bl	8006324 <prvAddCurrentTaskToDelayedList>
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200007f0 	.word	0x200007f0

08005da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <vTaskPlaceOnEventListRestricted+0x26>
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e7fe      	b.n	8005dc8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dca:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <vTaskPlaceOnEventListRestricted+0x50>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3318      	adds	r3, #24
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7fe fcbb 	bl	800474e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295
 8005de2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	68b8      	ldr	r0, [r7, #8]
 8005de8:	f000 fa9c 	bl	8006324 <prvAddCurrentTaskToDelayedList>
	}
 8005dec:	bf00      	nop
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200007f0 	.word	0x200007f0

08005df8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <xTaskRemoveFromEventList+0x2a>
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e7fe      	b.n	8005e20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3318      	adds	r3, #24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fcee 	bl	8004808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <xTaskRemoveFromEventList+0xb0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11f      	bne.n	8005e74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fce5 	bl	8004808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <xTaskRemoveFromEventList+0xb4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d903      	bls.n	8005e52 <xTaskRemoveFromEventList+0x5a>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a17      	ldr	r2, [pc, #92]	; (8005eac <xTaskRemoveFromEventList+0xb4>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <xTaskRemoveFromEventList+0xb8>)
 8005e60:	441a      	add	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7fe fc70 	bl	800474e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8005e6e:	f000 f9af 	bl	80061d0 <prvResetNextTaskUnblockTime>
 8005e72:	e005      	b.n	8005e80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	3318      	adds	r3, #24
 8005e78:	4619      	mov	r1, r3
 8005e7a:	480e      	ldr	r0, [pc, #56]	; (8005eb4 <xTaskRemoveFromEventList+0xbc>)
 8005e7c:	f7fe fc67 	bl	800474e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <xTaskRemoveFromEventList+0xc0>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d905      	bls.n	8005e9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e92:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <xTaskRemoveFromEventList+0xc4>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e001      	b.n	8005e9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e9e:	697b      	ldr	r3, [r7, #20]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000cec 	.word	0x20000cec
 8005eac:	20000ccc 	.word	0x20000ccc
 8005eb0:	200007f4 	.word	0x200007f4
 8005eb4:	20000c84 	.word	0x20000c84
 8005eb8:	200007f0 	.word	0x200007f0
 8005ebc:	20000cd8 	.word	0x20000cd8

08005ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <vTaskInternalSetTimeOutState+0x24>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <vTaskInternalSetTimeOutState+0x28>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000cdc 	.word	0x20000cdc
 8005ee8:	20000cc8 	.word	0x20000cc8

08005eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <xTaskCheckForTimeOut+0x24>
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	e7fe      	b.n	8005f0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <xTaskCheckForTimeOut+0x3e>
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e7fe      	b.n	8005f28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005f2a:	f000 febf 	bl	8006cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <xTaskCheckForTimeOut+0xb8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d102      	bne.n	8005f4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e023      	b.n	8005f96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <xTaskCheckForTimeOut+0xbc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d007      	beq.n	8005f6a <xTaskCheckForTimeOut+0x7e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	e015      	b.n	8005f96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d20b      	bcs.n	8005f8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff ff9d 	bl	8005ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e004      	b.n	8005f96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f96:	f000 feb7 	bl	8006d08 <vPortExitCritical>

	return xReturn;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000cc8 	.word	0x20000cc8
 8005fa8:	20000cdc 	.word	0x20000cdc

08005fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fb0:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <vTaskMissedYield+0x14>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	20000cd8 	.word	0x20000cd8

08005fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fcc:	f000 f8a6 	bl	800611c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fd0:	4b17      	ldr	r3, [pc, #92]	; (8006030 <prvIdleTask+0x6c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d907      	bls.n	8005fe8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005fd8:	4b16      	ldr	r3, [pc, #88]	; (8006034 <prvIdleTask+0x70>)
 8005fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8005fe8:	f7ff fc88 	bl	80058fc <prvGetExpectedIdleTime>
 8005fec:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d9eb      	bls.n	8005fcc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005ff4:	f7ff fc74 	bl	80058e0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <prvIdleTask+0x74>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <prvIdleTask+0x78>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d209      	bcs.n	8006018 <prvIdleTask+0x54>
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	e7fe      	b.n	8006016 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8006018:	f7ff fc70 	bl	80058fc <prvGetExpectedIdleTime>
 800601c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d902      	bls.n	800602a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 feef 	bl	8006e08 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800602a:	f7ff fc9f 	bl	800596c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800602e:	e7cd      	b.n	8005fcc <prvIdleTask+0x8>
 8006030:	200007f4 	.word	0x200007f4
 8006034:	e000ed04 	.word	0xe000ed04
 8006038:	20000ce4 	.word	0x20000ce4
 800603c:	20000cc8 	.word	0x20000cc8

08006040 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8006046:	2301      	movs	r3, #1
 8006048:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800604a:	2301      	movs	r3, #1
 800604c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <eTaskConfirmSleepModeStatus+0x4c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006056:	2300      	movs	r3, #0
 8006058:	71fb      	strb	r3, [r7, #7]
 800605a:	e010      	b.n	800607e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <eTaskConfirmSleepModeStatus+0x50>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006064:	2300      	movs	r3, #0
 8006066:	71fb      	strb	r3, [r7, #7]
 8006068:	e009      	b.n	800607e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <eTaskConfirmSleepModeStatus+0x54>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <eTaskConfirmSleepModeStatus+0x58>)
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	1acb      	subs	r3, r1, r3
 8006076:	429a      	cmp	r2, r3
 8006078:	d101      	bne.n	800607e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800607a:	2302      	movs	r3, #2
 800607c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800607e:	79fb      	ldrb	r3, [r7, #7]
	}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20000c84 	.word	0x20000c84
 8006090:	20000cd8 	.word	0x20000cd8
 8006094:	20000cb0 	.word	0x20000cb0
 8006098:	20000cc4 	.word	0x20000cc4

0800609c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	e00c      	b.n	80060c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a12      	ldr	r2, [pc, #72]	; (80060fc <prvInitialiseTaskLists+0x60>)
 80060b4:	4413      	add	r3, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe fb1c 	bl	80046f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3301      	adds	r3, #1
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b37      	cmp	r3, #55	; 0x37
 80060c6:	d9ef      	bls.n	80060a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060c8:	480d      	ldr	r0, [pc, #52]	; (8006100 <prvInitialiseTaskLists+0x64>)
 80060ca:	f7fe fb13 	bl	80046f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060ce:	480d      	ldr	r0, [pc, #52]	; (8006104 <prvInitialiseTaskLists+0x68>)
 80060d0:	f7fe fb10 	bl	80046f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060d4:	480c      	ldr	r0, [pc, #48]	; (8006108 <prvInitialiseTaskLists+0x6c>)
 80060d6:	f7fe fb0d 	bl	80046f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060da:	480c      	ldr	r0, [pc, #48]	; (800610c <prvInitialiseTaskLists+0x70>)
 80060dc:	f7fe fb0a 	bl	80046f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060e0:	480b      	ldr	r0, [pc, #44]	; (8006110 <prvInitialiseTaskLists+0x74>)
 80060e2:	f7fe fb07 	bl	80046f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <prvInitialiseTaskLists+0x78>)
 80060e8:	4a05      	ldr	r2, [pc, #20]	; (8006100 <prvInitialiseTaskLists+0x64>)
 80060ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <prvInitialiseTaskLists+0x7c>)
 80060ee:	4a05      	ldr	r2, [pc, #20]	; (8006104 <prvInitialiseTaskLists+0x68>)
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200007f4 	.word	0x200007f4
 8006100:	20000c54 	.word	0x20000c54
 8006104:	20000c68 	.word	0x20000c68
 8006108:	20000c84 	.word	0x20000c84
 800610c:	20000c98 	.word	0x20000c98
 8006110:	20000cb0 	.word	0x20000cb0
 8006114:	20000c7c 	.word	0x20000c7c
 8006118:	20000c80 	.word	0x20000c80

0800611c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006122:	e019      	b.n	8006158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006124:	f000 fdc2 	bl	8006cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <prvCheckTasksWaitingTermination+0x4c>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe fb67 	bl	8004808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <prvCheckTasksWaitingTermination+0x50>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3b01      	subs	r3, #1
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <prvCheckTasksWaitingTermination+0x50>)
 8006142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <prvCheckTasksWaitingTermination+0x54>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	4a09      	ldr	r2, [pc, #36]	; (8006170 <prvCheckTasksWaitingTermination+0x54>)
 800614c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800614e:	f000 fddb 	bl	8006d08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f80e 	bl	8006174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <prvCheckTasksWaitingTermination+0x54>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e1      	bne.n	8006124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000c98 	.word	0x20000c98
 800616c:	20000cc4 	.word	0x20000cc4
 8006170:	20000cac 	.word	0x20000cac

08006174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006182:	2b00      	cmp	r3, #0
 8006184:	d108      	bne.n	8006198 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	4618      	mov	r0, r3
 800618c:	f001 f84e 	bl	800722c <vPortFree>
				vPortFree( pxTCB );
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 f84b 	bl	800722c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006196:	e017      	b.n	80061c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d103      	bne.n	80061aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 f842 	bl	800722c <vPortFree>
	}
 80061a8:	e00e      	b.n	80061c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d009      	beq.n	80061c8 <prvDeleteTCB+0x54>
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	e7fe      	b.n	80061c6 <prvDeleteTCB+0x52>
	}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvResetNextTaskUnblockTime+0x38>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <prvResetNextTaskUnblockTime+0x3c>)
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061e8:	e008      	b.n	80061fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <prvResetNextTaskUnblockTime+0x38>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a04      	ldr	r2, [pc, #16]	; (800620c <prvResetNextTaskUnblockTime+0x3c>)
 80061fa:	6013      	str	r3, [r2, #0]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	20000c7c 	.word	0x20000c7c
 800620c:	20000ce4 	.word	0x20000ce4

08006210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <xTaskGetSchedulerState+0x34>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800621e:	2301      	movs	r3, #1
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	e008      	b.n	8006236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006224:	4b08      	ldr	r3, [pc, #32]	; (8006248 <xTaskGetSchedulerState+0x38>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800622c:	2302      	movs	r3, #2
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	e001      	b.n	8006236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006232:	2300      	movs	r3, #0
 8006234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006236:	687b      	ldr	r3, [r7, #4]
	}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20000cd0 	.word	0x20000cd0
 8006248:	20000cec 	.word	0x20000cec

0800624c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d054      	beq.n	800630c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006262:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <xTaskPriorityDisinherit+0xcc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	429a      	cmp	r2, r3
 800626a:	d009      	beq.n	8006280 <xTaskPriorityDisinherit+0x34>
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e7fe      	b.n	800627e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <xTaskPriorityDisinherit+0x50>
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	e7fe      	b.n	800629a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a0:	1e5a      	subs	r2, r3, #1
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d02c      	beq.n	800630c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d128      	bne.n	800630c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3304      	adds	r3, #4
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe faa2 	bl	8004808 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <xTaskPriorityDisinherit+0xd0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d903      	bls.n	80062ec <xTaskPriorityDisinherit+0xa0>
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	4a0c      	ldr	r2, [pc, #48]	; (800631c <xTaskPriorityDisinherit+0xd0>)
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4a09      	ldr	r2, [pc, #36]	; (8006320 <xTaskPriorityDisinherit+0xd4>)
 80062fa:	441a      	add	r2, r3
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3304      	adds	r3, #4
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7fe fa23 	bl	800474e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800630c:	697b      	ldr	r3, [r7, #20]
	}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200007f0 	.word	0x200007f0
 800631c:	20000ccc 	.word	0x20000ccc
 8006320:	200007f4 	.word	0x200007f4

08006324 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800632e:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006334:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3304      	adds	r3, #4
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fa64 	bl	8004808 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	d10a      	bne.n	800635e <prvAddCurrentTaskToDelayedList+0x3a>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800634e:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3304      	adds	r3, #4
 8006354:	4619      	mov	r1, r3
 8006356:	4819      	ldr	r0, [pc, #100]	; (80063bc <prvAddCurrentTaskToDelayedList+0x98>)
 8006358:	f7fe f9f9 	bl	800474e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800635c:	e026      	b.n	80063ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	429a      	cmp	r2, r3
 8006374:	d209      	bcs.n	800638a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006376:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7fe fa07 	bl	8004796 <vListInsert>
}
 8006388:	e010      	b.n	80063ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fe f9fd 	bl	8004796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d202      	bcs.n	80063ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063a6:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6013      	str	r3, [r2, #0]
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20000cc8 	.word	0x20000cc8
 80063b8:	200007f0 	.word	0x200007f0
 80063bc:	20000cb0 	.word	0x20000cb0
 80063c0:	20000c80 	.word	0x20000c80
 80063c4:	20000c7c 	.word	0x20000c7c
 80063c8:	20000ce4 	.word	0x20000ce4

080063cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063d6:	f000 faff 	bl	80069d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063da:	4b1c      	ldr	r3, [pc, #112]	; (800644c <xTimerCreateTimerTask+0x80>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d021      	beq.n	8006426 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063ea:	1d3a      	adds	r2, r7, #4
 80063ec:	f107 0108 	add.w	r1, r7, #8
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe f963 	bl	80046c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	2302      	movs	r3, #2
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	460a      	mov	r2, r1
 800640c:	4910      	ldr	r1, [pc, #64]	; (8006450 <xTimerCreateTimerTask+0x84>)
 800640e:	4811      	ldr	r0, [pc, #68]	; (8006454 <xTimerCreateTimerTask+0x88>)
 8006410:	f7fe ffb6 	bl	8005380 <xTaskCreateStatic>
 8006414:	4602      	mov	r2, r0
 8006416:	4b10      	ldr	r3, [pc, #64]	; (8006458 <xTimerCreateTimerTask+0x8c>)
 8006418:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <xTimerCreateTimerTask+0x8c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006422:	2301      	movs	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <xTimerCreateTimerTask+0x74>
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	e7fe      	b.n	800643e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006440:	697b      	ldr	r3, [r7, #20]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000d20 	.word	0x20000d20
 8006450:	080087e4 	.word	0x080087e4
 8006454:	0800658d 	.word	0x0800658d
 8006458:	20000d24 	.word	0x20000d24

0800645c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d109      	bne.n	8006488 <xTimerGenericCommand+0x2c>
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	623b      	str	r3, [r7, #32]
 8006486:	e7fe      	b.n	8006486 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006488:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <xTimerGenericCommand+0x94>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d02a      	beq.n	80064e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b05      	cmp	r3, #5
 80064a0:	dc18      	bgt.n	80064d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064a2:	f7ff feb5 	bl	8006210 <xTaskGetSchedulerState>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d109      	bne.n	80064c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <xTimerGenericCommand+0x94>)
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	f107 0110 	add.w	r1, r7, #16
 80064b4:	2300      	movs	r3, #0
 80064b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b8:	f7fe fb0e 	bl	8004ad8 <xQueueGenericSend>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24
 80064be:	e012      	b.n	80064e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <xTimerGenericCommand+0x94>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	f107 0110 	add.w	r1, r7, #16
 80064c8:	2300      	movs	r3, #0
 80064ca:	2200      	movs	r2, #0
 80064cc:	f7fe fb04 	bl	8004ad8 <xQueueGenericSend>
 80064d0:	6278      	str	r0, [r7, #36]	; 0x24
 80064d2:	e008      	b.n	80064e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <xTimerGenericCommand+0x94>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	f107 0110 	add.w	r1, r7, #16
 80064dc:	2300      	movs	r3, #0
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	f7fe fbf4 	bl	8004ccc <xQueueGenericSendFromISR>
 80064e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3728      	adds	r7, #40	; 0x28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000d20 	.word	0x20000d20

080064f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fe:	4b22      	ldr	r3, [pc, #136]	; (8006588 <prvProcessExpiredTimer+0x94>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe f97b 	bl	8004808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d021      	beq.n	8006564 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	699a      	ldr	r2, [r3, #24]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	18d1      	adds	r1, r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	6978      	ldr	r0, [r7, #20]
 800652e:	f000 f8d1 	bl	80066d4 <prvInsertTimerInActiveList>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01e      	beq.n	8006576 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006538:	2300      	movs	r3, #0
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	2300      	movs	r3, #0
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	2100      	movs	r1, #0
 8006542:	6978      	ldr	r0, [r7, #20]
 8006544:	f7ff ff8a 	bl	800645c <xTimerGenericCommand>
 8006548:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d112      	bne.n	8006576 <prvProcessExpiredTimer+0x82>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	e7fe      	b.n	8006562 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	4798      	blx	r3
}
 800657e:	bf00      	nop
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000d18 	.word	0x20000d18

0800658c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f857 	bl	800664c <prvGetNextExpireTime>
 800659e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4619      	mov	r1, r3
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f803 	bl	80065b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065aa:	f000 f8d5 	bl	8006758 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065ae:	e7f1      	b.n	8006594 <prvTimerTask+0x8>

080065b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065ba:	f7ff f991 	bl	80058e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065be:	f107 0308 	add.w	r3, r7, #8
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f866 	bl	8006694 <prvSampleTimeNow>
 80065c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d130      	bne.n	8006632 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <prvProcessTimerOrBlockTask+0x3c>
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d806      	bhi.n	80065ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065de:	f7ff f9c5 	bl	800596c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff ff85 	bl	80064f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065ea:	e024      	b.n	8006636 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <prvProcessTimerOrBlockTask+0x90>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <prvProcessTimerOrBlockTask+0x50>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <prvProcessTimerOrBlockTask+0x52>
 8006600:	2300      	movs	r3, #0
 8006602:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <prvProcessTimerOrBlockTask+0x94>)
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	f7fe fe81 	bl	8005318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006616:	f7ff f9a9 	bl	800596c <xTaskResumeAll>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006620:	4b09      	ldr	r3, [pc, #36]	; (8006648 <prvProcessTimerOrBlockTask+0x98>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
}
 8006630:	e001      	b.n	8006636 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006632:	f7ff f99b 	bl	800596c <xTaskResumeAll>
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000d1c 	.word	0x20000d1c
 8006644:	20000d20 	.word	0x20000d20
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <prvGetNextExpireTime+0x44>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <prvGetNextExpireTime+0x16>
 800665e:	2201      	movs	r2, #1
 8006660:	e000      	b.n	8006664 <prvGetNextExpireTime+0x18>
 8006662:	2200      	movs	r2, #0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <prvGetNextExpireTime+0x44>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e001      	b.n	8006680 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000d18 	.word	0x20000d18

08006694 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800669c:	f7ff fa02 	bl	8005aa4 <xTaskGetTickCount>
 80066a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <prvSampleTimeNow+0x3c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d205      	bcs.n	80066b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066ac:	f000 f930 	bl	8006910 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e002      	b.n	80066be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066be:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <prvSampleTimeNow+0x3c>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066c4:	68fb      	ldr	r3, [r7, #12]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000d28 	.word	0x20000d28

080066d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d812      	bhi.n	8006720 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	429a      	cmp	r2, r3
 8006706:	d302      	bcc.n	800670e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e01b      	b.n	8006746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <prvInsertTimerInActiveList+0x7c>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f7fe f83c 	bl	8004796 <vListInsert>
 800671e:	e012      	b.n	8006746 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d206      	bcs.n	8006736 <prvInsertTimerInActiveList+0x62>
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006730:	2301      	movs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	e007      	b.n	8006746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <prvInsertTimerInActiveList+0x80>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3304      	adds	r3, #4
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f7fe f828 	bl	8004796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006746:	697b      	ldr	r3, [r7, #20]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000d1c 	.word	0x20000d1c
 8006754:	20000d18 	.word	0x20000d18

08006758 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800675e:	e0c6      	b.n	80068ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da17      	bge.n	8006796 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	3304      	adds	r3, #4
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <prvProcessReceivedCommands+0x2e>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e7fe      	b.n	8006784 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800678c:	6850      	ldr	r0, [r2, #4]
 800678e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006790:	6892      	ldr	r2, [r2, #8]
 8006792:	4611      	mov	r1, r2
 8006794:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f2c0 80a7 	blt.w	80068ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	3304      	adds	r3, #4
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe f82a 	bl	8004808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067b4:	463b      	mov	r3, r7
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ff6c 	bl	8006694 <prvSampleTimeNow>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	f200 8094 	bhi.w	80068ee <prvProcessReceivedCommands+0x196>
 80067c6:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <prvProcessReceivedCommands+0x74>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	080067f5 	.word	0x080067f5
 80067d8:	08006867 	.word	0x08006867
 80067dc:	0800687b 	.word	0x0800687b
 80067e0:	080068c3 	.word	0x080068c3
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	080067f5 	.word	0x080067f5
 80067ec:	08006867 	.word	0x08006867
 80067f0:	0800687b 	.word	0x0800687b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	18d1      	adds	r1, r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006814:	f7ff ff5e 	bl	80066d4 <prvInsertTimerInActiveList>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d067      	beq.n	80068ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05c      	beq.n	80068ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	441a      	add	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	2100      	movs	r1, #0
 8006844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006846:	f7ff fe09 	bl	800645c <xTimerGenericCommand>
 800684a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d14d      	bne.n	80068ee <prvProcessReceivedCommands+0x196>
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e7fe      	b.n	8006864 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	b2da      	uxtb	r2, r3
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006878:	e039      	b.n	80068ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	b2da      	uxtb	r2, r3
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <prvProcessReceivedCommands+0x156>
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e7fe      	b.n	80068ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	18d1      	adds	r1, r2, r3
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068bc:	f7ff ff0a 	bl	80066d4 <prvInsertTimerInActiveList>
					break;
 80068c0:	e015      	b.n	80068ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80068d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d2:	f000 fcab 	bl	800722c <vPortFree>
 80068d6:	e00a      	b.n	80068ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068ea:	e000      	b.n	80068ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <prvProcessReceivedCommands+0x1b4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	1d39      	adds	r1, r7, #4
 80068f4:	2200      	movs	r2, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fa7c 	bl	8004df4 <xQueueReceive>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f47f af2e 	bne.w	8006760 <prvProcessReceivedCommands+0x8>
	}
}
 8006904:	bf00      	nop
 8006906:	3730      	adds	r7, #48	; 0x30
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000d20 	.word	0x20000d20

08006910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006916:	e047      	b.n	80069a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006918:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006922:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fd ff69 	bl	8004808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d02d      	beq.n	80069a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	429a      	cmp	r2, r3
 800695c:	d90e      	bls.n	800697c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800696a:	4b19      	ldr	r3, [pc, #100]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fd ff0e 	bl	8004796 <vListInsert>
 800697a:	e015      	b.n	80069a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fd68 	bl	800645c <xTimerGenericCommand>
 800698c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d109      	bne.n	80069a8 <prvSwitchTimerLists+0x98>
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	e7fe      	b.n	80069a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1b2      	bne.n	8006918 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069b8:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <prvSwitchTimerLists+0xc4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <prvSwitchTimerLists+0xc0>)
 80069be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069c0:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <prvSwitchTimerLists+0xc4>)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	6013      	str	r3, [r2, #0]
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000d18 	.word	0x20000d18
 80069d4:	20000d1c 	.word	0x20000d1c

080069d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069de:	f000 f965 	bl	8006cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d120      	bne.n	8006a2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ea:	4814      	ldr	r0, [pc, #80]	; (8006a3c <prvCheckForValidListAndQueue+0x64>)
 80069ec:	f7fd fe82 	bl	80046f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069f0:	4813      	ldr	r0, [pc, #76]	; (8006a40 <prvCheckForValidListAndQueue+0x68>)
 80069f2:	f7fd fe7f 	bl	80046f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <prvCheckForValidListAndQueue+0x6c>)
 80069f8:	4a10      	ldr	r2, [pc, #64]	; (8006a3c <prvCheckForValidListAndQueue+0x64>)
 80069fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069fc:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <prvCheckForValidListAndQueue+0x70>)
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <prvCheckForValidListAndQueue+0x68>)
 8006a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <prvCheckForValidListAndQueue+0x74>)
 8006a08:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <prvCheckForValidListAndQueue+0x78>)
 8006a0a:	2110      	movs	r1, #16
 8006a0c:	200a      	movs	r0, #10
 8006a0e:	f7fd ff8d 	bl	800492c <xQueueGenericCreateStatic>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	490b      	ldr	r1, [pc, #44]	; (8006a54 <prvCheckForValidListAndQueue+0x7c>)
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fc4e 	bl	80052c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a2c:	f000 f96c 	bl	8006d08 <vPortExitCritical>
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000d20 	.word	0x20000d20
 8006a3c:	20000cf0 	.word	0x20000cf0
 8006a40:	20000d04 	.word	0x20000d04
 8006a44:	20000d18 	.word	0x20000d18
 8006a48:	20000d1c 	.word	0x20000d1c
 8006a4c:	20000dcc 	.word	0x20000dcc
 8006a50:	20000d2c 	.word	0x20000d2c
 8006a54:	080087ec 	.word	0x080087ec

08006a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3b04      	subs	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <pxPortInitialiseStack+0x64>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b14      	subs	r3, #20
 8006a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f06f 0202 	mvn.w	r2, #2
 8006aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3b20      	subs	r3, #32
 8006aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	08006ac1 	.word	0x08006ac1

08006ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006aca:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <prvTaskExitError+0x50>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d009      	beq.n	8006ae8 <prvTaskExitError+0x28>
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e7fe      	b.n	8006ae6 <prvTaskExitError+0x26>
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006afa:	bf00      	nop
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0fc      	beq.n	8006afc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	200000ac 	.word	0x200000ac
	...

08006b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <pxCurrentTCBConst2>)
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f380 8809 	msr	PSP, r0
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	4770      	bx	lr
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst2>:
 8006b40:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <prvPortStartFirstTask+0x24>)
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f380 8808 	msr	MSP, r0
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8814 	msr	CONTROL, r0
 8006b5a:	b662      	cpsie	i
 8006b5c:	b661      	cpsie	f
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	df00      	svc	0
 8006b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed08 	.word	0xe000ed08

08006b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b76:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <xPortStartScheduler+0x118>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a44      	ldr	r2, [pc, #272]	; (8006c8c <xPortStartScheduler+0x11c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d109      	bne.n	8006b94 <xPortStartScheduler+0x24>
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	e7fe      	b.n	8006b92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b94:	4b3c      	ldr	r3, [pc, #240]	; (8006c88 <xPortStartScheduler+0x118>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d109      	bne.n	8006bb2 <xPortStartScheduler+0x42>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e7fe      	b.n	8006bb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <xPortStartScheduler+0x124>)
 8006bb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	22ff      	movs	r2, #255	; 0xff
 8006bc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	4b30      	ldr	r3, [pc, #192]	; (8006c98 <xPortStartScheduler+0x128>)
 8006bd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bda:	4b30      	ldr	r3, [pc, #192]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bdc:	2207      	movs	r2, #7
 8006bde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be0:	e009      	b.n	8006bf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006be2:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4a2c      	ldr	r2, [pc, #176]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d0ef      	beq.n	8006be2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1c3 0307 	rsb	r3, r3, #7
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d009      	beq.n	8006c22 <xPortStartScheduler+0xb2>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	e7fe      	b.n	8006c20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	4a1c      	ldr	r2, [pc, #112]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c58:	f000 f9a2 	bl	8006fa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c5c:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c62:	f000 f9d9 	bl	8007018 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c72:	f7ff ff69 	bl	8006b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c76:	f7ff f815 	bl	8005ca4 <vTaskSwitchContext>
	prvTaskExitError();
 8006c7a:	f7ff ff21 	bl	8006ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	e000ed00 	.word	0xe000ed00
 8006c8c:	410fc271 	.word	0x410fc271
 8006c90:	410fc270 	.word	0x410fc270
 8006c94:	e000e400 	.word	0xe000e400
 8006c98:	20000e28 	.word	0x20000e28
 8006c9c:	20000e2c 	.word	0x20000e2c
 8006ca0:	e000ed20 	.word	0xe000ed20
 8006ca4:	200000ac 	.word	0x200000ac
 8006ca8:	e000ef34 	.word	0xe000ef34

08006cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <vPortEnterCritical+0x54>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a0d      	ldr	r2, [pc, #52]	; (8006d00 <vPortEnterCritical+0x54>)
 8006ccc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <vPortEnterCritical+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d10e      	bne.n	8006cf4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortEnterCritical+0x58>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <vPortEnterCritical+0x48>
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	e7fe      	b.n	8006cf2 <vPortEnterCritical+0x46>
	}
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	200000ac 	.word	0x200000ac
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d0e:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <vPortExitCritical+0x22>
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e7fe      	b.n	8006d28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d34:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <vPortExitCritical+0x3e>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	200000ac 	.word	0x200000ac
	...

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f01e 0f10 	tst.w	lr, #16
 8006d70:	bf08      	it	eq
 8006d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d84:	f380 8811 	msr	BASEPRI, r0
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f7fe ff88 	bl	8005ca4 <vTaskSwitchContext>
 8006d94:	f04f 0000 	mov.w	r0, #0
 8006d98:	f380 8811 	msr	BASEPRI, r0
 8006d9c:	bc09      	pop	{r0, r3}
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da6:	f01e 0f10 	tst.w	lr, #16
 8006daa:	bf08      	it	eq
 8006dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006db0:	f380 8809 	msr	PSP, r0
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst>:
 8006dc0:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006de0:	f7fe fea8 	bl	8005b34 <xTaskIncrementTick>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <xPortSysTickHandler+0x3c>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <vPortSuppressTicksAndSleep+0x180>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d902      	bls.n	8006e20 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8006e1a:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <vPortSuppressTicksAndSleep+0x180>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8006e20:	4b5a      	ldr	r3, [pc, #360]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a59      	ldr	r2, [pc, #356]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8006e2c:	4b58      	ldr	r3, [pc, #352]	; (8006f90 <vPortSuppressTicksAndSleep+0x188>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	4957      	ldr	r1, [pc, #348]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006e36:	6809      	ldr	r1, [r1, #0]
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8006e40:	4b55      	ldr	r3, [pc, #340]	; (8006f98 <vPortSuppressTicksAndSleep+0x190>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d904      	bls.n	8006e54 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8006e4a:	4b53      	ldr	r3, [pc, #332]	; (8006f98 <vPortSuppressTicksAndSleep+0x190>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8006e54:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8006e56:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8006e5a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8006e5e:	f7ff f8ef 	bl	8006040 <eTaskConfirmSleepModeStatus>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d110      	bne.n	8006e8a <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006e68:	4b49      	ldr	r3, [pc, #292]	; (8006f90 <vPortSuppressTicksAndSleep+0x188>)
 8006e6a:	4a4c      	ldr	r2, [pc, #304]	; (8006f9c <vPortSuppressTicksAndSleep+0x194>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006e70:	4b46      	ldr	r3, [pc, #280]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a45      	ldr	r2, [pc, #276]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006e7c:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a46      	ldr	r2, [pc, #280]	; (8006f9c <vPortSuppressTicksAndSleep+0x194>)
 8006e82:	3b01      	subs	r3, #1
 8006e84:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8006e86:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8006e88:	e07a      	b.n	8006f80 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8006e8a:	4a44      	ldr	r2, [pc, #272]	; (8006f9c <vPortSuppressTicksAndSleep+0x194>)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e90:	4b3f      	ldr	r3, [pc, #252]	; (8006f90 <vPortSuppressTicksAndSleep+0x188>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006e96:	4b3d      	ldr	r3, [pc, #244]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a3c      	ldr	r2, [pc, #240]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7f9 ff8e 	bl	8000dcc <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8006eb6:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8006eba:	bf30      	wfi
				__asm volatile( "isb" );
 8006ebc:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7f9 ff8c 	bl	8000de0 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8006ec8:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8006eca:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006ece:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8006ed2:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8006ed4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006ed8:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8006edc:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006ede:	2206      	movs	r2, #6
 8006ee0:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8006ee2:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01d      	beq.n	8006f2a <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8006eee:	4b29      	ldr	r3, [pc, #164]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <vPortSuppressTicksAndSleep+0x188>)
 8006ef4:	6819      	ldr	r1, [r3, #0]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	1acb      	subs	r3, r1, r3
 8006efa:	4413      	add	r3, r2
 8006efc:	3b01      	subs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <vPortSuppressTicksAndSleep+0x190>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d304      	bcc.n	8006f14 <vPortSuppressTicksAndSleep+0x10c>
 8006f0a:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8006f14:	4b1f      	ldr	r3, [pc, #124]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <vPortSuppressTicksAndSleep+0x194>)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	e018      	b.n	8006f5c <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	fb02 f203 	mul.w	r2, r2, r3
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <vPortSuppressTicksAndSleep+0x188>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8006f3c:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	4a11      	ldr	r2, [pc, #68]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	fb02 f203 	mul.w	r2, r2, r3
 8006f54:	4911      	ldr	r1, [pc, #68]	; (8006f9c <vPortSuppressTicksAndSleep+0x194>)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <vPortSuppressTicksAndSleep+0x188>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006f62:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <vPortSuppressTicksAndSleep+0x184>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8006f6e:	69b8      	ldr	r0, [r7, #24]
 8006f70:	f7fe fdba 	bl	8005ae8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006f74:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <vPortSuppressTicksAndSleep+0x18c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <vPortSuppressTicksAndSleep+0x194>)
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8006f7e:	b662      	cpsie	i
	}
 8006f80:	bf00      	nop
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000e20 	.word	0x20000e20
 8006f8c:	e000e010 	.word	0xe000e010
 8006f90:	e000e018 	.word	0xe000e018
 8006f94:	20000e1c 	.word	0x20000e1c
 8006f98:	20000e24 	.word	0x20000e24
 8006f9c:	e000e014 	.word	0xe000e014

08006fa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8006fa4:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <vPortSetupTimerInterrupt+0x58>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <vPortSetupTimerInterrupt+0x5c>)
 8006faa:	fba2 2303 	umull	r2, r3, r2, r3
 8006fae:	099b      	lsrs	r3, r3, #6
 8006fb0:	4a13      	ldr	r2, [pc, #76]	; (8007000 <vPortSetupTimerInterrupt+0x60>)
 8006fb2:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <vPortSetupTimerInterrupt+0x60>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	4a10      	ldr	r2, [pc, #64]	; (8007004 <vPortSetupTimerInterrupt+0x64>)
 8006fc2:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8006fc4:	4b10      	ldr	r3, [pc, #64]	; (8007008 <vPortSetupTimerInterrupt+0x68>)
 8006fc6:	222d      	movs	r2, #45	; 0x2d
 8006fc8:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fca:	4b10      	ldr	r3, [pc, #64]	; (800700c <vPortSetupTimerInterrupt+0x6c>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <vPortSetupTimerInterrupt+0x70>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fd6:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <vPortSetupTimerInterrupt+0x58>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <vPortSetupTimerInterrupt+0x5c>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	099b      	lsrs	r3, r3, #6
 8006fe2:	4a0c      	ldr	r2, [pc, #48]	; (8007014 <vPortSetupTimerInterrupt+0x74>)
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fe8:	4b08      	ldr	r3, [pc, #32]	; (800700c <vPortSetupTimerInterrupt+0x6c>)
 8006fea:	2207      	movs	r2, #7
 8006fec:	601a      	str	r2, [r3, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	200000a0 	.word	0x200000a0
 8006ffc:	10624dd3 	.word	0x10624dd3
 8007000:	20000e1c 	.word	0x20000e1c
 8007004:	20000e20 	.word	0x20000e20
 8007008:	20000e24 	.word	0x20000e24
 800700c:	e000e010 	.word	0xe000e010
 8007010:	e000e018 	.word	0xe000e018
 8007014:	e000e014 	.word	0xe000e014

08007018 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007018:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007028 <vPortEnableVFP+0x10>
 800701c:	6801      	ldr	r1, [r0, #0]
 800701e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007022:	6001      	str	r1, [r0, #0]
 8007024:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007026:	bf00      	nop
 8007028:	e000ed88 	.word	0xe000ed88

0800702c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007032:	f3ef 8305 	mrs	r3, IPSR
 8007036:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b0f      	cmp	r3, #15
 800703c:	d913      	bls.n	8007066 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800703e:	4a16      	ldr	r2, [pc, #88]	; (8007098 <vPortValidateInterruptPriority+0x6c>)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007048:	4b14      	ldr	r3, [pc, #80]	; (800709c <vPortValidateInterruptPriority+0x70>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	7afa      	ldrb	r2, [r7, #11]
 800704e:	429a      	cmp	r2, r3
 8007050:	d209      	bcs.n	8007066 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	607b      	str	r3, [r7, #4]
 8007064:	e7fe      	b.n	8007064 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007066:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <vPortValidateInterruptPriority+0x74>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <vPortValidateInterruptPriority+0x78>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d909      	bls.n	800708a <vPortValidateInterruptPriority+0x5e>
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	e7fe      	b.n	8007088 <vPortValidateInterruptPriority+0x5c>
	}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	e000e3f0 	.word	0xe000e3f0
 800709c:	20000e28 	.word	0x20000e28
 80070a0:	e000ed0c 	.word	0xe000ed0c
 80070a4:	20000e2c 	.word	0x20000e2c

080070a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070b4:	f7fe fc14 	bl	80058e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070b8:	4b57      	ldr	r3, [pc, #348]	; (8007218 <pvPortMalloc+0x170>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070c0:	f000 f90c 	bl	80072dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070c4:	4b55      	ldr	r3, [pc, #340]	; (800721c <pvPortMalloc+0x174>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 808c 	bne.w	80071ea <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01c      	beq.n	8007112 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80070d8:	2208      	movs	r2, #8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d013      	beq.n	8007112 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f023 0307 	bic.w	r3, r3, #7
 80070f0:	3308      	adds	r3, #8
 80070f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <pvPortMalloc+0x6a>
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e7fe      	b.n	8007110 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d068      	beq.n	80071ea <pvPortMalloc+0x142>
 8007118:	4b41      	ldr	r3, [pc, #260]	; (8007220 <pvPortMalloc+0x178>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d863      	bhi.n	80071ea <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007122:	4b40      	ldr	r3, [pc, #256]	; (8007224 <pvPortMalloc+0x17c>)
 8007124:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007126:	4b3f      	ldr	r3, [pc, #252]	; (8007224 <pvPortMalloc+0x17c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800712c:	e004      	b.n	8007138 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	d903      	bls.n	800714a <pvPortMalloc+0xa2>
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f1      	bne.n	800712e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800714a:	4b33      	ldr	r3, [pc, #204]	; (8007218 <pvPortMalloc+0x170>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007150:	429a      	cmp	r2, r3
 8007152:	d04a      	beq.n	80071ea <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2208      	movs	r2, #8
 800715a:	4413      	add	r3, r2
 800715c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	2308      	movs	r3, #8
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	429a      	cmp	r2, r3
 8007174:	d91e      	bls.n	80071b4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4413      	add	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <pvPortMalloc+0xf4>
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e7fe      	b.n	800719a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ae:	69b8      	ldr	r0, [r7, #24]
 80071b0:	f000 f8f6 	bl	80073a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <pvPortMalloc+0x178>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	4a18      	ldr	r2, [pc, #96]	; (8007220 <pvPortMalloc+0x178>)
 80071c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071c2:	4b17      	ldr	r3, [pc, #92]	; (8007220 <pvPortMalloc+0x178>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b18      	ldr	r3, [pc, #96]	; (8007228 <pvPortMalloc+0x180>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d203      	bcs.n	80071d6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071ce:	4b14      	ldr	r3, [pc, #80]	; (8007220 <pvPortMalloc+0x178>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <pvPortMalloc+0x180>)
 80071d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <pvPortMalloc+0x174>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	431a      	orrs	r2, r3
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071ea:	f7fe fbbf 	bl	800596c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d009      	beq.n	800720c <pvPortMalloc+0x164>
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e7fe      	b.n	800720a <pvPortMalloc+0x162>
	return pvReturn;
 800720c:	69fb      	ldr	r3, [r7, #28]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3728      	adds	r7, #40	; 0x28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20004a38 	.word	0x20004a38
 800721c:	20004a44 	.word	0x20004a44
 8007220:	20004a3c 	.word	0x20004a3c
 8007224:	20004a30 	.word	0x20004a30
 8007228:	20004a40 	.word	0x20004a40

0800722c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d046      	beq.n	80072cc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800723e:	2308      	movs	r3, #8
 8007240:	425b      	negs	r3, r3
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4413      	add	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <vPortFree+0xa8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4013      	ands	r3, r2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <vPortFree+0x42>
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e7fe      	b.n	800726c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <vPortFree+0x5e>
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	e7fe      	b.n	8007288 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <vPortFree+0xa8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d019      	beq.n	80072cc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d115      	bne.n	80072cc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <vPortFree+0xa8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	401a      	ands	r2, r3
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072b0:	f7fe fb16 	bl	80058e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <vPortFree+0xac>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4413      	add	r3, r2
 80072be:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <vPortFree+0xac>)
 80072c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f000 f86c 	bl	80073a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072c8:	f7fe fb50 	bl	800596c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072cc:	bf00      	nop
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20004a44 	.word	0x20004a44
 80072d8:	20004a3c 	.word	0x20004a3c

080072dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072e8:	4b27      	ldr	r3, [pc, #156]	; (8007388 <prvHeapInit+0xac>)
 80072ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3307      	adds	r3, #7
 80072fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0307 	bic.w	r3, r3, #7
 8007302:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <prvHeapInit+0xac>)
 800730c:	4413      	add	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <prvHeapInit+0xb0>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800731a:	4b1c      	ldr	r3, [pc, #112]	; (800738c <prvHeapInit+0xb0>)
 800731c:	2200      	movs	r2, #0
 800731e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	4413      	add	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007328:	2208      	movs	r2, #8
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0307 	bic.w	r3, r3, #7
 8007336:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a15      	ldr	r2, [pc, #84]	; (8007390 <prvHeapInit+0xb4>)
 800733c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <prvHeapInit+0xb4>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <prvHeapInit+0xb4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	1ad2      	subs	r2, r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <prvHeapInit+0xb4>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <prvHeapInit+0xb8>)
 800736a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4a09      	ldr	r2, [pc, #36]	; (8007398 <prvHeapInit+0xbc>)
 8007372:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <prvHeapInit+0xc0>)
 8007376:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800737a:	601a      	str	r2, [r3, #0]
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	20000e30 	.word	0x20000e30
 800738c:	20004a30 	.word	0x20004a30
 8007390:	20004a38 	.word	0x20004a38
 8007394:	20004a40 	.word	0x20004a40
 8007398:	20004a3c 	.word	0x20004a3c
 800739c:	20004a44 	.word	0x20004a44

080073a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073a8:	4b28      	ldr	r3, [pc, #160]	; (800744c <prvInsertBlockIntoFreeList+0xac>)
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e002      	b.n	80073b4 <prvInsertBlockIntoFreeList+0x14>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d8f7      	bhi.n	80073ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d108      	bne.n	80073e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	441a      	add	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	441a      	add	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d118      	bne.n	8007428 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <prvInsertBlockIntoFreeList+0xb0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d00d      	beq.n	800741e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	441a      	add	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	e008      	b.n	8007430 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <prvInsertBlockIntoFreeList+0xb0>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e003      	b.n	8007430 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d002      	beq.n	800743e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20004a30 	.word	0x20004a30
 8007450:	20004a38 	.word	0x20004a38

08007454 <__errno>:
 8007454:	4b01      	ldr	r3, [pc, #4]	; (800745c <__errno+0x8>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	200000b0 	.word	0x200000b0

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4e0d      	ldr	r6, [pc, #52]	; (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	; (800749c <__libc_init_array+0x3c>)
 8007466:	1ba4      	subs	r4, r4, r6
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2500      	movs	r5, #0
 800746c:	42a5      	cmp	r5, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4e0b      	ldr	r6, [pc, #44]	; (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	; (80074a4 <__libc_init_array+0x44>)
 8007474:	f001 f92e 	bl	80086d4 <_init>
 8007478:	1ba4      	subs	r4, r4, r6
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2500      	movs	r5, #0
 800747e:	42a5      	cmp	r5, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007488:	4798      	blx	r3
 800748a:	3501      	adds	r5, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007492:	4798      	blx	r3
 8007494:	3501      	adds	r5, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	080089a4 	.word	0x080089a4
 800749c:	080089a4 	.word	0x080089a4
 80074a0:	080089a4 	.word	0x080089a4
 80074a4:	080089a8 	.word	0x080089a8

080074a8 <memcpy>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	1e43      	subs	r3, r0, #1
 80074ac:	440a      	add	r2, r1
 80074ae:	4291      	cmp	r1, r2
 80074b0:	d100      	bne.n	80074b4 <memcpy+0xc>
 80074b2:	bd10      	pop	{r4, pc}
 80074b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074bc:	e7f7      	b.n	80074ae <memcpy+0x6>

080074be <memset>:
 80074be:	4402      	add	r2, r0
 80074c0:	4603      	mov	r3, r0
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d100      	bne.n	80074c8 <memset+0xa>
 80074c6:	4770      	bx	lr
 80074c8:	f803 1b01 	strb.w	r1, [r3], #1
 80074cc:	e7f9      	b.n	80074c2 <memset+0x4>
	...

080074d0 <_free_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4605      	mov	r5, r0
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d045      	beq.n	8007564 <_free_r+0x94>
 80074d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074dc:	1f0c      	subs	r4, r1, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfb8      	it	lt
 80074e2:	18e4      	addlt	r4, r4, r3
 80074e4:	f000 fbe6 	bl	8007cb4 <__malloc_lock>
 80074e8:	4a1f      	ldr	r2, [pc, #124]	; (8007568 <_free_r+0x98>)
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	4610      	mov	r0, r2
 80074ee:	b933      	cbnz	r3, 80074fe <_free_r+0x2e>
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6014      	str	r4, [r2, #0]
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fa:	f000 bbdc 	b.w	8007cb6 <__malloc_unlock>
 80074fe:	42a3      	cmp	r3, r4
 8007500:	d90c      	bls.n	800751c <_free_r+0x4c>
 8007502:	6821      	ldr	r1, [r4, #0]
 8007504:	1862      	adds	r2, r4, r1
 8007506:	4293      	cmp	r3, r2
 8007508:	bf04      	itt	eq
 800750a:	681a      	ldreq	r2, [r3, #0]
 800750c:	685b      	ldreq	r3, [r3, #4]
 800750e:	6063      	str	r3, [r4, #4]
 8007510:	bf04      	itt	eq
 8007512:	1852      	addeq	r2, r2, r1
 8007514:	6022      	streq	r2, [r4, #0]
 8007516:	6004      	str	r4, [r0, #0]
 8007518:	e7ec      	b.n	80074f4 <_free_r+0x24>
 800751a:	4613      	mov	r3, r2
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	b10a      	cbz	r2, 8007524 <_free_r+0x54>
 8007520:	42a2      	cmp	r2, r4
 8007522:	d9fa      	bls.n	800751a <_free_r+0x4a>
 8007524:	6819      	ldr	r1, [r3, #0]
 8007526:	1858      	adds	r0, r3, r1
 8007528:	42a0      	cmp	r0, r4
 800752a:	d10b      	bne.n	8007544 <_free_r+0x74>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	4401      	add	r1, r0
 8007530:	1858      	adds	r0, r3, r1
 8007532:	4282      	cmp	r2, r0
 8007534:	6019      	str	r1, [r3, #0]
 8007536:	d1dd      	bne.n	80074f4 <_free_r+0x24>
 8007538:	6810      	ldr	r0, [r2, #0]
 800753a:	6852      	ldr	r2, [r2, #4]
 800753c:	605a      	str	r2, [r3, #4]
 800753e:	4401      	add	r1, r0
 8007540:	6019      	str	r1, [r3, #0]
 8007542:	e7d7      	b.n	80074f4 <_free_r+0x24>
 8007544:	d902      	bls.n	800754c <_free_r+0x7c>
 8007546:	230c      	movs	r3, #12
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	e7d3      	b.n	80074f4 <_free_r+0x24>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	1821      	adds	r1, r4, r0
 8007550:	428a      	cmp	r2, r1
 8007552:	bf04      	itt	eq
 8007554:	6811      	ldreq	r1, [r2, #0]
 8007556:	6852      	ldreq	r2, [r2, #4]
 8007558:	6062      	str	r2, [r4, #4]
 800755a:	bf04      	itt	eq
 800755c:	1809      	addeq	r1, r1, r0
 800755e:	6021      	streq	r1, [r4, #0]
 8007560:	605c      	str	r4, [r3, #4]
 8007562:	e7c7      	b.n	80074f4 <_free_r+0x24>
 8007564:	bd38      	pop	{r3, r4, r5, pc}
 8007566:	bf00      	nop
 8007568:	20004a48 	.word	0x20004a48

0800756c <_malloc_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	1ccd      	adds	r5, r1, #3
 8007570:	f025 0503 	bic.w	r5, r5, #3
 8007574:	3508      	adds	r5, #8
 8007576:	2d0c      	cmp	r5, #12
 8007578:	bf38      	it	cc
 800757a:	250c      	movcc	r5, #12
 800757c:	2d00      	cmp	r5, #0
 800757e:	4606      	mov	r6, r0
 8007580:	db01      	blt.n	8007586 <_malloc_r+0x1a>
 8007582:	42a9      	cmp	r1, r5
 8007584:	d903      	bls.n	800758e <_malloc_r+0x22>
 8007586:	230c      	movs	r3, #12
 8007588:	6033      	str	r3, [r6, #0]
 800758a:	2000      	movs	r0, #0
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	f000 fb91 	bl	8007cb4 <__malloc_lock>
 8007592:	4a21      	ldr	r2, [pc, #132]	; (8007618 <_malloc_r+0xac>)
 8007594:	6814      	ldr	r4, [r2, #0]
 8007596:	4621      	mov	r1, r4
 8007598:	b991      	cbnz	r1, 80075c0 <_malloc_r+0x54>
 800759a:	4c20      	ldr	r4, [pc, #128]	; (800761c <_malloc_r+0xb0>)
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	b91b      	cbnz	r3, 80075a8 <_malloc_r+0x3c>
 80075a0:	4630      	mov	r0, r6
 80075a2:	f000 f8b9 	bl	8007718 <_sbrk_r>
 80075a6:	6020      	str	r0, [r4, #0]
 80075a8:	4629      	mov	r1, r5
 80075aa:	4630      	mov	r0, r6
 80075ac:	f000 f8b4 	bl	8007718 <_sbrk_r>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d124      	bne.n	80075fe <_malloc_r+0x92>
 80075b4:	230c      	movs	r3, #12
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 fb7c 	bl	8007cb6 <__malloc_unlock>
 80075be:	e7e4      	b.n	800758a <_malloc_r+0x1e>
 80075c0:	680b      	ldr	r3, [r1, #0]
 80075c2:	1b5b      	subs	r3, r3, r5
 80075c4:	d418      	bmi.n	80075f8 <_malloc_r+0x8c>
 80075c6:	2b0b      	cmp	r3, #11
 80075c8:	d90f      	bls.n	80075ea <_malloc_r+0x7e>
 80075ca:	600b      	str	r3, [r1, #0]
 80075cc:	50cd      	str	r5, [r1, r3]
 80075ce:	18cc      	adds	r4, r1, r3
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 fb70 	bl	8007cb6 <__malloc_unlock>
 80075d6:	f104 000b 	add.w	r0, r4, #11
 80075da:	1d23      	adds	r3, r4, #4
 80075dc:	f020 0007 	bic.w	r0, r0, #7
 80075e0:	1ac3      	subs	r3, r0, r3
 80075e2:	d0d3      	beq.n	800758c <_malloc_r+0x20>
 80075e4:	425a      	negs	r2, r3
 80075e6:	50e2      	str	r2, [r4, r3]
 80075e8:	e7d0      	b.n	800758c <_malloc_r+0x20>
 80075ea:	428c      	cmp	r4, r1
 80075ec:	684b      	ldr	r3, [r1, #4]
 80075ee:	bf16      	itet	ne
 80075f0:	6063      	strne	r3, [r4, #4]
 80075f2:	6013      	streq	r3, [r2, #0]
 80075f4:	460c      	movne	r4, r1
 80075f6:	e7eb      	b.n	80075d0 <_malloc_r+0x64>
 80075f8:	460c      	mov	r4, r1
 80075fa:	6849      	ldr	r1, [r1, #4]
 80075fc:	e7cc      	b.n	8007598 <_malloc_r+0x2c>
 80075fe:	1cc4      	adds	r4, r0, #3
 8007600:	f024 0403 	bic.w	r4, r4, #3
 8007604:	42a0      	cmp	r0, r4
 8007606:	d005      	beq.n	8007614 <_malloc_r+0xa8>
 8007608:	1a21      	subs	r1, r4, r0
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f884 	bl	8007718 <_sbrk_r>
 8007610:	3001      	adds	r0, #1
 8007612:	d0cf      	beq.n	80075b4 <_malloc_r+0x48>
 8007614:	6025      	str	r5, [r4, #0]
 8007616:	e7db      	b.n	80075d0 <_malloc_r+0x64>
 8007618:	20004a48 	.word	0x20004a48
 800761c:	20004a4c 	.word	0x20004a4c

08007620 <iprintf>:
 8007620:	b40f      	push	{r0, r1, r2, r3}
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <iprintf+0x2c>)
 8007624:	b513      	push	{r0, r1, r4, lr}
 8007626:	681c      	ldr	r4, [r3, #0]
 8007628:	b124      	cbz	r4, 8007634 <iprintf+0x14>
 800762a:	69a3      	ldr	r3, [r4, #24]
 800762c:	b913      	cbnz	r3, 8007634 <iprintf+0x14>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fa52 	bl	8007ad8 <__sinit>
 8007634:	ab05      	add	r3, sp, #20
 8007636:	9a04      	ldr	r2, [sp, #16]
 8007638:	68a1      	ldr	r1, [r4, #8]
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fcb7 	bl	8007fb0 <_vfiprintf_r>
 8007642:	b002      	add	sp, #8
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007648:	b004      	add	sp, #16
 800764a:	4770      	bx	lr
 800764c:	200000b0 	.word	0x200000b0

08007650 <_puts_r>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	460e      	mov	r6, r1
 8007654:	4605      	mov	r5, r0
 8007656:	b118      	cbz	r0, 8007660 <_puts_r+0x10>
 8007658:	6983      	ldr	r3, [r0, #24]
 800765a:	b90b      	cbnz	r3, 8007660 <_puts_r+0x10>
 800765c:	f000 fa3c 	bl	8007ad8 <__sinit>
 8007660:	69ab      	ldr	r3, [r5, #24]
 8007662:	68ac      	ldr	r4, [r5, #8]
 8007664:	b913      	cbnz	r3, 800766c <_puts_r+0x1c>
 8007666:	4628      	mov	r0, r5
 8007668:	f000 fa36 	bl	8007ad8 <__sinit>
 800766c:	4b23      	ldr	r3, [pc, #140]	; (80076fc <_puts_r+0xac>)
 800766e:	429c      	cmp	r4, r3
 8007670:	d117      	bne.n	80076a2 <_puts_r+0x52>
 8007672:	686c      	ldr	r4, [r5, #4]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	071b      	lsls	r3, r3, #28
 8007678:	d51d      	bpl.n	80076b6 <_puts_r+0x66>
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	b1db      	cbz	r3, 80076b6 <_puts_r+0x66>
 800767e:	3e01      	subs	r6, #1
 8007680:	68a3      	ldr	r3, [r4, #8]
 8007682:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007686:	3b01      	subs	r3, #1
 8007688:	60a3      	str	r3, [r4, #8]
 800768a:	b9e9      	cbnz	r1, 80076c8 <_puts_r+0x78>
 800768c:	2b00      	cmp	r3, #0
 800768e:	da2e      	bge.n	80076ee <_puts_r+0x9e>
 8007690:	4622      	mov	r2, r4
 8007692:	210a      	movs	r1, #10
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f86f 	bl	8007778 <__swbuf_r>
 800769a:	3001      	adds	r0, #1
 800769c:	d011      	beq.n	80076c2 <_puts_r+0x72>
 800769e:	200a      	movs	r0, #10
 80076a0:	e011      	b.n	80076c6 <_puts_r+0x76>
 80076a2:	4b17      	ldr	r3, [pc, #92]	; (8007700 <_puts_r+0xb0>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	d101      	bne.n	80076ac <_puts_r+0x5c>
 80076a8:	68ac      	ldr	r4, [r5, #8]
 80076aa:	e7e3      	b.n	8007674 <_puts_r+0x24>
 80076ac:	4b15      	ldr	r3, [pc, #84]	; (8007704 <_puts_r+0xb4>)
 80076ae:	429c      	cmp	r4, r3
 80076b0:	bf08      	it	eq
 80076b2:	68ec      	ldreq	r4, [r5, #12]
 80076b4:	e7de      	b.n	8007674 <_puts_r+0x24>
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 f8af 	bl	800781c <__swsetup_r>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d0dd      	beq.n	800767e <_puts_r+0x2e>
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da04      	bge.n	80076d6 <_puts_r+0x86>
 80076cc:	69a2      	ldr	r2, [r4, #24]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	dc06      	bgt.n	80076e0 <_puts_r+0x90>
 80076d2:	290a      	cmp	r1, #10
 80076d4:	d004      	beq.n	80076e0 <_puts_r+0x90>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	7019      	strb	r1, [r3, #0]
 80076de:	e7cf      	b.n	8007680 <_puts_r+0x30>
 80076e0:	4622      	mov	r2, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f848 	bl	8007778 <__swbuf_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d1c9      	bne.n	8007680 <_puts_r+0x30>
 80076ec:	e7e9      	b.n	80076c2 <_puts_r+0x72>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	200a      	movs	r0, #10
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	6022      	str	r2, [r4, #0]
 80076f6:	7018      	strb	r0, [r3, #0]
 80076f8:	e7e5      	b.n	80076c6 <_puts_r+0x76>
 80076fa:	bf00      	nop
 80076fc:	08008928 	.word	0x08008928
 8007700:	08008948 	.word	0x08008948
 8007704:	08008908 	.word	0x08008908

08007708 <puts>:
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <puts+0xc>)
 800770a:	4601      	mov	r1, r0
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	f7ff bf9f 	b.w	8007650 <_puts_r>
 8007712:	bf00      	nop
 8007714:	200000b0 	.word	0x200000b0

08007718 <_sbrk_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4c06      	ldr	r4, [pc, #24]	; (8007734 <_sbrk_r+0x1c>)
 800771c:	2300      	movs	r3, #0
 800771e:	4605      	mov	r5, r0
 8007720:	4608      	mov	r0, r1
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	f7fa fd5c 	bl	80021e0 <_sbrk>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_sbrk_r+0x1a>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	b103      	cbz	r3, 8007732 <_sbrk_r+0x1a>
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20004cbc 	.word	0x20004cbc

08007738 <siprintf>:
 8007738:	b40e      	push	{r1, r2, r3}
 800773a:	b500      	push	{lr}
 800773c:	b09c      	sub	sp, #112	; 0x70
 800773e:	ab1d      	add	r3, sp, #116	; 0x74
 8007740:	9002      	str	r0, [sp, #8]
 8007742:	9006      	str	r0, [sp, #24]
 8007744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007748:	4809      	ldr	r0, [pc, #36]	; (8007770 <siprintf+0x38>)
 800774a:	9107      	str	r1, [sp, #28]
 800774c:	9104      	str	r1, [sp, #16]
 800774e:	4909      	ldr	r1, [pc, #36]	; (8007774 <siprintf+0x3c>)
 8007750:	f853 2b04 	ldr.w	r2, [r3], #4
 8007754:	9105      	str	r1, [sp, #20]
 8007756:	6800      	ldr	r0, [r0, #0]
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	a902      	add	r1, sp, #8
 800775c:	f000 fb06 	bl	8007d6c <_svfiprintf_r>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	b01c      	add	sp, #112	; 0x70
 8007768:	f85d eb04 	ldr.w	lr, [sp], #4
 800776c:	b003      	add	sp, #12
 800776e:	4770      	bx	lr
 8007770:	200000b0 	.word	0x200000b0
 8007774:	ffff0208 	.word	0xffff0208

08007778 <__swbuf_r>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	460e      	mov	r6, r1
 800777c:	4614      	mov	r4, r2
 800777e:	4605      	mov	r5, r0
 8007780:	b118      	cbz	r0, 800778a <__swbuf_r+0x12>
 8007782:	6983      	ldr	r3, [r0, #24]
 8007784:	b90b      	cbnz	r3, 800778a <__swbuf_r+0x12>
 8007786:	f000 f9a7 	bl	8007ad8 <__sinit>
 800778a:	4b21      	ldr	r3, [pc, #132]	; (8007810 <__swbuf_r+0x98>)
 800778c:	429c      	cmp	r4, r3
 800778e:	d12a      	bne.n	80077e6 <__swbuf_r+0x6e>
 8007790:	686c      	ldr	r4, [r5, #4]
 8007792:	69a3      	ldr	r3, [r4, #24]
 8007794:	60a3      	str	r3, [r4, #8]
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	071a      	lsls	r2, r3, #28
 800779a:	d52e      	bpl.n	80077fa <__swbuf_r+0x82>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	b363      	cbz	r3, 80077fa <__swbuf_r+0x82>
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1ac0      	subs	r0, r0, r3
 80077a6:	6963      	ldr	r3, [r4, #20]
 80077a8:	b2f6      	uxtb	r6, r6
 80077aa:	4283      	cmp	r3, r0
 80077ac:	4637      	mov	r7, r6
 80077ae:	dc04      	bgt.n	80077ba <__swbuf_r+0x42>
 80077b0:	4621      	mov	r1, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 f926 	bl	8007a04 <_fflush_r>
 80077b8:	bb28      	cbnz	r0, 8007806 <__swbuf_r+0x8e>
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	3b01      	subs	r3, #1
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	6022      	str	r2, [r4, #0]
 80077c6:	701e      	strb	r6, [r3, #0]
 80077c8:	6963      	ldr	r3, [r4, #20]
 80077ca:	3001      	adds	r0, #1
 80077cc:	4283      	cmp	r3, r0
 80077ce:	d004      	beq.n	80077da <__swbuf_r+0x62>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	07db      	lsls	r3, r3, #31
 80077d4:	d519      	bpl.n	800780a <__swbuf_r+0x92>
 80077d6:	2e0a      	cmp	r6, #10
 80077d8:	d117      	bne.n	800780a <__swbuf_r+0x92>
 80077da:	4621      	mov	r1, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 f911 	bl	8007a04 <_fflush_r>
 80077e2:	b190      	cbz	r0, 800780a <__swbuf_r+0x92>
 80077e4:	e00f      	b.n	8007806 <__swbuf_r+0x8e>
 80077e6:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <__swbuf_r+0x9c>)
 80077e8:	429c      	cmp	r4, r3
 80077ea:	d101      	bne.n	80077f0 <__swbuf_r+0x78>
 80077ec:	68ac      	ldr	r4, [r5, #8]
 80077ee:	e7d0      	b.n	8007792 <__swbuf_r+0x1a>
 80077f0:	4b09      	ldr	r3, [pc, #36]	; (8007818 <__swbuf_r+0xa0>)
 80077f2:	429c      	cmp	r4, r3
 80077f4:	bf08      	it	eq
 80077f6:	68ec      	ldreq	r4, [r5, #12]
 80077f8:	e7cb      	b.n	8007792 <__swbuf_r+0x1a>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f000 f80d 	bl	800781c <__swsetup_r>
 8007802:	2800      	cmp	r0, #0
 8007804:	d0cc      	beq.n	80077a0 <__swbuf_r+0x28>
 8007806:	f04f 37ff 	mov.w	r7, #4294967295
 800780a:	4638      	mov	r0, r7
 800780c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780e:	bf00      	nop
 8007810:	08008928 	.word	0x08008928
 8007814:	08008948 	.word	0x08008948
 8007818:	08008908 	.word	0x08008908

0800781c <__swsetup_r>:
 800781c:	4b32      	ldr	r3, [pc, #200]	; (80078e8 <__swsetup_r+0xcc>)
 800781e:	b570      	push	{r4, r5, r6, lr}
 8007820:	681d      	ldr	r5, [r3, #0]
 8007822:	4606      	mov	r6, r0
 8007824:	460c      	mov	r4, r1
 8007826:	b125      	cbz	r5, 8007832 <__swsetup_r+0x16>
 8007828:	69ab      	ldr	r3, [r5, #24]
 800782a:	b913      	cbnz	r3, 8007832 <__swsetup_r+0x16>
 800782c:	4628      	mov	r0, r5
 800782e:	f000 f953 	bl	8007ad8 <__sinit>
 8007832:	4b2e      	ldr	r3, [pc, #184]	; (80078ec <__swsetup_r+0xd0>)
 8007834:	429c      	cmp	r4, r3
 8007836:	d10f      	bne.n	8007858 <__swsetup_r+0x3c>
 8007838:	686c      	ldr	r4, [r5, #4]
 800783a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783e:	b29a      	uxth	r2, r3
 8007840:	0715      	lsls	r5, r2, #28
 8007842:	d42c      	bmi.n	800789e <__swsetup_r+0x82>
 8007844:	06d0      	lsls	r0, r2, #27
 8007846:	d411      	bmi.n	800786c <__swsetup_r+0x50>
 8007848:	2209      	movs	r2, #9
 800784a:	6032      	str	r2, [r6, #0]
 800784c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	f04f 30ff 	mov.w	r0, #4294967295
 8007856:	e03e      	b.n	80078d6 <__swsetup_r+0xba>
 8007858:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <__swsetup_r+0xd4>)
 800785a:	429c      	cmp	r4, r3
 800785c:	d101      	bne.n	8007862 <__swsetup_r+0x46>
 800785e:	68ac      	ldr	r4, [r5, #8]
 8007860:	e7eb      	b.n	800783a <__swsetup_r+0x1e>
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <__swsetup_r+0xd8>)
 8007864:	429c      	cmp	r4, r3
 8007866:	bf08      	it	eq
 8007868:	68ec      	ldreq	r4, [r5, #12]
 800786a:	e7e6      	b.n	800783a <__swsetup_r+0x1e>
 800786c:	0751      	lsls	r1, r2, #29
 800786e:	d512      	bpl.n	8007896 <__swsetup_r+0x7a>
 8007870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007872:	b141      	cbz	r1, 8007886 <__swsetup_r+0x6a>
 8007874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007878:	4299      	cmp	r1, r3
 800787a:	d002      	beq.n	8007882 <__swsetup_r+0x66>
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff fe27 	bl	80074d0 <_free_r>
 8007882:	2300      	movs	r3, #0
 8007884:	6363      	str	r3, [r4, #52]	; 0x34
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	2300      	movs	r3, #0
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f043 0308 	orr.w	r3, r3, #8
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	b94b      	cbnz	r3, 80078b6 <__swsetup_r+0x9a>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ac:	d003      	beq.n	80078b6 <__swsetup_r+0x9a>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 f9bf 	bl	8007c34 <__smakebuf_r>
 80078b6:	89a2      	ldrh	r2, [r4, #12]
 80078b8:	f012 0301 	ands.w	r3, r2, #1
 80078bc:	d00c      	beq.n	80078d8 <__swsetup_r+0xbc>
 80078be:	2300      	movs	r3, #0
 80078c0:	60a3      	str	r3, [r4, #8]
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	425b      	negs	r3, r3
 80078c6:	61a3      	str	r3, [r4, #24]
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	b953      	cbnz	r3, 80078e2 <__swsetup_r+0xc6>
 80078cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80078d4:	d1ba      	bne.n	800784c <__swsetup_r+0x30>
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	0792      	lsls	r2, r2, #30
 80078da:	bf58      	it	pl
 80078dc:	6963      	ldrpl	r3, [r4, #20]
 80078de:	60a3      	str	r3, [r4, #8]
 80078e0:	e7f2      	b.n	80078c8 <__swsetup_r+0xac>
 80078e2:	2000      	movs	r0, #0
 80078e4:	e7f7      	b.n	80078d6 <__swsetup_r+0xba>
 80078e6:	bf00      	nop
 80078e8:	200000b0 	.word	0x200000b0
 80078ec:	08008928 	.word	0x08008928
 80078f0:	08008948 	.word	0x08008948
 80078f4:	08008908 	.word	0x08008908

080078f8 <__sflush_r>:
 80078f8:	898a      	ldrh	r2, [r1, #12]
 80078fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	4605      	mov	r5, r0
 8007900:	0710      	lsls	r0, r2, #28
 8007902:	460c      	mov	r4, r1
 8007904:	d458      	bmi.n	80079b8 <__sflush_r+0xc0>
 8007906:	684b      	ldr	r3, [r1, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc05      	bgt.n	8007918 <__sflush_r+0x20>
 800790c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	dc02      	bgt.n	8007918 <__sflush_r+0x20>
 8007912:	2000      	movs	r0, #0
 8007914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800791a:	2e00      	cmp	r6, #0
 800791c:	d0f9      	beq.n	8007912 <__sflush_r+0x1a>
 800791e:	2300      	movs	r3, #0
 8007920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007924:	682f      	ldr	r7, [r5, #0]
 8007926:	6a21      	ldr	r1, [r4, #32]
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	d032      	beq.n	8007992 <__sflush_r+0x9a>
 800792c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	075a      	lsls	r2, r3, #29
 8007932:	d505      	bpl.n	8007940 <__sflush_r+0x48>
 8007934:	6863      	ldr	r3, [r4, #4]
 8007936:	1ac0      	subs	r0, r0, r3
 8007938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800793a:	b10b      	cbz	r3, 8007940 <__sflush_r+0x48>
 800793c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800793e:	1ac0      	subs	r0, r0, r3
 8007940:	2300      	movs	r3, #0
 8007942:	4602      	mov	r2, r0
 8007944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007946:	6a21      	ldr	r1, [r4, #32]
 8007948:	4628      	mov	r0, r5
 800794a:	47b0      	blx	r6
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	d106      	bne.n	8007960 <__sflush_r+0x68>
 8007952:	6829      	ldr	r1, [r5, #0]
 8007954:	291d      	cmp	r1, #29
 8007956:	d848      	bhi.n	80079ea <__sflush_r+0xf2>
 8007958:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <__sflush_r+0x108>)
 800795a:	40ca      	lsrs	r2, r1
 800795c:	07d6      	lsls	r6, r2, #31
 800795e:	d544      	bpl.n	80079ea <__sflush_r+0xf2>
 8007960:	2200      	movs	r2, #0
 8007962:	6062      	str	r2, [r4, #4]
 8007964:	04d9      	lsls	r1, r3, #19
 8007966:	6922      	ldr	r2, [r4, #16]
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	d504      	bpl.n	8007976 <__sflush_r+0x7e>
 800796c:	1c42      	adds	r2, r0, #1
 800796e:	d101      	bne.n	8007974 <__sflush_r+0x7c>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b903      	cbnz	r3, 8007976 <__sflush_r+0x7e>
 8007974:	6560      	str	r0, [r4, #84]	; 0x54
 8007976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007978:	602f      	str	r7, [r5, #0]
 800797a:	2900      	cmp	r1, #0
 800797c:	d0c9      	beq.n	8007912 <__sflush_r+0x1a>
 800797e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007982:	4299      	cmp	r1, r3
 8007984:	d002      	beq.n	800798c <__sflush_r+0x94>
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff fda2 	bl	80074d0 <_free_r>
 800798c:	2000      	movs	r0, #0
 800798e:	6360      	str	r0, [r4, #52]	; 0x34
 8007990:	e7c0      	b.n	8007914 <__sflush_r+0x1c>
 8007992:	2301      	movs	r3, #1
 8007994:	4628      	mov	r0, r5
 8007996:	47b0      	blx	r6
 8007998:	1c41      	adds	r1, r0, #1
 800799a:	d1c8      	bne.n	800792e <__sflush_r+0x36>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0c5      	beq.n	800792e <__sflush_r+0x36>
 80079a2:	2b1d      	cmp	r3, #29
 80079a4:	d001      	beq.n	80079aa <__sflush_r+0xb2>
 80079a6:	2b16      	cmp	r3, #22
 80079a8:	d101      	bne.n	80079ae <__sflush_r+0xb6>
 80079aa:	602f      	str	r7, [r5, #0]
 80079ac:	e7b1      	b.n	8007912 <__sflush_r+0x1a>
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	e7ad      	b.n	8007914 <__sflush_r+0x1c>
 80079b8:	690f      	ldr	r7, [r1, #16]
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	d0a9      	beq.n	8007912 <__sflush_r+0x1a>
 80079be:	0793      	lsls	r3, r2, #30
 80079c0:	680e      	ldr	r6, [r1, #0]
 80079c2:	bf08      	it	eq
 80079c4:	694b      	ldreq	r3, [r1, #20]
 80079c6:	600f      	str	r7, [r1, #0]
 80079c8:	bf18      	it	ne
 80079ca:	2300      	movne	r3, #0
 80079cc:	eba6 0807 	sub.w	r8, r6, r7
 80079d0:	608b      	str	r3, [r1, #8]
 80079d2:	f1b8 0f00 	cmp.w	r8, #0
 80079d6:	dd9c      	ble.n	8007912 <__sflush_r+0x1a>
 80079d8:	4643      	mov	r3, r8
 80079da:	463a      	mov	r2, r7
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b0      	blx	r6
 80079e4:	2800      	cmp	r0, #0
 80079e6:	dc06      	bgt.n	80079f6 <__sflush_r+0xfe>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295
 80079f4:	e78e      	b.n	8007914 <__sflush_r+0x1c>
 80079f6:	4407      	add	r7, r0
 80079f8:	eba8 0800 	sub.w	r8, r8, r0
 80079fc:	e7e9      	b.n	80079d2 <__sflush_r+0xda>
 80079fe:	bf00      	nop
 8007a00:	20400001 	.word	0x20400001

08007a04 <_fflush_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	690b      	ldr	r3, [r1, #16]
 8007a08:	4605      	mov	r5, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	b1db      	cbz	r3, 8007a46 <_fflush_r+0x42>
 8007a0e:	b118      	cbz	r0, 8007a18 <_fflush_r+0x14>
 8007a10:	6983      	ldr	r3, [r0, #24]
 8007a12:	b90b      	cbnz	r3, 8007a18 <_fflush_r+0x14>
 8007a14:	f000 f860 	bl	8007ad8 <__sinit>
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <_fflush_r+0x48>)
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	d109      	bne.n	8007a32 <_fflush_r+0x2e>
 8007a1e:	686c      	ldr	r4, [r5, #4]
 8007a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a24:	b17b      	cbz	r3, 8007a46 <_fflush_r+0x42>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a2e:	f7ff bf63 	b.w	80078f8 <__sflush_r>
 8007a32:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <_fflush_r+0x4c>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	d101      	bne.n	8007a3c <_fflush_r+0x38>
 8007a38:	68ac      	ldr	r4, [r5, #8]
 8007a3a:	e7f1      	b.n	8007a20 <_fflush_r+0x1c>
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <_fflush_r+0x50>)
 8007a3e:	429c      	cmp	r4, r3
 8007a40:	bf08      	it	eq
 8007a42:	68ec      	ldreq	r4, [r5, #12]
 8007a44:	e7ec      	b.n	8007a20 <_fflush_r+0x1c>
 8007a46:	2000      	movs	r0, #0
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08008928 	.word	0x08008928
 8007a50:	08008948 	.word	0x08008948
 8007a54:	08008908 	.word	0x08008908

08007a58 <std>:
 8007a58:	2300      	movs	r3, #0
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a62:	6083      	str	r3, [r0, #8]
 8007a64:	8181      	strh	r1, [r0, #12]
 8007a66:	6643      	str	r3, [r0, #100]	; 0x64
 8007a68:	81c2      	strh	r2, [r0, #14]
 8007a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a6e:	6183      	str	r3, [r0, #24]
 8007a70:	4619      	mov	r1, r3
 8007a72:	2208      	movs	r2, #8
 8007a74:	305c      	adds	r0, #92	; 0x5c
 8007a76:	f7ff fd22 	bl	80074be <memset>
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <std+0x38>)
 8007a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <std+0x3c>)
 8007a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <std+0x40>)
 8007a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <std+0x44>)
 8007a88:	6224      	str	r4, [r4, #32]
 8007a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	bf00      	nop
 8007a90:	080084ed 	.word	0x080084ed
 8007a94:	0800850f 	.word	0x0800850f
 8007a98:	08008547 	.word	0x08008547
 8007a9c:	0800856b 	.word	0x0800856b

08007aa0 <_cleanup_r>:
 8007aa0:	4901      	ldr	r1, [pc, #4]	; (8007aa8 <_cleanup_r+0x8>)
 8007aa2:	f000 b885 	b.w	8007bb0 <_fwalk_reent>
 8007aa6:	bf00      	nop
 8007aa8:	08007a05 	.word	0x08007a05

08007aac <__sfmoreglue>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	1e4a      	subs	r2, r1, #1
 8007ab0:	2568      	movs	r5, #104	; 0x68
 8007ab2:	4355      	muls	r5, r2
 8007ab4:	460e      	mov	r6, r1
 8007ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aba:	f7ff fd57 	bl	800756c <_malloc_r>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	b140      	cbz	r0, 8007ad4 <__sfmoreglue+0x28>
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ac8:	300c      	adds	r0, #12
 8007aca:	60a0      	str	r0, [r4, #8]
 8007acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ad0:	f7ff fcf5 	bl	80074be <memset>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}

08007ad8 <__sinit>:
 8007ad8:	6983      	ldr	r3, [r0, #24]
 8007ada:	b510      	push	{r4, lr}
 8007adc:	4604      	mov	r4, r0
 8007ade:	bb33      	cbnz	r3, 8007b2e <__sinit+0x56>
 8007ae0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007ae4:	6503      	str	r3, [r0, #80]	; 0x50
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <__sinit+0x58>)
 8007ae8:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <__sinit+0x5c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6282      	str	r2, [r0, #40]	; 0x28
 8007aee:	4298      	cmp	r0, r3
 8007af0:	bf04      	itt	eq
 8007af2:	2301      	moveq	r3, #1
 8007af4:	6183      	streq	r3, [r0, #24]
 8007af6:	f000 f81f 	bl	8007b38 <__sfp>
 8007afa:	6060      	str	r0, [r4, #4]
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 f81b 	bl	8007b38 <__sfp>
 8007b02:	60a0      	str	r0, [r4, #8]
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 f817 	bl	8007b38 <__sfp>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	60e0      	str	r0, [r4, #12]
 8007b0e:	2104      	movs	r1, #4
 8007b10:	6860      	ldr	r0, [r4, #4]
 8007b12:	f7ff ffa1 	bl	8007a58 <std>
 8007b16:	2201      	movs	r2, #1
 8007b18:	2109      	movs	r1, #9
 8007b1a:	68a0      	ldr	r0, [r4, #8]
 8007b1c:	f7ff ff9c 	bl	8007a58 <std>
 8007b20:	2202      	movs	r2, #2
 8007b22:	2112      	movs	r1, #18
 8007b24:	68e0      	ldr	r0, [r4, #12]
 8007b26:	f7ff ff97 	bl	8007a58 <std>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	61a3      	str	r3, [r4, #24]
 8007b2e:	bd10      	pop	{r4, pc}
 8007b30:	08008904 	.word	0x08008904
 8007b34:	08007aa1 	.word	0x08007aa1

08007b38 <__sfp>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <__sfp+0x70>)
 8007b3c:	681e      	ldr	r6, [r3, #0]
 8007b3e:	69b3      	ldr	r3, [r6, #24]
 8007b40:	4607      	mov	r7, r0
 8007b42:	b913      	cbnz	r3, 8007b4a <__sfp+0x12>
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ffc7 	bl	8007ad8 <__sinit>
 8007b4a:	3648      	adds	r6, #72	; 0x48
 8007b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	d503      	bpl.n	8007b5c <__sfp+0x24>
 8007b54:	6833      	ldr	r3, [r6, #0]
 8007b56:	b133      	cbz	r3, 8007b66 <__sfp+0x2e>
 8007b58:	6836      	ldr	r6, [r6, #0]
 8007b5a:	e7f7      	b.n	8007b4c <__sfp+0x14>
 8007b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b60:	b16d      	cbz	r5, 8007b7e <__sfp+0x46>
 8007b62:	3468      	adds	r4, #104	; 0x68
 8007b64:	e7f4      	b.n	8007b50 <__sfp+0x18>
 8007b66:	2104      	movs	r1, #4
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ff9f 	bl	8007aac <__sfmoreglue>
 8007b6e:	6030      	str	r0, [r6, #0]
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1f1      	bne.n	8007b58 <__sfp+0x20>
 8007b74:	230c      	movs	r3, #12
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <__sfp+0x74>)
 8007b80:	6665      	str	r5, [r4, #100]	; 0x64
 8007b82:	e9c4 5500 	strd	r5, r5, [r4]
 8007b86:	60a5      	str	r5, [r4, #8]
 8007b88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007b90:	2208      	movs	r2, #8
 8007b92:	4629      	mov	r1, r5
 8007b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b98:	f7ff fc91 	bl	80074be <memset>
 8007b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ba4:	e7e9      	b.n	8007b7a <__sfp+0x42>
 8007ba6:	bf00      	nop
 8007ba8:	08008904 	.word	0x08008904
 8007bac:	ffff0001 	.word	0xffff0001

08007bb0 <_fwalk_reent>:
 8007bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4689      	mov	r9, r1
 8007bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	b914      	cbnz	r4, 8007bc6 <_fwalk_reent+0x16>
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007bca:	3f01      	subs	r7, #1
 8007bcc:	d501      	bpl.n	8007bd2 <_fwalk_reent+0x22>
 8007bce:	6824      	ldr	r4, [r4, #0]
 8007bd0:	e7f5      	b.n	8007bbe <_fwalk_reent+0xe>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d907      	bls.n	8007be8 <_fwalk_reent+0x38>
 8007bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	d003      	beq.n	8007be8 <_fwalk_reent+0x38>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4640      	mov	r0, r8
 8007be4:	47c8      	blx	r9
 8007be6:	4306      	orrs	r6, r0
 8007be8:	3568      	adds	r5, #104	; 0x68
 8007bea:	e7ee      	b.n	8007bca <_fwalk_reent+0x1a>

08007bec <__swhatbuf_r>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	460e      	mov	r6, r1
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	b096      	sub	sp, #88	; 0x58
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	461d      	mov	r5, r3
 8007bfc:	da07      	bge.n	8007c0e <__swhatbuf_r+0x22>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	89b3      	ldrh	r3, [r6, #12]
 8007c04:	061a      	lsls	r2, r3, #24
 8007c06:	d410      	bmi.n	8007c2a <__swhatbuf_r+0x3e>
 8007c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c0c:	e00e      	b.n	8007c2c <__swhatbuf_r+0x40>
 8007c0e:	466a      	mov	r2, sp
 8007c10:	f000 fcd2 	bl	80085b8 <_fstat_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	dbf2      	blt.n	8007bfe <__swhatbuf_r+0x12>
 8007c18:	9a01      	ldr	r2, [sp, #4]
 8007c1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c22:	425a      	negs	r2, r3
 8007c24:	415a      	adcs	r2, r3
 8007c26:	602a      	str	r2, [r5, #0]
 8007c28:	e7ee      	b.n	8007c08 <__swhatbuf_r+0x1c>
 8007c2a:	2340      	movs	r3, #64	; 0x40
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	b016      	add	sp, #88	; 0x58
 8007c32:	bd70      	pop	{r4, r5, r6, pc}

08007c34 <__smakebuf_r>:
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c38:	079d      	lsls	r5, r3, #30
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	d507      	bpl.n	8007c50 <__smakebuf_r+0x1c>
 8007c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2301      	movs	r3, #1
 8007c4a:	6163      	str	r3, [r4, #20]
 8007c4c:	b002      	add	sp, #8
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	ab01      	add	r3, sp, #4
 8007c52:	466a      	mov	r2, sp
 8007c54:	f7ff ffca 	bl	8007bec <__swhatbuf_r>
 8007c58:	9900      	ldr	r1, [sp, #0]
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f7ff fc85 	bl	800756c <_malloc_r>
 8007c62:	b948      	cbnz	r0, 8007c78 <__smakebuf_r+0x44>
 8007c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c68:	059a      	lsls	r2, r3, #22
 8007c6a:	d4ef      	bmi.n	8007c4c <__smakebuf_r+0x18>
 8007c6c:	f023 0303 	bic.w	r3, r3, #3
 8007c70:	f043 0302 	orr.w	r3, r3, #2
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	e7e3      	b.n	8007c40 <__smakebuf_r+0xc>
 8007c78:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <__smakebuf_r+0x7c>)
 8007c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c84:	81a3      	strh	r3, [r4, #12]
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	6163      	str	r3, [r4, #20]
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	6120      	str	r0, [r4, #16]
 8007c8e:	b15b      	cbz	r3, 8007ca8 <__smakebuf_r+0x74>
 8007c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 fca1 	bl	80085dc <_isatty_r>
 8007c9a:	b128      	cbz	r0, 8007ca8 <__smakebuf_r+0x74>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f023 0303 	bic.w	r3, r3, #3
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	431d      	orrs	r5, r3
 8007cac:	81a5      	strh	r5, [r4, #12]
 8007cae:	e7cd      	b.n	8007c4c <__smakebuf_r+0x18>
 8007cb0:	08007aa1 	.word	0x08007aa1

08007cb4 <__malloc_lock>:
 8007cb4:	4770      	bx	lr

08007cb6 <__malloc_unlock>:
 8007cb6:	4770      	bx	lr

08007cb8 <__ssputs_r>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	688e      	ldr	r6, [r1, #8]
 8007cbe:	429e      	cmp	r6, r3
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4690      	mov	r8, r2
 8007cc6:	4699      	mov	r9, r3
 8007cc8:	d837      	bhi.n	8007d3a <__ssputs_r+0x82>
 8007cca:	898a      	ldrh	r2, [r1, #12]
 8007ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd0:	d031      	beq.n	8007d36 <__ssputs_r+0x7e>
 8007cd2:	6825      	ldr	r5, [r4, #0]
 8007cd4:	6909      	ldr	r1, [r1, #16]
 8007cd6:	1a6f      	subs	r7, r5, r1
 8007cd8:	6965      	ldr	r5, [r4, #20]
 8007cda:	2302      	movs	r3, #2
 8007cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ce4:	f109 0301 	add.w	r3, r9, #1
 8007ce8:	443b      	add	r3, r7
 8007cea:	429d      	cmp	r5, r3
 8007cec:	bf38      	it	cc
 8007cee:	461d      	movcc	r5, r3
 8007cf0:	0553      	lsls	r3, r2, #21
 8007cf2:	d530      	bpl.n	8007d56 <__ssputs_r+0x9e>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7ff fc39 	bl	800756c <_malloc_r>
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	b950      	cbnz	r0, 8007d14 <__ssputs_r+0x5c>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	f8ca 3000 	str.w	r3, [sl]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	463a      	mov	r2, r7
 8007d16:	6921      	ldr	r1, [r4, #16]
 8007d18:	f7ff fbc6 	bl	80074a8 <memcpy>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	6126      	str	r6, [r4, #16]
 8007d2a:	6165      	str	r5, [r4, #20]
 8007d2c:	443e      	add	r6, r7
 8007d2e:	1bed      	subs	r5, r5, r7
 8007d30:	6026      	str	r6, [r4, #0]
 8007d32:	60a5      	str	r5, [r4, #8]
 8007d34:	464e      	mov	r6, r9
 8007d36:	454e      	cmp	r6, r9
 8007d38:	d900      	bls.n	8007d3c <__ssputs_r+0x84>
 8007d3a:	464e      	mov	r6, r9
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4641      	mov	r1, r8
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	f000 fc6d 	bl	8008620 <memmove>
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	1b9b      	subs	r3, r3, r6
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	441e      	add	r6, r3
 8007d50:	6026      	str	r6, [r4, #0]
 8007d52:	2000      	movs	r0, #0
 8007d54:	e7dc      	b.n	8007d10 <__ssputs_r+0x58>
 8007d56:	462a      	mov	r2, r5
 8007d58:	f000 fc7b 	bl	8008652 <_realloc_r>
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1e2      	bne.n	8007d28 <__ssputs_r+0x70>
 8007d62:	6921      	ldr	r1, [r4, #16]
 8007d64:	4650      	mov	r0, sl
 8007d66:	f7ff fbb3 	bl	80074d0 <_free_r>
 8007d6a:	e7c8      	b.n	8007cfe <__ssputs_r+0x46>

08007d6c <_svfiprintf_r>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	461d      	mov	r5, r3
 8007d72:	898b      	ldrh	r3, [r1, #12]
 8007d74:	061f      	lsls	r7, r3, #24
 8007d76:	b09d      	sub	sp, #116	; 0x74
 8007d78:	4680      	mov	r8, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	d50f      	bpl.n	8007da0 <_svfiprintf_r+0x34>
 8007d80:	690b      	ldr	r3, [r1, #16]
 8007d82:	b96b      	cbnz	r3, 8007da0 <_svfiprintf_r+0x34>
 8007d84:	2140      	movs	r1, #64	; 0x40
 8007d86:	f7ff fbf1 	bl	800756c <_malloc_r>
 8007d8a:	6020      	str	r0, [r4, #0]
 8007d8c:	6120      	str	r0, [r4, #16]
 8007d8e:	b928      	cbnz	r0, 8007d9c <_svfiprintf_r+0x30>
 8007d90:	230c      	movs	r3, #12
 8007d92:	f8c8 3000 	str.w	r3, [r8]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	e0c8      	b.n	8007f2e <_svfiprintf_r+0x1c2>
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	2300      	movs	r3, #0
 8007da2:	9309      	str	r3, [sp, #36]	; 0x24
 8007da4:	2320      	movs	r3, #32
 8007da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007daa:	2330      	movs	r3, #48	; 0x30
 8007dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007db0:	9503      	str	r5, [sp, #12]
 8007db2:	f04f 0b01 	mov.w	fp, #1
 8007db6:	4637      	mov	r7, r6
 8007db8:	463d      	mov	r5, r7
 8007dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007dbe:	b10b      	cbz	r3, 8007dc4 <_svfiprintf_r+0x58>
 8007dc0:	2b25      	cmp	r3, #37	; 0x25
 8007dc2:	d13e      	bne.n	8007e42 <_svfiprintf_r+0xd6>
 8007dc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007dc8:	d00b      	beq.n	8007de2 <_svfiprintf_r+0x76>
 8007dca:	4653      	mov	r3, sl
 8007dcc:	4632      	mov	r2, r6
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	f7ff ff71 	bl	8007cb8 <__ssputs_r>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f000 80a4 	beq.w	8007f24 <_svfiprintf_r+0x1b8>
 8007ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dde:	4453      	add	r3, sl
 8007de0:	9309      	str	r3, [sp, #36]	; 0x24
 8007de2:	783b      	ldrb	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 809d 	beq.w	8007f24 <_svfiprintf_r+0x1b8>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f04f 32ff 	mov.w	r2, #4294967295
 8007df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dfe:	462f      	mov	r7, r5
 8007e00:	2205      	movs	r2, #5
 8007e02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e06:	4850      	ldr	r0, [pc, #320]	; (8007f48 <_svfiprintf_r+0x1dc>)
 8007e08:	f7f8 f9e2 	bl	80001d0 <memchr>
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	b9d0      	cbnz	r0, 8007e46 <_svfiprintf_r+0xda>
 8007e10:	06d9      	lsls	r1, r3, #27
 8007e12:	bf44      	itt	mi
 8007e14:	2220      	movmi	r2, #32
 8007e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e1a:	071a      	lsls	r2, r3, #28
 8007e1c:	bf44      	itt	mi
 8007e1e:	222b      	movmi	r2, #43	; 0x2b
 8007e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e24:	782a      	ldrb	r2, [r5, #0]
 8007e26:	2a2a      	cmp	r2, #42	; 0x2a
 8007e28:	d015      	beq.n	8007e56 <_svfiprintf_r+0xea>
 8007e2a:	9a07      	ldr	r2, [sp, #28]
 8007e2c:	462f      	mov	r7, r5
 8007e2e:	2000      	movs	r0, #0
 8007e30:	250a      	movs	r5, #10
 8007e32:	4639      	mov	r1, r7
 8007e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e38:	3b30      	subs	r3, #48	; 0x30
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d94d      	bls.n	8007eda <_svfiprintf_r+0x16e>
 8007e3e:	b1b8      	cbz	r0, 8007e70 <_svfiprintf_r+0x104>
 8007e40:	e00f      	b.n	8007e62 <_svfiprintf_r+0xf6>
 8007e42:	462f      	mov	r7, r5
 8007e44:	e7b8      	b.n	8007db8 <_svfiprintf_r+0x4c>
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <_svfiprintf_r+0x1dc>)
 8007e48:	1a80      	subs	r0, r0, r2
 8007e4a:	fa0b f000 	lsl.w	r0, fp, r0
 8007e4e:	4318      	orrs	r0, r3
 8007e50:	9004      	str	r0, [sp, #16]
 8007e52:	463d      	mov	r5, r7
 8007e54:	e7d3      	b.n	8007dfe <_svfiprintf_r+0x92>
 8007e56:	9a03      	ldr	r2, [sp, #12]
 8007e58:	1d11      	adds	r1, r2, #4
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	9103      	str	r1, [sp, #12]
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	db01      	blt.n	8007e66 <_svfiprintf_r+0xfa>
 8007e62:	9207      	str	r2, [sp, #28]
 8007e64:	e004      	b.n	8007e70 <_svfiprintf_r+0x104>
 8007e66:	4252      	negs	r2, r2
 8007e68:	f043 0302 	orr.w	r3, r3, #2
 8007e6c:	9207      	str	r2, [sp, #28]
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	783b      	ldrb	r3, [r7, #0]
 8007e72:	2b2e      	cmp	r3, #46	; 0x2e
 8007e74:	d10c      	bne.n	8007e90 <_svfiprintf_r+0x124>
 8007e76:	787b      	ldrb	r3, [r7, #1]
 8007e78:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7a:	d133      	bne.n	8007ee4 <_svfiprintf_r+0x178>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	1d1a      	adds	r2, r3, #4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	9203      	str	r2, [sp, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bfb8      	it	lt
 8007e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e8c:	3702      	adds	r7, #2
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	4d2e      	ldr	r5, [pc, #184]	; (8007f4c <_svfiprintf_r+0x1e0>)
 8007e92:	7839      	ldrb	r1, [r7, #0]
 8007e94:	2203      	movs	r2, #3
 8007e96:	4628      	mov	r0, r5
 8007e98:	f7f8 f99a 	bl	80001d0 <memchr>
 8007e9c:	b138      	cbz	r0, 8007eae <_svfiprintf_r+0x142>
 8007e9e:	2340      	movs	r3, #64	; 0x40
 8007ea0:	1b40      	subs	r0, r0, r5
 8007ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	4303      	orrs	r3, r0
 8007eaa:	3701      	adds	r7, #1
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	7839      	ldrb	r1, [r7, #0]
 8007eb0:	4827      	ldr	r0, [pc, #156]	; (8007f50 <_svfiprintf_r+0x1e4>)
 8007eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb6:	2206      	movs	r2, #6
 8007eb8:	1c7e      	adds	r6, r7, #1
 8007eba:	f7f8 f989 	bl	80001d0 <memchr>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d038      	beq.n	8007f34 <_svfiprintf_r+0x1c8>
 8007ec2:	4b24      	ldr	r3, [pc, #144]	; (8007f54 <_svfiprintf_r+0x1e8>)
 8007ec4:	bb13      	cbnz	r3, 8007f0c <_svfiprintf_r+0x1a0>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	3307      	adds	r3, #7
 8007eca:	f023 0307 	bic.w	r3, r3, #7
 8007ece:	3308      	adds	r3, #8
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	444b      	add	r3, r9
 8007ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed8:	e76d      	b.n	8007db6 <_svfiprintf_r+0x4a>
 8007eda:	fb05 3202 	mla	r2, r5, r2, r3
 8007ede:	2001      	movs	r0, #1
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	e7a6      	b.n	8007e32 <_svfiprintf_r+0xc6>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	3701      	adds	r7, #1
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	4619      	mov	r1, r3
 8007eec:	250a      	movs	r5, #10
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef4:	3a30      	subs	r2, #48	; 0x30
 8007ef6:	2a09      	cmp	r2, #9
 8007ef8:	d903      	bls.n	8007f02 <_svfiprintf_r+0x196>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0c8      	beq.n	8007e90 <_svfiprintf_r+0x124>
 8007efe:	9105      	str	r1, [sp, #20]
 8007f00:	e7c6      	b.n	8007e90 <_svfiprintf_r+0x124>
 8007f02:	fb05 2101 	mla	r1, r5, r1, r2
 8007f06:	2301      	movs	r3, #1
 8007f08:	4607      	mov	r7, r0
 8007f0a:	e7f0      	b.n	8007eee <_svfiprintf_r+0x182>
 8007f0c:	ab03      	add	r3, sp, #12
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4622      	mov	r2, r4
 8007f12:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <_svfiprintf_r+0x1ec>)
 8007f14:	a904      	add	r1, sp, #16
 8007f16:	4640      	mov	r0, r8
 8007f18:	f3af 8000 	nop.w
 8007f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f20:	4681      	mov	r9, r0
 8007f22:	d1d6      	bne.n	8007ed2 <_svfiprintf_r+0x166>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	065b      	lsls	r3, r3, #25
 8007f28:	f53f af35 	bmi.w	8007d96 <_svfiprintf_r+0x2a>
 8007f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f2e:	b01d      	add	sp, #116	; 0x74
 8007f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	ab03      	add	r3, sp, #12
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <_svfiprintf_r+0x1ec>)
 8007f3c:	a904      	add	r1, sp, #16
 8007f3e:	4640      	mov	r0, r8
 8007f40:	f000 f9c2 	bl	80082c8 <_printf_i>
 8007f44:	e7ea      	b.n	8007f1c <_svfiprintf_r+0x1b0>
 8007f46:	bf00      	nop
 8007f48:	08008968 	.word	0x08008968
 8007f4c:	0800896e 	.word	0x0800896e
 8007f50:	08008972 	.word	0x08008972
 8007f54:	00000000 	.word	0x00000000
 8007f58:	08007cb9 	.word	0x08007cb9

08007f5c <__sfputc_r>:
 8007f5c:	6893      	ldr	r3, [r2, #8]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	b410      	push	{r4}
 8007f64:	6093      	str	r3, [r2, #8]
 8007f66:	da08      	bge.n	8007f7a <__sfputc_r+0x1e>
 8007f68:	6994      	ldr	r4, [r2, #24]
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	db01      	blt.n	8007f72 <__sfputc_r+0x16>
 8007f6e:	290a      	cmp	r1, #10
 8007f70:	d103      	bne.n	8007f7a <__sfputc_r+0x1e>
 8007f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f76:	f7ff bbff 	b.w	8007778 <__swbuf_r>
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	1c58      	adds	r0, r3, #1
 8007f7e:	6010      	str	r0, [r2, #0]
 8007f80:	7019      	strb	r1, [r3, #0]
 8007f82:	4608      	mov	r0, r1
 8007f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <__sfputs_r>:
 8007f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	4614      	mov	r4, r2
 8007f92:	18d5      	adds	r5, r2, r3
 8007f94:	42ac      	cmp	r4, r5
 8007f96:	d101      	bne.n	8007f9c <__sfputs_r+0x12>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e007      	b.n	8007fac <__sfputs_r+0x22>
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffda 	bl	8007f5c <__sfputc_r>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d1f3      	bne.n	8007f94 <__sfputs_r+0xa>
 8007fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fb0 <_vfiprintf_r>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	b09d      	sub	sp, #116	; 0x74
 8007fb8:	4617      	mov	r7, r2
 8007fba:	461d      	mov	r5, r3
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	b118      	cbz	r0, 8007fc8 <_vfiprintf_r+0x18>
 8007fc0:	6983      	ldr	r3, [r0, #24]
 8007fc2:	b90b      	cbnz	r3, 8007fc8 <_vfiprintf_r+0x18>
 8007fc4:	f7ff fd88 	bl	8007ad8 <__sinit>
 8007fc8:	4b7c      	ldr	r3, [pc, #496]	; (80081bc <_vfiprintf_r+0x20c>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d158      	bne.n	8008080 <_vfiprintf_r+0xd0>
 8007fce:	6874      	ldr	r4, [r6, #4]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	0718      	lsls	r0, r3, #28
 8007fd4:	d55e      	bpl.n	8008094 <_vfiprintf_r+0xe4>
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d05b      	beq.n	8008094 <_vfiprintf_r+0xe4>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe6:	2330      	movs	r3, #48	; 0x30
 8007fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fec:	9503      	str	r5, [sp, #12]
 8007fee:	f04f 0b01 	mov.w	fp, #1
 8007ff2:	46b8      	mov	r8, r7
 8007ff4:	4645      	mov	r5, r8
 8007ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ffa:	b10b      	cbz	r3, 8008000 <_vfiprintf_r+0x50>
 8007ffc:	2b25      	cmp	r3, #37	; 0x25
 8007ffe:	d154      	bne.n	80080aa <_vfiprintf_r+0xfa>
 8008000:	ebb8 0a07 	subs.w	sl, r8, r7
 8008004:	d00b      	beq.n	800801e <_vfiprintf_r+0x6e>
 8008006:	4653      	mov	r3, sl
 8008008:	463a      	mov	r2, r7
 800800a:	4621      	mov	r1, r4
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff ffbc 	bl	8007f8a <__sfputs_r>
 8008012:	3001      	adds	r0, #1
 8008014:	f000 80c2 	beq.w	800819c <_vfiprintf_r+0x1ec>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	4453      	add	r3, sl
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	f898 3000 	ldrb.w	r3, [r8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80ba 	beq.w	800819c <_vfiprintf_r+0x1ec>
 8008028:	2300      	movs	r3, #0
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	9307      	str	r3, [sp, #28]
 8008036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800803a:	931a      	str	r3, [sp, #104]	; 0x68
 800803c:	46a8      	mov	r8, r5
 800803e:	2205      	movs	r2, #5
 8008040:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008044:	485e      	ldr	r0, [pc, #376]	; (80081c0 <_vfiprintf_r+0x210>)
 8008046:	f7f8 f8c3 	bl	80001d0 <memchr>
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	bb78      	cbnz	r0, 80080ae <_vfiprintf_r+0xfe>
 800804e:	06d9      	lsls	r1, r3, #27
 8008050:	bf44      	itt	mi
 8008052:	2220      	movmi	r2, #32
 8008054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	bf44      	itt	mi
 800805c:	222b      	movmi	r2, #43	; 0x2b
 800805e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008062:	782a      	ldrb	r2, [r5, #0]
 8008064:	2a2a      	cmp	r2, #42	; 0x2a
 8008066:	d02a      	beq.n	80080be <_vfiprintf_r+0x10e>
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	46a8      	mov	r8, r5
 800806c:	2000      	movs	r0, #0
 800806e:	250a      	movs	r5, #10
 8008070:	4641      	mov	r1, r8
 8008072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008076:	3b30      	subs	r3, #48	; 0x30
 8008078:	2b09      	cmp	r3, #9
 800807a:	d969      	bls.n	8008150 <_vfiprintf_r+0x1a0>
 800807c:	b360      	cbz	r0, 80080d8 <_vfiprintf_r+0x128>
 800807e:	e024      	b.n	80080ca <_vfiprintf_r+0x11a>
 8008080:	4b50      	ldr	r3, [pc, #320]	; (80081c4 <_vfiprintf_r+0x214>)
 8008082:	429c      	cmp	r4, r3
 8008084:	d101      	bne.n	800808a <_vfiprintf_r+0xda>
 8008086:	68b4      	ldr	r4, [r6, #8]
 8008088:	e7a2      	b.n	8007fd0 <_vfiprintf_r+0x20>
 800808a:	4b4f      	ldr	r3, [pc, #316]	; (80081c8 <_vfiprintf_r+0x218>)
 800808c:	429c      	cmp	r4, r3
 800808e:	bf08      	it	eq
 8008090:	68f4      	ldreq	r4, [r6, #12]
 8008092:	e79d      	b.n	8007fd0 <_vfiprintf_r+0x20>
 8008094:	4621      	mov	r1, r4
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff fbc0 	bl	800781c <__swsetup_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	d09d      	beq.n	8007fdc <_vfiprintf_r+0x2c>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b01d      	add	sp, #116	; 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	46a8      	mov	r8, r5
 80080ac:	e7a2      	b.n	8007ff4 <_vfiprintf_r+0x44>
 80080ae:	4a44      	ldr	r2, [pc, #272]	; (80081c0 <_vfiprintf_r+0x210>)
 80080b0:	1a80      	subs	r0, r0, r2
 80080b2:	fa0b f000 	lsl.w	r0, fp, r0
 80080b6:	4318      	orrs	r0, r3
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	4645      	mov	r5, r8
 80080bc:	e7be      	b.n	800803c <_vfiprintf_r+0x8c>
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	1d11      	adds	r1, r2, #4
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	db01      	blt.n	80080ce <_vfiprintf_r+0x11e>
 80080ca:	9207      	str	r2, [sp, #28]
 80080cc:	e004      	b.n	80080d8 <_vfiprintf_r+0x128>
 80080ce:	4252      	negs	r2, r2
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	9207      	str	r2, [sp, #28]
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	f898 3000 	ldrb.w	r3, [r8]
 80080dc:	2b2e      	cmp	r3, #46	; 0x2e
 80080de:	d10e      	bne.n	80080fe <_vfiprintf_r+0x14e>
 80080e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d138      	bne.n	800815a <_vfiprintf_r+0x1aa>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	9203      	str	r2, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfb8      	it	lt
 80080f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f8:	f108 0802 	add.w	r8, r8, #2
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4d33      	ldr	r5, [pc, #204]	; (80081cc <_vfiprintf_r+0x21c>)
 8008100:	f898 1000 	ldrb.w	r1, [r8]
 8008104:	2203      	movs	r2, #3
 8008106:	4628      	mov	r0, r5
 8008108:	f7f8 f862 	bl	80001d0 <memchr>
 800810c:	b140      	cbz	r0, 8008120 <_vfiprintf_r+0x170>
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	1b40      	subs	r0, r0, r5
 8008112:	fa03 f000 	lsl.w	r0, r3, r0
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	4303      	orrs	r3, r0
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	f898 1000 	ldrb.w	r1, [r8]
 8008124:	482a      	ldr	r0, [pc, #168]	; (80081d0 <_vfiprintf_r+0x220>)
 8008126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800812a:	2206      	movs	r2, #6
 800812c:	f108 0701 	add.w	r7, r8, #1
 8008130:	f7f8 f84e 	bl	80001d0 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d037      	beq.n	80081a8 <_vfiprintf_r+0x1f8>
 8008138:	4b26      	ldr	r3, [pc, #152]	; (80081d4 <_vfiprintf_r+0x224>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_vfiprintf_r+0x1d4>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	444b      	add	r3, r9
 800814c:	9309      	str	r3, [sp, #36]	; 0x24
 800814e:	e750      	b.n	8007ff2 <_vfiprintf_r+0x42>
 8008150:	fb05 3202 	mla	r2, r5, r2, r3
 8008154:	2001      	movs	r0, #1
 8008156:	4688      	mov	r8, r1
 8008158:	e78a      	b.n	8008070 <_vfiprintf_r+0xc0>
 800815a:	2300      	movs	r3, #0
 800815c:	f108 0801 	add.w	r8, r8, #1
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	4619      	mov	r1, r3
 8008164:	250a      	movs	r5, #10
 8008166:	4640      	mov	r0, r8
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	; 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_vfiprintf_r+0x1ca>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c3      	beq.n	80080fe <_vfiprintf_r+0x14e>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c1      	b.n	80080fe <_vfiprintf_r+0x14e>
 800817a:	fb05 2101 	mla	r1, r5, r1, r2
 800817e:	2301      	movs	r3, #1
 8008180:	4680      	mov	r8, r0
 8008182:	e7f0      	b.n	8008166 <_vfiprintf_r+0x1b6>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4622      	mov	r2, r4
 800818a:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <_vfiprintf_r+0x228>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4630      	mov	r0, r6
 8008190:	f3af 8000 	nop.w
 8008194:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008198:	4681      	mov	r9, r0
 800819a:	d1d5      	bne.n	8008148 <_vfiprintf_r+0x198>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	065b      	lsls	r3, r3, #25
 80081a0:	f53f af7e 	bmi.w	80080a0 <_vfiprintf_r+0xf0>
 80081a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a6:	e77d      	b.n	80080a4 <_vfiprintf_r+0xf4>
 80081a8:	ab03      	add	r3, sp, #12
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4622      	mov	r2, r4
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <_vfiprintf_r+0x228>)
 80081b0:	a904      	add	r1, sp, #16
 80081b2:	4630      	mov	r0, r6
 80081b4:	f000 f888 	bl	80082c8 <_printf_i>
 80081b8:	e7ec      	b.n	8008194 <_vfiprintf_r+0x1e4>
 80081ba:	bf00      	nop
 80081bc:	08008928 	.word	0x08008928
 80081c0:	08008968 	.word	0x08008968
 80081c4:	08008948 	.word	0x08008948
 80081c8:	08008908 	.word	0x08008908
 80081cc:	0800896e 	.word	0x0800896e
 80081d0:	08008972 	.word	0x08008972
 80081d4:	00000000 	.word	0x00000000
 80081d8:	08007f8b 	.word	0x08007f8b

080081dc <_printf_common>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	4691      	mov	r9, r2
 80081e2:	461f      	mov	r7, r3
 80081e4:	688a      	ldr	r2, [r1, #8]
 80081e6:	690b      	ldr	r3, [r1, #16]
 80081e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	bfb8      	it	lt
 80081f0:	4613      	movlt	r3, r2
 80081f2:	f8c9 3000 	str.w	r3, [r9]
 80081f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081fa:	4606      	mov	r6, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	b112      	cbz	r2, 8008206 <_printf_common+0x2a>
 8008200:	3301      	adds	r3, #1
 8008202:	f8c9 3000 	str.w	r3, [r9]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008210:	3302      	addmi	r3, #2
 8008212:	f8c9 3000 	strmi.w	r3, [r9]
 8008216:	6825      	ldr	r5, [r4, #0]
 8008218:	f015 0506 	ands.w	r5, r5, #6
 800821c:	d107      	bne.n	800822e <_printf_common+0x52>
 800821e:	f104 0a19 	add.w	sl, r4, #25
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	f8d9 2000 	ldr.w	r2, [r9]
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	42ab      	cmp	r3, r5
 800822c:	dc28      	bgt.n	8008280 <_printf_common+0xa4>
 800822e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	3300      	adds	r3, #0
 8008236:	bf18      	it	ne
 8008238:	2301      	movne	r3, #1
 800823a:	0692      	lsls	r2, r2, #26
 800823c:	d42d      	bmi.n	800829a <_printf_common+0xbe>
 800823e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008242:	4639      	mov	r1, r7
 8008244:	4630      	mov	r0, r6
 8008246:	47c0      	blx	r8
 8008248:	3001      	adds	r0, #1
 800824a:	d020      	beq.n	800828e <_printf_common+0xb2>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	68e5      	ldr	r5, [r4, #12]
 8008250:	f8d9 2000 	ldr.w	r2, [r9]
 8008254:	f003 0306 	and.w	r3, r3, #6
 8008258:	2b04      	cmp	r3, #4
 800825a:	bf08      	it	eq
 800825c:	1aad      	subeq	r5, r5, r2
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	6922      	ldr	r2, [r4, #16]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	341a      	adds	r4, #26
 8008278:	454d      	cmp	r5, r9
 800827a:	d11a      	bne.n	80082b2 <_printf_common+0xd6>
 800827c:	2000      	movs	r0, #0
 800827e:	e008      	b.n	8008292 <_printf_common+0xb6>
 8008280:	2301      	movs	r3, #1
 8008282:	4652      	mov	r2, sl
 8008284:	4639      	mov	r1, r7
 8008286:	4630      	mov	r0, r6
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d103      	bne.n	8008296 <_printf_common+0xba>
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	3501      	adds	r5, #1
 8008298:	e7c3      	b.n	8008222 <_printf_common+0x46>
 800829a:	18e1      	adds	r1, r4, r3
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	2030      	movs	r0, #48	; 0x30
 80082a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082a4:	4422      	add	r2, r4
 80082a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ae:	3302      	adds	r3, #2
 80082b0:	e7c5      	b.n	800823e <_printf_common+0x62>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4622      	mov	r2, r4
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	47c0      	blx	r8
 80082bc:	3001      	adds	r0, #1
 80082be:	d0e6      	beq.n	800828e <_printf_common+0xb2>
 80082c0:	f109 0901 	add.w	r9, r9, #1
 80082c4:	e7d8      	b.n	8008278 <_printf_common+0x9c>
	...

080082c8 <_printf_i>:
 80082c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082d0:	460c      	mov	r4, r1
 80082d2:	7e09      	ldrb	r1, [r1, #24]
 80082d4:	b085      	sub	sp, #20
 80082d6:	296e      	cmp	r1, #110	; 0x6e
 80082d8:	4617      	mov	r7, r2
 80082da:	4606      	mov	r6, r0
 80082dc:	4698      	mov	r8, r3
 80082de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e0:	f000 80b3 	beq.w	800844a <_printf_i+0x182>
 80082e4:	d822      	bhi.n	800832c <_printf_i+0x64>
 80082e6:	2963      	cmp	r1, #99	; 0x63
 80082e8:	d036      	beq.n	8008358 <_printf_i+0x90>
 80082ea:	d80a      	bhi.n	8008302 <_printf_i+0x3a>
 80082ec:	2900      	cmp	r1, #0
 80082ee:	f000 80b9 	beq.w	8008464 <_printf_i+0x19c>
 80082f2:	2958      	cmp	r1, #88	; 0x58
 80082f4:	f000 8083 	beq.w	80083fe <_printf_i+0x136>
 80082f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008300:	e032      	b.n	8008368 <_printf_i+0xa0>
 8008302:	2964      	cmp	r1, #100	; 0x64
 8008304:	d001      	beq.n	800830a <_printf_i+0x42>
 8008306:	2969      	cmp	r1, #105	; 0x69
 8008308:	d1f6      	bne.n	80082f8 <_printf_i+0x30>
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	0605      	lsls	r5, r0, #24
 8008310:	f103 0104 	add.w	r1, r3, #4
 8008314:	d52a      	bpl.n	800836c <_printf_i+0xa4>
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da03      	bge.n	8008326 <_printf_i+0x5e>
 800831e:	222d      	movs	r2, #45	; 0x2d
 8008320:	425b      	negs	r3, r3
 8008322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008326:	486f      	ldr	r0, [pc, #444]	; (80084e4 <_printf_i+0x21c>)
 8008328:	220a      	movs	r2, #10
 800832a:	e039      	b.n	80083a0 <_printf_i+0xd8>
 800832c:	2973      	cmp	r1, #115	; 0x73
 800832e:	f000 809d 	beq.w	800846c <_printf_i+0x1a4>
 8008332:	d808      	bhi.n	8008346 <_printf_i+0x7e>
 8008334:	296f      	cmp	r1, #111	; 0x6f
 8008336:	d020      	beq.n	800837a <_printf_i+0xb2>
 8008338:	2970      	cmp	r1, #112	; 0x70
 800833a:	d1dd      	bne.n	80082f8 <_printf_i+0x30>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f043 0320 	orr.w	r3, r3, #32
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	e003      	b.n	800834e <_printf_i+0x86>
 8008346:	2975      	cmp	r1, #117	; 0x75
 8008348:	d017      	beq.n	800837a <_printf_i+0xb2>
 800834a:	2978      	cmp	r1, #120	; 0x78
 800834c:	d1d4      	bne.n	80082f8 <_printf_i+0x30>
 800834e:	2378      	movs	r3, #120	; 0x78
 8008350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008354:	4864      	ldr	r0, [pc, #400]	; (80084e8 <_printf_i+0x220>)
 8008356:	e055      	b.n	8008404 <_printf_i+0x13c>
 8008358:	6813      	ldr	r3, [r2, #0]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6011      	str	r1, [r2, #0]
 8008360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008368:	2301      	movs	r3, #1
 800836a:	e08c      	b.n	8008486 <_printf_i+0x1be>
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6011      	str	r1, [r2, #0]
 8008370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008374:	bf18      	it	ne
 8008376:	b21b      	sxthne	r3, r3
 8008378:	e7cf      	b.n	800831a <_printf_i+0x52>
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	6825      	ldr	r5, [r4, #0]
 800837e:	1d18      	adds	r0, r3, #4
 8008380:	6010      	str	r0, [r2, #0]
 8008382:	0628      	lsls	r0, r5, #24
 8008384:	d501      	bpl.n	800838a <_printf_i+0xc2>
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	e002      	b.n	8008390 <_printf_i+0xc8>
 800838a:	0668      	lsls	r0, r5, #25
 800838c:	d5fb      	bpl.n	8008386 <_printf_i+0xbe>
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	4854      	ldr	r0, [pc, #336]	; (80084e4 <_printf_i+0x21c>)
 8008392:	296f      	cmp	r1, #111	; 0x6f
 8008394:	bf14      	ite	ne
 8008396:	220a      	movne	r2, #10
 8008398:	2208      	moveq	r2, #8
 800839a:	2100      	movs	r1, #0
 800839c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a0:	6865      	ldr	r5, [r4, #4]
 80083a2:	60a5      	str	r5, [r4, #8]
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	f2c0 8095 	blt.w	80084d4 <_printf_i+0x20c>
 80083aa:	6821      	ldr	r1, [r4, #0]
 80083ac:	f021 0104 	bic.w	r1, r1, #4
 80083b0:	6021      	str	r1, [r4, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d13d      	bne.n	8008432 <_printf_i+0x16a>
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	f040 808e 	bne.w	80084d8 <_printf_i+0x210>
 80083bc:	4665      	mov	r5, ip
 80083be:	2a08      	cmp	r2, #8
 80083c0:	d10b      	bne.n	80083da <_printf_i+0x112>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	07db      	lsls	r3, r3, #31
 80083c6:	d508      	bpl.n	80083da <_printf_i+0x112>
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	6862      	ldr	r2, [r4, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bfde      	ittt	le
 80083d0:	2330      	movle	r3, #48	; 0x30
 80083d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083da:	ebac 0305 	sub.w	r3, ip, r5
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	f8cd 8000 	str.w	r8, [sp]
 80083e4:	463b      	mov	r3, r7
 80083e6:	aa03      	add	r2, sp, #12
 80083e8:	4621      	mov	r1, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff fef6 	bl	80081dc <_printf_common>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d14d      	bne.n	8008490 <_printf_i+0x1c8>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	b005      	add	sp, #20
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	4839      	ldr	r0, [pc, #228]	; (80084e4 <_printf_i+0x21c>)
 8008400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	6821      	ldr	r1, [r4, #0]
 8008408:	1d1d      	adds	r5, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6015      	str	r5, [r2, #0]
 800840e:	060a      	lsls	r2, r1, #24
 8008410:	d50b      	bpl.n	800842a <_printf_i+0x162>
 8008412:	07ca      	lsls	r2, r1, #31
 8008414:	bf44      	itt	mi
 8008416:	f041 0120 	orrmi.w	r1, r1, #32
 800841a:	6021      	strmi	r1, [r4, #0]
 800841c:	b91b      	cbnz	r3, 8008426 <_printf_i+0x15e>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	f022 0220 	bic.w	r2, r2, #32
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	2210      	movs	r2, #16
 8008428:	e7b7      	b.n	800839a <_printf_i+0xd2>
 800842a:	064d      	lsls	r5, r1, #25
 800842c:	bf48      	it	mi
 800842e:	b29b      	uxthmi	r3, r3
 8008430:	e7ef      	b.n	8008412 <_printf_i+0x14a>
 8008432:	4665      	mov	r5, ip
 8008434:	fbb3 f1f2 	udiv	r1, r3, r2
 8008438:	fb02 3311 	mls	r3, r2, r1, r3
 800843c:	5cc3      	ldrb	r3, [r0, r3]
 800843e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008442:	460b      	mov	r3, r1
 8008444:	2900      	cmp	r1, #0
 8008446:	d1f5      	bne.n	8008434 <_printf_i+0x16c>
 8008448:	e7b9      	b.n	80083be <_printf_i+0xf6>
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	6825      	ldr	r5, [r4, #0]
 800844e:	6961      	ldr	r1, [r4, #20]
 8008450:	1d18      	adds	r0, r3, #4
 8008452:	6010      	str	r0, [r2, #0]
 8008454:	0628      	lsls	r0, r5, #24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	d501      	bpl.n	800845e <_printf_i+0x196>
 800845a:	6019      	str	r1, [r3, #0]
 800845c:	e002      	b.n	8008464 <_printf_i+0x19c>
 800845e:	066a      	lsls	r2, r5, #25
 8008460:	d5fb      	bpl.n	800845a <_printf_i+0x192>
 8008462:	8019      	strh	r1, [r3, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	4665      	mov	r5, ip
 800846a:	e7b9      	b.n	80083e0 <_printf_i+0x118>
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	1d19      	adds	r1, r3, #4
 8008470:	6011      	str	r1, [r2, #0]
 8008472:	681d      	ldr	r5, [r3, #0]
 8008474:	6862      	ldr	r2, [r4, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	4628      	mov	r0, r5
 800847a:	f7f7 fea9 	bl	80001d0 <memchr>
 800847e:	b108      	cbz	r0, 8008484 <_printf_i+0x1bc>
 8008480:	1b40      	subs	r0, r0, r5
 8008482:	6060      	str	r0, [r4, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2300      	movs	r3, #0
 800848a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848e:	e7a7      	b.n	80083e0 <_printf_i+0x118>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	462a      	mov	r2, r5
 8008494:	4639      	mov	r1, r7
 8008496:	4630      	mov	r0, r6
 8008498:	47c0      	blx	r8
 800849a:	3001      	adds	r0, #1
 800849c:	d0aa      	beq.n	80083f4 <_printf_i+0x12c>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	079b      	lsls	r3, r3, #30
 80084a2:	d413      	bmi.n	80084cc <_printf_i+0x204>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e7a3      	b.n	80083f8 <_printf_i+0x130>
 80084b0:	2301      	movs	r3, #1
 80084b2:	464a      	mov	r2, r9
 80084b4:	4639      	mov	r1, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	47c0      	blx	r8
 80084ba:	3001      	adds	r0, #1
 80084bc:	d09a      	beq.n	80083f4 <_printf_i+0x12c>
 80084be:	3501      	adds	r5, #1
 80084c0:	68e3      	ldr	r3, [r4, #12]
 80084c2:	9a03      	ldr	r2, [sp, #12]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	42ab      	cmp	r3, r5
 80084c8:	dcf2      	bgt.n	80084b0 <_printf_i+0x1e8>
 80084ca:	e7eb      	b.n	80084a4 <_printf_i+0x1dc>
 80084cc:	2500      	movs	r5, #0
 80084ce:	f104 0919 	add.w	r9, r4, #25
 80084d2:	e7f5      	b.n	80084c0 <_printf_i+0x1f8>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1ac      	bne.n	8008432 <_printf_i+0x16a>
 80084d8:	7803      	ldrb	r3, [r0, #0]
 80084da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e2:	e76c      	b.n	80083be <_printf_i+0xf6>
 80084e4:	08008979 	.word	0x08008979
 80084e8:	0800898a 	.word	0x0800898a

080084ec <__sread>:
 80084ec:	b510      	push	{r4, lr}
 80084ee:	460c      	mov	r4, r1
 80084f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f4:	f000 f8d4 	bl	80086a0 <_read_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	bfab      	itete	ge
 80084fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008500:	181b      	addge	r3, r3, r0
 8008502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008506:	bfac      	ite	ge
 8008508:	6563      	strge	r3, [r4, #84]	; 0x54
 800850a:	81a3      	strhlt	r3, [r4, #12]
 800850c:	bd10      	pop	{r4, pc}

0800850e <__swrite>:
 800850e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008512:	461f      	mov	r7, r3
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	05db      	lsls	r3, r3, #23
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	4616      	mov	r6, r2
 800851e:	d505      	bpl.n	800852c <__swrite+0x1e>
 8008520:	2302      	movs	r3, #2
 8008522:	2200      	movs	r2, #0
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	f000 f868 	bl	80085fc <_lseek_r>
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	4628      	mov	r0, r5
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f000 b817 	b.w	8008574 <_write_r>

08008546 <__sseek>:
 8008546:	b510      	push	{r4, lr}
 8008548:	460c      	mov	r4, r1
 800854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854e:	f000 f855 	bl	80085fc <_lseek_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	bf15      	itete	ne
 8008558:	6560      	strne	r0, [r4, #84]	; 0x54
 800855a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800855e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008562:	81a3      	strheq	r3, [r4, #12]
 8008564:	bf18      	it	ne
 8008566:	81a3      	strhne	r3, [r4, #12]
 8008568:	bd10      	pop	{r4, pc}

0800856a <__sclose>:
 800856a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856e:	f000 b813 	b.w	8008598 <_close_r>
	...

08008574 <_write_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4c07      	ldr	r4, [pc, #28]	; (8008594 <_write_r+0x20>)
 8008578:	4605      	mov	r5, r0
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	2200      	movs	r2, #0
 8008580:	6022      	str	r2, [r4, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f7f9 f9c4 	bl	8001910 <_write>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_write_r+0x1e>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	b103      	cbz	r3, 8008592 <_write_r+0x1e>
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20004cbc 	.word	0x20004cbc

08008598 <_close_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4c06      	ldr	r4, [pc, #24]	; (80085b4 <_close_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4605      	mov	r5, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	f7f9 fde8 	bl	8002178 <_close>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_close_r+0x1a>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_close_r+0x1a>
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20004cbc 	.word	0x20004cbc

080085b8 <_fstat_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4c07      	ldr	r4, [pc, #28]	; (80085d8 <_fstat_r+0x20>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4605      	mov	r5, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	f7f9 fde3 	bl	8002190 <_fstat>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d102      	bne.n	80085d4 <_fstat_r+0x1c>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	b103      	cbz	r3, 80085d4 <_fstat_r+0x1c>
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20004cbc 	.word	0x20004cbc

080085dc <_isatty_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4c06      	ldr	r4, [pc, #24]	; (80085f8 <_isatty_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4605      	mov	r5, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	f7f9 fde2 	bl	80021b0 <_isatty>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_isatty_r+0x1a>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_isatty_r+0x1a>
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20004cbc 	.word	0x20004cbc

080085fc <_lseek_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4c07      	ldr	r4, [pc, #28]	; (800861c <_lseek_r+0x20>)
 8008600:	4605      	mov	r5, r0
 8008602:	4608      	mov	r0, r1
 8008604:	4611      	mov	r1, r2
 8008606:	2200      	movs	r2, #0
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	f7f9 fddb 	bl	80021c6 <_lseek>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_lseek_r+0x1e>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	b103      	cbz	r3, 800861a <_lseek_r+0x1e>
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20004cbc 	.word	0x20004cbc

08008620 <memmove>:
 8008620:	4288      	cmp	r0, r1
 8008622:	b510      	push	{r4, lr}
 8008624:	eb01 0302 	add.w	r3, r1, r2
 8008628:	d807      	bhi.n	800863a <memmove+0x1a>
 800862a:	1e42      	subs	r2, r0, #1
 800862c:	4299      	cmp	r1, r3
 800862e:	d00a      	beq.n	8008646 <memmove+0x26>
 8008630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008634:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008638:	e7f8      	b.n	800862c <memmove+0xc>
 800863a:	4283      	cmp	r3, r0
 800863c:	d9f5      	bls.n	800862a <memmove+0xa>
 800863e:	1881      	adds	r1, r0, r2
 8008640:	1ad2      	subs	r2, r2, r3
 8008642:	42d3      	cmn	r3, r2
 8008644:	d100      	bne.n	8008648 <memmove+0x28>
 8008646:	bd10      	pop	{r4, pc}
 8008648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800864c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008650:	e7f7      	b.n	8008642 <memmove+0x22>

08008652 <_realloc_r>:
 8008652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008654:	4607      	mov	r7, r0
 8008656:	4614      	mov	r4, r2
 8008658:	460e      	mov	r6, r1
 800865a:	b921      	cbnz	r1, 8008666 <_realloc_r+0x14>
 800865c:	4611      	mov	r1, r2
 800865e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008662:	f7fe bf83 	b.w	800756c <_malloc_r>
 8008666:	b922      	cbnz	r2, 8008672 <_realloc_r+0x20>
 8008668:	f7fe ff32 	bl	80074d0 <_free_r>
 800866c:	4625      	mov	r5, r4
 800866e:	4628      	mov	r0, r5
 8008670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008672:	f000 f827 	bl	80086c4 <_malloc_usable_size_r>
 8008676:	42a0      	cmp	r0, r4
 8008678:	d20f      	bcs.n	800869a <_realloc_r+0x48>
 800867a:	4621      	mov	r1, r4
 800867c:	4638      	mov	r0, r7
 800867e:	f7fe ff75 	bl	800756c <_malloc_r>
 8008682:	4605      	mov	r5, r0
 8008684:	2800      	cmp	r0, #0
 8008686:	d0f2      	beq.n	800866e <_realloc_r+0x1c>
 8008688:	4631      	mov	r1, r6
 800868a:	4622      	mov	r2, r4
 800868c:	f7fe ff0c 	bl	80074a8 <memcpy>
 8008690:	4631      	mov	r1, r6
 8008692:	4638      	mov	r0, r7
 8008694:	f7fe ff1c 	bl	80074d0 <_free_r>
 8008698:	e7e9      	b.n	800866e <_realloc_r+0x1c>
 800869a:	4635      	mov	r5, r6
 800869c:	e7e7      	b.n	800866e <_realloc_r+0x1c>
	...

080086a0 <_read_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4c07      	ldr	r4, [pc, #28]	; (80086c0 <_read_r+0x20>)
 80086a4:	4605      	mov	r5, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	6022      	str	r2, [r4, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f7f9 fd45 	bl	800213e <_read>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_read_r+0x1e>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	b103      	cbz	r3, 80086be <_read_r+0x1e>
 80086bc:	602b      	str	r3, [r5, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	20004cbc 	.word	0x20004cbc

080086c4 <_malloc_usable_size_r>:
 80086c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c8:	1f18      	subs	r0, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bfbc      	itt	lt
 80086ce:	580b      	ldrlt	r3, [r1, r0]
 80086d0:	18c0      	addlt	r0, r0, r3
 80086d2:	4770      	bx	lr

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
