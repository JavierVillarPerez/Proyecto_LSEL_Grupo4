
AquaSmart_22420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a448  0800a448  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a450  0800a450  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a450  0800a450  0001a450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800a458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fb0  20000114  0800a56c  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050c4  0800a56c  000250c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e23c  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e86  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  00042208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001318  00000000  00000000  000436e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b57  00000000  00000000  00044a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131d8  00000000  00000000  0006a557  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f20  00000000  00000000  0007d72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015264f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e80  00000000  00000000  001526cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a154 	.word	0x0800a154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800a154 	.word	0x0800a154

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_write>:

SPI_HandleTypeDef hspi1;


/*DEBUG FUNCTION*/
int _write(int file, char *ptr, int len) {
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e009      	b.n	80005e4 <_write+0x26>
		ITM_SendChar(*ptr++);
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffc9 	bl	8000570 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf1      	blt.n	80005d0 <_write+0x12>
	}
	return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LoRa_initialization>:


void LoRa_initialization(uint8_t init)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	/*Initialize ring buffer*/
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 8000602:	2103      	movs	r1, #3
 8000604:	4829      	ldr	r0, [pc, #164]	; (80006ac <LoRa_initialization+0xb4>)
 8000606:	f001 fc7e 	bl	8001f06 <ringbuf_init>

	//Initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <LoRa_initialization+0xb8>)
 800060c:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <LoRa_initialization+0xbc>)
 800060e:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <LoRa_initialization+0xb8>)
 8000612:	2201      	movs	r2, #1
 8000614:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <LoRa_initialization+0xb8>)
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <LoRa_initialization+0xc0>)
 800061a:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <LoRa_initialization+0xb8>)
 800061e:	2210      	movs	r2, #16
 8000620:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <LoRa_initialization+0xb8>)
 8000624:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <LoRa_initialization+0xbc>)
 8000626:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <LoRa_initialization+0xb8>)
 800062a:	2202      	movs	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <LoRa_initialization+0xb8>)
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <LoRa_initialization+0xc4>)
 8000632:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <LoRa_initialization+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <LoRa_initialization+0xc8>)
 800063e:	2200      	movs	r2, #0
 8000640:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <LoRa_initialization+0xc8>)
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <LoRa_initialization+0xb8>)
 8000646:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8000648:	481e      	ldr	r0, [pc, #120]	; (80006c4 <LoRa_initialization+0xcc>)
 800064a:	f008 fd9d 	bl	8009188 <puts>
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 800064e:	230a      	movs	r3, #10
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2303      	movs	r3, #3
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	2201      	movs	r2, #1
 800065a:	2100      	movs	r1, #0
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <LoRa_initialization+0xc8>)
 800065e:	f000 fc69 	bl	8000f34 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	printf("Done configuring LoRaModule\r\n");
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <LoRa_initialization+0xd0>)
 8000664:	f008 fd90 	bl	8009188 <puts>
	while (ret!=1){
 8000668:	e018      	b.n	800069c <LoRa_initialization+0xa4>
		if (init == 1) {
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d108      	bne.n	8000682 <LoRa_initialization+0x8a>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000670:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000674:	2110      	movs	r1, #16
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <LoRa_initialization+0xc8>)
 8000678:	f000 fbc5 	bl	8000e06 <SX1278_LoRaEntryTx>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e007      	b.n	8000692 <LoRa_initialization+0x9a>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 8000682:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000686:	2110      	movs	r1, #16
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoRa_initialization+0xc8>)
 800068a:	f000 fb13 	bl	8000cb4 <SX1278_LoRaEntryRx>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
		}
		printf("ret: %d\n", ret);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoRa_initialization+0xd4>)
 8000698:	f008 fd02 	bl	80090a0 <iprintf>
	while (ret!=1){
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1e3      	bne.n	800066a <LoRa_initialization+0x72>
	}
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20004bd0 	.word	0x20004bd0
 80006b0:	20004bb4 	.word	0x20004bb4
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020000 	.word	0x40020000
 80006bc:	20004a50 	.word	0x20004a50
 80006c0:	20004aa8 	.word	0x20004aa8
 80006c4:	0800a16c 	.word	0x0800a16c
 80006c8:	0800a188 	.word	0x0800a188
 80006cc:	0800a1a8 	.word	0x0800a1a8

080006d0 <send_data>:

void send_data(void)
{
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	b09b      	sub	sp, #108	; 0x6c
 80006d4:	af06      	add	r7, sp, #24
	sensor_buf_t data;
	uint8_t ret;
	char buffer[64];
	uint8_t message_length;

	data = ringbuf_get(&data_ring_buff); //Take data from ring buffer.
 80006d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006da:	4921      	ldr	r1, [pc, #132]	; (8000760 <send_data+0x90>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fc92 	bl	8002006 <ringbuf_get>

	/*Send data by LoRa*/
	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d", data.Device_ID, data.Sensor_ID, data.measure, data.alarm, data.error, data.threshold_L, data.threshold_H);
 80006e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006e6:	461e      	mov	r6, r3
 80006e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80006ec:	469c      	mov	ip, r3
 80006ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80006f2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80006f6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80006fa:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 80006fe:	4604      	mov	r4, r0
 8000700:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8000704:	4605      	mov	r5, r0
 8000706:	4638      	mov	r0, r7
 8000708:	9504      	str	r5, [sp, #16]
 800070a:	9403      	str	r4, [sp, #12]
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	4663      	mov	r3, ip
 8000714:	4632      	mov	r2, r6
 8000716:	4913      	ldr	r1, [pc, #76]	; (8000764 <send_data+0x94>)
 8000718:	f008 fd4e 	bl	80091b8 <siprintf>
 800071c:	4603      	mov	r3, r0
 800071e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000722:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000726:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800072a:	4619      	mov	r1, r3
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <send_data+0x98>)
 800072e:	f000 fb6a 	bl	8000e06 <SX1278_LoRaEntryTx>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	printf("Sending %s\r\n", buffer);
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <send_data+0x9c>)
 800073e:	f008 fcaf 	bl	80090a0 <iprintf>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 8000742:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000746:	4639      	mov	r1, r7
 8000748:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <send_data+0x98>)
 800074e:	f000 fbb2 	bl	8000eb6 <SX1278_LoRaTxPacket>
 8000752:	4603      	mov	r3, r0
 8000754:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
}
 8000758:	bf00      	nop
 800075a:	3754      	adds	r7, #84	; 0x54
 800075c:	46bd      	mov	sp, r7
 800075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000760:	20004bd0 	.word	0x20004bd0
 8000764:	0800a1b4 	.word	0x0800a1b4
 8000768:	20004aa8 	.word	0x20004aa8
 800076c:	0800a1d4 	.word	0x0800a1d4

08000770 <receive_data>:

void receive_data(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b092      	sub	sp, #72	; 0x48
 8000774:	af00      	add	r7, sp, #0
	uint8_t ret;
	char buffer[64];

	ret = SX1278_LoRaRxPacket(&SX1278);
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <receive_data+0x40>)
 8000778:	f000 fb01 	bl	8000d7e <SX1278_LoRaRxPacket>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret > 0) {
 8000782:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00d      	beq.n	80007a6 <receive_data+0x36>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 800078a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <receive_data+0x40>)
 8000794:	f000 fbf6 	bl	8000f84 <SX1278_read>
		printf("Content (%d): %s\r\n", ret, buffer);
 8000798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800079c:	1d3a      	adds	r2, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <receive_data+0x44>)
 80007a2:	f008 fc7d 	bl	80090a0 <iprintf>
	}
}
 80007a6:	bf00      	nop
 80007a8:	3748      	adds	r7, #72	; 0x48
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20004aa8 	.word	0x20004aa8
 80007b4:	0800a1e4 	.word	0x0800a1e4

080007b8 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ringbuf_put(&data_ring_buff, data);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <save_new_data+0x20>)
 80007ca:	f001 fbb9 	bl	8001f40 <ringbuf_put>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20004bd0 	.word	0x20004bd0

080007dc <SX1278_hw_init>:
#include "main.h"
//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80007e4:	2101      	movs	r1, #1
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f80d 	bl	8000806 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	2201      	movs	r2, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	f002 fd05 	bl	8003208 <HAL_GPIO_WritePin>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6958      	ldr	r0, [r3, #20]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	b299      	uxth	r1, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	f002 fcee 	bl	8003208 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800083c:	2101      	movs	r1, #1
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffe1 	bl	8000806 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6858      	ldr	r0, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	f002 fcd9 	bl	8003208 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f855 	bl	8000906 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6858      	ldr	r0, [r3, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	f002 fccd 	bl	8003208 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f000 f849 	bl	8000906 <SX1278_hw_DelayMs>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000888:	2100      	movs	r1, #0
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffbb 	bl	8000806 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6998      	ldr	r0, [r3, #24]
 8000894:	1cf9      	adds	r1, r7, #3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	2201      	movs	r2, #1
 800089c:	f004 f89c 	bl	80049d8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80008a0:	bf00      	nop
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 fb6c 	bl	8004f84 <HAL_SPI_GetState>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d1f7      	bne.n	80008a2 <SX1278_hw_SPICommand+0x26>
		;
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af02      	add	r7, sp, #8
 80008c0:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80008ca:	2100      	movs	r1, #0
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff9a 	bl	8000806 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6998      	ldr	r0, [r3, #24]
 80008d6:	f107 020e 	add.w	r2, r7, #14
 80008da:	f107 010f 	add.w	r1, r7, #15
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2301      	movs	r3, #1
 80008e6:	f004 f9ab 	bl	8004c40 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80008ea:	bf00      	nop
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fb47 	bl	8004f84 <HAL_SPI_GetState>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d1f7      	bne.n	80008ec <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f001 fe2c 	bl	800256c <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	b29b      	uxth	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	4610      	mov	r0, r2
 8000932:	f002 fc51 	bl	80031d8 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2db      	uxtb	r3, r3
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	460b      	mov	r3, r1
 8000954:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff8c 	bl	800087c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ffa6 	bl	80008ba <SX1278_hw_SPIReadByte>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2101      	movs	r1, #1
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff44 	bl	8000806 <SX1278_hw_SetNSS>
	return tmp;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
 8000994:	4613      	mov	r3, r2
 8000996:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff31 	bl	8000806 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	4610      	mov	r0, r2
 80009b4:	f7ff ff62 	bl	800087c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	78ba      	ldrb	r2, [r7, #2]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff5b 	bl	800087c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2101      	movs	r1, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff1a 	bl	8000806 <SX1278_hw_SetNSS>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 80009da:	b590      	push	{r4, r7, lr}
 80009dc:	b087      	sub	sp, #28
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	461a      	mov	r2, r3
 80009e6:	460b      	mov	r3, r1
 80009e8:	72fb      	strb	r3, [r7, #11]
 80009ea:	4613      	mov	r3, r2
 80009ec:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80009ee:	7abb      	ldrb	r3, [r7, #10]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d927      	bls.n	8000a44 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff03 	bl	8000806 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	7afa      	ldrb	r2, [r7, #11]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff37 	bl	800087c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	75fb      	strb	r3, [r7, #23]
 8000a12:	e00c      	b.n	8000a2e <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6819      	ldr	r1, [r3, #0]
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	18d4      	adds	r4, r2, r3
 8000a1e:	4608      	mov	r0, r1
 8000a20:	f7ff ff4b 	bl	80008ba <SX1278_hw_SPIReadByte>
 8000a24:	4603      	mov	r3, r0
 8000a26:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	75fb      	strb	r3, [r7, #23]
 8000a2e:	7dfa      	ldrb	r2, [r7, #23]
 8000a30:	7abb      	ldrb	r3, [r7, #10]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3ee      	bcc.n	8000a14 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fee2 	bl	8000806 <SX1278_hw_SetNSS>
 8000a42:	e000      	b.n	8000a46 <SX1278_SPIBurstRead+0x6c>
		return;
 8000a44:	bf00      	nop
	}
}
 8000a46:	371c      	adds	r7, #28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	461a      	mov	r2, r3
 8000a58:	460b      	mov	r3, r1
 8000a5a:	72fb      	strb	r3, [r7, #11]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000a60:	7abb      	ldrb	r3, [r7, #10]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d929      	bls.n	8000aba <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff feca 	bl	8000806 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	7afb      	ldrb	r3, [r7, #11]
 8000a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f7ff fefb 	bl	800087c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	75fb      	strb	r3, [r7, #23]
 8000a8a:	e00b      	b.n	8000aa4 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff feef 	bl	800087c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	75fb      	strb	r3, [r7, #23]
 8000aa4:	7dfa      	ldrb	r2, [r7, #23]
 8000aa6:	7abb      	ldrb	r3, [r7, #10]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3ef      	bcc.n	8000a8c <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fea7 	bl	8000806 <SX1278_hw_SetNSS>
 8000ab8:	e000      	b.n	8000abc <SX1278_SPIBurstWrite+0x70>
		return;
 8000aba:	bf00      	nop
	}
}
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af02      	add	r7, sp, #8
 8000ac8:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7919      	ldrb	r1, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	795a      	ldrb	r2, [r3, #5]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7998      	ldrb	r0, [r3, #6]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	79db      	ldrb	r3, [r3, #7]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	4603      	mov	r3, r0
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f804 	bl	8000aec <SX1278_config>
			module->LoRa_BW);
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4603      	mov	r3, r0
 8000afc:	70fb      	strb	r3, [r7, #3]
 8000afe:	460b      	mov	r3, r1
 8000b00:	70bb      	strb	r3, [r7, #2]
 8000b02:	4613      	mov	r3, r2
 8000b04:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f8aa 	bl	8000c60 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000b0c:	200f      	movs	r0, #15
 8000b0e:	f7ff fefa 	bl	8000906 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f8b4 	bl	8000c80 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000b18:	78fa      	ldrb	r2, [r7, #3]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <SX1278_config+0x144>)
 8000b22:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000b24:	2303      	movs	r3, #3
 8000b26:	2106      	movs	r1, #6
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff8f 	bl	8000a4c <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8000b2e:	78bb      	ldrb	r3, [r7, #2]
 8000b30:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <SX1278_config+0x148>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	461a      	mov	r2, r3
 8000b36:	2109      	movs	r1, #9
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff25 	bl	8000988 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000b3e:	220b      	movs	r2, #11
 8000b40:	210b      	movs	r1, #11
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff20 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000b48:	2223      	movs	r2, #35	; 0x23
 8000b4a:	210c      	movs	r1, #12
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff1b 	bl	8000988 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8000b52:	787b      	ldrb	r3, [r7, #1]
 8000b54:	4a38      	ldr	r2, [pc, #224]	; (8000c38 <SX1278_config+0x14c>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	d131      	bne.n	8000bc0 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000b5c:	7e3b      	ldrb	r3, [r7, #24]
 8000b5e:	4a37      	ldr	r2, [pc, #220]	; (8000c3c <SX1278_config+0x150>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000b66:	3303      	adds	r3, #3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	211d      	movs	r1, #29
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff0a 	bl	8000988 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <SX1278_config+0x14c>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000b7e:	3307      	adds	r3, #7
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	211e      	movs	r1, #30
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fefe 	bl	8000988 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000b8c:	2131      	movs	r1, #49	; 0x31
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fedb 	bl	800094a <SX1278_SPIRead>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	f023 0307 	bic.w	r3, r3, #7
 8000b9e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f043 0305 	orr.w	r3, r3, #5
 8000ba6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	461a      	mov	r2, r3
 8000bac:	2131      	movs	r1, #49	; 0x31
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff feea 	bl	8000988 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000bb4:	220c      	movs	r2, #12
 8000bb6:	2137      	movs	r1, #55	; 0x37
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fee5 	bl	8000988 <SX1278_SPIWrite>
 8000bbe:	e017      	b.n	8000bf0 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000bc0:	7e3b      	ldrb	r3, [r7, #24]
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <SX1278_config+0x150>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000bca:	3302      	adds	r3, #2
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	211d      	movs	r1, #29
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fed8 	bl	8000988 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <SX1278_config+0x14c>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000be2:	3307      	adds	r3, #7
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	211e      	movs	r1, #30
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fecc 	bl	8000988 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	211f      	movs	r1, #31
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fec7 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fec2 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000c04:	220c      	movs	r2, #12
 8000c06:	2121      	movs	r1, #33	; 0x21
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff febd 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2141      	movs	r1, #65	; 0x41
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff feb8 	bl	8000988 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f80d 	bl	8000c40 <SX1278_standby>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	0800a288 	.word	0x0800a288
 8000c34:	0800a28c 	.word	0x0800a28c
 8000c38:	0800a290 	.word	0x0800a290
 8000c3c:	0800a298 	.word	0x0800a298

08000c40 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000c48:	2209      	movs	r2, #9
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fe9b 	bl	8000988 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	725a      	strb	r2, [r3, #9]
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000c68:	2208      	movs	r2, #8
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fe8b 	bl	8000988 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	725a      	strb	r2, [r3, #9]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000c88:	2288      	movs	r2, #136	; 0x88
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fe7b 	bl	8000988 <SX1278_SPIWrite>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000ca2:	22ff      	movs	r2, #255	; 0xff
 8000ca4:	2112      	movs	r1, #18
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fe6e 	bl	8000988 <SX1278_SPIWrite>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	7afa      	ldrb	r2, [r7, #11]
 8000cc6:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fefa 	bl	8000ac2 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000cce:	2284      	movs	r2, #132	; 0x84
 8000cd0:	214d      	movs	r1, #77	; 0x4d
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fe58 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	2124      	movs	r1, #36	; 0x24
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fe53 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff fe4e 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000cec:	223f      	movs	r2, #63	; 0x3f
 8000cee:	2111      	movs	r1, #17
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fe49 	bl	8000988 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f7ff ffcf 	bl	8000c9a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	2122      	movs	r1, #34	; 0x22
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff fe40 	bl	8000988 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000d08:	210f      	movs	r1, #15
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff fe1d 	bl	800094a <SX1278_SPIRead>
 8000d10:	4603      	mov	r3, r0
 8000d12:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	461a      	mov	r2, r3
 8000d18:	210d      	movs	r1, #13
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fe34 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000d20:	228d      	movs	r2, #141	; 0x8d
 8000d22:	2101      	movs	r1, #1
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff fe2f 	bl	8000988 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000d32:	2118      	movs	r1, #24
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fe08 	bl	800094a <SX1278_SPIRead>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d104      	bne.n	8000d4e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2203      	movs	r2, #3
 8000d48:	725a      	strb	r2, [r3, #9]
			return 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e013      	b.n	8000d76 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d109      	bne.n	8000d6e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd68 	bl	8000834 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff feac 	bl	8000ac2 <SX1278_defaultConfig>
			return 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e003      	b.n	8000d76 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff fdc9 	bl	8000906 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000d74:	e7dd      	b.n	8000d32 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fdc6 	bl	800091c <SX1278_hw_GetDIO0>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d030      	beq.n	8000df8 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	330a      	adds	r3, #10
 8000d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f008 f8cc 	bl	8008f3e <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000da6:	2110      	movs	r1, #16
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fdce 	bl	800094a <SX1278_SPIRead>
 8000dae:	4603      	mov	r3, r0
 8000db0:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	461a      	mov	r2, r3
 8000db6:	210d      	movs	r1, #13
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fde5 	bl	8000988 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d103      	bne.n	8000dce <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e005      	b.n	8000dda <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000dce:	2113      	movs	r1, #19
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fdba 	bl	800094a <SX1278_SPIRead>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f103 020a 	add.w	r2, r3, #10
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2100      	movs	r1, #0
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fdf8 	bl	80009da <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff51 	bl	8000c9a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7afa      	ldrb	r2, [r7, #11]
 8000e18:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff fe51 	bl	8000ac2 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000e20:	2287      	movs	r2, #135	; 0x87
 8000e22:	214d      	movs	r1, #77	; 0x4d
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f7ff fdaf 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2124      	movs	r1, #36	; 0x24
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff fdaa 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000e34:	2241      	movs	r2, #65	; 0x41
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff fda5 	bl	8000988 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f7ff ff2b 	bl	8000c9a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000e44:	22f7      	movs	r2, #247	; 0xf7
 8000e46:	2111      	movs	r1, #17
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fd9d 	bl	8000988 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000e4e:	7afb      	ldrb	r3, [r7, #11]
 8000e50:	461a      	mov	r2, r3
 8000e52:	2122      	movs	r1, #34	; 0x22
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fd97 	bl	8000988 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000e5a:	210e      	movs	r1, #14
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd74 	bl	800094a <SX1278_SPIRead>
 8000e62:	4603      	mov	r3, r0
 8000e64:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	210d      	movs	r1, #13
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f7ff fd8b 	bl	8000988 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000e72:	2122      	movs	r1, #34	; 0x22
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff fd68 	bl	800094a <SX1278_SPIRead>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000e7e:	7dba      	ldrb	r2, [r7, #22]
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d104      	bne.n	8000e90 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	725a      	strb	r2, [r3, #9]
			return 1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e00e      	b.n	8000eae <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1ea      	bne.n	8000e72 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fcc7 	bl	8000834 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff fe0b 	bl	8000ac2 <SX1278_defaultConfig>
			return 0;
 8000eac:	2300      	movs	r3, #0
		}
	}
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	2100      	movs	r1, #0
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fdbd 	bl	8000a4c <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000ed2:	228b      	movs	r2, #139	; 0x8b
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff fd56 	bl	8000988 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fd1b 	bl	800091c <SX1278_hw_GetDIO0>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000eec:	2112      	movs	r1, #18
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff fd2b 	bl	800094a <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fed0 	bl	8000c9a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fea0 	bl	8000c40 <SX1278_standby>
			return 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e013      	b.n	8000f2c <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fc8d 	bl	8000834 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff fdd1 	bl	8000ac2 <SX1278_defaultConfig>
			return 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e003      	b.n	8000f2c <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fcee 	bl	8000906 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000f2a:	e7d7      	b.n	8000edc <SX1278_LoRaTxPacket+0x26>
	}
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	70fb      	strb	r3, [r7, #3]
 8000f46:	460b      	mov	r3, r1
 8000f48:	70bb      	strb	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc42 	bl	80007dc <SX1278_hw_init>
	module->frequency = frequency;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	78ba      	ldrb	r2, [r7, #2]
 8000f62:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	787a      	ldrb	r2, [r7, #1]
 8000f68:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7c3a      	ldrb	r2, [r7, #16]
 8000f6e:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7d3a      	ldrb	r2, [r7, #20]
 8000f74:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fda3 	bl	8000ac2 <SX1278_defaultConfig>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d003      	beq.n	8000fa6 <SX1278_read+0x22>
		length = module->readBytes;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000fa4:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	330a      	adds	r3, #10
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	4619      	mov	r1, r3
 8000fae:	68b8      	ldr	r0, [r7, #8]
 8000fb0:	f007 ffba 	bl	8008f28 <memcpy>
	rxBuf[length] = '\0';
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <PreSleepProcessing>:
void PreSleepProcessing(uint32_t *ulExpectedIdleTime);
void PostSleepProcessing(uint32_t *ulExpectedIdleTime);

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e01c      	b.n	8001066 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d113      	bne.n	8001060 <fsm_fire+0x44>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
      if (t->out)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00c      	beq.n	8001070 <fsm_fire+0x54>
        t->out(this);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	4798      	blx	r3
      break;
 800105e:	e007      	b.n	8001070 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3310      	adds	r3, #16
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	dade      	bge.n	800102c <fsm_fire+0x10>
    }
  }
}
 800106e:	e000      	b.n	8001072 <fsm_fire+0x56>
      break;
 8001070:	bf00      	nop
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <error>:

int error (fsm_t* this) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	889b      	ldrh	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <error+0x26>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	889a      	ldrh	r2, [r3, #4]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d901      	bls.n	80010ba <error+0x2a>
		return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <error+0x2c>
	else return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <no_error>:

int no_error (fsm_t* this) {
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <no_error+0x2a>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	889a      	ldrh	r2, [r3, #4]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d801      	bhi.n	80010f2 <no_error+0x2a>
		return 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <no_error+0x2c>
	else return 0;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <timer_sleep+0x2c>
 800111a:	f001 fa1b 	bl	8002554 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d301      	bcc.n	800112c <timer_sleep+0x2c>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <timer_sleep+0x2e>
	else return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <timer_adc>:

int timer_adc (fsm_t* this) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>adc_timer);
 8001140:	f001 fa08 	bl	8002554 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <timer_adc+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	bf8c      	ite	hi
 800114e:	2301      	movhi	r3, #1
 8001150:	2300      	movls	r3, #0
 8001152:	b2db      	uxtb	r3, r3
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20004c48 	.word	0x20004c48

08001160 <timer_setup>:

int timer_setup (fsm_t* this) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8001172:	f001 f9ef 	bl	8002554 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	bf8c      	ite	hi
 8001180:	2301      	movhi	r3, #1
 8001182:	2300      	movls	r3, #0
 8001184:	b2db      	uxtb	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <warned>:

int warned (fsm_t* this) {
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	bfd4      	ite	le
 80011a8:	2301      	movle	r3, #1
 80011aa:	2300      	movgt	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	60bb      	str	r3, [r7, #8]

	if(config->measure_count>=(config->measure_average))
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	7f1b      	ldrb	r3, [r3, #28]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d301      	bcc.n	80011de <timer_measure+0x24>
	return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e009      	b.n	80011f2 <timer_measure+0x38>
	else return (HAL_GetTick()>=(config->measure_timer));
 80011de:	f001 f9b9 	bl	8002554 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	bf2c      	ite	cs
 80011ec:	2301      	movcs	r3, #1
 80011ee:	2300      	movcc	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <warning_limit>:

int warning_limit (fsm_t* this) {
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	2b01      	cmp	r3, #1
 8001212:	bfcc      	ite	gt
 8001214:	2301      	movgt	r3, #1
 8001216:	2300      	movle	r3, #0
 8001218:	b2db      	uxtb	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <measuring>:

void measuring (fsm_t* this) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8001230:	2300      	movs	r3, #0
 8001232:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <measuring+0x54>)
 8001240:	f001 faf3 	bl	800282a <HAL_ADC_GetValue>
 8001244:	4603      	mov	r3, r0
 8001246:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	885a      	ldrh	r2, [r3, #2]
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	4413      	add	r3, r2
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	7f1b      	ldrb	r3, [r3, #28]
 800125a:	3301      	adds	r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 8001262:	f001 f977 	bl	8002554 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800126c:	4413      	add	r3, r2
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	619a      	str	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20004c00 	.word	0x20004c00

08001280 <process_data>:

void process_data (fsm_t* this) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	885a      	ldrh	r2, [r3, #2]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <process_data+0x50>)
 800129c:	f001 fa92 	bl	80027c4 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	889a      	ldrh	r2, [r3, #4]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d809      	bhi.n	80012c0 <process_data+0x40>
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	889a      	ldrh	r2, [r3, #4]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d303      	bcc.n	80012c0 <process_data+0x40>
	{
		config->alarm = 0;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2200      	movs	r2, #0
 80012bc:	719a      	strb	r2, [r3, #6]
 80012be:	e002      	b.n	80012c6 <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2201      	movs	r2, #1
 80012c4:	719a      	strb	r2, [r3, #6]
	}

}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20004c00 	.word	0x20004c00

080012d4 <alert>:
void alert (fsm_t* this) {
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	615a      	str	r2, [r3, #20]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <sleep>:

void sleep (fsm_t* this) { // led orange
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 800130e:	f001 f921 	bl	8002554 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001318:	4413      	add	r3, r2
 800131a:	461a      	mov	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <sleep+0x5c>)
 800132a:	f001 ff6d 	bl	8003208 <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2201      	movs	r2, #1
 8001332:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2200      	movs	r2, #0
 8001338:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b01      	cmp	r3, #1
 8001340:	dd03      	ble.n	800134a <sleep+0x4e>
	{
		config->error = 1;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2201      	movs	r2, #1
 8001346:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 8001348:	e002      	b.n	8001350 <sleep+0x54>
		config->error = 0;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2200      	movs	r2, #0
 800134e:	71da      	strb	r2, [r3, #7]
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40020c00 	.word	0x40020c00

0800135c <init_adc>:

void init_adc (fsm_t* this) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <init_adc+0x28>)
 8001366:	f001 fa2d 	bl	80027c4 <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 1000;
 800136a:	f001 f8f3 	bl	8002554 <HAL_GetTick>
 800136e:	4603      	mov	r3, r0
 8001370:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001374:	461a      	mov	r2, r3
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <init_adc+0x2c>)
 8001378:	601a      	str	r2, [r3, #0]

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20004c00 	.word	0x20004c00
 8001388:	20004c48 	.word	0x20004c48

0800138c <setting_up>:


void setting_up (fsm_t* this) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2200      	movs	r2, #0
 80013a2:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2200      	movs	r2, #0
 80013ae:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2200      	movs	r2, #0
 80013b4:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 80013b6:	f001 f8cd 	bl	8002554 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80013c0:	4413      	add	r3, r2
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	4807      	ldr	r0, [pc, #28]	; (80013f0 <setting_up+0x64>)
 80013d2:	f001 ff19 	bl	8003208 <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <setting_up+0x68>)
 80013d8:	f001 f92e 	bl	8002638 <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2201      	movs	r2, #1
 80013e0:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2200      	movs	r2, #0
 80013e6:	725a      	strb	r2, [r3, #9]
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	20004c00 	.word	0x20004c00

080013f8 <save_data>:

void save_data (fsm_t* this)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	8bdb      	ldrh	r3, [r3, #30]
 800140e:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	799b      	ldrb	r3, [r3, #6]
 800141c:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	79db      	ldrb	r3, [r3, #7]
 8001422:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	889b      	ldrh	r3, [r3, #4]
 8001428:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001434:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800143e:	f7ff f9bb 	bl	80007b8 <save_new_data>
}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 8001456:	4905      	ldr	r1, [pc, #20]	; (800146c <fsm_sensor_init+0x20>)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fdcd 	bl	8000ff8 <fsm_init>
  f->param = c;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000

08001470 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4603      	mov	r3, r0
 8001480:	817b      	strh	r3, [r7, #10]
 8001482:	460b      	mov	r3, r1
 8001484:	727b      	strb	r3, [r7, #9]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	897a      	ldrh	r2, [r7, #10]
 80014d6:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	7a7a      	ldrb	r2, [r7, #9]
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	7e3a      	ldrb	r2, [r7, #24]
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8bba      	ldrh	r2, [r7, #28]
 80014f2:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8c3a      	ldrh	r2, [r7, #32]
 80014f8:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014fe:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001504:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800150a:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001510:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001516:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f000 ffad 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f87b 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f000 f997 	bl	8001864 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001536:	f000 f931 	bl	800179c <MX_SPI1_Init>
  MX_ADC1_Init();
 800153a:	f000 f8dd 	bl	80016f8 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800153e:	f000 f963 	bl	8001808 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001542:	f004 fad7 	bl	8005af4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <main+0xb0>)
 8001548:	2134      	movs	r1, #52	; 0x34
 800154a:	2001      	movs	r0, #1
 800154c:	f004 fc78 	bl	8005e40 <osMessageQueueNew>
 8001550:	4602      	mov	r2, r0
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <main+0xb4>)
 8001554:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor2_attributes);
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <main+0xb8>)
 8001558:	2134      	movs	r1, #52	; 0x34
 800155a:	2001      	movs	r0, #1
 800155c:	f004 fc70 	bl	8005e40 <osMessageQueueNew>
 8001560:	4602      	mov	r2, r0
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <main+0xbc>)
 8001564:	601a      	str	r2, [r3, #0]

  /* creation of myQueueDataSaved */
  myQueueDataSavedHandle = osMessageQueueNew (2, sizeof(t_bool), &myQueueDataSaved_attributes);
 8001566:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <main+0xc0>)
 8001568:	2101      	movs	r1, #1
 800156a:	2002      	movs	r0, #2
 800156c:	f004 fc68 	bl	8005e40 <osMessageQueueNew>
 8001570:	4602      	mov	r2, r0
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <main+0xc4>)
 8001574:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <main+0xc8>)
 8001578:	2100      	movs	r1, #0
 800157a:	481d      	ldr	r0, [pc, #116]	; (80015f0 <main+0xcc>)
 800157c:	f004 fb4c 	bl	8005c18 <osThreadNew>
 8001580:	4602      	mov	r2, r0
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <main+0xd0>)
 8001584:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <main+0xd4>)
 800158c:	4619      	mov	r1, r3
 800158e:	481b      	ldr	r0, [pc, #108]	; (80015fc <main+0xd8>)
 8001590:	f004 fb42 	bl	8005c18 <osThreadNew>
 8001594:	4602      	mov	r2, r0
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <main+0xdc>)
 8001598:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 800159a:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <main+0xe0>)
 800159c:	2100      	movs	r1, #0
 800159e:	481a      	ldr	r0, [pc, #104]	; (8001608 <main+0xe4>)
 80015a0:	f004 fb3a 	bl	8005c18 <osThreadNew>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <main+0xe8>)
 80015a8:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 80015aa:	463b      	mov	r3, r7
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <main+0xec>)
 80015ae:	4619      	mov	r1, r3
 80015b0:	4818      	ldr	r0, [pc, #96]	; (8001614 <main+0xf0>)
 80015b2:	f004 fb31 	bl	8005c18 <osThreadNew>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <main+0xf4>)
 80015ba:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <main+0xf8>)
 80015be:	2100      	movs	r1, #0
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <main+0xfc>)
 80015c2:	f004 fb29 	bl	8005c18 <osThreadNew>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <main+0x100>)
 80015ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015cc:	f004 fac6 	bl	8005b5c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0xac>
 80015d2:	bf00      	nop
 80015d4:	0800a358 	.word	0x0800a358
 80015d8:	20005074 	.word	0x20005074
 80015dc:	0800a370 	.word	0x0800a370
 80015e0:	20005060 	.word	0x20005060
 80015e4:	0800a388 	.word	0x0800a388
 80015e8:	2000506c 	.word	0x2000506c
 80015ec:	0800a2a4 	.word	0x0800a2a4
 80015f0:	08001af1 	.word	0x08001af1
 80015f4:	20004c50 	.word	0x20004c50
 80015f8:	0800a2c8 	.word	0x0800a2c8
 80015fc:	08001b01 	.word	0x08001b01
 8001600:	20005068 	.word	0x20005068
 8001604:	0800a2ec 	.word	0x0800a2ec
 8001608:	08001c31 	.word	0x08001c31
 800160c:	20004c4c 	.word	0x20004c4c
 8001610:	0800a310 	.word	0x0800a310
 8001614:	08001cb5 	.word	0x08001cb5
 8001618:	20005078 	.word	0x20005078
 800161c:	0800a334 	.word	0x0800a334
 8001620:	08001de5 	.word	0x08001de5
 8001624:	20005070 	.word	0x20005070

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	; 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2230      	movs	r2, #48	; 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f007 fc81 	bl	8008f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <SystemClock_Config+0xc8>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <SystemClock_Config+0xc8>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <SystemClock_Config+0xc8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <SystemClock_Config+0xcc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <SystemClock_Config+0xcc>)
 8001672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <SystemClock_Config+0xcc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001698:	2304      	movs	r3, #4
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800169c:	2348      	movs	r3, #72	; 0x48
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016a4:	2303      	movs	r3, #3
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fcf5 	bl	800409c <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016b8:	f000 fc1e 	bl	8001ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2302      	movs	r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2102      	movs	r1, #2
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 ff4f 	bl	800457c <HAL_RCC_ClockConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016e4:	f000 fc08 	bl	8001ef8 <Error_Handler>
  }
}
 80016e8:	bf00      	nop
 80016ea:	3750      	adds	r7, #80	; 0x50
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MX_ADC1_Init+0x98>)
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_ADC1_Init+0x9c>)
 800170e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_ADC1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <MX_ADC1_Init+0x98>)
 8001718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800171c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_ADC1_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_ADC1_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_ADC1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_ADC1_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_ADC1_Init+0x98>)
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <MX_ADC1_Init+0xa0>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_ADC1_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_ADC1_Init+0x98>)
 8001746:	2201      	movs	r2, #1
 8001748:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_ADC1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_ADC1_Init+0x98>)
 8001754:	2201      	movs	r2, #1
 8001756:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_ADC1_Init+0x98>)
 800175a:	f000 ff29 	bl	80025b0 <HAL_ADC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001764:	f000 fbc8 	bl	8001ef8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001768:	2301      	movs	r3, #1
 800176a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800176c:	2301      	movs	r3, #1
 800176e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_ADC1_Init+0x98>)
 800177a:	f001 f863 	bl	8002844 <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001784:	f000 fbb8 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20004c00 	.word	0x20004c00
 8001794:	40012000 	.word	0x40012000
 8001798:	0f000001 	.word	0x0f000001

0800179c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_SPI1_Init+0x64>)
 80017a2:	4a18      	ldr	r2, [pc, #96]	; (8001804 <MX_SPI1_Init+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_SPI1_Init+0x64>)
 80017a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_SPI1_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_SPI1_Init+0x64>)
 80017c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_SPI1_Init+0x64>)
 80017d0:	2208      	movs	r2, #8
 80017d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_SPI1_Init+0x64>)
 80017e8:	220a      	movs	r2, #10
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_SPI1_Init+0x64>)
 80017ee:	f003 f88f 	bl	8004910 <HAL_SPI_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017f8:	f000 fb7e 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20004a50 	.word	0x20004a50
 8001804:	40013000 	.word	0x40013000

08001808 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001816:	2204      	movs	r2, #4
 8001818:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181c:	2202      	movs	r2, #2
 800181e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001828:	2202      	movs	r2, #2
 800182a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001840:	2201      	movs	r2, #1
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184c:	f001 fcf5 	bl	800323a <HAL_PCD_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001856:	f000 fb4f 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20004c54 	.word	0x20004c54

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4b95      	ldr	r3, [pc, #596]	; (8001ad4 <MX_GPIO_Init+0x270>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a94      	ldr	r2, [pc, #592]	; (8001ad4 <MX_GPIO_Init+0x270>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <MX_GPIO_Init+0x270>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4b8e      	ldr	r3, [pc, #568]	; (8001ad4 <MX_GPIO_Init+0x270>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a8d      	ldr	r2, [pc, #564]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b8b      	ldr	r3, [pc, #556]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a86      	ldr	r2, [pc, #536]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a78      	ldr	r2, [pc, #480]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <MX_GPIO_Init+0x270>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <MX_GPIO_Init+0x270>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a71      	ldr	r2, [pc, #452]	; (8001ad4 <MX_GPIO_Init+0x270>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <MX_GPIO_Init+0x270>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2108      	movs	r1, #8
 8001926:	486c      	ldr	r0, [pc, #432]	; (8001ad8 <MX_GPIO_Init+0x274>)
 8001928:	f001 fc6e 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2101      	movs	r1, #1
 8001930:	486a      	ldr	r0, [pc, #424]	; (8001adc <MX_GPIO_Init+0x278>)
 8001932:	f001 fc69 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2110      	movs	r1, #16
 800193a:	4869      	ldr	r0, [pc, #420]	; (8001ae0 <MX_GPIO_Init+0x27c>)
 800193c:	f001 fc64 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2102      	movs	r1, #2
 8001944:	4867      	ldr	r0, [pc, #412]	; (8001ae4 <MX_GPIO_Init+0x280>)
 8001946:	f001 fc5f 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800194a:	2200      	movs	r2, #0
 800194c:	f24f 0152 	movw	r1, #61522	; 0xf052
 8001950:	4865      	ldr	r0, [pc, #404]	; (8001ae8 <MX_GPIO_Init+0x284>)
 8001952:	f001 fc59 	bl	8003208 <HAL_GPIO_WritePin>
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001956:	2308      	movs	r3, #8
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	485a      	ldr	r0, [pc, #360]	; (8001ad8 <MX_GPIO_Init+0x274>)
 800196e:	f001 fa99 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001972:	2301      	movs	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	4854      	ldr	r0, [pc, #336]	; (8001adc <MX_GPIO_Init+0x278>)
 800198a:	f001 fa8b 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800198e:	2308      	movs	r3, #8
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800199e:	2305      	movs	r3, #5
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	484c      	ldr	r0, [pc, #304]	; (8001adc <MX_GPIO_Init+0x278>)
 80019aa:	f001 fa7b 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <MX_GPIO_Init+0x288>)
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4847      	ldr	r0, [pc, #284]	; (8001ae0 <MX_GPIO_Init+0x27c>)
 80019c2:	f001 fa6f 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80019c6:	2310      	movs	r3, #16
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4840      	ldr	r0, [pc, #256]	; (8001ae0 <MX_GPIO_Init+0x27c>)
 80019de:	f001 fa61 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin MODE_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 80019e2:	2305      	movs	r3, #5
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	483b      	ldr	r0, [pc, #236]	; (8001ae4 <MX_GPIO_Init+0x280>)
 80019f6:	f001 fa55 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4834      	ldr	r0, [pc, #208]	; (8001ae4 <MX_GPIO_Init+0x280>)
 8001a12:	f001 fa47 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	482c      	ldr	r0, [pc, #176]	; (8001ae4 <MX_GPIO_Init+0x280>)
 8001a34:	f001 fa36 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor1_Supply_Pin Audio_RST_Pin Sensor2_Supply_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001a38:	f24f 0352 	movw	r3, #61522	; 0xf052
 8001a3c:	61fb      	str	r3, [r7, #28]
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4825      	ldr	r0, [pc, #148]	; (8001ae8 <MX_GPIO_Init+0x284>)
 8001a52:	f001 fa27 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a56:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a68:	2306      	movs	r3, #6
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481a      	ldr	r0, [pc, #104]	; (8001adc <MX_GPIO_Init+0x278>)
 8001a74:	f001 fa16 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <MX_GPIO_Init+0x284>)
 8001a8c:	f001 fa0a 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_GPIO_Init+0x280>)
 8001aae:	f001 f9f9 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <MX_GPIO_Init+0x288>)
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_GPIO_Init+0x274>)
 8001ac6:	f001 f9ed 	bl	8002ea4 <HAL_GPIO_Init>

}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	10120000 	.word	0x10120000

08001af0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f004 f933 	bl	8005d64 <osDelay>
 8001afe:	e7fb      	b.n	8001af8 <StartDefaultTask+0x8>

08001b00 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b09e      	sub	sp, #120	; 0x78
 8001b04:	af08      	add	r7, sp, #32
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor1;
	t_bool sensor1_measured = FALSE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	76fb      	strb	r3, [r7, #27]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8001b22:	f107 001c 	add.w	r0, r7, #28
 8001b26:	2304      	movs	r3, #4
 8001b28:	9307      	str	r3, [sp, #28]
 8001b2a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001b2e:	9306      	str	r3, [sp, #24]
 8001b30:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b34:	9305      	str	r3, [sp, #20]
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	9304      	str	r3, [sp, #16]
 8001b3c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2302      	movs	r3, #2
 8001b54:	2201      	movs	r2, #1
 8001b56:	2101      	movs	r1, #1
 8001b58:	f7ff fc8a 	bl	8001470 <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b64:	f7ff fc72 	bl	800144c <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8001b68:	f004 f82e 	bl	8005bc8 <osKernelGetTickCount>
 8001b6c:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {

	/*Select ADC Channel 1*/

	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	dc2c      	bgt.n	8001bd0 <StartTaskSensor1+0xd0>
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <StartTaskSensor1+0x11c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d128      	bne.n	8001bd0 <StartTaskSensor1+0xd0>
	{
		sensor1_ON = TRUE;
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <StartTaskSensor1+0x120>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	4823      	ldr	r0, [pc, #140]	; (8001c24 <StartTaskSensor1+0x124>)
 8001b98:	f000 fe54 	bl	8002844 <HAL_ADC_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <StartTaskSensor1+0xa6>
		{
			Error_Handler();
 8001ba2:	f000 f9a9 	bl	8001ef8 <Error_Handler>
		}
		fsm_fire(&(fsm_s1->fsm));
 8001ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fa37 	bl	800101c <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <StartTaskSensor1+0x128>)
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f004 f9c7 	bl	8005f4c <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <StartTaskSensor1+0x12c>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f107 011b 	add.w	r1, r7, #27
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f004 f9bf 	bl	8005f4c <osMessageQueuePut>
 8001bce:	e002      	b.n	8001bd6 <StartTaskSensor1+0xd6>
	}
	else sensor1_ON = FALSE;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <StartTaskSensor1+0x120>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]

	if(fsm_s1->fsm.current_state > 4)
 8001bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	dd15      	ble.n	8001c0a <StartTaskSensor1+0x10a>
	{
		sensor1_measured = TRUE;
 8001bde:	2301      	movs	r3, #1
 8001be0:	76fb      	strb	r3, [r7, #27]
		fsm_fire(&(fsm_s1->fsm));
 8001be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fa19 	bl	800101c <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <StartTaskSensor1+0x128>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f004 f9a9 	bl	8005f4c <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <StartTaskSensor1+0x12c>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f107 011b 	add.w	r1, r7, #27
 8001c02:	2300      	movs	r3, #0
 8001c04:	2200      	movs	r2, #0
 8001c06:	f004 f9a1 	bl	8005f4c <osMessageQueuePut>
	}
	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001c10:	657b      	str	r3, [r7, #84]	; 0x54
    osDelayUntil(tDelay);
 8001c12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c14:	f004 f8d4 	bl	8005dc0 <osDelayUntil>
	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001c18:	e7a9      	b.n	8001b6e <StartTaskSensor1+0x6e>
 8001c1a:	bf00      	nop
 8001c1c:	2000505c 	.word	0x2000505c
 8001c20:	20005064 	.word	0x20005064
 8001c24:	20004c00 	.word	0x20004c00
 8001c28:	20005074 	.word	0x20005074
 8001c2c:	2000506c 	.word	0x2000506c

08001c30 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
  uint32_t tDelay = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  tDelay = osKernelGetTickCount();
 8001c3c:	f003 ffc4 	bl	8005bc8 <osKernelGetTickCount>
 8001c40:	60f8      	str	r0, [r7, #12]
  t_bool sensor2_state;

  /* master = 0 for slave.
   * master = 1 for master.
   * master 1 for all devices, 0 for GW*/
  master = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	72bb      	strb	r3, [r7, #10]

  LoRa_initialization(master);
 8001c46:	7abb      	ldrb	r3, [r7, #10]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fcd5 	bl	80005f8 <LoRa_initialization>

  /* Infinite loop */
  for(;;)
  {

	osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <StartTaskLoRa+0x80>)
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f107 0109 	add.w	r1, r7, #9
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f004 f9eb 	bl	8006034 <osMessageQueueGet>
	osMessageQueueGet(myQueueDataSavedHandle, &sensor2_state, 0, 0);
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <StartTaskLoRa+0x80>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	f107 0108 	add.w	r1, r7, #8
 8001c66:	2300      	movs	r3, #0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f004 f9e3 	bl	8006034 <osMessageQueueGet>

	if (master == 1)
 8001c6e:	7abb      	ldrb	r3, [r7, #10]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d111      	bne.n	8001c98 <StartTaskLoRa+0x68>
	{
		if(sensor1_state && sensor2_state)
 8001c74:	7a7b      	ldrb	r3, [r7, #9]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d010      	beq.n	8001c9c <StartTaskLoRa+0x6c>
 8001c7a:	7a3b      	ldrb	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <StartTaskLoRa+0x6c>
		{
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	72fb      	strb	r3, [r7, #11]
 8001c84:	e004      	b.n	8001c90 <StartTaskLoRa+0x60>
			{
				send_data();
 8001c86:	f7fe fd23 	bl	80006d0 <send_data>
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	72fb      	strb	r3, [r7, #11]
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d9f7      	bls.n	8001c86 <StartTaskLoRa+0x56>
 8001c96:	e001      	b.n	8001c9c <StartTaskLoRa+0x6c>
			}
		}
	}
	else
	{
		receive_data();
 8001c98:	f7fe fd6a 	bl	8000770 <receive_data>
	}
	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001ca2:	3310      	adds	r3, #16
 8001ca4:	60fb      	str	r3, [r7, #12]
    osDelayUntil(tDelay);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f004 f88a 	bl	8005dc0 <osDelayUntil>
	osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8001cac:	e7cf      	b.n	8001c4e <StartTaskLoRa+0x1e>
 8001cae:	bf00      	nop
 8001cb0:	2000506c 	.word	0x2000506c

08001cb4 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09e      	sub	sp, #120	; 0x78
 8001cb8:	af08      	add	r7, sp, #32
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor2;
	t_bool sensor2_measured = FALSE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	76fb      	strb	r3, [r7, #27]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]

	fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	653b      	str	r3, [r7, #80]	; 0x50

	sensor_initialization(&sensor2, ID_Device, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 8001cd6:	f107 001c 	add.w	r0, r7, #28
 8001cda:	2304      	movs	r3, #4
 8001cdc:	9307      	str	r3, [sp, #28]
 8001cde:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001ce2:	9306      	str	r3, [sp, #24]
 8001ce4:	f241 537c 	movw	r3, #5500	; 0x157c
 8001ce8:	9305      	str	r3, [sp, #20]
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	9304      	str	r3, [sp, #16]
 8001cf0:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001cf4:	9303      	str	r3, [sp, #12]
 8001cf6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2302      	movs	r3, #2
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	2202      	movs	r2, #2
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	f7ff fbb0 	bl	8001470 <sensor_initialization>
	fsm_sensor_init(fsm_s2, &sensor2);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001d18:	f7ff fb98 	bl	800144c <fsm_sensor_init>

	tDelay = osKernelGetTickCount();
 8001d1c:	f003 ff54 	bl	8005bc8 <osKernelGetTickCount>
 8001d20:	6578      	str	r0, [r7, #84]	; 0x54
	/* Infinite loop */
	/* Infinite loop */
	for(;;)
	{
		/*Select ADC Channel 2*/
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	dc2c      	bgt.n	8001d84 <StartTaskSensor2+0xd0>
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <StartTaskSensor2+0x11c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d128      	bne.n	8001d84 <StartTaskSensor2+0xd0>
		{
			sensor2_ON = TRUE;
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <StartTaskSensor2+0x120>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4823      	ldr	r0, [pc, #140]	; (8001dd8 <StartTaskSensor2+0x124>)
 8001d4c:	f000 fd7a 	bl	8002844 <HAL_ADC_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <StartTaskSensor2+0xa6>
			{
				Error_Handler();
 8001d56:	f000 f8cf 	bl	8001ef8 <Error_Handler>
			}
			fsm_fire(&(fsm_s2->fsm));
 8001d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f95d 	bl	800101c <fsm_fire>
			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <StartTaskSensor2+0x128>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d68:	6899      	ldr	r1, [r3, #8]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f004 f8ed 	bl	8005f4c <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <StartTaskSensor2+0x12c>)
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f107 011b 	add.w	r1, r7, #27
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f004 f8e5 	bl	8005f4c <osMessageQueuePut>
 8001d82:	e002      	b.n	8001d8a <StartTaskSensor2+0xd6>
		}
		else sensor2_ON = FALSE;
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <StartTaskSensor2+0x120>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

		if(fsm_s2->fsm.current_state > 4)
 8001d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	dd15      	ble.n	8001dbe <StartTaskSensor2+0x10a>
		{
			sensor2_measured = TRUE;
 8001d92:	2301      	movs	r3, #1
 8001d94:	76fb      	strb	r3, [r7, #27]
			fsm_fire(&(fsm_s2->fsm));
 8001d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f93f 	bl	800101c <fsm_fire>

			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <StartTaskSensor2+0x128>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	2300      	movs	r3, #0
 8001da8:	2200      	movs	r2, #0
 8001daa:	f004 f8cf 	bl	8005f4c <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <StartTaskSensor2+0x12c>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	f107 011b 	add.w	r1, r7, #27
 8001db6:	2300      	movs	r3, #0
 8001db8:	2200      	movs	r2, #0
 8001dba:	f004 f8c7 	bl	8005f4c <osMessageQueuePut>
		}

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001dc4:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(tDelay);
 8001dc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001dc8:	f003 fffa 	bl	8005dc0 <osDelayUntil>
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001dcc:	e7a9      	b.n	8001d22 <StartTaskSensor2+0x6e>
 8001dce:	bf00      	nop
 8001dd0:	20005064 	.word	0x20005064
 8001dd4:	2000505c 	.word	0x2000505c
 8001dd8:	20004c00 	.word	0x20004c00
 8001ddc:	20005060 	.word	0x20005060
 8001de0:	2000506c 	.word	0x2000506c

08001de4 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09e      	sub	sp, #120	; 0x78
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 8001df0:	f003 feea 	bl	8005bc8 <osKernelGetTickCount>
 8001df4:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <StartTaskLEDs+0x108>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	f004 f917 	bl	8006034 <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <StartTaskLEDs+0x10c>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f107 010c 	add.w	r1, r7, #12
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2200      	movs	r2, #0
 8001e12:	f004 f90f 	bl	8006034 <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 8001e16:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d002      	beq.n	8001e24 <StartTaskLEDs+0x40>
 8001e1e:	7d3b      	ldrb	r3, [r7, #20]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10c      	bne.n	8001e3e <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2a:	4832      	ldr	r0, [pc, #200]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e2c:	f001 f9ec 	bl	8003208 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e36:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e38:	f001 f9e6 	bl	8003208 <HAL_GPIO_WritePin>
 8001e3c:	e039      	b.n	8001eb2 <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 8001e3e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d129      	bne.n	8001e9a <StartTaskLEDs+0xb6>
 8001e46:	7d7b      	ldrb	r3, [r7, #21]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d126      	bne.n	8001e9a <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e52:	4828      	ldr	r0, [pc, #160]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e54:	f001 f9d8 	bl	8003208 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001e58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <StartTaskLEDs+0x82>
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10c      	bne.n	8001e80 <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e6c:	4821      	ldr	r0, [pc, #132]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e6e:	f001 f9cb 	bl	8003208 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e78:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e7a:	f001 f9c5 	bl	8003208 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001e7e:	e018      	b.n	8001eb2 <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e86:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e88:	f001 f9be 	bl	8003208 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e92:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001e94:	f001 f9b8 	bl	8003208 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001e98:	e00b      	b.n	8001eb2 <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea0:	4814      	ldr	r0, [pc, #80]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001ea2:	f001 f9b1 	bl	8003208 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001eae:	f001 f9ab 	bl	8003208 <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001eb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d002      	beq.n	8001ec0 <StartTaskLEDs+0xdc>
 8001eba:	7cbb      	ldrb	r3, [r7, #18]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <StartTaskLEDs+0xea>
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001ec8:	f001 f99e 	bl	8003208 <HAL_GPIO_WritePin>
 8001ecc:	e005      	b.n	8001eda <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <StartTaskLEDs+0x110>)
 8001ed6:	f001 f997 	bl	8003208 <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001edc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ee0:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 8001ee2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ee4:	f003 ff6c 	bl	8005dc0 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001ee8:	e785      	b.n	8001df6 <StartTaskLEDs+0x12>
 8001eea:	bf00      	nop
 8001eec:	20005074 	.word	0x20005074
 8001ef0:	20005060 	.word	0x20005060
 8001ef4:	40020c00 	.word	0x40020c00

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:(A+1) //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <ringbuf_init+0x1a>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b24      	cmp	r3, #36	; 0x24
 8001f1e:	d003      	beq.n	8001f28 <ringbuf_init+0x22>

	 p=NULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 8001f24:	2324      	movs	r3, #36	; 0x24
 8001f26:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
  _this->tail = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001f40:	b490      	push	{r4, r7}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	4638      	mov	r0, r7
 8001f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if((NEXT(_this->head) != 0) && (NEXT(_this->head)!= _this->tail)){
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d023      	beq.n	8001f9e <ringbuf_put+0x5e>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d01e      	beq.n	8001f9e <ringbuf_put+0x5e>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d01a      	beq.n	8001f9e <ringbuf_put+0x5e>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d013      	beq.n	8001f9e <ringbuf_put+0x5e>
  _this->buf[_this->head] = item;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7a:	68f9      	ldr	r1, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	461c      	mov	r4, r3
 8001f88:	463b      	mov	r3, r7
 8001f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9c:	e02e      	b.n	8001ffc <ringbuf_put+0xbc>
  }
  else
  {
	  _this->buf[_this->head] = item;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa2:	68f9      	ldr	r1, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	461c      	mov	r4, r3
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(NEXT(_this->head) == _this->tail)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d016      	beq.n	8001ff0 <ringbuf_put+0xb0>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10f      	bne.n	8001ff0 <ringbuf_put+0xb0>
	  {
		  _this->head = _this->tail;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
		  _this->tail = NEXT(_this->tail);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d003      	beq.n	8001fe8 <ringbuf_put+0xa8>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	e000      	b.n	8001fea <ringbuf_put+0xaa>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	6293      	str	r3, [r2, #40]	; 0x28
 8001fee:	e005      	b.n	8001ffc <ringbuf_put+0xbc>
	  }
	  else
	  {
		  _this->head = 0;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
		  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
	  }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bc90      	pop	{r4, r7}
 8002004:	4770      	bx	lr

08002006 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8002006:	b490      	push	{r4, r7}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	429a      	cmp	r2, r3
 800201a:	d01e      	beq.n	800205a <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	18ca      	adds	r2, r1, r3
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	ca07      	ldmia	r2, {r0, r1, r2}
 8002032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	2b02      	cmp	r3, #2
 800203c:	d00a      	beq.n	8002054 <ringbuf_get+0x4e>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d005      	beq.n	8002054 <ringbuf_get+0x4e>
		{
			_this->tail++;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
 8002052:	e002      	b.n	800205a <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
		}
    }
	return item;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	461c      	mov	r4, r3
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002064:	6020      	str	r0, [r4, #0]
 8002066:	6061      	str	r1, [r4, #4]
 8002068:	60a2      	str	r2, [r4, #8]
}
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bc90      	pop	{r4, r7}
 8002072:	4770      	bx	lr

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_MspInit+0x54>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_MspInit+0x54>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_MspInit+0x54>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_MspInit+0x54>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_MspInit+0x54>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_MspInit+0x54>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	210f      	movs	r1, #15
 80020b6:	f06f 0001 	mvn.w	r0, #1
 80020ba:	f000 febc 	bl	8002e36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_ADC_MspInit+0x7c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d127      	bne.n	800213e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_ADC_MspInit+0x80>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <HAL_ADC_MspInit+0x80>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_ADC_MspInit+0x80>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_ADC_MspInit+0x80>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_ADC_MspInit+0x80>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_ADC_MspInit+0x80>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|GPIO_PIN_2;
 8002126:	2306      	movs	r3, #6
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <HAL_ADC_MspInit+0x84>)
 800213a:	f000 feb3 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40012000 	.word	0x40012000
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000

08002154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_SPI_MspInit+0x84>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d12b      	bne.n	80021ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_SPI_MspInit+0x88>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_SPI_MspInit+0x88>)
 8002180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_SPI_MspInit+0x88>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_SPI_MspInit+0x88>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_SPI_MspInit+0x88>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_SPI_MspInit+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80021ae:	23e0      	movs	r3, #224	; 0xe0
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2302      	movs	r3, #2
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021be:	2305      	movs	r3, #5
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_SPI_MspInit+0x8c>)
 80021ca:	f000 fe6b 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40013000 	.word	0x40013000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000

080021e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002204:	d147      	bne.n	8002296 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	481b      	ldr	r0, [pc, #108]	; (80022a4 <HAL_PCD_MspInit+0xc0>)
 8002238:	f000 fe34 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800223c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800224e:	230a      	movs	r3, #10
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4812      	ldr	r0, [pc, #72]	; (80022a4 <HAL_PCD_MspInit+0xc0>)
 800225a:	f000 fe23 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 8002264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002268:	6353      	str	r3, [r2, #52]	; 0x34
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_PCD_MspInit+0xbc>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2105      	movs	r1, #5
 800228a:	2043      	movs	r0, #67	; 0x43
 800228c:	f000 fdd3 	bl	8002e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002290:	2043      	movs	r0, #67	; 0x43
 8002292:	f000 fdec 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <UsageFault_Handler+0x4>

080022ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e0:	f000 f924 	bl	800252c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022e4:	f005 fcda 	bl	8007c9c <xTaskGetSchedulerState>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022ee:	f006 faab 	bl	8008848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <OTG_FS_IRQHandler+0x10>)
 80022fe:	f001 f8b9 	bl	8003474 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20004c54 	.word	0x20004c54

0800230c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e00a      	b.n	8002334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800231e:	f3af 8000 	nop.w
 8002322:	4601      	mov	r1, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf0      	blt.n	800231e <_read+0x12>
	}

return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x50>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x16>
		heap_end = &end;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <_sbrk+0x50>)
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <_sbrk+0x54>)
 80023c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <_sbrk+0x50>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <_sbrk+0x50>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	466a      	mov	r2, sp
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d907      	bls.n	80023ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023da:	f006 fd7b 	bl	8008ed4 <__errno>
 80023de:	4602      	mov	r2, r0
 80023e0:	230c      	movs	r3, #12
 80023e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	e006      	b.n	80023f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <_sbrk+0x50>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a03      	ldr	r2, [pc, #12]	; (8002400 <_sbrk+0x50>)
 80023f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000130 	.word	0x20000130
 8002404:	200050c8 	.word	0x200050c8

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <SystemInit+0x28>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <SystemInit+0x28>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SystemInit+0x28>)
 800241e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002422:	609a      	str	r2, [r3, #8]
#endif
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800243a:	e003      	b.n	8002444 <LoopCopyDataInit>

0800243c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800243e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002442:	3104      	adds	r1, #4

08002444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800244a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800244c:	d3f6      	bcc.n	800243c <CopyDataInit>
  ldr  r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002450:	e002      	b.n	8002458 <LoopFillZerobss>

08002452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002454:	f842 3b04 	str.w	r3, [r2], #4

08002458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800245a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800245c:	d3f9      	bcc.n	8002452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245e:	f7ff ffd3 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f006 fd3d 	bl	8008ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff f85d 	bl	8001524 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800246c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002470:	0800a458 	.word	0x0800a458
  ldr  r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002478:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 800247c:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 8002480:	200050c4 	.word	0x200050c4

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 fcb5 	bl	8002e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	200f      	movs	r0, #15
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fdda 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fccd 	bl	8002e8a <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 fc95 	bl	8002e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200000a0 	.word	0x200000a0
 8002524:	200000a8 	.word	0x200000a8
 8002528:	200000a4 	.word	0x200000a4

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	200000a8 	.word	0x200000a8
 8002550:	2000507c 	.word	0x2000507c

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000507c 	.word	0x2000507c

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_Delay+0x40>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200000a8 	.word	0x200000a8

080025b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e033      	b.n	800262e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fd7c 	bl	80020cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f6:	f023 0302 	bic.w	r3, r3, #2
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa40 	bl	8002a88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
 800261e:	e001      	b.n	8002624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Start+0x1a>
 800264e:	2302      	movs	r3, #2
 8002650:	e0a5      	b.n	800279e <HAL_ADC_Start+0x166>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d018      	beq.n	800269a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_ADC_Start+0x174>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_ADC_Start+0x178>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9a      	lsrs	r2, r3, #18
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800268c:	e002      	b.n	8002694 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3b01      	subs	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d179      	bne.n	800279c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f023 0206 	bic.w	r2, r3, #6
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
 80026f4:	e002      	b.n	80026fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_ADC_Start+0x17c>)
 8002706:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002710:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12a      	bne.n	8002774 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <HAL_ADC_Start+0x180>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d015      	beq.n	8002754 <HAL_ADC_Start+0x11c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_ADC_Start+0x184>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d105      	bne.n	800273e <HAL_ADC_Start+0x106>
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_ADC_Start+0x17c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_ADC_Start+0x188>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d129      	bne.n	800279c <HAL_ADC_Start+0x164>
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_ADC_Start+0x17c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d823      	bhi.n	800279c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11c      	bne.n	800279c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	e013      	b.n	800279c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_ADC_Start+0x180>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_ADC_Start+0x164>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800279a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200000a0 	.word	0x200000a0
 80027b0:	431bde83 	.word	0x431bde83
 80027b4:	40012300 	.word	0x40012300
 80027b8:	40012000 	.word	0x40012000
 80027bc:	40012100 	.word	0x40012100
 80027c0:	40012200 	.word	0x40012200

080027c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ADC_Stop+0x16>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e021      	b.n	800281e <HAL_ADC_Stop+0x5a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1c>
 800285c:	2302      	movs	r3, #2
 800285e:	e105      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x228>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b09      	cmp	r3, #9
 800286e:	d925      	bls.n	80028bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68d9      	ldr	r1, [r3, #12]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	3b1e      	subs	r3, #30
 8002886:	2207      	movs	r2, #7
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43da      	mvns	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	400a      	ands	r2, r1
 8002894:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68d9      	ldr	r1, [r3, #12]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	4603      	mov	r3, r0
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4403      	add	r3, r0
 80028ae:	3b1e      	subs	r3, #30
 80028b0:	409a      	lsls	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	e022      	b.n	8002902 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6919      	ldr	r1, [r3, #16]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	2207      	movs	r2, #7
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4618      	mov	r0, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4403      	add	r3, r0
 80028f8:	409a      	lsls	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b06      	cmp	r3, #6
 8002908:	d824      	bhi.n	8002954 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b05      	subs	r3, #5
 800291c:	221f      	movs	r2, #31
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	400a      	ands	r2, r1
 800292a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b05      	subs	r3, #5
 8002946:	fa00 f203 	lsl.w	r2, r0, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
 8002952:	e04c      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d824      	bhi.n	80029a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b23      	subs	r3, #35	; 0x23
 800296e:	221f      	movs	r2, #31
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43da      	mvns	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	400a      	ands	r2, r1
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	4618      	mov	r0, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3b23      	subs	r3, #35	; 0x23
 8002998:	fa00 f203 	lsl.w	r2, r0, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
 80029a4:	e023      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	3b41      	subs	r3, #65	; 0x41
 80029b8:	221f      	movs	r2, #31
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	400a      	ands	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b41      	subs	r3, #65	; 0x41
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_ADC_ConfigChannel+0x234>)
 80029f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <HAL_ADC_ConfigChannel+0x238>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d109      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1cc>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b12      	cmp	r3, #18
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_ADC_ConfigChannel+0x238>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d123      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x21e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d003      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x1e6>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b11      	cmp	r3, #17
 8002a28:	d11b      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d111      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_ADC_ConfigChannel+0x23c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_ADC_ConfigChannel+0x240>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9a      	lsrs	r2, r3, #18
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40012300 	.word	0x40012300
 8002a7c:	40012000 	.word	0x40012000
 8002a80:	200000a0 	.word	0x200000a0
 8002a84:	431bde83 	.word	0x431bde83

08002a88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <ADC_Init+0x1f0>)
 8002a92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	4a58      	ldr	r2, [pc, #352]	; (8002c7c <ADC_Init+0x1f4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6899      	ldr	r1, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	e00f      	b.n	8002b86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0202 	bic.w	r2, r2, #2
 8002b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ba0:	005a      	lsls	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	3b01      	subs	r3, #1
 8002be0:	035a      	lsls	r2, r3, #13
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e007      	b.n	8002bfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	051a      	lsls	r2, r3, #20
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c3e:	025a      	lsls	r2, r3, #9
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	029a      	lsls	r2, r3, #10
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40012300 	.word	0x40012300
 8002c7c:	0f000001 	.word	0x0f000001

08002c80 <__NVIC_SetPriorityGrouping>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_GetPriorityGrouping>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0307 	and.w	r3, r3, #7
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_EnableIRQ>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db0b      	blt.n	8002d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <__NVIC_EnableIRQ+0x38>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2001      	movs	r0, #1
 8002d06:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db0a      	blt.n	8002d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	490c      	ldr	r1, [pc, #48]	; (8002d6c <__NVIC_SetPriority+0x4c>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d48:	e00a      	b.n	8002d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <__NVIC_SetPriority+0x50>)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	3b04      	subs	r3, #4
 8002d58:	0112      	lsls	r2, r2, #4
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	761a      	strb	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000e100 	.word	0xe000e100
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <NVIC_EncodePriority>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f1c3 0307 	rsb	r3, r3, #7
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	bf28      	it	cs
 8002d92:	2304      	movcs	r3, #4
 8002d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d902      	bls.n	8002da4 <NVIC_EncodePriority+0x30>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3b03      	subs	r3, #3
 8002da2:	e000      	b.n	8002da6 <NVIC_EncodePriority+0x32>
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	4313      	orrs	r3, r2
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3724      	adds	r7, #36	; 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <SysTick_Config>:
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dec:	d301      	bcc.n	8002df2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <SysTick_Config+0x40>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f7ff ff8e 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <SysTick_Config+0x40>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0a:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <SysTick_Config+0x40>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff29 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e48:	f7ff ff3e 	bl	8002cc8 <__NVIC_GetPriorityGrouping>
 8002e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff8e 	bl	8002d74 <NVIC_EncodePriority>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff5d 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff31 	bl	8002ce4 <__NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffa2 	bl	8002ddc <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e16b      	b.n	8003198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 815a 	bne.w	8003192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d00b      	beq.n	8002efe <HAL_GPIO_Init+0x5a>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d007      	beq.n	8002efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef2:	2b11      	cmp	r3, #17
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b12      	cmp	r3, #18
 8002efc:	d130      	bne.n	8002f60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f34:	2201      	movs	r2, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 0201 	and.w	r2, r3, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0xfc>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b12      	cmp	r3, #18
 8002f9e:	d123      	bne.n	8002fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80b4 	beq.w	8003192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_GPIO_Init+0x308>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <HAL_GPIO_Init+0x308>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_GPIO_Init+0x308>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003046:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <HAL_GPIO_Init+0x30c>)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <HAL_GPIO_Init+0x310>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02b      	beq.n	80030ca <HAL_GPIO_Init+0x226>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_GPIO_Init+0x314>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x222>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_GPIO_Init+0x318>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x21e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4e      	ldr	r2, [pc, #312]	; (80031c0 <HAL_GPIO_Init+0x31c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x21a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <HAL_GPIO_Init+0x320>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x216>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4c      	ldr	r2, [pc, #304]	; (80031c8 <HAL_GPIO_Init+0x324>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x212>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4b      	ldr	r2, [pc, #300]	; (80031cc <HAL_GPIO_Init+0x328>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x20e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_GPIO_Init+0x32c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x20a>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00e      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030ae:	2308      	movs	r3, #8
 80030b0:	e00c      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030b2:	2306      	movs	r3, #6
 80030b4:	e00a      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030b6:	2305      	movs	r3, #5
 80030b8:	e008      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030ba:	2304      	movs	r3, #4
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030be:	2303      	movs	r3, #3
 80030c0:	e004      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030ca:	2300      	movs	r3, #0
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f002 0203 	and.w	r2, r2, #3
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	4093      	lsls	r3, r2
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030dc:	4934      	ldr	r1, [pc, #208]	; (80031b0 <HAL_GPIO_Init+0x30c>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ea:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_GPIO_Init+0x330>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310e:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <HAL_GPIO_Init+0x330>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_GPIO_Init+0x330>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_GPIO_Init+0x330>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_GPIO_Init+0x330>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_GPIO_Init+0x330>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_GPIO_Init+0x330>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_GPIO_Init+0x330>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	f67f ae90 	bls.w	8002ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40021400 	.word	0x40021400
 80031cc:	40021800 	.word	0x40021800
 80031d0:	40021c00 	.word	0x40021c00
 80031d4:	40013c00 	.word	0x40013c00

080031d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e001      	b.n	80031fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	619a      	str	r2, [r3, #24]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800323a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323c:	b08f      	sub	sp, #60	; 0x3c
 800323e:	af0a      	add	r7, sp, #40	; 0x28
 8003240:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e10f      	b.n	800346c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe ffbc 	bl	80021e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2203      	movs	r2, #3
 8003270:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f002 f838 	bl	8005300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	687e      	ldr	r6, [r7, #4]
 8003298:	466d      	mov	r5, sp
 800329a:	f106 0410 	add.w	r4, r6, #16
 800329e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80032ae:	1d33      	adds	r3, r6, #4
 80032b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b2:	6838      	ldr	r0, [r7, #0]
 80032b4:	f001 ff20 	bl	80050f8 <USB_CoreInit>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0d0      	b.n	800346c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 f826 	bl	8005322 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	e04a      	b.n	8003372 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	333d      	adds	r3, #61	; 0x3d
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	333c      	adds	r3, #60	; 0x3c
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	b298      	uxth	r0, r3
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	3342      	adds	r3, #66	; 0x42
 8003318:	4602      	mov	r2, r0
 800331a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	333f      	adds	r3, #63	; 0x3f
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3344      	adds	r3, #68	; 0x44
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3348      	adds	r3, #72	; 0x48
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3350      	adds	r3, #80	; 0x50
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	3301      	adds	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d3af      	bcc.n	80032dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e044      	b.n	800340c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	3301      	adds	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d3b5      	bcc.n	8003382 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	687e      	ldr	r6, [r7, #4]
 800341e:	466d      	mov	r5, sp
 8003420:	f106 0410 	add.w	r4, r6, #16
 8003424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800342c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003430:	e885 0003 	stmia.w	r5, {r0, r1}
 8003434:	1d33      	adds	r3, r6, #4
 8003436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003438:	6838      	ldr	r0, [r7, #0]
 800343a:	f001 ff9d 	bl	8005378 <USB_DevInit>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e00d      	b.n	800346c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f002 f9cf 	bl	8005808 <USB_DevDisconnect>

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003474 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b08d      	sub	sp, #52	; 0x34
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f002 fa67 	bl	800595e <USB_GetMode>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 839d 	bne.w	8003bd2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f002 f9cb 	bl	8005838 <USB_ReadInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8393 	beq.w	8003bd0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 f9c2 	bl	8005838 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f002 0202 	and.w	r2, r2, #2
 80034cc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 f9b0 	bl	8005838 <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d161      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699a      	ldr	r2, [r3, #24]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0210 	bic.w	r2, r2, #16
 80034f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f003 020f 	and.w	r2, r3, #15
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	3304      	adds	r3, #4
 8003510:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	0c5b      	lsrs	r3, r3, #17
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	2b02      	cmp	r3, #2
 800351c:	d124      	bne.n	8003568 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d035      	beq.n	8003596 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	6a38      	ldr	r0, [r7, #32]
 800353e:	f002 f93a 	bl	80057b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800354e:	441a      	add	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003560:	441a      	add	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	619a      	str	r2, [r3, #24]
 8003566:	e016      	b.n	8003596 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	0c5b      	lsrs	r3, r3, #17
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	2b06      	cmp	r3, #6
 8003572:	d110      	bne.n	8003596 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800357a:	2208      	movs	r2, #8
 800357c:	4619      	mov	r1, r3
 800357e:	6a38      	ldr	r0, [r7, #32]
 8003580:	f002 f919 	bl	80057b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003590:	441a      	add	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0210 	orr.w	r2, r2, #16
 80035a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 f944 	bl	8005838 <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035ba:	d16e      	bne.n	800369a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 f94a 	bl	800585e <USB_ReadDevAllOutEpInterrupt>
 80035ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035cc:	e062      	b.n	8003694 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d057      	beq.n	8003688 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 f96f 	bl	80058c6 <USB_ReadDevOutEPInterrupt>
 80035e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003600:	461a      	mov	r2, r3
 8003602:	2301      	movs	r3, #1
 8003604:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fbe9 	bl	8003de0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	2308      	movs	r3, #8
 8003628:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800362a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fce3 	bl	8003ff8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	2310      	movs	r3, #16
 800364c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	2320      	movs	r3, #32
 8003668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003686:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	3301      	adds	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d199      	bne.n	80035ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 f8ca 	bl	8005838 <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ae:	f040 80c0 	bne.w	8003832 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f002 f8eb 	bl	8005892 <USB_ReadDevAllInEpInterrupt>
 80036bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036c2:	e0b2      	b.n	800382a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a7 	beq.w	800381e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 f911 	bl	8005902 <USB_ReadDevInEPInterrupt>
 80036e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d057      	beq.n	800379c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	69f9      	ldr	r1, [r7, #28]
 8003708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800370c:	4013      	ands	r3, r2
 800370e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	2301      	movs	r3, #1
 8003720:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d132      	bne.n	8003790 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3348      	adds	r3, #72	; 0x48
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4403      	add	r3, r0
 800374a:	3344      	adds	r3, #68	; 0x44
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4419      	add	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4403      	add	r3, r0
 800375e:	3348      	adds	r3, #72	; 0x48
 8003760:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	2b00      	cmp	r3, #0
 8003766:	d113      	bne.n	8003790 <HAL_PCD_IRQHandler+0x31c>
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3350      	adds	r3, #80	; 0x50
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d108      	bne.n	8003790 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003788:	461a      	mov	r2, r3
 800378a:	2101      	movs	r1, #1
 800378c:	f002 f918 	bl	80059c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	b2db      	uxtb	r3, r3
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa2a 	bl	8003bf0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b2:	461a      	mov	r2, r3
 80037b4:	2308      	movs	r3, #8
 80037b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	461a      	mov	r2, r3
 80037d0:	2310      	movs	r3, #16
 80037d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	461a      	mov	r2, r3
 80037ec:	2340      	movs	r3, #64	; 0x40
 80037ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	461a      	mov	r2, r3
 8003808:	2302      	movs	r3, #2
 800380a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fa53 	bl	8003cc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	3301      	adds	r3, #1
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f af49 	bne.w	80036c4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fffe 	bl	8005838 <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003846:	d122      	bne.n	800388e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800386e:	2100      	movs	r1, #0
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fc07 	bl	8004084 <HAL_PCDEx_LPM_Callback>
 8003876:	e002      	b.n	800387e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f9ed 	bl	8003c58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800388c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f001 ffd0 	bl	8005838 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a2:	d112      	bne.n	80038ca <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f9c5 	bl	8003c44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 ffb2 	bl	8005838 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	f040 80c7 	bne.w	8003a70 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2110      	movs	r1, #16
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fe9f 	bl	8005640 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003902:	2300      	movs	r3, #0
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	e056      	b.n	80039b6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800391a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800393a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	440a      	add	r2, r1
 8003952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800395a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800396e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	440a      	add	r2, r1
 8003986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800398e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a0:	0151      	lsls	r1, r2, #5
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	440a      	add	r2, r1
 80039a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	3301      	adds	r3, #1
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d3a3      	bcc.n	8003908 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d016      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ec:	f043 030b 	orr.w	r3, r3, #11
 80039f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a02:	f043 030b 	orr.w	r3, r3, #11
 8003a06:	6453      	str	r3, [r2, #68]	; 0x44
 8003a08:	e015      	b.n	8003a36 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a1c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a30:	f043 030b 	orr.w	r3, r3, #11
 8003a34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f001 ffb0 	bl	80059c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 fedf 	bl	8005838 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d124      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 ff75 	bl	800597a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fe34 	bl	8005702 <USB_GetDevSpeed>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681c      	ldr	r4, [r3, #0]
 8003aa6:	f000 ff27 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8003aaa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f001 fb81 	bl	80051bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8b8 	bl	8003c30 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 feaf 	bl	8005838 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d10a      	bne.n	8003afa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f899 	bl	8003c1c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 0208 	and.w	r2, r2, #8
 8003af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fe9a 	bl	8005838 <USB_ReadInterrupts>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0e:	d10f      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8b2 	bl	8003c84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fe7f 	bl	8005838 <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b44:	d10f      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f88b 	bl	8003c6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 fe64 	bl	8005838 <USB_ReadInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d10a      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f88d 	bl	8003c9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fe4e 	bl	8005838 <USB_ReadInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d115      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f879 	bl	8003cb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e000      	b.n	8003bd2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003bd0:	bf00      	nop
    }
  }
}
 8003bd2:	3734      	adds	r7, #52	; 0x34
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	3338      	adds	r3, #56	; 0x38
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3304      	adds	r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d901      	bls.n	8003cfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e06c      	b.n	8003dd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d902      	bls.n	8003d18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3303      	adds	r3, #3
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d20:	e02b      	b.n	8003d7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d902      	bls.n	8003d3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3303      	adds	r3, #3
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68d9      	ldr	r1, [r3, #12]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6978      	ldr	r0, [r7, #20]
 8003d5e:	f001 fcf5 	bl	800574c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	441a      	add	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d809      	bhi.n	8003da4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d203      	bcs.n	8003da4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1be      	bne.n	8003d22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d811      	bhi.n	8003dd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	2201      	movs	r2, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	6939      	ldr	r1, [r7, #16]
 8003dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	333c      	adds	r3, #60	; 0x3c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f040 80a0 	bne.w	8003f58 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a72      	ldr	r2, [pc, #456]	; (8003ff0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f240 80dd 	bls.w	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80d7 	beq.w	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	6093      	str	r3, [r2, #8]
 8003e4c:	e0cb      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	2320      	movs	r3, #32
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	e0bc      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80b7 	bne.w	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d90f      	bls.n	8003ea0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	461a      	mov	r2, r3
 8003e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9c:	6093      	str	r3, [r2, #8]
 8003e9e:	e0a2      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ec6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4403      	add	r3, r0
 8003efe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4419      	add	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4403      	add	r3, r0
 8003f14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f18:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d114      	bne.n	8003f4a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f42:	461a      	mov	r2, r3
 8003f44:	2101      	movs	r1, #1
 8003f46:	f001 fd3b 	bl	80059c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe41 	bl	8003bd8 <HAL_PCD_DataOutStageCallback>
 8003f56:	e046      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d124      	bne.n	8003faa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7c:	6093      	str	r3, [r2, #8]
 8003f7e:	e032      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	2320      	movs	r3, #32
 8003f9a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fe18 	bl	8003bd8 <HAL_PCD_DataOutStageCallback>
 8003fa8:	e01d      	b.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d114      	bne.n	8003fda <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d108      	bne.n	8003fda <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f001 fcf3 	bl	80059c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff fdf9 	bl	8003bd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	4f54300a 	.word	0x4f54300a
 8003ff4:	4f54310a 	.word	0x4f54310a

08003ff8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	333c      	adds	r3, #60	; 0x3c
 8004010:	3304      	adds	r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <PCD_EP_OutSetupPacket_int+0x88>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d90e      	bls.n	800404c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	461a      	mov	r2, r3
 8004046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fddb 	bl	8003c08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <PCD_EP_OutSetupPacket_int+0x88>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d90c      	bls.n	8004074 <PCD_EP_OutSetupPacket_int+0x7c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800406c:	461a      	mov	r2, r3
 800406e:	2101      	movs	r1, #1
 8004070:	f001 fca6 	bl	80059c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	4f54300a 	.word	0x4f54300a

08004084 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e25b      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d075      	beq.n	80041a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ba:	4ba3      	ldr	r3, [pc, #652]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d00c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4ba0      	ldr	r3, [pc, #640]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d112      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d2:	4b9d      	ldr	r3, [pc, #628]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d10b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	4b99      	ldr	r3, [pc, #612]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05b      	beq.n	80041a4 <HAL_RCC_OscConfig+0x108>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d157      	bne.n	80041a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e236      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x74>
 8004102:	4b91      	ldr	r3, [pc, #580]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a90      	ldr	r2, [pc, #576]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x98>
 800411a:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a8a      	ldr	r2, [pc, #552]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b88      	ldr	r3, [pc, #544]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a87      	ldr	r2, [pc, #540]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004134:	4b84      	ldr	r3, [pc, #528]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a83      	ldr	r2, [pc, #524]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b81      	ldr	r3, [pc, #516]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a80      	ldr	r2, [pc, #512]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fe f9fe 	bl	8002554 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800415c:	f7fe f9fa 	bl	8002554 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1fb      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b76      	ldr	r3, [pc, #472]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xc0>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fe f9ea 	bl	8002554 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe f9e6 	bl	8002554 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1e7      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b6c      	ldr	r3, [pc, #432]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0xe8>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d063      	beq.n	800427a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b62      	ldr	r3, [pc, #392]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b5f      	ldr	r3, [pc, #380]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1bb      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b56      	ldr	r3, [pc, #344]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4952      	ldr	r1, [pc, #328]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e03a      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b4f      	ldr	r3, [pc, #316]	; (800434c <HAL_RCC_OscConfig+0x2b0>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fe f99f 	bl	8002554 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421a:	f7fe f99b 	bl	8002554 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e19c      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4940      	ldr	r1, [pc, #256]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCC_OscConfig+0x2b0>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe f97e 	bl	8002554 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe f97a 	bl	8002554 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e17b      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d030      	beq.n	80042e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCC_OscConfig+0x2b4>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fe f95e 	bl	8002554 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429c:	f7fe f95a 	bl	8002554 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e15b      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x200>
 80042ba:	e015      	b.n	80042e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_OscConfig+0x2b4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fe f947 	bl	8002554 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fe f943 	bl	8002554 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e144      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a0 	beq.w	8004436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004314:	6413      	str	r3, [r2, #64]	; 0x40
 8004316:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_OscConfig+0x2b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d121      	bne.n	8004376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCC_OscConfig+0x2b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_RCC_OscConfig+0x2b8>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fe f909 	bl	8002554 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	e011      	b.n	800436a <HAL_RCC_OscConfig+0x2ce>
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
 8004354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004358:	f7fe f8fc 	bl	8002554 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0fd      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_OscConfig+0x4d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x2f0>
 800437e:	4b7d      	ldr	r3, [pc, #500]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a7c      	ldr	r2, [pc, #496]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	e01c      	b.n	80043c6 <HAL_RCC_OscConfig+0x32a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d10c      	bne.n	80043ae <HAL_RCC_OscConfig+0x312>
 8004394:	4b77      	ldr	r3, [pc, #476]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4a76      	ldr	r2, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	4b74      	ldr	r3, [pc, #464]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a73      	ldr	r2, [pc, #460]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0x32a>
 80043ae:	4b71      	ldr	r3, [pc, #452]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a70      	ldr	r2, [pc, #448]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	4b6e      	ldr	r3, [pc, #440]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d015      	beq.n	80043fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ce:	f7fe f8c1 	bl	8002554 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fe f8bd 	bl	8002554 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0bc      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCC_OscConfig+0x33a>
 80043f8:	e014      	b.n	8004424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fa:	f7fe f8ab 	bl	8002554 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fe f8a7 	bl	8002554 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0a6      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ee      	bne.n	8004402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4b52      	ldr	r3, [pc, #328]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	4a51      	ldr	r2, [pc, #324]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8092 	beq.w	8004564 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004440:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d05c      	beq.n	8004506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d141      	bne.n	80044d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004454:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCC_OscConfig+0x4dc>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fe f87b 	bl	8002554 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004462:	f7fe f877 	bl	8002554 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e078      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	019b      	lsls	r3, r3, #6
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	4933      	ldr	r1, [pc, #204]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044aa:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x4dc>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fe f850 	bl	8002554 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fe f84c 	bl	8002554 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e04d      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x41c>
 80044d6:	e045      	b.n	8004564 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x4dc>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fe f839 	bl	8002554 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fe f835 	bl	8002554 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e036      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x44a>
 8004504:	e02e      	b.n	8004564 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e029      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	429a      	cmp	r2, r3
 8004524:	d11c      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d115      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800453a:	4013      	ands	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004540:	4293      	cmp	r3, r2
 8004542:	d10d      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40007000 	.word	0x40007000
 8004574:	40023800 	.word	0x40023800
 8004578:	42470060 	.word	0x42470060

0800457c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0cc      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004590:	4b68      	ldr	r3, [pc, #416]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d90c      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b63      	ldr	r3, [pc, #396]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0b8      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d0:	4b59      	ldr	r3, [pc, #356]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a58      	ldr	r2, [pc, #352]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e8:	4b53      	ldr	r3, [pc, #332]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	494d      	ldr	r1, [pc, #308]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d044      	beq.n	800469c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d119      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d003      	beq.n	800463a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e06f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e067      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465a:	4b37      	ldr	r3, [pc, #220]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 0203 	bic.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4934      	ldr	r1, [pc, #208]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800466c:	f7fd ff72 	bl	8002554 <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	e00a      	b.n	800468a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004674:	f7fd ff6e 	bl	8002554 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e04f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 020c 	and.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	429a      	cmp	r2, r3
 800469a:	d1eb      	bne.n	8004674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d20c      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e032      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4916      	ldr	r1, [pc, #88]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004702:	f000 f821 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004706:	4601      	mov	r1, r0
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	5cd3      	ldrb	r3, [r2, r3]
 8004716:	fa21 f303 	lsr.w	r3, r1, r3
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fd fed2 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00
 8004738:	40023800 	.word	0x40023800
 800473c:	0800a3a0 	.word	0x0800a3a0
 8004740:	200000a0 	.word	0x200000a0
 8004744:	200000a4 	.word	0x200000a4

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	2300      	movs	r3, #0
 8004758:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800475e:	4b63      	ldr	r3, [pc, #396]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b04      	cmp	r3, #4
 8004768:	d007      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x32>
 800476a:	2b08      	cmp	r3, #8
 800476c:	d008      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x38>
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 80b4 	bne.w	80048dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004776:	60bb      	str	r3, [r7, #8]
       break;
 8004778:	e0b3      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800477a:	4b5e      	ldr	r3, [pc, #376]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800477c:	60bb      	str	r3, [r7, #8]
      break;
 800477e:	e0b0      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004780:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004788:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800478a:	4b58      	ldr	r3, [pc, #352]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04a      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b55      	ldr	r3, [pc, #340]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	f04f 0400 	mov.w	r4, #0
 80047a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	ea03 0501 	and.w	r5, r3, r1
 80047ac:	ea04 0602 	and.w	r6, r4, r2
 80047b0:	4629      	mov	r1, r5
 80047b2:	4632      	mov	r2, r6
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	f04f 0400 	mov.w	r4, #0
 80047bc:	0154      	lsls	r4, r2, #5
 80047be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047c2:	014b      	lsls	r3, r1, #5
 80047c4:	4619      	mov	r1, r3
 80047c6:	4622      	mov	r2, r4
 80047c8:	1b49      	subs	r1, r1, r5
 80047ca:	eb62 0206 	sbc.w	r2, r2, r6
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	f04f 0400 	mov.w	r4, #0
 80047d6:	0194      	lsls	r4, r2, #6
 80047d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047dc:	018b      	lsls	r3, r1, #6
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	eb64 0402 	sbc.w	r4, r4, r2
 80047e4:	f04f 0100 	mov.w	r1, #0
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	00e2      	lsls	r2, r4, #3
 80047ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047f2:	00d9      	lsls	r1, r3, #3
 80047f4:	460b      	mov	r3, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	195b      	adds	r3, r3, r5
 80047fa:	eb44 0406 	adc.w	r4, r4, r6
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	0262      	lsls	r2, r4, #9
 8004808:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800480c:	0259      	lsls	r1, r3, #9
 800480e:	460b      	mov	r3, r1
 8004810:	4614      	mov	r4, r2
 8004812:	4618      	mov	r0, r3
 8004814:	4621      	mov	r1, r4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f04f 0400 	mov.w	r4, #0
 800481c:	461a      	mov	r2, r3
 800481e:	4623      	mov	r3, r4
 8004820:	f7fb fd26 	bl	8000270 <__aeabi_uldivmod>
 8004824:	4603      	mov	r3, r0
 8004826:	460c      	mov	r4, r1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e049      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482c:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	f04f 0400 	mov.w	r4, #0
 8004836:	f240 11ff 	movw	r1, #511	; 0x1ff
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	ea03 0501 	and.w	r5, r3, r1
 8004842:	ea04 0602 	and.w	r6, r4, r2
 8004846:	4629      	mov	r1, r5
 8004848:	4632      	mov	r2, r6
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	f04f 0400 	mov.w	r4, #0
 8004852:	0154      	lsls	r4, r2, #5
 8004854:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004858:	014b      	lsls	r3, r1, #5
 800485a:	4619      	mov	r1, r3
 800485c:	4622      	mov	r2, r4
 800485e:	1b49      	subs	r1, r1, r5
 8004860:	eb62 0206 	sbc.w	r2, r2, r6
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	0194      	lsls	r4, r2, #6
 800486e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004872:	018b      	lsls	r3, r1, #6
 8004874:	1a5b      	subs	r3, r3, r1
 8004876:	eb64 0402 	sbc.w	r4, r4, r2
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	00e2      	lsls	r2, r4, #3
 8004884:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004888:	00d9      	lsls	r1, r3, #3
 800488a:	460b      	mov	r3, r1
 800488c:	4614      	mov	r4, r2
 800488e:	195b      	adds	r3, r3, r5
 8004890:	eb44 0406 	adc.w	r4, r4, r6
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	02a2      	lsls	r2, r4, #10
 800489e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048a2:	0299      	lsls	r1, r3, #10
 80048a4:	460b      	mov	r3, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	4621      	mov	r1, r4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f04f 0400 	mov.w	r4, #0
 80048b2:	461a      	mov	r2, r3
 80048b4:	4623      	mov	r3, r4
 80048b6:	f7fb fcdb 	bl	8000270 <__aeabi_uldivmod>
 80048ba:	4603      	mov	r3, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	60bb      	str	r3, [r7, #8]
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048de:	60bb      	str	r3, [r7, #8]
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	68bb      	ldr	r3, [r7, #8]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	007a1200 	.word	0x007a1200

080048f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <HAL_RCC_GetHCLKFreq+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200000a0 	.word	0x200000a0

08004910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e056      	b.n	80049d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fd fc09 	bl	8002154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004958:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	ea42 0103 	orr.w	r1, r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 0104 	and.w	r1, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_SPI_Transmit+0x22>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e11e      	b.n	8004c38 <HAL_SPI_Transmit+0x260>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a02:	f7fd fda7 	bl	8002554 <HAL_GetTick>
 8004a06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1c:	e103      	b.n	8004c26 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_Transmit+0x52>
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2e:	e0fa      	b.n	8004c26 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2203      	movs	r2, #3
 8004a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	88fa      	ldrh	r2, [r7, #6]
 8004a4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	d107      	bne.n	8004a88 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d007      	beq.n	8004aa6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d14b      	bne.n	8004b48 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_SPI_Transmit+0xe6>
 8004ab8:	8afb      	ldrh	r3, [r7, #22]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d13e      	bne.n	8004b3c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ae2:	e02b      	b.n	8004b3c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d112      	bne.n	8004b18 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	1c9a      	adds	r2, r3, #2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b16:	e011      	b.n	8004b3c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b18:	f7fd fd1c 	bl	8002554 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d803      	bhi.n	8004b30 <HAL_SPI_Transmit+0x158>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Transmit+0x15e>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b3a:	e074      	b.n	8004c26 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ce      	bne.n	8004ae4 <HAL_SPI_Transmit+0x10c>
 8004b46:	e04c      	b.n	8004be2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Transmit+0x17e>
 8004b50:	8afb      	ldrh	r3, [r7, #22]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d140      	bne.n	8004bd8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b7c:	e02c      	b.n	8004bd8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d113      	bne.n	8004bb4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	7812      	ldrb	r2, [r2, #0]
 8004b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bb2:	e011      	b.n	8004bd8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb4:	f7fd fcce 	bl	8002554 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d803      	bhi.n	8004bcc <HAL_SPI_Transmit+0x1f4>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_Transmit+0x1fa>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bd6:	e026      	b.n	8004c26 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1cd      	bne.n	8004b7e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fa44 	bl	8005074 <SPI_EndRxTxTransaction>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e000      	b.n	8004c26 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08c      	sub	sp, #48	; 0x30
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_SPI_TransmitReceive+0x26>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e18a      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x33c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c6e:	f7fd fc71 	bl	8002554 <HAL_GetTick>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d00f      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x70>
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d107      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d103      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x68>
 8004ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d003      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cae:	e15b      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x82>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x82>
 8004cbc:	887b      	ldrh	r3, [r7, #2]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cc8:	e14e      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d003      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2205      	movs	r2, #5
 8004cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	887a      	ldrh	r2, [r7, #2]
 8004cee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	887a      	ldrh	r2, [r7, #2]
 8004d06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d007      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3a:	d178      	bne.n	8004e2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x10a>
 8004d44:	8b7b      	ldrh	r3, [r7, #26]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d166      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	881a      	ldrh	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d6e:	e053      	b.n	8004e18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d11b      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x176>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d016      	beq.n	8004db6 <HAL_SPI_TransmitReceive+0x176>
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d113      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d119      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x1b8>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d014      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004df4:	2301      	movs	r3, #1
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004df8:	f7fd fbac 	bl	8002554 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d807      	bhi.n	8004e18 <HAL_SPI_TransmitReceive+0x1d8>
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d003      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e16:	e0a7      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1a6      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x130>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1a1      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x130>
 8004e2c:	e07c      	b.n	8004f28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x1fc>
 8004e36:	8b7b      	ldrh	r3, [r7, #26]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d16b      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e62:	e057      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d11c      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x26c>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d017      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x26c>
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d114      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d119      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x2ae>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d014      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eea:	2301      	movs	r3, #1
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eee:	f7fd fb31 	bl	8002554 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d803      	bhi.n	8004f06 <HAL_SPI_TransmitReceive+0x2c6>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d102      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x2cc>
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f12:	e029      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1a2      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x224>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d19d      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f8a1 	bl	8005074 <SPI_EndRxTxTransaction>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f44:	e010      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	e000      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3730      	adds	r7, #48	; 0x30
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f92:	b2db      	uxtb	r3, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb0:	e04c      	b.n	800504c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d048      	beq.n	800504c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fba:	f7fd facb 	bl	8002554 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d902      	bls.n	8004fd0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d13d      	bne.n	800504c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe8:	d111      	bne.n	800500e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff2:	d004      	beq.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d107      	bne.n	800500e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	d10f      	bne.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e00f      	b.n	800506c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	429a      	cmp	r2, r3
 8005068:	d1a3      	bne.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <SPI_EndRxTxTransaction+0x7c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <SPI_EndRxTxTransaction+0x80>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	0d5b      	lsrs	r3, r3, #21
 800508c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509e:	d112      	bne.n	80050c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff ff78 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	f043 0220 	orr.w	r2, r3, #32
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e00f      	b.n	80050e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b80      	cmp	r3, #128	; 0x80
 80050de:	d0f2      	beq.n	80050c6 <SPI_EndRxTxTransaction+0x52>
 80050e0:	e000      	b.n	80050e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80050e2:	bf00      	nop
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200000a0 	.word	0x200000a0
 80050f4:	165e9f81 	.word	0x165e9f81

080050f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050f8:	b084      	sub	sp, #16
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	f107 001c 	add.w	r0, r7, #28
 8005106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	d122      	bne.n	8005156 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d105      	bne.n	800514a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fc96 	bl	8005a7c <USB_CoreReset>
 8005150:	4603      	mov	r3, r0
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	e01a      	b.n	800518c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fc8a 	bl	8005a7c <USB_CoreReset>
 8005168:	4603      	mov	r3, r0
 800516a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
 800517e:	e005      	b.n	800518c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10b      	bne.n	80051aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f043 0206 	orr.w	r2, r3, #6
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051b6:	b004      	add	sp, #16
 80051b8:	4770      	bx	lr
	...

080051bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d165      	bne.n	800529c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4a41      	ldr	r2, [pc, #260]	; (80052d8 <USB_SetTurnaroundTime+0x11c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d906      	bls.n	80051e6 <USB_SetTurnaroundTime+0x2a>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a40      	ldr	r2, [pc, #256]	; (80052dc <USB_SetTurnaroundTime+0x120>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d802      	bhi.n	80051e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051e0:	230f      	movs	r3, #15
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e062      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <USB_SetTurnaroundTime+0x120>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d906      	bls.n	80051fc <USB_SetTurnaroundTime+0x40>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a3b      	ldr	r2, [pc, #236]	; (80052e0 <USB_SetTurnaroundTime+0x124>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d802      	bhi.n	80051fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051f6:	230e      	movs	r3, #14
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	e057      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <USB_SetTurnaroundTime+0x124>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d906      	bls.n	8005212 <USB_SetTurnaroundTime+0x56>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <USB_SetTurnaroundTime+0x128>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d802      	bhi.n	8005212 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800520c:	230d      	movs	r3, #13
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e04c      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <USB_SetTurnaroundTime+0x128>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d906      	bls.n	8005228 <USB_SetTurnaroundTime+0x6c>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <USB_SetTurnaroundTime+0x12c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d802      	bhi.n	8005228 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005222:	230c      	movs	r3, #12
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e041      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <USB_SetTurnaroundTime+0x12c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d906      	bls.n	800523e <USB_SetTurnaroundTime+0x82>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a2e      	ldr	r2, [pc, #184]	; (80052ec <USB_SetTurnaroundTime+0x130>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d802      	bhi.n	800523e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005238:	230b      	movs	r3, #11
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e036      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <USB_SetTurnaroundTime+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d906      	bls.n	8005254 <USB_SetTurnaroundTime+0x98>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <USB_SetTurnaroundTime+0x134>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d802      	bhi.n	8005254 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800524e:	230a      	movs	r3, #10
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e02b      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <USB_SetTurnaroundTime+0x134>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d906      	bls.n	800526a <USB_SetTurnaroundTime+0xae>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <USB_SetTurnaroundTime+0x138>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d802      	bhi.n	800526a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005264:	2309      	movs	r3, #9
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e020      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <USB_SetTurnaroundTime+0x138>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d906      	bls.n	8005280 <USB_SetTurnaroundTime+0xc4>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <USB_SetTurnaroundTime+0x13c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d802      	bhi.n	8005280 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800527a:	2308      	movs	r3, #8
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e015      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <USB_SetTurnaroundTime+0x13c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d906      	bls.n	8005296 <USB_SetTurnaroundTime+0xda>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <USB_SetTurnaroundTime+0x140>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d802      	bhi.n	8005296 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005290:	2307      	movs	r3, #7
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e00a      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005296:	2306      	movs	r3, #6
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e007      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052a2:	2309      	movs	r3, #9
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e001      	b.n	80052ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052a8:	2309      	movs	r3, #9
 80052aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	029b      	lsls	r3, r3, #10
 80052c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	00d8acbf 	.word	0x00d8acbf
 80052dc:	00e4e1bf 	.word	0x00e4e1bf
 80052e0:	00f423ff 	.word	0x00f423ff
 80052e4:	0106737f 	.word	0x0106737f
 80052e8:	011a499f 	.word	0x011a499f
 80052ec:	01312cff 	.word	0x01312cff
 80052f0:	014ca43f 	.word	0x014ca43f
 80052f4:	016e35ff 	.word	0x016e35ff
 80052f8:	01a6ab1f 	.word	0x01a6ab1f
 80052fc:	01e847ff 	.word	0x01e847ff

08005300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 0201 	bic.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e00b      	b.n	8005366 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	e001      	b.n	8005366 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e003      	b.n	800536e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005366:	2032      	movs	r0, #50	; 0x32
 8005368:	f7fd f900 	bl	800256c <HAL_Delay>

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005378:	b084      	sub	sp, #16
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e009      	b.n	80053ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3340      	adds	r3, #64	; 0x40
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0e      	cmp	r3, #14
 80053b0:	d9f2      	bls.n	8005398 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11c      	bne.n	80053f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f043 0302 	orr.w	r3, r3, #2
 80053ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
 80053f0:	e00b      	b.n	800540a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005410:	461a      	mov	r2, r3
 8005412:	2300      	movs	r3, #0
 8005414:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	4619      	mov	r1, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	461a      	mov	r2, r3
 8005426:	680b      	ldr	r3, [r1, #0]
 8005428:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10c      	bne.n	800544a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005436:	2100      	movs	r1, #0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f949 	bl	80056d0 <USB_SetDevSpeed>
 800543e:	e008      	b.n	8005452 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005440:	2101      	movs	r1, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f944 	bl	80056d0 <USB_SetDevSpeed>
 8005448:	e003      	b.n	8005452 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800544a:	2103      	movs	r1, #3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f93f 	bl	80056d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005452:	2110      	movs	r1, #16
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8f3 	bl	8005640 <USB_FlushTxFifo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f911 	bl	800568c <USB_FlushRxFifo>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e043      	b.n	8005526 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b4:	d118      	bne.n	80054e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e013      	b.n	80054fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e008      	b.n	80054fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800551e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b7      	bcc.n	800549e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e043      	b.n	80055bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554a:	d118      	bne.n	800557e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	461a      	mov	r2, r3
 8005560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e013      	b.n	8005590 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e008      	b.n	8005590 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	461a      	mov	r2, r3
 80055b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b7      	bcc.n	8005534 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f043 0210 	orr.w	r2, r3, #16
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <USB_DevInit+0x2c4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f043 0208 	orr.w	r2, r3, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d107      	bne.n	800562c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005638:	b004      	add	sp, #16
 800563a:	4770      	bx	lr
 800563c:	803c3800 	.word	0x803c3800

08005640 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a09      	ldr	r2, [pc, #36]	; (8005688 <USB_FlushTxFifo+0x48>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b20      	cmp	r3, #32
 8005676:	d0f0      	beq.n	800565a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	00030d40 	.word	0x00030d40

0800568c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2210      	movs	r2, #16
 800569c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <USB_FlushRxFifo+0x40>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d0f0      	beq.n	800569e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	00030d40 	.word	0x00030d40

080056d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0306 	and.w	r3, r3, #6
 800571a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
 8005726:	e00a      	b.n	800573e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d002      	beq.n	8005734 <USB_GetDevSpeed+0x32>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b06      	cmp	r3, #6
 8005732:	d102      	bne.n	800573a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005734:	2302      	movs	r3, #2
 8005736:	75fb      	strb	r3, [r7, #23]
 8005738:	e001      	b.n	800573e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800573a:	230f      	movs	r3, #15
 800573c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800573e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800574c:	b480      	push	{r7}
 800574e:	b089      	sub	sp, #36	; 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	460b      	mov	r3, r1
 800575c:	71fb      	strb	r3, [r7, #7]
 800575e:	4613      	mov	r3, r2
 8005760:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800576a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11a      	bne.n	80057a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005772:	88bb      	ldrh	r3, [r7, #4]
 8005774:	3303      	adds	r3, #3
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e00f      	b.n	80057a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	031a      	lsls	r2, r3, #12
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578c:	461a      	mov	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3304      	adds	r3, #4
 8005798:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	3301      	adds	r3, #1
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d3eb      	bcc.n	8005780 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b089      	sub	sp, #36	; 0x24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	4613      	mov	r3, r2
 80057c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	3303      	adds	r3, #3
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e00b      	b.n	80057f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3304      	adds	r3, #4
 80057ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d3ef      	bcc.n	80057da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057fa:	69fb      	ldr	r3, [r7, #28]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3724      	adds	r7, #36	; 0x24
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005828:	2003      	movs	r0, #3
 800582a:	f7fc fe9f 	bl	800256c <HAL_Delay>

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005850:	68fb      	ldr	r3, [r7, #12]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	0c1b      	lsrs	r3, r3, #16
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	b29b      	uxth	r3, r3
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	4013      	ands	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058f4:	68bb      	ldr	r3, [r7, #8]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	fa22 f303 	lsr.w	r3, r2, r3
 8005932:	01db      	lsls	r3, r3, #7
 8005934:	b2db      	uxtb	r3, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4013      	ands	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005950:	68bb      	ldr	r3, [r7, #8]
}
 8005952:	4618      	mov	r0, r3
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0301 	and.w	r3, r3, #1
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005994:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005998:	f023 0307 	bic.w	r3, r3, #7
 800599c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	460b      	mov	r3, r1
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	333c      	adds	r3, #60	; 0x3c
 80059d6:	3304      	adds	r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4a26      	ldr	r2, [pc, #152]	; (8005a78 <USB_EP0_OutStart+0xb8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d90a      	bls.n	80059fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f4:	d101      	bne.n	80059fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e037      	b.n	8005a6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	461a      	mov	r2, r3
 8005a02:	2300      	movs	r3, #0
 8005a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a28:	f043 0318 	orr.w	r3, r3, #24
 8005a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10f      	bne.n	8005a68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	4f54300a 	.word	0x4f54300a

08005a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <USB_CoreReset+0x64>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e01b      	b.n	8005ad2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	daf2      	bge.n	8005a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <USB_CoreReset+0x64>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e006      	b.n	8005ad2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d0f0      	beq.n	8005ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	00030d40 	.word	0x00030d40

08005ae4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afa:	f3ef 8305 	mrs	r3, IPSR
 8005afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b06:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b12:	f3ef 8311 	mrs	r3, BASEPRI
 8005b16:	603b      	str	r3, [r7, #0]
  return(result);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <osKernelInitialize+0x3a>
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <osKernelInitialize+0x64>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d103      	bne.n	8005b2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b26:	f06f 0305 	mvn.w	r3, #5
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e00c      	b.n	8005b48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <osKernelInitialize+0x64>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d105      	bne.n	8005b42 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <osKernelInitialize+0x64>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e002      	b.n	8005b48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b48:	68fb      	ldr	r3, [r7, #12]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000134 	.word	0x20000134

08005b5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b62:	f3ef 8305 	mrs	r3, IPSR
 8005b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10f      	bne.n	8005b8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b72:	607b      	str	r3, [r7, #4]
  return(result);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <osKernelStart+0x3a>
 8005b86:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <osKernelStart+0x68>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d103      	bne.n	8005b96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005b8e:	f06f 0305 	mvn.w	r3, #5
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e010      	b.n	8005bb8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <osKernelStart+0x68>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d109      	bne.n	8005bb2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b9e:	f7ff ffa1 	bl	8005ae4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ba2:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <osKernelStart+0x68>)
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ba8:	f001 fb7c 	bl	80072a4 <vTaskStartScheduler>
      stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e002      	b.n	8005bb8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000134 	.word	0x20000134

08005bc8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bda:	f3ef 8310 	mrs	r3, PRIMASK
 8005bde:	607b      	str	r3, [r7, #4]
  return(result);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005be6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bea:	603b      	str	r3, [r7, #0]
  return(result);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <osKernelGetTickCount+0x3a>
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <osKernelGetTickCount+0x4c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d103      	bne.n	8005c02 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005bfa:	f001 fca9 	bl	8007550 <xTaskGetTickCountFromISR>
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	e002      	b.n	8005c08 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005c02:	f001 fc95 	bl	8007530 <xTaskGetTickCount>
 8005c06:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000134 	.word	0x20000134

08005c18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b090      	sub	sp, #64	; 0x40
 8005c1c:	af04      	add	r7, sp, #16
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c28:	f3ef 8305 	mrs	r3, IPSR
 8005c2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 808f 	bne.w	8005d54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c36:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c42:	f3ef 8311 	mrs	r3, BASEPRI
 8005c46:	617b      	str	r3, [r7, #20]
  return(result);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <osThreadNew+0x3e>
 8005c4e:	4b44      	ldr	r3, [pc, #272]	; (8005d60 <osThreadNew+0x148>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d07e      	beq.n	8005d54 <osThreadNew+0x13c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d07b      	beq.n	8005d54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005c60:	2318      	movs	r3, #24
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d045      	beq.n	8005d00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <osThreadNew+0x6a>
        name = attr->name;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <osThreadNew+0x90>
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2b38      	cmp	r3, #56	; 0x38
 8005c9a:	d805      	bhi.n	8005ca8 <osThreadNew+0x90>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <osThreadNew+0x94>
        return (NULL);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e054      	b.n	8005d56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00e      	beq.n	8005ce2 <osThreadNew+0xca>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b5b      	cmp	r3, #91	; 0x5b
 8005cca:	d90a      	bls.n	8005ce2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <osThreadNew+0xca>
        mem = 1;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	e010      	b.n	8005d04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10c      	bne.n	8005d04 <osThreadNew+0xec>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d108      	bne.n	8005d04 <osThreadNew+0xec>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <osThreadNew+0xec>
          mem = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	e001      	b.n	8005d04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d110      	bne.n	8005d2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d12:	9202      	str	r2, [sp, #8]
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f001 f873 	bl	8006e0c <xTaskCreateStatic>
 8005d26:	4603      	mov	r3, r0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e013      	b.n	8005d54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d110      	bne.n	8005d54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	f107 0310 	add.w	r3, r7, #16
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f001 f8bb 	bl	8006ec0 <xTaskCreate>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d001      	beq.n	8005d54 <osThreadNew+0x13c>
          hTask = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d54:	693b      	ldr	r3, [r7, #16]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3730      	adds	r7, #48	; 0x30
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000134 	.word	0x20000134

08005d64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6c:	f3ef 8305 	mrs	r3, IPSR
 8005d70:	613b      	str	r3, [r7, #16]
  return(result);
 8005d72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10f      	bne.n	8005d98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d78:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d84:	f3ef 8311 	mrs	r3, BASEPRI
 8005d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <osDelay+0x3c>
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <osDelay+0x58>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d103      	bne.n	8005da0 <osDelay+0x3c>
    stat = osErrorISR;
 8005d98:	f06f 0305 	mvn.w	r3, #5
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e007      	b.n	8005db0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 fa46 	bl	800723c <vTaskDelay>
    }
  }

  return (stat);
 8005db0:	697b      	ldr	r3, [r7, #20]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000134 	.word	0x20000134

08005dc0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dc8:	f3ef 8305 	mrs	r3, IPSR
 8005dcc:	617b      	str	r3, [r7, #20]
  return(result);
 8005dce:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005de0:	f3ef 8311 	mrs	r3, BASEPRI
 8005de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <osDelayUntil+0x3c>
 8005dec:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <osDelayUntil+0x7c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d103      	bne.n	8005dfc <osDelayUntil+0x3c>
    stat = osErrorISR;
 8005df4:	f06f 0305 	mvn.w	r3, #5
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e019      	b.n	8005e30 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8005e00:	f001 fb96 	bl	8007530 <xTaskGetTickCount>
 8005e04:	4603      	mov	r3, r0
 8005e06:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <osDelayUntil+0x6a>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	db06      	blt.n	8005e2a <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 f990 	bl	8007148 <vTaskDelayUntil>
 8005e28:	e002      	b.n	8005e30 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005e2a:	f06f 0303 	mvn.w	r3, #3
 8005e2e:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005e30:	69fb      	ldr	r3, [r7, #28]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000134 	.word	0x20000134

08005e40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e50:	f3ef 8305 	mrs	r3, IPSR
 8005e54:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e56:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d170      	bne.n	8005f3e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	617b      	str	r3, [r7, #20]
  return(result);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e68:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <osMessageQueueNew+0x3c>
 8005e74:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <osMessageQueueNew+0x108>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d060      	beq.n	8005f3e <osMessageQueueNew+0xfe>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d05d      	beq.n	8005f3e <osMessageQueueNew+0xfe>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d05a      	beq.n	8005f3e <osMessageQueueNew+0xfe>
    mem = -1;
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d029      	beq.n	8005ee8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d012      	beq.n	8005ec2 <osMessageQueueNew+0x82>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b4f      	cmp	r3, #79	; 0x4f
 8005ea2:	d90e      	bls.n	8005ec2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <osMessageQueueNew+0x82>
        mem = 1;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	e014      	b.n	8005eec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d110      	bne.n	8005eec <osMessageQueueNew+0xac>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10c      	bne.n	8005eec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d108      	bne.n	8005eec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <osMessageQueueNew+0xac>
          mem = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	e001      	b.n	8005eec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10c      	bne.n	8005f0c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6899      	ldr	r1, [r3, #8]
 8005efa:	2300      	movs	r3, #0
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	460b      	mov	r3, r1
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 fa58 	bl	80063b8 <xQueueGenericCreateStatic>
 8005f08:	6278      	str	r0, [r7, #36]	; 0x24
 8005f0a:	e008      	b.n	8005f1e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f12:	2200      	movs	r2, #0
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fac1 	bl	800649e <xQueueGenericCreate>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00c      	beq.n	8005f3e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <osMessageQueueNew+0xf2>
        name = attr->name;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e001      	b.n	8005f36 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f36:	69f9      	ldr	r1, [r7, #28]
 8005f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f3a:	f000 ff0b 	bl	8006d54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000134 	.word	0x20000134

08005f4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f64:	f3ef 8305 	mrs	r3, IPSR
 8005f68:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f6a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10f      	bne.n	8005f90 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f70:	f3ef 8310 	mrs	r3, PRIMASK
 8005f74:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f80:	617b      	str	r3, [r7, #20]
  return(result);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02c      	beq.n	8005fe2 <osMessageQueuePut+0x96>
 8005f88:	4b28      	ldr	r3, [pc, #160]	; (800602c <osMessageQueuePut+0xe0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d128      	bne.n	8005fe2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <osMessageQueuePut+0x56>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <osMessageQueuePut+0x56>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005fa2:	f06f 0303 	mvn.w	r3, #3
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fa8:	e039      	b.n	800601e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fae:	f107 0210 	add.w	r2, r7, #16
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	6a38      	ldr	r0, [r7, #32]
 8005fb8:	f000 fbce 	bl	8006758 <xQueueGenericSendFromISR>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d003      	beq.n	8005fca <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005fc2:	f06f 0302 	mvn.w	r3, #2
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fc8:	e029      	b.n	800601e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d026      	beq.n	800601e <osMessageQueuePut+0xd2>
 8005fd0:	4b17      	ldr	r3, [pc, #92]	; (8006030 <osMessageQueuePut+0xe4>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fe0:	e01d      	b.n	800601e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <osMessageQueuePut+0xa2>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005fee:	f06f 0303 	mvn.w	r3, #3
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff4:	e014      	b.n	8006020 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	6a38      	ldr	r0, [r7, #32]
 8005ffe:	f000 fab1 	bl	8006564 <xQueueGenericSend>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d00b      	beq.n	8006020 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800600e:	f06f 0301 	mvn.w	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	e004      	b.n	8006020 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006016:	f06f 0302 	mvn.w	r3, #2
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
 800601c:	e000      	b.n	8006020 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800601e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000134 	.word	0x20000134
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800604a:	f3ef 8305 	mrs	r3, IPSR
 800604e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006050:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8310 	mrs	r3, PRIMASK
 800605a:	61bb      	str	r3, [r7, #24]
  return(result);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006062:	f3ef 8311 	mrs	r3, BASEPRI
 8006066:	617b      	str	r3, [r7, #20]
  return(result);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02c      	beq.n	80060c8 <osMessageQueueGet+0x94>
 800606e:	4b28      	ldr	r3, [pc, #160]	; (8006110 <osMessageQueueGet+0xdc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d128      	bne.n	80060c8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <osMessageQueueGet+0x54>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <osMessageQueueGet+0x54>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006088:	f06f 0303 	mvn.w	r3, #3
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800608e:	e038      	b.n	8006102 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006094:	f107 0310 	add.w	r3, r7, #16
 8006098:	461a      	mov	r2, r3
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	6a38      	ldr	r0, [r7, #32]
 800609e:	f000 fccb 	bl	8006a38 <xQueueReceiveFromISR>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d003      	beq.n	80060b0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060a8:	f06f 0302 	mvn.w	r3, #2
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ae:	e028      	b.n	8006102 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d025      	beq.n	8006102 <osMessageQueueGet+0xce>
 80060b6:	4b17      	ldr	r3, [pc, #92]	; (8006114 <osMessageQueueGet+0xe0>)
 80060b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060c6:	e01c      	b.n	8006102 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <osMessageQueueGet+0xa0>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80060d4:	f06f 0303 	mvn.w	r3, #3
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	e013      	b.n	8006104 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	6a38      	ldr	r0, [r7, #32]
 80060e2:	f000 fbcd 	bl	8006880 <xQueueReceive>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d00b      	beq.n	8006104 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80060f2:	f06f 0301 	mvn.w	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
 80060f8:	e004      	b.n	8006104 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80060fa:	f06f 0302 	mvn.w	r3, #2
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006100:	e000      	b.n	8006104 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006102:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	; 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000134 	.word	0x20000134
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a07      	ldr	r2, [pc, #28]	; (8006144 <vApplicationGetIdleTaskMemory+0x2c>)
 8006128:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4a06      	ldr	r2, [pc, #24]	; (8006148 <vApplicationGetIdleTaskMemory+0x30>)
 800612e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000138 	.word	0x20000138
 8006148:	20000194 	.word	0x20000194

0800614c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a07      	ldr	r2, [pc, #28]	; (8006178 <vApplicationGetTimerTaskMemory+0x2c>)
 800615c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4a06      	ldr	r2, [pc, #24]	; (800617c <vApplicationGetTimerTaskMemory+0x30>)
 8006162:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800616a:	601a      	str	r2, [r3, #0]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20000394 	.word	0x20000394
 800617c:	200003f0 	.word	0x200003f0

08006180 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f103 0208 	add.w	r2, r3, #8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f04f 32ff 	mov.w	r2, #4294967295
 8006198:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f103 0208 	add.w	r2, r3, #8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f103 0208 	add.w	r2, r3, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d103      	bne.n	8006242 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e00c      	b.n	800625c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3308      	adds	r3, #8
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e002      	b.n	8006250 <vListInsert+0x2e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d2f6      	bcs.n	800624a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6852      	ldr	r2, [r2, #4]
 80062b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d103      	bne.n	80062c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	1e5a      	subs	r2, r3, #1
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	e7fe      	b.n	800630e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006310:	f002 fa0c 	bl	800872c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	3b01      	subs	r3, #1
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	441a      	add	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	22ff      	movs	r2, #255	; 0xff
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d114      	bne.n	8006390 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01a      	beq.n	80063a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3310      	adds	r3, #16
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fa86 	bl	8007884 <xTaskRemoveFromEventList>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d012      	beq.n	80063a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <xQueueGenericReset+0xcc>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	e009      	b.n	80063a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3310      	adds	r3, #16
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fef3 	bl	8006180 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3324      	adds	r3, #36	; 0x24
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff feee 	bl	8006180 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063a4:	f002 f9f0 	bl	8008788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063a8:	2301      	movs	r3, #1
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	; 0x38
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <xQueueGenericCreateStatic+0x28>
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	e7fe      	b.n	80063de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <xQueueGenericCreateStatic+0x42>
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <xQueueGenericCreateStatic+0x4e>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <xQueueGenericCreateStatic+0x52>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <xQueueGenericCreateStatic+0x54>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <xQueueGenericCreateStatic+0x6c>
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	e7fe      	b.n	8006422 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xQueueGenericCreateStatic+0x78>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <xQueueGenericCreateStatic+0x7c>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <xQueueGenericCreateStatic+0x7e>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <xQueueGenericCreateStatic+0x96>
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e7fe      	b.n	800644c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800644e:	2350      	movs	r3, #80	; 0x50
 8006450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b50      	cmp	r3, #80	; 0x50
 8006456:	d009      	beq.n	800646c <xQueueGenericCreateStatic+0xb4>
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	e7fe      	b.n	800646a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800646c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006480:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f844 	bl	800651c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006496:	4618      	mov	r0, r3
 8006498:	3730      	adds	r7, #48	; 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b08a      	sub	sp, #40	; 0x28
 80064a2:	af02      	add	r7, sp, #8
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <xQueueGenericCreate+0x28>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	e004      	b.n	80064dc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3350      	adds	r3, #80	; 0x50
 80064e0:	4618      	mov	r0, r3
 80064e2:	f002 fb21 	bl	8008b28 <pvPortMalloc>
 80064e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d011      	beq.n	8006512 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	3350      	adds	r3, #80	; 0x50
 80064f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006500:	79fa      	ldrb	r2, [r7, #7]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f805 	bl	800651c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006512:	69bb      	ldr	r3, [r7, #24]
	}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e002      	b.n	800653e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800654a:	2101      	movs	r1, #1
 800654c:	69b8      	ldr	r0, [r7, #24]
 800654e:	f7ff fecb 	bl	80062e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08e      	sub	sp, #56	; 0x38
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <xQueueGenericSend+0x30>
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
 8006592:	e7fe      	b.n	8006592 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSend+0x3e>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSend+0x42>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSend+0x44>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <xQueueGenericSend+0x5c>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
 80065be:	e7fe      	b.n	80065be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d103      	bne.n	80065ce <xQueueGenericSend+0x6a>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <xQueueGenericSend+0x6e>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <xQueueGenericSend+0x70>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <xQueueGenericSend+0x88>
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	623b      	str	r3, [r7, #32]
 80065ea:	e7fe      	b.n	80065ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ec:	f001 fb56 	bl	8007c9c <xTaskGetSchedulerState>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <xQueueGenericSend+0x98>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <xQueueGenericSend+0x9c>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <xQueueGenericSend+0x9e>
 8006600:	2300      	movs	r3, #0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <xQueueGenericSend+0xb6>
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	e7fe      	b.n	8006618 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800661a:	f002 f887 	bl	800872c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <xQueueGenericSend+0xcc>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d129      	bne.n	8006684 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006636:	f000 fa7c 	bl	8006b32 <prvCopyDataToQueue>
 800663a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	4618      	mov	r0, r3
 800664a:	f001 f91b 	bl	8007884 <xTaskRemoveFromEventList>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d013      	beq.n	800667c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006654:	4b3f      	ldr	r3, [pc, #252]	; (8006754 <xQueueGenericSend+0x1f0>)
 8006656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	e00a      	b.n	800667c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800666c:	4b39      	ldr	r3, [pc, #228]	; (8006754 <xQueueGenericSend+0x1f0>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800667c:	f002 f884 	bl	8008788 <vPortExitCritical>
				return pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	e063      	b.n	800674c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800668a:	f002 f87d 	bl	8008788 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800668e:	2300      	movs	r3, #0
 8006690:	e05c      	b.n	800674c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f955 	bl	800794c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a2:	2301      	movs	r3, #1
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a6:	f002 f86f 	bl	8008788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066aa:	f000 fe5f 	bl	800736c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ae:	f002 f83d 	bl	800872c <vPortEnterCritical>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d103      	bne.n	80066c8 <xQueueGenericSend+0x164>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ce:	b25b      	sxtb	r3, r3
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d103      	bne.n	80066de <xQueueGenericSend+0x17a>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066de:	f002 f853 	bl	8008788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e2:	1d3a      	adds	r2, r7, #4
 80066e4:	f107 0314 	add.w	r3, r7, #20
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f944 	bl	8007978 <xTaskCheckForTimeOut>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d124      	bne.n	8006740 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f8:	f000 fb13 	bl	8006d22 <prvIsQueueFull>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d018      	beq.n	8006734 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	3310      	adds	r3, #16
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f001 f86c 	bl	80077e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006712:	f000 fa9e 	bl	8006c52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006716:	f000 fe6f 	bl	80073f8 <xTaskResumeAll>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	f47f af7c 	bne.w	800661a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <xQueueGenericSend+0x1f0>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	e772      	b.n	800661a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006736:	f000 fa8c 	bl	8006c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800673a:	f000 fe5d 	bl	80073f8 <xTaskResumeAll>
 800673e:	e76c      	b.n	800661a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006742:	f000 fa86 	bl	8006c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006746:	f000 fe57 	bl	80073f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800674a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800674c:	4618      	mov	r0, r3
 800674e:	3738      	adds	r7, #56	; 0x38
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <xQueueGenericSendFromISR+0x2c>
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
 8006782:	e7fe      	b.n	8006782 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <xQueueGenericSendFromISR+0x3a>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <xQueueGenericSendFromISR+0x3e>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <xQueueGenericSendFromISR+0x40>
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d109      	bne.n	80067b0 <xQueueGenericSendFromISR+0x58>
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	e7fe      	b.n	80067ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d103      	bne.n	80067be <xQueueGenericSendFromISR+0x66>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <xQueueGenericSendFromISR+0x6a>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <xQueueGenericSendFromISR+0x6c>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <xQueueGenericSendFromISR+0x84>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e7fe      	b.n	80067da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067dc:	f002 f966 	bl	8008aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067e0:	f3ef 8211 	mrs	r2, BASEPRI
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	61ba      	str	r2, [r7, #24]
 80067f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <xQueueGenericSendFromISR+0xb6>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d12c      	bne.n	8006868 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800681e:	f000 f988 	bl	8006b32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006822:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d112      	bne.n	8006852 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d016      	beq.n	8006862 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f823 	bl	8007884 <xTaskRemoveFromEventList>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00e      	beq.n	8006862 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e007      	b.n	8006862 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006856:	3301      	adds	r3, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	b25a      	sxtb	r2, r3
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006862:	2301      	movs	r3, #1
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006866:	e001      	b.n	800686c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006868:	2300      	movs	r3, #0
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006878:	4618      	mov	r0, r3
 800687a:	3738      	adds	r7, #56	; 0x38
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	; 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <xQueueReceive+0x2e>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	e7fe      	b.n	80068ac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <xQueueReceive+0x3c>
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <xQueueReceive+0x40>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <xQueueReceive+0x42>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <xQueueReceive+0x5a>
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e7fe      	b.n	80068d8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068da:	f001 f9df 	bl	8007c9c <xTaskGetSchedulerState>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <xQueueReceive+0x6a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <xQueueReceive+0x6e>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <xQueueReceive+0x70>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d109      	bne.n	8006908 <xQueueReceive+0x88>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e7fe      	b.n	8006906 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006908:	f001 ff10 	bl	800872c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01f      	beq.n	8006958 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691c:	f000 f973 	bl	8006c06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	1e5a      	subs	r2, r3, #1
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	3310      	adds	r3, #16
 8006934:	4618      	mov	r0, r3
 8006936:	f000 ffa5 	bl	8007884 <xTaskRemoveFromEventList>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006940:	4b3c      	ldr	r3, [pc, #240]	; (8006a34 <xQueueReceive+0x1b4>)
 8006942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006950:	f001 ff1a 	bl	8008788 <vPortExitCritical>
				return pdPASS;
 8006954:	2301      	movs	r3, #1
 8006956:	e069      	b.n	8006a2c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800695e:	f001 ff13 	bl	8008788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006962:	2300      	movs	r3, #0
 8006964:	e062      	b.n	8006a2c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800696c:	f107 0310 	add.w	r3, r7, #16
 8006970:	4618      	mov	r0, r3
 8006972:	f000 ffeb 	bl	800794c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006976:	2301      	movs	r3, #1
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800697a:	f001 ff05 	bl	8008788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800697e:	f000 fcf5 	bl	800736c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006982:	f001 fed3 	bl	800872c <vPortEnterCritical>
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800698c:	b25b      	sxtb	r3, r3
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d103      	bne.n	800699c <xQueueReceive+0x11c>
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a2:	b25b      	sxtb	r3, r3
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d103      	bne.n	80069b2 <xQueueReceive+0x132>
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b2:	f001 fee9 	bl	8008788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069b6:	1d3a      	adds	r2, r7, #4
 80069b8:	f107 0310 	add.w	r3, r7, #16
 80069bc:	4611      	mov	r1, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ffda 	bl	8007978 <xTaskCheckForTimeOut>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d123      	bne.n	8006a12 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069cc:	f000 f993 	bl	8006cf6 <prvIsQueueEmpty>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d017      	beq.n	8006a06 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	3324      	adds	r3, #36	; 0x24
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4611      	mov	r1, r2
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 ff02 	bl	80077e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e6:	f000 f934 	bl	8006c52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069ea:	f000 fd05 	bl	80073f8 <xTaskResumeAll>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d189      	bne.n	8006908 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <xQueueReceive+0x1b4>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	e780      	b.n	8006908 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a08:	f000 f923 	bl	8006c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a0c:	f000 fcf4 	bl	80073f8 <xTaskResumeAll>
 8006a10:	e77a      	b.n	8006908 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a14:	f000 f91d 	bl	8006c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a18:	f000 fcee 	bl	80073f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1e:	f000 f96a 	bl	8006cf6 <prvIsQueueEmpty>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f43f af6f 	beq.w	8006908 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3730      	adds	r7, #48	; 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <xQueueReceiveFromISR+0x2a>
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	e7fe      	b.n	8006a60 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <xQueueReceiveFromISR+0x38>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <xQueueReceiveFromISR+0x3c>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <xQueueReceiveFromISR+0x3e>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <xQueueReceiveFromISR+0x56>
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e7fe      	b.n	8006a8c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a8e:	f002 f80d 	bl	8008aac <vPortValidateInterruptPriority>
	__asm volatile
 8006a92:	f3ef 8211 	mrs	r2, BASEPRI
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	61ba      	str	r2, [r7, #24]
 8006aa8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006aaa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d02f      	beq.n	8006b1a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac8:	f000 f89d 	bl	8006c06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	1e5a      	subs	r2, r3, #1
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d112      	bne.n	8006b04 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	3310      	adds	r3, #16
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 feca 	bl	8007884 <xTaskRemoveFromEventList>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e007      	b.n	8006b14 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b08:	3301      	adds	r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	b25a      	sxtb	r2, r3
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b14:	2301      	movs	r3, #1
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	e001      	b.n	8006b1e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3738      	adds	r7, #56	; 0x38
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10d      	bne.n	8006b6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d14d      	bne.n	8006bf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f8bb 	bl	8007cd8 <xTaskPriorityDisinherit>
 8006b62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	e043      	b.n	8006bf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d119      	bne.n	8006ba6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6858      	ldr	r0, [r3, #4]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	f002 f9d3 	bl	8008f28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	441a      	add	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d32b      	bcc.n	8006bf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	e026      	b.n	8006bf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68d8      	ldr	r0, [r3, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	f002 f9b9 	bl	8008f28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	425b      	negs	r3, r3
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d207      	bcs.n	8006be2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	425b      	negs	r3, r3
 8006bdc:	441a      	add	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d105      	bne.n	8006bf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bfc:	697b      	ldr	r3, [r7, #20]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d018      	beq.n	8006c4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	441a      	add	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d303      	bcc.n	8006c3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	461a      	mov	r2, r3
 8006c44:	6838      	ldr	r0, [r7, #0]
 8006c46:	f002 f96f 	bl	8008f28 <memcpy>
	}
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c5a:	f001 fd67 	bl	800872c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c66:	e011      	b.n	8006c8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3324      	adds	r3, #36	; 0x24
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fe05 	bl	8007884 <xTaskRemoveFromEventList>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c80:	f000 feda 	bl	8007a38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dce9      	bgt.n	8006c68 <prvUnlockQueue+0x16>
 8006c94:	e000      	b.n	8006c98 <prvUnlockQueue+0x46>
					break;
 8006c96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	22ff      	movs	r2, #255	; 0xff
 8006c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ca0:	f001 fd72 	bl	8008788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ca4:	f001 fd42 	bl	800872c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cb0:	e011      	b.n	8006cd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d012      	beq.n	8006ce0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fde0 	bl	8007884 <xTaskRemoveFromEventList>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cca:	f000 feb5 	bl	8007a38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dce9      	bgt.n	8006cb2 <prvUnlockQueue+0x60>
 8006cde:	e000      	b.n	8006ce2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ce0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cea:	f001 fd4d 	bl	8008788 <vPortExitCritical>
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cfe:	f001 fd15 	bl	800872c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e001      	b.n	8006d14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d14:	f001 fd38 	bl	8008788 <vPortExitCritical>

	return xReturn;
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d2a:	f001 fcff 	bl	800872c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d102      	bne.n	8006d40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e001      	b.n	8006d44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d44:	f001 fd20 	bl	8008788 <vPortExitCritical>

	return xReturn;
 8006d48:	68fb      	ldr	r3, [r7, #12]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e014      	b.n	8006d8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d64:	4a0e      	ldr	r2, [pc, #56]	; (8006da0 <vQueueAddToRegistry+0x4c>)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d70:	490b      	ldr	r1, [pc, #44]	; (8006da0 <vQueueAddToRegistry+0x4c>)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <vQueueAddToRegistry+0x4c>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	4413      	add	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d86:	e005      	b.n	8006d94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	d9e7      	bls.n	8006d64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20005080 	.word	0x20005080

08006da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006db4:	f001 fcba 	bl	800872c <vPortEnterCritical>
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d103      	bne.n	8006dce <vQueueWaitForMessageRestricted+0x2a>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd4:	b25b      	sxtb	r3, r3
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d103      	bne.n	8006de4 <vQueueWaitForMessageRestricted+0x40>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de4:	f001 fcd0 	bl	8008788 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fd19 	bl	8007830 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dfe:	6978      	ldr	r0, [r7, #20]
 8006e00:	f7ff ff27 	bl	8006c52 <prvUnlockQueue>
	}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08e      	sub	sp, #56	; 0x38
 8006e10:	af04      	add	r7, sp, #16
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <xTaskCreateStatic+0x28>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	e7fe      	b.n	8006e32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <xTaskCreateStatic+0x42>
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e7fe      	b.n	8006e4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e4e:	235c      	movs	r3, #92	; 0x5c
 8006e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b5c      	cmp	r3, #92	; 0x5c
 8006e56:	d009      	beq.n	8006e6c <xTaskCreateStatic+0x60>
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	e7fe      	b.n	8006e6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01e      	beq.n	8006eb2 <xTaskCreateStatic+0xa6>
 8006e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01b      	beq.n	8006eb2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9303      	str	r3, [sp, #12]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	9302      	str	r3, [sp, #8]
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f850 	bl	8006f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eac:	f000 f8dc 	bl	8007068 <prvAddNewTaskToReadyList>
 8006eb0:	e001      	b.n	8006eb6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006eb6:	697b      	ldr	r3, [r7, #20]
	}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	; 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08c      	sub	sp, #48	; 0x30
 8006ec4:	af04      	add	r7, sp, #16
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 fe27 	bl	8008b28 <pvPortMalloc>
 8006eda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00e      	beq.n	8006f00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ee2:	205c      	movs	r0, #92	; 0x5c
 8006ee4:	f001 fe20 	bl	8008b28 <pvPortMalloc>
 8006ee8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ef6:	e005      	b.n	8006f04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ef8:	6978      	ldr	r0, [r7, #20]
 8006efa:	f001 fed7 	bl	8008cac <vPortFree>
 8006efe:	e001      	b.n	8006f04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d017      	beq.n	8006f3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f12:	88fa      	ldrh	r2, [r7, #6]
 8006f14:	2300      	movs	r3, #0
 8006f16:	9303      	str	r3, [sp, #12]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	9302      	str	r3, [sp, #8]
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f80e 	bl	8006f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f2e:	69f8      	ldr	r0, [r7, #28]
 8006f30:	f000 f89a 	bl	8007068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f34:	2301      	movs	r3, #1
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e002      	b.n	8006f40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f40:	69bb      	ldr	r3, [r7, #24]
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b088      	sub	sp, #32
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	461a      	mov	r2, r3
 8006f62:	21a5      	movs	r1, #165	; 0xa5
 8006f64:	f001 ffeb 	bl	8008f3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f72:	3b01      	subs	r3, #1
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f023 0307 	bic.w	r3, r3, #7
 8006f80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <prvInitialiseNewTask+0x56>
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e7fe      	b.n	8006f9e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01f      	beq.n	8006fe6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e012      	b.n	8006fd2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	7819      	ldrb	r1, [r3, #0]
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	3334      	adds	r3, #52	; 0x34
 8006fbc:	460a      	mov	r2, r1
 8006fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d006      	beq.n	8006fda <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2b0f      	cmp	r3, #15
 8006fd6:	d9e9      	bls.n	8006fac <prvInitialiseNewTask+0x62>
 8006fd8:	e000      	b.n	8006fdc <prvInitialiseNewTask+0x92>
			{
				break;
 8006fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fe4:	e003      	b.n	8006fee <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	2b37      	cmp	r3, #55	; 0x37
 8006ff2:	d901      	bls.n	8006ff8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ff4:	2337      	movs	r3, #55	; 0x37
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007002:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2200      	movs	r2, #0
 8007008:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	3304      	adds	r3, #4
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff f8d6 	bl	80061c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	3318      	adds	r3, #24
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff f8d1 	bl	80061c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007032:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	2200      	movs	r2, #0
 8007038:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	68f9      	ldr	r1, [r7, #12]
 8007046:	69b8      	ldr	r0, [r7, #24]
 8007048:	f001 fa4c 	bl	80084e4 <pxPortInitialiseStack>
 800704c:	4602      	mov	r2, r0
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800705e:	bf00      	nop
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007070:	f001 fb5c 	bl	800872c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007074:	4b2d      	ldr	r3, [pc, #180]	; (800712c <prvAddNewTaskToReadyList+0xc4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a2c      	ldr	r2, [pc, #176]	; (800712c <prvAddNewTaskToReadyList+0xc4>)
 800707c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800707e:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <prvAddNewTaskToReadyList+0xc8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007086:	4a2a      	ldr	r2, [pc, #168]	; (8007130 <prvAddNewTaskToReadyList+0xc8>)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800708c:	4b27      	ldr	r3, [pc, #156]	; (800712c <prvAddNewTaskToReadyList+0xc4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d110      	bne.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007094:	f000 fd48 	bl	8007b28 <prvInitialiseTaskLists>
 8007098:	e00d      	b.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800709a:	4b26      	ldr	r3, [pc, #152]	; (8007134 <prvAddNewTaskToReadyList+0xcc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070a2:	4b23      	ldr	r3, [pc, #140]	; (8007130 <prvAddNewTaskToReadyList+0xc8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d802      	bhi.n	80070b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070b0:	4a1f      	ldr	r2, [pc, #124]	; (8007130 <prvAddNewTaskToReadyList+0xc8>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <prvAddNewTaskToReadyList+0xd0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <prvAddNewTaskToReadyList+0xd0>)
 80070be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070c0:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <prvAddNewTaskToReadyList+0xd0>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	4b1b      	ldr	r3, [pc, #108]	; (800713c <prvAddNewTaskToReadyList+0xd4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d903      	bls.n	80070dc <prvAddNewTaskToReadyList+0x74>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4a18      	ldr	r2, [pc, #96]	; (800713c <prvAddNewTaskToReadyList+0xd4>)
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4a15      	ldr	r2, [pc, #84]	; (8007140 <prvAddNewTaskToReadyList+0xd8>)
 80070ea:	441a      	add	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f7ff f871 	bl	80061da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070f8:	f001 fb46 	bl	8008788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070fc:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <prvAddNewTaskToReadyList+0xcc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007104:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <prvAddNewTaskToReadyList+0xc8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	429a      	cmp	r2, r3
 8007110:	d207      	bcs.n	8007122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007112:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <prvAddNewTaskToReadyList+0xdc>)
 8007114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000cc4 	.word	0x20000cc4
 8007130:	200007f0 	.word	0x200007f0
 8007134:	20000cd0 	.word	0x20000cd0
 8007138:	20000ce0 	.word	0x20000ce0
 800713c:	20000ccc 	.word	0x20000ccc
 8007140:	200007f4 	.word	0x200007f4
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <vTaskDelayUntil+0x28>
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e7fe      	b.n	800716e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <vTaskDelayUntil+0x42>
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	e7fe      	b.n	8007188 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800718a:	4b29      	ldr	r3, [pc, #164]	; (8007230 <vTaskDelayUntil+0xe8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <vTaskDelayUntil+0x5e>
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e7fe      	b.n	80071a4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80071a6:	f000 f8e1 	bl	800736c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80071aa:	4b22      	ldr	r3, [pc, #136]	; (8007234 <vTaskDelayUntil+0xec>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d20b      	bcs.n	80071dc <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d211      	bcs.n	80071f2 <vTaskDelayUntil+0xaa>
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d90d      	bls.n	80071f2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
 80071da:	e00a      	b.n	80071f2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d303      	bcc.n	80071ee <vTaskDelayUntil+0xa6>
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d901      	bls.n	80071f2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d006      	beq.n	800720c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fdd2 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800720c:	f000 f8f4 	bl	80073f8 <xTaskResumeAll>
 8007210:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d107      	bne.n	8007228 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <vTaskDelayUntil+0xf0>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007228:	bf00      	nop
 800722a:	3728      	adds	r7, #40	; 0x28
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000cec 	.word	0x20000cec
 8007234:	20000cc8 	.word	0x20000cc8
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d016      	beq.n	800727c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <vTaskDelay+0x60>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <vTaskDelay+0x2e>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	e7fe      	b.n	8007268 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800726a:	f000 f87f 	bl	800736c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd9d 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007276:	f000 f8bf 	bl	80073f8 <xTaskResumeAll>
 800727a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vTaskDelay+0x64>)
 8007284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000cec 	.word	0x20000cec
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072b2:	463a      	mov	r2, r7
 80072b4:	1d39      	adds	r1, r7, #4
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe ff2c 	bl	8006118 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	9202      	str	r2, [sp, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2300      	movs	r3, #0
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	460a      	mov	r2, r1
 80072d2:	4920      	ldr	r1, [pc, #128]	; (8007354 <vTaskStartScheduler+0xb0>)
 80072d4:	4820      	ldr	r0, [pc, #128]	; (8007358 <vTaskStartScheduler+0xb4>)
 80072d6:	f7ff fd99 	bl	8006e0c <xTaskCreateStatic>
 80072da:	4602      	mov	r2, r0
 80072dc:	4b1f      	ldr	r3, [pc, #124]	; (800735c <vTaskStartScheduler+0xb8>)
 80072de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <vTaskStartScheduler+0xb8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072e8:	2301      	movs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e001      	b.n	80072f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d102      	bne.n	80072fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072f8:	f000 fdae 	bl	8007e58 <xTimerCreateTimerTask>
 80072fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d115      	bne.n	8007330 <vTaskStartScheduler+0x8c>
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007316:	4b12      	ldr	r3, [pc, #72]	; (8007360 <vTaskStartScheduler+0xbc>)
 8007318:	f04f 32ff 	mov.w	r2, #4294967295
 800731c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800731e:	4b11      	ldr	r3, [pc, #68]	; (8007364 <vTaskStartScheduler+0xc0>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007324:	4b10      	ldr	r3, [pc, #64]	; (8007368 <vTaskStartScheduler+0xc4>)
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800732a:	f001 f961 	bl	80085f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800732e:	e00d      	b.n	800734c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d109      	bne.n	800734c <vTaskStartScheduler+0xa8>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e7fe      	b.n	800734a <vTaskStartScheduler+0xa6>
}
 800734c:	bf00      	nop
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	0800a270 	.word	0x0800a270
 8007358:	08007a51 	.word	0x08007a51
 800735c:	20000ce8 	.word	0x20000ce8
 8007360:	20000ce4 	.word	0x20000ce4
 8007364:	20000cd0 	.word	0x20000cd0
 8007368:	20000cc8 	.word	0x20000cc8

0800736c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007370:	4b04      	ldr	r3, [pc, #16]	; (8007384 <vTaskSuspendAll+0x18>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	4a03      	ldr	r2, [pc, #12]	; (8007384 <vTaskSuspendAll+0x18>)
 8007378:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800737a:	bf00      	nop
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	20000cec 	.word	0x20000cec

08007388 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <prvGetExpectedIdleTime+0x5c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800739a:	2301      	movs	r3, #1
 800739c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvGetExpectedIdleTime+0x60>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e012      	b.n	80073d4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <prvGetExpectedIdleTime+0x64>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d902      	bls.n	80073bc <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	e00b      	b.n	80073d4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	e005      	b.n	80073d4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <prvGetExpectedIdleTime+0x68>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <prvGetExpectedIdleTime+0x6c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80073d4:	687b      	ldr	r3, [r7, #4]
	}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000ccc 	.word	0x20000ccc
 80073e8:	200007f0 	.word	0x200007f0
 80073ec:	200007f4 	.word	0x200007f4
 80073f0:	20000ce4 	.word	0x20000ce4
 80073f4:	20000cc8 	.word	0x20000cc8

080073f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007406:	4b41      	ldr	r3, [pc, #260]	; (800750c <xTaskResumeAll+0x114>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <xTaskResumeAll+0x2a>
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	e7fe      	b.n	8007420 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007422:	f001 f983 	bl	800872c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <xTaskResumeAll+0x114>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	4a37      	ldr	r2, [pc, #220]	; (800750c <xTaskResumeAll+0x114>)
 800742e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007430:	4b36      	ldr	r3, [pc, #216]	; (800750c <xTaskResumeAll+0x114>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d162      	bne.n	80074fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007438:	4b35      	ldr	r3, [pc, #212]	; (8007510 <xTaskResumeAll+0x118>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d05e      	beq.n	80074fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007440:	e02f      	b.n	80074a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007442:	4b34      	ldr	r3, [pc, #208]	; (8007514 <xTaskResumeAll+0x11c>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3318      	adds	r3, #24
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe ff20 	bl	8006294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3304      	adds	r3, #4
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe ff1b 	bl	8006294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	4b2d      	ldr	r3, [pc, #180]	; (8007518 <xTaskResumeAll+0x120>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d903      	bls.n	8007472 <xTaskResumeAll+0x7a>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <xTaskResumeAll+0x120>)
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4a27      	ldr	r2, [pc, #156]	; (800751c <xTaskResumeAll+0x124>)
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fe fea6 	bl	80061da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	4b23      	ldr	r3, [pc, #140]	; (8007520 <xTaskResumeAll+0x128>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	429a      	cmp	r2, r3
 800749a:	d302      	bcc.n	80074a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800749c:	4b21      	ldr	r3, [pc, #132]	; (8007524 <xTaskResumeAll+0x12c>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074a2:	4b1c      	ldr	r3, [pc, #112]	; (8007514 <xTaskResumeAll+0x11c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1cb      	bne.n	8007442 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074b0:	f000 fbd4 	bl	8007c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074b4:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <xTaskResumeAll+0x130>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d010      	beq.n	80074e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074c0:	f000 f87e 	bl	80075c0 <xTaskIncrementTick>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80074ca:	4b16      	ldr	r3, [pc, #88]	; (8007524 <xTaskResumeAll+0x12c>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f1      	bne.n	80074c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80074dc:	4b12      	ldr	r3, [pc, #72]	; (8007528 <xTaskResumeAll+0x130>)
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074e2:	4b10      	ldr	r3, [pc, #64]	; (8007524 <xTaskResumeAll+0x12c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074ee:	4b0f      	ldr	r3, [pc, #60]	; (800752c <xTaskResumeAll+0x134>)
 80074f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074fe:	f001 f943 	bl	8008788 <vPortExitCritical>

	return xAlreadyYielded;
 8007502:	68bb      	ldr	r3, [r7, #8]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000cec 	.word	0x20000cec
 8007510:	20000cc4 	.word	0x20000cc4
 8007514:	20000c84 	.word	0x20000c84
 8007518:	20000ccc 	.word	0x20000ccc
 800751c:	200007f4 	.word	0x200007f4
 8007520:	200007f0 	.word	0x200007f0
 8007524:	20000cd8 	.word	0x20000cd8
 8007528:	20000cd4 	.word	0x20000cd4
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <xTaskGetTickCount+0x1c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800753c:	687b      	ldr	r3, [r7, #4]
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000cc8 	.word	0x20000cc8

08007550 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007556:	f001 faa9 	bl	8008aac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800755a:	2300      	movs	r3, #0
 800755c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800755e:	4b04      	ldr	r3, [pc, #16]	; (8007570 <xTaskGetTickCountFromISR+0x20>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007564:	683b      	ldr	r3, [r7, #0]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000cc8 	.word	0x20000cc8

08007574 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <vTaskStepTick+0x44>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	441a      	add	r2, r3
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <vTaskStepTick+0x48>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d909      	bls.n	80075a0 <vTaskStepTick+0x2c>
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e7fe      	b.n	800759e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <vTaskStepTick+0x44>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4413      	add	r3, r2
 80075a8:	4a03      	ldr	r2, [pc, #12]	; (80075b8 <vTaskStepTick+0x44>)
 80075aa:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20000cc8 	.word	0x20000cc8
 80075bc:	20000ce4 	.word	0x20000ce4

080075c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ca:	4b4e      	ldr	r3, [pc, #312]	; (8007704 <xTaskIncrementTick+0x144>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f040 8088 	bne.w	80076e4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d4:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <xTaskIncrementTick+0x148>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075dc:	4a4a      	ldr	r2, [pc, #296]	; (8007708 <xTaskIncrementTick+0x148>)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d11f      	bne.n	8007628 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80075e8:	4b48      	ldr	r3, [pc, #288]	; (800770c <xTaskIncrementTick+0x14c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <xTaskIncrementTick+0x46>
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	e7fe      	b.n	8007604 <xTaskIncrementTick+0x44>
 8007606:	4b41      	ldr	r3, [pc, #260]	; (800770c <xTaskIncrementTick+0x14c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	4b40      	ldr	r3, [pc, #256]	; (8007710 <xTaskIncrementTick+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a3e      	ldr	r2, [pc, #248]	; (800770c <xTaskIncrementTick+0x14c>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4a3e      	ldr	r2, [pc, #248]	; (8007710 <xTaskIncrementTick+0x150>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4b3e      	ldr	r3, [pc, #248]	; (8007714 <xTaskIncrementTick+0x154>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a3c      	ldr	r2, [pc, #240]	; (8007714 <xTaskIncrementTick+0x154>)
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	f000 fb1a 	bl	8007c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007628:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <xTaskIncrementTick+0x158>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d349      	bcc.n	80076c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007632:	4b36      	ldr	r3, [pc, #216]	; (800770c <xTaskIncrementTick+0x14c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <xTaskIncrementTick+0x158>)
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	601a      	str	r2, [r3, #0]
					break;
 8007644:	e03f      	b.n	80076c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007646:	4b31      	ldr	r3, [pc, #196]	; (800770c <xTaskIncrementTick+0x14c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d203      	bcs.n	8007666 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800765e:	4a2e      	ldr	r2, [pc, #184]	; (8007718 <xTaskIncrementTick+0x158>)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007664:	e02f      	b.n	80076c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3304      	adds	r3, #4
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fe12 	bl	8006294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	3318      	adds	r3, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fe09 	bl	8006294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <xTaskIncrementTick+0x15c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d903      	bls.n	8007696 <xTaskIncrementTick+0xd6>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	4a22      	ldr	r2, [pc, #136]	; (800771c <xTaskIncrementTick+0x15c>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4a1f      	ldr	r2, [pc, #124]	; (8007720 <xTaskIncrementTick+0x160>)
 80076a4:	441a      	add	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe fd94 	bl	80061da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <xTaskIncrementTick+0x164>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	429a      	cmp	r2, r3
 80076be:	d3b8      	bcc.n	8007632 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c4:	e7b5      	b.n	8007632 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076c6:	4b17      	ldr	r3, [pc, #92]	; (8007724 <xTaskIncrementTick+0x164>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4914      	ldr	r1, [pc, #80]	; (8007720 <xTaskIncrementTick+0x160>)
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d907      	bls.n	80076ee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	e004      	b.n	80076ee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076e4:	4b10      	ldr	r3, [pc, #64]	; (8007728 <xTaskIncrementTick+0x168>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	4a0f      	ldr	r2, [pc, #60]	; (8007728 <xTaskIncrementTick+0x168>)
 80076ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <xTaskIncrementTick+0x16c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80076f6:	2301      	movs	r3, #1
 80076f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076fa:	697b      	ldr	r3, [r7, #20]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000cec 	.word	0x20000cec
 8007708:	20000cc8 	.word	0x20000cc8
 800770c:	20000c7c 	.word	0x20000c7c
 8007710:	20000c80 	.word	0x20000c80
 8007714:	20000cdc 	.word	0x20000cdc
 8007718:	20000ce4 	.word	0x20000ce4
 800771c:	20000ccc 	.word	0x20000ccc
 8007720:	200007f4 	.word	0x200007f4
 8007724:	200007f0 	.word	0x200007f0
 8007728:	20000cd4 	.word	0x20000cd4
 800772c:	20000cd8 	.word	0x20000cd8

08007730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <vTaskSwitchContext+0xa4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800773e:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <vTaskSwitchContext+0xa8>)
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007744:	e040      	b.n	80077c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <vTaskSwitchContext+0xa8>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800774c:	4b23      	ldr	r3, [pc, #140]	; (80077dc <vTaskSwitchContext+0xac>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e00f      	b.n	8007774 <vTaskSwitchContext+0x44>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <vTaskSwitchContext+0x3e>
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	607b      	str	r3, [r7, #4]
 800776c:	e7fe      	b.n	800776c <vTaskSwitchContext+0x3c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3b01      	subs	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	491a      	ldr	r1, [pc, #104]	; (80077e0 <vTaskSwitchContext+0xb0>)
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0e5      	beq.n	8007754 <vTaskSwitchContext+0x24>
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4a13      	ldr	r2, [pc, #76]	; (80077e0 <vTaskSwitchContext+0xb0>)
 8007794:	4413      	add	r3, r2
 8007796:	60bb      	str	r3, [r7, #8]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3308      	adds	r3, #8
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d104      	bne.n	80077b8 <vTaskSwitchContext+0x88>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	605a      	str	r2, [r3, #4]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <vTaskSwitchContext+0xb4>)
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	4a06      	ldr	r2, [pc, #24]	; (80077dc <vTaskSwitchContext+0xac>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6013      	str	r3, [r2, #0]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20000cec 	.word	0x20000cec
 80077d8:	20000cd8 	.word	0x20000cd8
 80077dc:	20000ccc 	.word	0x20000ccc
 80077e0:	200007f4 	.word	0x200007f4
 80077e4:	200007f0 	.word	0x200007f0

080077e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <vTaskPlaceOnEventList+0x24>
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e7fe      	b.n	800780a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <vTaskPlaceOnEventList+0x44>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3318      	adds	r3, #24
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fe fd04 	bl	8006222 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800781a:	2101      	movs	r1, #1
 800781c:	6838      	ldr	r0, [r7, #0]
 800781e:	f000 fac7 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200007f0 	.word	0x200007f0

08007830 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d109      	bne.n	8007856 <vTaskPlaceOnEventListRestricted+0x26>
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e7fe      	b.n	8007854 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <vTaskPlaceOnEventListRestricted+0x50>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3318      	adds	r3, #24
 800785c:	4619      	mov	r1, r3
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7fe fcbb 	bl	80061da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800786a:	f04f 33ff 	mov.w	r3, #4294967295
 800786e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	68b8      	ldr	r0, [r7, #8]
 8007874:	f000 fa9c 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
	}
 8007878:	bf00      	nop
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	200007f0 	.word	0x200007f0

08007884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <xTaskRemoveFromEventList+0x2a>
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e7fe      	b.n	80078ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3318      	adds	r3, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fcee 	bl	8006294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <xTaskRemoveFromEventList+0xb0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11f      	bne.n	8007900 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fce5 	bl	8006294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ce:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <xTaskRemoveFromEventList+0xb4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d903      	bls.n	80078de <xTaskRemoveFromEventList+0x5a>
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <xTaskRemoveFromEventList+0xb4>)
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4a14      	ldr	r2, [pc, #80]	; (800793c <xTaskRemoveFromEventList+0xb8>)
 80078ec:	441a      	add	r2, r3
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fe fc70 	bl	80061da <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80078fa:	f000 f9af 	bl	8007c5c <prvResetNextTaskUnblockTime>
 80078fe:	e005      	b.n	800790c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	3318      	adds	r3, #24
 8007904:	4619      	mov	r1, r3
 8007906:	480e      	ldr	r0, [pc, #56]	; (8007940 <xTaskRemoveFromEventList+0xbc>)
 8007908:	f7fe fc67 	bl	80061da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <xTaskRemoveFromEventList+0xc0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	429a      	cmp	r2, r3
 8007918:	d905      	bls.n	8007926 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800791a:	2301      	movs	r3, #1
 800791c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800791e:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <xTaskRemoveFromEventList+0xc4>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e001      	b.n	800792a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800792a:	697b      	ldr	r3, [r7, #20]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000cec 	.word	0x20000cec
 8007938:	20000ccc 	.word	0x20000ccc
 800793c:	200007f4 	.word	0x200007f4
 8007940:	20000c84 	.word	0x20000c84
 8007944:	200007f0 	.word	0x200007f0
 8007948:	20000cd8 	.word	0x20000cd8

0800794c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007954:	4b06      	ldr	r3, [pc, #24]	; (8007970 <vTaskInternalSetTimeOutState+0x24>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <vTaskInternalSetTimeOutState+0x28>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	605a      	str	r2, [r3, #4]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20000cdc 	.word	0x20000cdc
 8007974:	20000cc8 	.word	0x20000cc8

08007978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <xTaskCheckForTimeOut+0x24>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e7fe      	b.n	800799a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <xTaskCheckForTimeOut+0x3e>
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e7fe      	b.n	80079b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079b6:	f000 feb9 	bl	800872c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <xTaskCheckForTimeOut+0xb8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d102      	bne.n	80079da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]
 80079d8:	e023      	b.n	8007a22 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <xTaskCheckForTimeOut+0xbc>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d007      	beq.n	80079f6 <xTaskCheckForTimeOut+0x7e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d302      	bcc.n	80079f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e015      	b.n	8007a22 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d20b      	bcs.n	8007a18 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ff9d 	bl	800794c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e004      	b.n	8007a22 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a22:	f000 feb1 	bl	8008788 <vPortExitCritical>

	return xReturn;
 8007a26:	69fb      	ldr	r3, [r7, #28]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000cc8 	.word	0x20000cc8
 8007a34:	20000cdc 	.word	0x20000cdc

08007a38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a3c:	4b03      	ldr	r3, [pc, #12]	; (8007a4c <vTaskMissedYield+0x14>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20000cd8 	.word	0x20000cd8

08007a50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a58:	f000 f8a6 	bl	8007ba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a5c:	4b17      	ldr	r3, [pc, #92]	; (8007abc <prvIdleTask+0x6c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d907      	bls.n	8007a74 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007a64:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <prvIdleTask+0x70>)
 8007a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8007a74:	f7ff fc88 	bl	8007388 <prvGetExpectedIdleTime>
 8007a78:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d9eb      	bls.n	8007a58 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8007a80:	f7ff fc74 	bl	800736c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <prvIdleTask+0x74>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <prvIdleTask+0x78>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d209      	bcs.n	8007aa4 <prvIdleTask+0x54>
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	e7fe      	b.n	8007aa2 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8007aa4:	f7ff fc70 	bl	8007388 <prvGetExpectedIdleTime>
 8007aa8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d902      	bls.n	8007ab6 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fee9 	bl	8008888 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8007ab6:	f7ff fc9f 	bl	80073f8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8007aba:	e7cd      	b.n	8007a58 <prvIdleTask+0x8>
 8007abc:	200007f4 	.word	0x200007f4
 8007ac0:	e000ed04 	.word	0xe000ed04
 8007ac4:	20000ce4 	.word	0x20000ce4
 8007ac8:	20000cc8 	.word	0x20000cc8

08007acc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <eTaskConfirmSleepModeStatus+0x4c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	71fb      	strb	r3, [r7, #7]
 8007ae6:	e010      	b.n	8007b0a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <eTaskConfirmSleepModeStatus+0x50>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007af0:	2300      	movs	r3, #0
 8007af2:	71fb      	strb	r3, [r7, #7]
 8007af4:	e009      	b.n	8007b0a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8007af6:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <eTaskConfirmSleepModeStatus+0x54>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <eTaskConfirmSleepModeStatus+0x58>)
 8007afc:	6819      	ldr	r1, [r3, #0]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	1acb      	subs	r3, r1, r3
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d101      	bne.n	8007b0a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8007b06:	2302      	movs	r3, #2
 8007b08:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
	}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20000c84 	.word	0x20000c84
 8007b1c:	20000cd8 	.word	0x20000cd8
 8007b20:	20000cb0 	.word	0x20000cb0
 8007b24:	20000cc4 	.word	0x20000cc4

08007b28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b2e:	2300      	movs	r3, #0
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	e00c      	b.n	8007b4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <prvInitialiseTaskLists+0x60>)
 8007b40:	4413      	add	r3, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fb1c 	bl	8006180 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b37      	cmp	r3, #55	; 0x37
 8007b52:	d9ef      	bls.n	8007b34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b54:	480d      	ldr	r0, [pc, #52]	; (8007b8c <prvInitialiseTaskLists+0x64>)
 8007b56:	f7fe fb13 	bl	8006180 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b5a:	480d      	ldr	r0, [pc, #52]	; (8007b90 <prvInitialiseTaskLists+0x68>)
 8007b5c:	f7fe fb10 	bl	8006180 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b60:	480c      	ldr	r0, [pc, #48]	; (8007b94 <prvInitialiseTaskLists+0x6c>)
 8007b62:	f7fe fb0d 	bl	8006180 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b66:	480c      	ldr	r0, [pc, #48]	; (8007b98 <prvInitialiseTaskLists+0x70>)
 8007b68:	f7fe fb0a 	bl	8006180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b6c:	480b      	ldr	r0, [pc, #44]	; (8007b9c <prvInitialiseTaskLists+0x74>)
 8007b6e:	f7fe fb07 	bl	8006180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b72:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <prvInitialiseTaskLists+0x78>)
 8007b74:	4a05      	ldr	r2, [pc, #20]	; (8007b8c <prvInitialiseTaskLists+0x64>)
 8007b76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <prvInitialiseTaskLists+0x7c>)
 8007b7a:	4a05      	ldr	r2, [pc, #20]	; (8007b90 <prvInitialiseTaskLists+0x68>)
 8007b7c:	601a      	str	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	200007f4 	.word	0x200007f4
 8007b8c:	20000c54 	.word	0x20000c54
 8007b90:	20000c68 	.word	0x20000c68
 8007b94:	20000c84 	.word	0x20000c84
 8007b98:	20000c98 	.word	0x20000c98
 8007b9c:	20000cb0 	.word	0x20000cb0
 8007ba0:	20000c7c 	.word	0x20000c7c
 8007ba4:	20000c80 	.word	0x20000c80

08007ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bae:	e019      	b.n	8007be4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bb0:	f000 fdbc 	bl	800872c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <prvCheckTasksWaitingTermination+0x4c>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe fb67 	bl	8006294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvCheckTasksWaitingTermination+0x50>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <prvCheckTasksWaitingTermination+0x50>)
 8007bce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <prvCheckTasksWaitingTermination+0x54>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <prvCheckTasksWaitingTermination+0x54>)
 8007bd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bda:	f000 fdd5 	bl	8008788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f80e 	bl	8007c00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <prvCheckTasksWaitingTermination+0x54>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e1      	bne.n	8007bb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20000c98 	.word	0x20000c98
 8007bf8:	20000cc4 	.word	0x20000cc4
 8007bfc:	20000cac 	.word	0x20000cac

08007c00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d108      	bne.n	8007c24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 f848 	bl	8008cac <vPortFree>
				vPortFree( pxTCB );
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f845 	bl	8008cac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c22:	e017      	b.n	8007c54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d103      	bne.n	8007c36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 f83c 	bl	8008cac <vPortFree>
	}
 8007c34:	e00e      	b.n	8007c54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d009      	beq.n	8007c54 <prvDeleteTCB+0x54>
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	e7fe      	b.n	8007c52 <prvDeleteTCB+0x52>
	}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <prvResetNextTaskUnblockTime+0x38>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <prvResetNextTaskUnblockTime+0x3c>)
 8007c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c74:	e008      	b.n	8007c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <prvResetNextTaskUnblockTime+0x38>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <prvResetNextTaskUnblockTime+0x3c>)
 8007c86:	6013      	str	r3, [r2, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20000c7c 	.word	0x20000c7c
 8007c98:	20000ce4 	.word	0x20000ce4

08007c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <xTaskGetSchedulerState+0x34>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007caa:	2301      	movs	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	e008      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb0:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <xTaskGetSchedulerState+0x38>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	e001      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cc2:	687b      	ldr	r3, [r7, #4]
	}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	20000cd0 	.word	0x20000cd0
 8007cd4:	20000cec 	.word	0x20000cec

08007cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d054      	beq.n	8007d98 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cee:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <xTaskPriorityDisinherit+0xcc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d009      	beq.n	8007d0c <xTaskPriorityDisinherit+0x34>
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e7fe      	b.n	8007d0a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <xTaskPriorityDisinherit+0x50>
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	e7fe      	b.n	8007d26 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d02c      	beq.n	8007d98 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d128      	bne.n	8007d98 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe faa2 	bl	8006294 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <xTaskPriorityDisinherit+0xd0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d903      	bls.n	8007d78 <xTaskPriorityDisinherit+0xa0>
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	4a0c      	ldr	r2, [pc, #48]	; (8007da8 <xTaskPriorityDisinherit+0xd0>)
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a09      	ldr	r2, [pc, #36]	; (8007dac <xTaskPriorityDisinherit+0xd4>)
 8007d86:	441a      	add	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe fa23 	bl	80061da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d98:	697b      	ldr	r3, [r7, #20]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200007f0 	.word	0x200007f0
 8007da8:	20000ccc 	.word	0x20000ccc
 8007dac:	200007f4 	.word	0x200007f4

08007db0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dba:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc0:	4b20      	ldr	r3, [pc, #128]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fa64 	bl	8006294 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d10a      	bne.n	8007dea <prvAddCurrentTaskToDelayedList+0x3a>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dda:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4819      	ldr	r0, [pc, #100]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x98>)
 8007de4:	f7fe f9f9 	bl	80061da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007de8:	e026      	b.n	8007e38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d209      	bcs.n	8007e16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e02:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe fa07 	bl	8006222 <vListInsert>
}
 8007e14:	e010      	b.n	8007e38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e16:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe f9fd 	bl	8006222 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d202      	bcs.n	8007e38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e32:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6013      	str	r3, [r2, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000cc8 	.word	0x20000cc8
 8007e44:	200007f0 	.word	0x200007f0
 8007e48:	20000cb0 	.word	0x20000cb0
 8007e4c:	20000c80 	.word	0x20000c80
 8007e50:	20000c7c 	.word	0x20000c7c
 8007e54:	20000ce4 	.word	0x20000ce4

08007e58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e62:	f000 faff 	bl	8008464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e66:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <xTimerCreateTimerTask+0x80>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d021      	beq.n	8007eb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e76:	1d3a      	adds	r2, r7, #4
 8007e78:	f107 0108 	add.w	r1, r7, #8
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe f963 	bl	800614c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	9202      	str	r2, [sp, #8]
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	2302      	movs	r3, #2
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	460a      	mov	r2, r1
 8007e98:	4910      	ldr	r1, [pc, #64]	; (8007edc <xTimerCreateTimerTask+0x84>)
 8007e9a:	4811      	ldr	r0, [pc, #68]	; (8007ee0 <xTimerCreateTimerTask+0x88>)
 8007e9c:	f7fe ffb6 	bl	8006e0c <xTaskCreateStatic>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <xTimerCreateTimerTask+0x8c>)
 8007ea4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <xTimerCreateTimerTask+0x8c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d109      	bne.n	8007ecc <xTimerCreateTimerTask+0x74>
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	613b      	str	r3, [r7, #16]
 8007eca:	e7fe      	b.n	8007eca <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007ecc:	697b      	ldr	r3, [r7, #20]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000d20 	.word	0x20000d20
 8007edc:	0800a278 	.word	0x0800a278
 8007ee0:	08008019 	.word	0x08008019
 8007ee4:	20000d24 	.word	0x20000d24

08007ee8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <xTimerGenericCommand+0x2c>
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	623b      	str	r3, [r7, #32]
 8007f12:	e7fe      	b.n	8007f12 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f14:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <xTimerGenericCommand+0x94>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d02a      	beq.n	8007f72 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	dc18      	bgt.n	8007f60 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f2e:	f7ff feb5 	bl	8007c9c <xTaskGetSchedulerState>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d109      	bne.n	8007f4c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f38:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <xTimerGenericCommand+0x94>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	f107 0110 	add.w	r1, r7, #16
 8007f40:	2300      	movs	r3, #0
 8007f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f44:	f7fe fb0e 	bl	8006564 <xQueueGenericSend>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24
 8007f4a:	e012      	b.n	8007f72 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <xTimerGenericCommand+0x94>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	f107 0110 	add.w	r1, r7, #16
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7fe fb04 	bl	8006564 <xQueueGenericSend>
 8007f5c:	6278      	str	r0, [r7, #36]	; 0x24
 8007f5e:	e008      	b.n	8007f72 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <xTimerGenericCommand+0x94>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	f107 0110 	add.w	r1, r7, #16
 8007f68:	2300      	movs	r3, #0
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	f7fe fbf4 	bl	8006758 <xQueueGenericSendFromISR>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3728      	adds	r7, #40	; 0x28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20000d20 	.word	0x20000d20

08007f80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b22      	ldr	r3, [pc, #136]	; (8008014 <prvProcessExpiredTimer+0x94>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe f97b 	bl	8006294 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d021      	beq.n	8007ff0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	18d1      	adds	r1, r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	6978      	ldr	r0, [r7, #20]
 8007fba:	f000 f8d1 	bl	8008160 <prvInsertTimerInActiveList>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01e      	beq.n	8008002 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6978      	ldr	r0, [r7, #20]
 8007fd0:	f7ff ff8a 	bl	8007ee8 <xTimerGenericCommand>
 8007fd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d112      	bne.n	8008002 <prvProcessExpiredTimer+0x82>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e7fe      	b.n	8007fee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	4798      	blx	r3
}
 800800a:	bf00      	nop
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000d18 	.word	0x20000d18

08008018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008020:	f107 0308 	add.w	r3, r7, #8
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f857 	bl	80080d8 <prvGetNextExpireTime>
 800802a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4619      	mov	r1, r3
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f803 	bl	800803c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008036:	f000 f8d5 	bl	80081e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800803a:	e7f1      	b.n	8008020 <prvTimerTask+0x8>

0800803c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008046:	f7ff f991 	bl	800736c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f866 	bl	8008120 <prvSampleTimeNow>
 8008054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d130      	bne.n	80080be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <prvProcessTimerOrBlockTask+0x3c>
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	429a      	cmp	r2, r3
 8008068:	d806      	bhi.n	8008078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800806a:	f7ff f9c5 	bl	80073f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff ff85 	bl	8007f80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008076:	e024      	b.n	80080c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d008      	beq.n	8008090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <prvProcessTimerOrBlockTask+0x90>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <prvProcessTimerOrBlockTask+0x50>
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <prvProcessTimerOrBlockTask+0x52>
 800808c:	2300      	movs	r3, #0
 800808e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <prvProcessTimerOrBlockTask+0x94>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4619      	mov	r1, r3
 800809e:	f7fe fe81 	bl	8006da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080a2:	f7ff f9a9 	bl	80073f8 <xTaskResumeAll>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <prvProcessTimerOrBlockTask+0x98>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
}
 80080bc:	e001      	b.n	80080c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080be:	f7ff f99b 	bl	80073f8 <xTaskResumeAll>
}
 80080c2:	bf00      	nop
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000d1c 	.word	0x20000d1c
 80080d0:	20000d20 	.word	0x20000d20
 80080d4:	e000ed04 	.word	0xe000ed04

080080d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080e0:	4b0e      	ldr	r3, [pc, #56]	; (800811c <prvGetNextExpireTime+0x44>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <prvGetNextExpireTime+0x16>
 80080ea:	2201      	movs	r2, #1
 80080ec:	e000      	b.n	80080f0 <prvGetNextExpireTime+0x18>
 80080ee:	2200      	movs	r2, #0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080fc:	4b07      	ldr	r3, [pc, #28]	; (800811c <prvGetNextExpireTime+0x44>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e001      	b.n	800810c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800810c:	68fb      	ldr	r3, [r7, #12]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000d18 	.word	0x20000d18

08008120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008128:	f7ff fa02 	bl	8007530 <xTaskGetTickCount>
 800812c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <prvSampleTimeNow+0x3c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	429a      	cmp	r2, r3
 8008136:	d205      	bcs.n	8008144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008138:	f000 f930 	bl	800839c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	e002      	b.n	800814a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800814a:	4a04      	ldr	r2, [pc, #16]	; (800815c <prvSampleTimeNow+0x3c>)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008150:	68fb      	ldr	r3, [r7, #12]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000d28 	.word	0x20000d28

08008160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	429a      	cmp	r2, r3
 8008184:	d812      	bhi.n	80081ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	429a      	cmp	r2, r3
 8008192:	d302      	bcc.n	800819a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e01b      	b.n	80081d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800819a:	4b10      	ldr	r3, [pc, #64]	; (80081dc <prvInsertTimerInActiveList+0x7c>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f7fe f83c 	bl	8006222 <vListInsert>
 80081aa:	e012      	b.n	80081d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d206      	bcs.n	80081c2 <prvInsertTimerInActiveList+0x62>
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d302      	bcc.n	80081c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081bc:	2301      	movs	r3, #1
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e007      	b.n	80081d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081c2:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <prvInsertTimerInActiveList+0x80>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f7fe f828 	bl	8006222 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081d2:	697b      	ldr	r3, [r7, #20]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000d1c 	.word	0x20000d1c
 80081e0:	20000d18 	.word	0x20000d18

080081e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08e      	sub	sp, #56	; 0x38
 80081e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ea:	e0c6      	b.n	800837a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da17      	bge.n	8008222 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081f2:	1d3b      	adds	r3, r7, #4
 80081f4:	3304      	adds	r3, #4
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <prvProcessReceivedCommands+0x2e>
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e7fe      	b.n	8008210 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008218:	6850      	ldr	r0, [r2, #4]
 800821a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800821c:	6892      	ldr	r2, [r2, #8]
 800821e:	4611      	mov	r1, r2
 8008220:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f2c0 80a7 	blt.w	8008378 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe f82a 	bl	8006294 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008240:	463b      	mov	r3, r7
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff ff6c 	bl	8008120 <prvSampleTimeNow>
 8008248:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b09      	cmp	r3, #9
 800824e:	f200 8094 	bhi.w	800837a <prvProcessReceivedCommands+0x196>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <prvProcessReceivedCommands+0x74>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008281 	.word	0x08008281
 800825c:	08008281 	.word	0x08008281
 8008260:	08008281 	.word	0x08008281
 8008264:	080082f3 	.word	0x080082f3
 8008268:	08008307 	.word	0x08008307
 800826c:	0800834f 	.word	0x0800834f
 8008270:	08008281 	.word	0x08008281
 8008274:	08008281 	.word	0x08008281
 8008278:	080082f3 	.word	0x080082f3
 800827c:	08008307 	.word	0x08008307
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	18d1      	adds	r1, r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a0:	f7ff ff5e 	bl	8008160 <prvInsertTimerInActiveList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d067      	beq.n	800837a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05c      	beq.n	800837a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	441a      	add	r2, r3
 80082c8:	2300      	movs	r3, #0
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d2:	f7ff fe09 	bl	8007ee8 <xTimerGenericCommand>
 80082d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d14d      	bne.n	800837a <prvProcessReceivedCommands+0x196>
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e7fe      	b.n	80082f0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008304:	e039      	b.n	800837a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800830c:	f043 0301 	orr.w	r3, r3, #1
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d109      	bne.n	800833a <prvProcessReceivedCommands+0x156>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e7fe      	b.n	8008338 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	18d1      	adds	r1, r2, r3
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f7ff ff0a 	bl	8008160 <prvInsertTimerInActiveList>
					break;
 800834c:	e015      	b.n	800837a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800835c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835e:	f000 fca5 	bl	8008cac <vPortFree>
 8008362:	e00a      	b.n	800837a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	b2da      	uxtb	r2, r3
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008376:	e000      	b.n	800837a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800837a:	4b07      	ldr	r3, [pc, #28]	; (8008398 <prvProcessReceivedCommands+0x1b4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	1d39      	adds	r1, r7, #4
 8008380:	2200      	movs	r2, #0
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fa7c 	bl	8006880 <xQueueReceive>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	f47f af2e 	bne.w	80081ec <prvProcessReceivedCommands+0x8>
	}
}
 8008390:	bf00      	nop
 8008392:	3730      	adds	r7, #48	; 0x30
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000d20 	.word	0x20000d20

0800839c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083a2:	e047      	b.n	8008434 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a4:	4b2d      	ldr	r3, [pc, #180]	; (800845c <prvSwitchTimerLists+0xc0>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <prvSwitchTimerLists+0xc0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd ff69 	bl	8006294 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d02d      	beq.n	8008434 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d90e      	bls.n	8008408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083f6:	4b19      	ldr	r3, [pc, #100]	; (800845c <prvSwitchTimerLists+0xc0>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3304      	adds	r3, #4
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f7fd ff0e 	bl	8006222 <vListInsert>
 8008406:	e015      	b.n	8008434 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008408:	2300      	movs	r3, #0
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	2100      	movs	r1, #0
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fd68 	bl	8007ee8 <xTimerGenericCommand>
 8008418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d109      	bne.n	8008434 <prvSwitchTimerLists+0x98>
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	e7fe      	b.n	8008432 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008434:	4b09      	ldr	r3, [pc, #36]	; (800845c <prvSwitchTimerLists+0xc0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1b2      	bne.n	80083a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <prvSwitchTimerLists+0xc0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <prvSwitchTimerLists+0xc4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a04      	ldr	r2, [pc, #16]	; (800845c <prvSwitchTimerLists+0xc0>)
 800844a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800844c:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvSwitchTimerLists+0xc4>)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6013      	str	r3, [r2, #0]
}
 8008452:	bf00      	nop
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000d18 	.word	0x20000d18
 8008460:	20000d1c 	.word	0x20000d1c

08008464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800846a:	f000 f95f 	bl	800872c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d120      	bne.n	80084b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008476:	4814      	ldr	r0, [pc, #80]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008478:	f7fd fe82 	bl	8006180 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800847c:	4813      	ldr	r0, [pc, #76]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800847e:	f7fd fe7f 	bl	8006180 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008482:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <prvCheckForValidListAndQueue+0x6c>)
 8008484:	4a10      	ldr	r2, [pc, #64]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008488:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <prvCheckForValidListAndQueue+0x70>)
 800848a:	4a10      	ldr	r2, [pc, #64]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800848c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <prvCheckForValidListAndQueue+0x74>)
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <prvCheckForValidListAndQueue+0x78>)
 8008496:	2110      	movs	r1, #16
 8008498:	200a      	movs	r0, #10
 800849a:	f7fd ff8d 	bl	80063b8 <xQueueGenericCreateStatic>
 800849e:	4602      	mov	r2, r0
 80084a0:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	490b      	ldr	r1, [pc, #44]	; (80084e0 <prvCheckForValidListAndQueue+0x7c>)
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fc4e 	bl	8006d54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084b8:	f000 f966 	bl	8008788 <vPortExitCritical>
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000d20 	.word	0x20000d20
 80084c8:	20000cf0 	.word	0x20000cf0
 80084cc:	20000d04 	.word	0x20000d04
 80084d0:	20000d18 	.word	0x20000d18
 80084d4:	20000d1c 	.word	0x20000d1c
 80084d8:	20000dcc 	.word	0x20000dcc
 80084dc:	20000d2c 	.word	0x20000d2c
 80084e0:	0800a280 	.word	0x0800a280

080084e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3b04      	subs	r3, #4
 80084f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b04      	subs	r3, #4
 8008502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f023 0201 	bic.w	r2, r3, #1
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3b04      	subs	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <pxPortInitialiseStack+0x64>)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b14      	subs	r3, #20
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3b04      	subs	r3, #4
 800852a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f06f 0202 	mvn.w	r2, #2
 8008532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3b20      	subs	r3, #32
 8008538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800853a:	68fb      	ldr	r3, [r7, #12]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	0800854d 	.word	0x0800854d

0800854c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008556:	4b11      	ldr	r3, [pc, #68]	; (800859c <prvTaskExitError+0x50>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d009      	beq.n	8008574 <prvTaskExitError+0x28>
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e7fe      	b.n	8008572 <prvTaskExitError+0x26>
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008586:	bf00      	nop
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0fc      	beq.n	8008588 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	200000ac 	.word	0x200000ac

080085a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <pxCurrentTCBConst2>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	6808      	ldr	r0, [r1, #0]
 80085a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	f380 8809 	msr	PSP, r0
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	4770      	bx	lr
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst2>:
 80085c0:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085c8:	4808      	ldr	r0, [pc, #32]	; (80085ec <prvPortStartFirstTask+0x24>)
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	f380 8808 	msr	MSP, r0
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8814 	msr	CONTROL, r0
 80085da:	b662      	cpsie	i
 80085dc:	b661      	cpsie	f
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	df00      	svc	0
 80085e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ea:	bf00      	nop
 80085ec:	e000ed08 	.word	0xe000ed08

080085f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085f6:	4b44      	ldr	r3, [pc, #272]	; (8008708 <xPortStartScheduler+0x118>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a44      	ldr	r2, [pc, #272]	; (800870c <xPortStartScheduler+0x11c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d109      	bne.n	8008614 <xPortStartScheduler+0x24>
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	e7fe      	b.n	8008612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008614:	4b3c      	ldr	r3, [pc, #240]	; (8008708 <xPortStartScheduler+0x118>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a3d      	ldr	r2, [pc, #244]	; (8008710 <xPortStartScheduler+0x120>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d109      	bne.n	8008632 <xPortStartScheduler+0x42>
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	e7fe      	b.n	8008630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008632:	4b38      	ldr	r3, [pc, #224]	; (8008714 <xPortStartScheduler+0x124>)
 8008634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	22ff      	movs	r2, #255	; 0xff
 8008642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008654:	b2da      	uxtb	r2, r3
 8008656:	4b30      	ldr	r3, [pc, #192]	; (8008718 <xPortStartScheduler+0x128>)
 8008658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800865a:	4b30      	ldr	r3, [pc, #192]	; (800871c <xPortStartScheduler+0x12c>)
 800865c:	2207      	movs	r2, #7
 800865e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008660:	e009      	b.n	8008676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008662:	4b2e      	ldr	r3, [pc, #184]	; (800871c <xPortStartScheduler+0x12c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a2c      	ldr	r2, [pc, #176]	; (800871c <xPortStartScheduler+0x12c>)
 800866a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867e:	2b80      	cmp	r3, #128	; 0x80
 8008680:	d0ef      	beq.n	8008662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008682:	4b26      	ldr	r3, [pc, #152]	; (800871c <xPortStartScheduler+0x12c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1c3 0307 	rsb	r3, r3, #7
 800868a:	2b04      	cmp	r3, #4
 800868c:	d009      	beq.n	80086a2 <xPortStartScheduler+0xb2>
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	e7fe      	b.n	80086a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086a2:	4b1e      	ldr	r3, [pc, #120]	; (800871c <xPortStartScheduler+0x12c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	4a1c      	ldr	r2, [pc, #112]	; (800871c <xPortStartScheduler+0x12c>)
 80086aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <xPortStartScheduler+0x12c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086b4:	4a19      	ldr	r2, [pc, #100]	; (800871c <xPortStartScheduler+0x12c>)
 80086b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <xPortStartScheduler+0x130>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a16      	ldr	r2, [pc, #88]	; (8008720 <xPortStartScheduler+0x130>)
 80086c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086cc:	4b14      	ldr	r3, [pc, #80]	; (8008720 <xPortStartScheduler+0x130>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <xPortStartScheduler+0x130>)
 80086d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086d8:	f000 f9a2 	bl	8008a20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086dc:	4b11      	ldr	r3, [pc, #68]	; (8008724 <xPortStartScheduler+0x134>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086e2:	f000 f9d9 	bl	8008a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086e6:	4b10      	ldr	r3, [pc, #64]	; (8008728 <xPortStartScheduler+0x138>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <xPortStartScheduler+0x138>)
 80086ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086f2:	f7ff ff69 	bl	80085c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086f6:	f7ff f81b 	bl	8007730 <vTaskSwitchContext>
	prvTaskExitError();
 80086fa:	f7ff ff27 	bl	800854c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	e000ed00 	.word	0xe000ed00
 800870c:	410fc271 	.word	0x410fc271
 8008710:	410fc270 	.word	0x410fc270
 8008714:	e000e400 	.word	0xe000e400
 8008718:	20000e28 	.word	0x20000e28
 800871c:	20000e2c 	.word	0x20000e2c
 8008720:	e000ed20 	.word	0xe000ed20
 8008724:	200000ac 	.word	0x200000ac
 8008728:	e000ef34 	.word	0xe000ef34

0800872c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008744:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <vPortEnterCritical+0x54>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a0d      	ldr	r2, [pc, #52]	; (8008780 <vPortEnterCritical+0x54>)
 800874c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <vPortEnterCritical+0x54>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d10e      	bne.n	8008774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008756:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <vPortEnterCritical+0x58>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <vPortEnterCritical+0x48>
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	e7fe      	b.n	8008772 <vPortEnterCritical+0x46>
	}
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	200000ac 	.word	0x200000ac
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <vPortExitCritical+0x4c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <vPortExitCritical+0x22>
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	e7fe      	b.n	80087a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80087aa:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <vPortExitCritical+0x4c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	4a08      	ldr	r2, [pc, #32]	; (80087d4 <vPortExitCritical+0x4c>)
 80087b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087b4:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <vPortExitCritical+0x4c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <vPortExitCritical+0x3e>
 80087bc:	2300      	movs	r3, #0
 80087be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200000ac 	.word	0x200000ac
	...

080087e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087e0:	f3ef 8009 	mrs	r0, PSP
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <pxCurrentTCBConst>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	f01e 0f10 	tst.w	lr, #16
 80087f0:	bf08      	it	eq
 80087f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	6010      	str	r0, [r2, #0]
 80087fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008804:	f380 8811 	msr	BASEPRI, r0
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f7fe ff8e 	bl	8007730 <vTaskSwitchContext>
 8008814:	f04f 0000 	mov.w	r0, #0
 8008818:	f380 8811 	msr	BASEPRI, r0
 800881c:	bc09      	pop	{r0, r3}
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	6808      	ldr	r0, [r1, #0]
 8008822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008826:	f01e 0f10 	tst.w	lr, #16
 800882a:	bf08      	it	eq
 800882c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008830:	f380 8809 	msr	PSP, r0
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	f3af 8000 	nop.w

08008840 <pxCurrentTCBConst>:
 8008840:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop

08008848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008860:	f7fe feae 	bl	80075c0 <xTaskIncrementTick>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <xPortSysTickHandler+0x3c>)
 800886c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4b5d      	ldr	r3, [pc, #372]	; (8008a08 <vPortSuppressTicksAndSleep+0x180>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d902      	bls.n	80088a0 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800889a:	4b5b      	ldr	r3, [pc, #364]	; (8008a08 <vPortSuppressTicksAndSleep+0x180>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80088a0:	4b5a      	ldr	r3, [pc, #360]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a59      	ldr	r2, [pc, #356]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 80088a6:	f023 0301 	bic.w	r3, r3, #1
 80088aa:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80088ac:	4b58      	ldr	r3, [pc, #352]	; (8008a10 <vPortSuppressTicksAndSleep+0x188>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	4957      	ldr	r1, [pc, #348]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 80088b6:	6809      	ldr	r1, [r1, #0]
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	4413      	add	r3, r2
 80088be:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80088c0:	4b55      	ldr	r3, [pc, #340]	; (8008a18 <vPortSuppressTicksAndSleep+0x190>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d904      	bls.n	80088d4 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80088ca:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <vPortSuppressTicksAndSleep+0x190>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80088d4:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80088d6:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80088da:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80088de:	f7ff f8f5 	bl	8007acc <eTaskConfirmSleepModeStatus>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d110      	bne.n	800890a <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80088e8:	4b49      	ldr	r3, [pc, #292]	; (8008a10 <vPortSuppressTicksAndSleep+0x188>)
 80088ea:	4a4c      	ldr	r2, [pc, #304]	; (8008a1c <vPortSuppressTicksAndSleep+0x194>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80088f0:	4b46      	ldr	r3, [pc, #280]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a45      	ldr	r2, [pc, #276]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80088fc:	4b45      	ldr	r3, [pc, #276]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a46      	ldr	r2, [pc, #280]	; (8008a1c <vPortSuppressTicksAndSleep+0x194>)
 8008902:	3b01      	subs	r3, #1
 8008904:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8008906:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8008908:	e07a      	b.n	8008a00 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800890a:	4a44      	ldr	r2, [pc, #272]	; (8008a1c <vPortSuppressTicksAndSleep+0x194>)
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008910:	4b3f      	ldr	r3, [pc, #252]	; (8008a10 <vPortSuppressTicksAndSleep+0x188>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008916:	4b3d      	ldr	r3, [pc, #244]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a3c      	ldr	r2, [pc, #240]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4618      	mov	r0, r3
 800892c:	f7f8 fb50 	bl	8000fd0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8008936:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800893a:	bf30      	wfi
				__asm volatile( "isb" );
 800893c:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7f8 fb4e 	bl	8000fe4 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8008948:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800894a:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800894e:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8008952:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8008954:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008958:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800895c:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 800895e:	2206      	movs	r2, #6
 8008960:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8008962:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01d      	beq.n	80089aa <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800896e:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <vPortSuppressTicksAndSleep+0x188>)
 8008974:	6819      	ldr	r1, [r3, #0]
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	1acb      	subs	r3, r1, r3
 800897a:	4413      	add	r3, r2
 800897c:	3b01      	subs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <vPortSuppressTicksAndSleep+0x190>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	429a      	cmp	r2, r3
 8008988:	d304      	bcc.n	8008994 <vPortSuppressTicksAndSleep+0x10c>
 800898a:	4b22      	ldr	r3, [pc, #136]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	429a      	cmp	r2, r3
 8008992:	d903      	bls.n	800899c <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008994:	4b1f      	ldr	r3, [pc, #124]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3b01      	subs	r3, #1
 800899a:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800899c:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <vPortSuppressTicksAndSleep+0x194>)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	e018      	b.n	80089dc <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a19      	ldr	r2, [pc, #100]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 80089ae:	6812      	ldr	r2, [r2, #0]
 80089b0:	fb02 f203 	mul.w	r2, r2, r3
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <vPortSuppressTicksAndSleep+0x188>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80089bc:	4b15      	ldr	r3, [pc, #84]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c6:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	3301      	adds	r3, #1
 80089cc:	4a11      	ldr	r2, [pc, #68]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	fb02 f203 	mul.w	r2, r2, r3
 80089d4:	4911      	ldr	r1, [pc, #68]	; (8008a1c <vPortSuppressTicksAndSleep+0x194>)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089dc:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <vPortSuppressTicksAndSleep+0x188>)
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <vPortSuppressTicksAndSleep+0x184>)
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80089ee:	69b8      	ldr	r0, [r7, #24]
 80089f0:	f7fe fdc0 	bl	8007574 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <vPortSuppressTicksAndSleep+0x18c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <vPortSuppressTicksAndSleep+0x194>)
 80089fa:	3b01      	subs	r3, #1
 80089fc:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80089fe:	b662      	cpsie	i
	}
 8008a00:	bf00      	nop
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000e20 	.word	0x20000e20
 8008a0c:	e000e010 	.word	0xe000e010
 8008a10:	e000e018 	.word	0xe000e018
 8008a14:	20000e1c 	.word	0x20000e1c
 8008a18:	20000e24 	.word	0x20000e24
 8008a1c:	e000e014 	.word	0xe000e014

08008a20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8008a24:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <vPortSetupTimerInterrupt+0x58>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <vPortSetupTimerInterrupt+0x5c>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	099b      	lsrs	r3, r3, #6
 8008a30:	4a13      	ldr	r2, [pc, #76]	; (8008a80 <vPortSetupTimerInterrupt+0x60>)
 8008a32:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8008a34:	4b12      	ldr	r3, [pc, #72]	; (8008a80 <vPortSetupTimerInterrupt+0x60>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	4a10      	ldr	r2, [pc, #64]	; (8008a84 <vPortSetupTimerInterrupt+0x64>)
 8008a42:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <vPortSetupTimerInterrupt+0x68>)
 8008a46:	222d      	movs	r2, #45	; 0x2d
 8008a48:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <vPortSetupTimerInterrupt+0x6c>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <vPortSetupTimerInterrupt+0x70>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a56:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <vPortSetupTimerInterrupt+0x58>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a08      	ldr	r2, [pc, #32]	; (8008a7c <vPortSetupTimerInterrupt+0x5c>)
 8008a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a60:	099b      	lsrs	r3, r3, #6
 8008a62:	4a0c      	ldr	r2, [pc, #48]	; (8008a94 <vPortSetupTimerInterrupt+0x74>)
 8008a64:	3b01      	subs	r3, #1
 8008a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a68:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <vPortSetupTimerInterrupt+0x6c>)
 8008a6a:	2207      	movs	r2, #7
 8008a6c:	601a      	str	r2, [r3, #0]
}
 8008a6e:	bf00      	nop
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	200000a0 	.word	0x200000a0
 8008a7c:	10624dd3 	.word	0x10624dd3
 8008a80:	20000e1c 	.word	0x20000e1c
 8008a84:	20000e20 	.word	0x20000e20
 8008a88:	20000e24 	.word	0x20000e24
 8008a8c:	e000e010 	.word	0xe000e010
 8008a90:	e000e018 	.word	0xe000e018
 8008a94:	e000e014 	.word	0xe000e014

08008a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008aa8 <vPortEnableVFP+0x10>
 8008a9c:	6801      	ldr	r1, [r0, #0]
 8008a9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008aa2:	6001      	str	r1, [r0, #0]
 8008aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa6:	bf00      	nop
 8008aa8:	e000ed88 	.word	0xe000ed88

08008aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ab2:	f3ef 8305 	mrs	r3, IPSR
 8008ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d913      	bls.n	8008ae6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <vPortValidateInterruptPriority+0x6c>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ac8:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <vPortValidateInterruptPriority+0x70>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	7afa      	ldrb	r2, [r7, #11]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d209      	bcs.n	8008ae6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	e7fe      	b.n	8008ae4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <vPortValidateInterruptPriority+0x74>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <vPortValidateInterruptPriority+0x78>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d909      	bls.n	8008b0a <vPortValidateInterruptPriority+0x5e>
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	e7fe      	b.n	8008b08 <vPortValidateInterruptPriority+0x5c>
	}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	e000e3f0 	.word	0xe000e3f0
 8008b1c:	20000e28 	.word	0x20000e28
 8008b20:	e000ed0c 	.word	0xe000ed0c
 8008b24:	20000e2c 	.word	0x20000e2c

08008b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	; 0x28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b34:	f7fe fc1a 	bl	800736c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b38:	4b57      	ldr	r3, [pc, #348]	; (8008c98 <pvPortMalloc+0x170>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b40:	f000 f90c 	bl	8008d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b44:	4b55      	ldr	r3, [pc, #340]	; (8008c9c <pvPortMalloc+0x174>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f040 808c 	bne.w	8008c6a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01c      	beq.n	8008b92 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008b58:	2208      	movs	r2, #8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d013      	beq.n	8008b92 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	3308      	adds	r3, #8
 8008b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d009      	beq.n	8008b92 <pvPortMalloc+0x6a>
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e7fe      	b.n	8008b90 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d068      	beq.n	8008c6a <pvPortMalloc+0x142>
 8008b98:	4b41      	ldr	r3, [pc, #260]	; (8008ca0 <pvPortMalloc+0x178>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d863      	bhi.n	8008c6a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ba2:	4b40      	ldr	r3, [pc, #256]	; (8008ca4 <pvPortMalloc+0x17c>)
 8008ba4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ba6:	4b3f      	ldr	r3, [pc, #252]	; (8008ca4 <pvPortMalloc+0x17c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bac:	e004      	b.n	8008bb8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d903      	bls.n	8008bca <pvPortMalloc+0xa2>
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f1      	bne.n	8008bae <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bca:	4b33      	ldr	r3, [pc, #204]	; (8008c98 <pvPortMalloc+0x170>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d04a      	beq.n	8008c6a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	4413      	add	r3, r2
 8008bdc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	1ad2      	subs	r2, r2, r3
 8008bee:	2308      	movs	r3, #8
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d91e      	bls.n	8008c34 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <pvPortMalloc+0xf4>
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	613b      	str	r3, [r7, #16]
 8008c1a:	e7fe      	b.n	8008c1a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	1ad2      	subs	r2, r2, r3
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c2e:	69b8      	ldr	r0, [r7, #24]
 8008c30:	f000 f8f6 	bl	8008e20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c34:	4b1a      	ldr	r3, [pc, #104]	; (8008ca0 <pvPortMalloc+0x178>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	4a18      	ldr	r2, [pc, #96]	; (8008ca0 <pvPortMalloc+0x178>)
 8008c40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c42:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <pvPortMalloc+0x178>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <pvPortMalloc+0x180>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d203      	bcs.n	8008c56 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c4e:	4b14      	ldr	r3, [pc, #80]	; (8008ca0 <pvPortMalloc+0x178>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <pvPortMalloc+0x180>)
 8008c54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <pvPortMalloc+0x174>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c6a:	f7fe fbc5 	bl	80073f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d009      	beq.n	8008c8c <pvPortMalloc+0x164>
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e7fe      	b.n	8008c8a <pvPortMalloc+0x162>
	return pvReturn;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3728      	adds	r7, #40	; 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20004a38 	.word	0x20004a38
 8008c9c:	20004a44 	.word	0x20004a44
 8008ca0:	20004a3c 	.word	0x20004a3c
 8008ca4:	20004a30 	.word	0x20004a30
 8008ca8:	20004a40 	.word	0x20004a40

08008cac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d046      	beq.n	8008d4c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	425b      	negs	r3, r3
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <vPortFree+0xa8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <vPortFree+0x42>
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e7fe      	b.n	8008cec <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <vPortFree+0x5e>
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	60bb      	str	r3, [r7, #8]
 8008d08:	e7fe      	b.n	8008d08 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <vPortFree+0xa8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4013      	ands	r3, r2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d019      	beq.n	8008d4c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d115      	bne.n	8008d4c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <vPortFree+0xa8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	401a      	ands	r2, r3
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d30:	f7fe fb1c 	bl	800736c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <vPortFree+0xac>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	4a06      	ldr	r2, [pc, #24]	; (8008d58 <vPortFree+0xac>)
 8008d40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f000 f86c 	bl	8008e20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d48:	f7fe fb56 	bl	80073f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d4c:	bf00      	nop
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20004a44 	.word	0x20004a44
 8008d58:	20004a3c 	.word	0x20004a3c

08008d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d68:	4b27      	ldr	r3, [pc, #156]	; (8008e08 <prvHeapInit+0xac>)
 8008d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00c      	beq.n	8008d90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3307      	adds	r3, #7
 8008d7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0307 	bic.w	r3, r3, #7
 8008d82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <prvHeapInit+0xac>)
 8008d8c:	4413      	add	r3, r2
 8008d8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d94:	4a1d      	ldr	r2, [pc, #116]	; (8008e0c <prvHeapInit+0xb0>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d9a:	4b1c      	ldr	r3, [pc, #112]	; (8008e0c <prvHeapInit+0xb0>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	4413      	add	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008da8:	2208      	movs	r2, #8
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <prvHeapInit+0xb4>)
 8008dbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <prvHeapInit+0xb4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dc6:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <prvHeapInit+0xb4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <prvHeapInit+0xb4>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <prvHeapInit+0xb8>)
 8008dea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <prvHeapInit+0xbc>)
 8008df2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008df4:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <prvHeapInit+0xc0>)
 8008df6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dfa:	601a      	str	r2, [r3, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	20000e30 	.word	0x20000e30
 8008e0c:	20004a30 	.word	0x20004a30
 8008e10:	20004a38 	.word	0x20004a38
 8008e14:	20004a40 	.word	0x20004a40
 8008e18:	20004a3c 	.word	0x20004a3c
 8008e1c:	20004a44 	.word	0x20004a44

08008e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e28:	4b28      	ldr	r3, [pc, #160]	; (8008ecc <prvInsertBlockIntoFreeList+0xac>)
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e002      	b.n	8008e34 <prvInsertBlockIntoFreeList+0x14>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d8f7      	bhi.n	8008e2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	4413      	add	r3, r2
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d108      	bne.n	8008e62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	441a      	add	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d118      	bne.n	8008ea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d00d      	beq.n	8008e9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	441a      	add	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	e008      	b.n	8008eb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e9e:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e003      	b.n	8008eb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d002      	beq.n	8008ebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20004a30 	.word	0x20004a30
 8008ed0:	20004a38 	.word	0x20004a38

08008ed4 <__errno>:
 8008ed4:	4b01      	ldr	r3, [pc, #4]	; (8008edc <__errno+0x8>)
 8008ed6:	6818      	ldr	r0, [r3, #0]
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	200000b0 	.word	0x200000b0

08008ee0 <__libc_init_array>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	4e0d      	ldr	r6, [pc, #52]	; (8008f18 <__libc_init_array+0x38>)
 8008ee4:	4c0d      	ldr	r4, [pc, #52]	; (8008f1c <__libc_init_array+0x3c>)
 8008ee6:	1ba4      	subs	r4, r4, r6
 8008ee8:	10a4      	asrs	r4, r4, #2
 8008eea:	2500      	movs	r5, #0
 8008eec:	42a5      	cmp	r5, r4
 8008eee:	d109      	bne.n	8008f04 <__libc_init_array+0x24>
 8008ef0:	4e0b      	ldr	r6, [pc, #44]	; (8008f20 <__libc_init_array+0x40>)
 8008ef2:	4c0c      	ldr	r4, [pc, #48]	; (8008f24 <__libc_init_array+0x44>)
 8008ef4:	f001 f92e 	bl	800a154 <_init>
 8008ef8:	1ba4      	subs	r4, r4, r6
 8008efa:	10a4      	asrs	r4, r4, #2
 8008efc:	2500      	movs	r5, #0
 8008efe:	42a5      	cmp	r5, r4
 8008f00:	d105      	bne.n	8008f0e <__libc_init_array+0x2e>
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f08:	4798      	blx	r3
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	e7ee      	b.n	8008eec <__libc_init_array+0xc>
 8008f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f12:	4798      	blx	r3
 8008f14:	3501      	adds	r5, #1
 8008f16:	e7f2      	b.n	8008efe <__libc_init_array+0x1e>
 8008f18:	0800a450 	.word	0x0800a450
 8008f1c:	0800a450 	.word	0x0800a450
 8008f20:	0800a450 	.word	0x0800a450
 8008f24:	0800a454 	.word	0x0800a454

08008f28 <memcpy>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	1e43      	subs	r3, r0, #1
 8008f2c:	440a      	add	r2, r1
 8008f2e:	4291      	cmp	r1, r2
 8008f30:	d100      	bne.n	8008f34 <memcpy+0xc>
 8008f32:	bd10      	pop	{r4, pc}
 8008f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3c:	e7f7      	b.n	8008f2e <memcpy+0x6>

08008f3e <memset>:
 8008f3e:	4402      	add	r2, r0
 8008f40:	4603      	mov	r3, r0
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d100      	bne.n	8008f48 <memset+0xa>
 8008f46:	4770      	bx	lr
 8008f48:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4c:	e7f9      	b.n	8008f42 <memset+0x4>
	...

08008f50 <_free_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4605      	mov	r5, r0
 8008f54:	2900      	cmp	r1, #0
 8008f56:	d045      	beq.n	8008fe4 <_free_r+0x94>
 8008f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5c:	1f0c      	subs	r4, r1, #4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bfb8      	it	lt
 8008f62:	18e4      	addlt	r4, r4, r3
 8008f64:	f000 fbe6 	bl	8009734 <__malloc_lock>
 8008f68:	4a1f      	ldr	r2, [pc, #124]	; (8008fe8 <_free_r+0x98>)
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	b933      	cbnz	r3, 8008f7e <_free_r+0x2e>
 8008f70:	6063      	str	r3, [r4, #4]
 8008f72:	6014      	str	r4, [r2, #0]
 8008f74:	4628      	mov	r0, r5
 8008f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f7a:	f000 bbdc 	b.w	8009736 <__malloc_unlock>
 8008f7e:	42a3      	cmp	r3, r4
 8008f80:	d90c      	bls.n	8008f9c <_free_r+0x4c>
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	1862      	adds	r2, r4, r1
 8008f86:	4293      	cmp	r3, r2
 8008f88:	bf04      	itt	eq
 8008f8a:	681a      	ldreq	r2, [r3, #0]
 8008f8c:	685b      	ldreq	r3, [r3, #4]
 8008f8e:	6063      	str	r3, [r4, #4]
 8008f90:	bf04      	itt	eq
 8008f92:	1852      	addeq	r2, r2, r1
 8008f94:	6022      	streq	r2, [r4, #0]
 8008f96:	6004      	str	r4, [r0, #0]
 8008f98:	e7ec      	b.n	8008f74 <_free_r+0x24>
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	b10a      	cbz	r2, 8008fa4 <_free_r+0x54>
 8008fa0:	42a2      	cmp	r2, r4
 8008fa2:	d9fa      	bls.n	8008f9a <_free_r+0x4a>
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	1858      	adds	r0, r3, r1
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d10b      	bne.n	8008fc4 <_free_r+0x74>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	4401      	add	r1, r0
 8008fb0:	1858      	adds	r0, r3, r1
 8008fb2:	4282      	cmp	r2, r0
 8008fb4:	6019      	str	r1, [r3, #0]
 8008fb6:	d1dd      	bne.n	8008f74 <_free_r+0x24>
 8008fb8:	6810      	ldr	r0, [r2, #0]
 8008fba:	6852      	ldr	r2, [r2, #4]
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	4401      	add	r1, r0
 8008fc0:	6019      	str	r1, [r3, #0]
 8008fc2:	e7d7      	b.n	8008f74 <_free_r+0x24>
 8008fc4:	d902      	bls.n	8008fcc <_free_r+0x7c>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	e7d3      	b.n	8008f74 <_free_r+0x24>
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	1821      	adds	r1, r4, r0
 8008fd0:	428a      	cmp	r2, r1
 8008fd2:	bf04      	itt	eq
 8008fd4:	6811      	ldreq	r1, [r2, #0]
 8008fd6:	6852      	ldreq	r2, [r2, #4]
 8008fd8:	6062      	str	r2, [r4, #4]
 8008fda:	bf04      	itt	eq
 8008fdc:	1809      	addeq	r1, r1, r0
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	605c      	str	r4, [r3, #4]
 8008fe2:	e7c7      	b.n	8008f74 <_free_r+0x24>
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20004a48 	.word	0x20004a48

08008fec <_malloc_r>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	1ccd      	adds	r5, r1, #3
 8008ff0:	f025 0503 	bic.w	r5, r5, #3
 8008ff4:	3508      	adds	r5, #8
 8008ff6:	2d0c      	cmp	r5, #12
 8008ff8:	bf38      	it	cc
 8008ffa:	250c      	movcc	r5, #12
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	4606      	mov	r6, r0
 8009000:	db01      	blt.n	8009006 <_malloc_r+0x1a>
 8009002:	42a9      	cmp	r1, r5
 8009004:	d903      	bls.n	800900e <_malloc_r+0x22>
 8009006:	230c      	movs	r3, #12
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	2000      	movs	r0, #0
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	f000 fb91 	bl	8009734 <__malloc_lock>
 8009012:	4a21      	ldr	r2, [pc, #132]	; (8009098 <_malloc_r+0xac>)
 8009014:	6814      	ldr	r4, [r2, #0]
 8009016:	4621      	mov	r1, r4
 8009018:	b991      	cbnz	r1, 8009040 <_malloc_r+0x54>
 800901a:	4c20      	ldr	r4, [pc, #128]	; (800909c <_malloc_r+0xb0>)
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	b91b      	cbnz	r3, 8009028 <_malloc_r+0x3c>
 8009020:	4630      	mov	r0, r6
 8009022:	f000 f8b9 	bl	8009198 <_sbrk_r>
 8009026:	6020      	str	r0, [r4, #0]
 8009028:	4629      	mov	r1, r5
 800902a:	4630      	mov	r0, r6
 800902c:	f000 f8b4 	bl	8009198 <_sbrk_r>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d124      	bne.n	800907e <_malloc_r+0x92>
 8009034:	230c      	movs	r3, #12
 8009036:	6033      	str	r3, [r6, #0]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 fb7c 	bl	8009736 <__malloc_unlock>
 800903e:	e7e4      	b.n	800900a <_malloc_r+0x1e>
 8009040:	680b      	ldr	r3, [r1, #0]
 8009042:	1b5b      	subs	r3, r3, r5
 8009044:	d418      	bmi.n	8009078 <_malloc_r+0x8c>
 8009046:	2b0b      	cmp	r3, #11
 8009048:	d90f      	bls.n	800906a <_malloc_r+0x7e>
 800904a:	600b      	str	r3, [r1, #0]
 800904c:	50cd      	str	r5, [r1, r3]
 800904e:	18cc      	adds	r4, r1, r3
 8009050:	4630      	mov	r0, r6
 8009052:	f000 fb70 	bl	8009736 <__malloc_unlock>
 8009056:	f104 000b 	add.w	r0, r4, #11
 800905a:	1d23      	adds	r3, r4, #4
 800905c:	f020 0007 	bic.w	r0, r0, #7
 8009060:	1ac3      	subs	r3, r0, r3
 8009062:	d0d3      	beq.n	800900c <_malloc_r+0x20>
 8009064:	425a      	negs	r2, r3
 8009066:	50e2      	str	r2, [r4, r3]
 8009068:	e7d0      	b.n	800900c <_malloc_r+0x20>
 800906a:	428c      	cmp	r4, r1
 800906c:	684b      	ldr	r3, [r1, #4]
 800906e:	bf16      	itet	ne
 8009070:	6063      	strne	r3, [r4, #4]
 8009072:	6013      	streq	r3, [r2, #0]
 8009074:	460c      	movne	r4, r1
 8009076:	e7eb      	b.n	8009050 <_malloc_r+0x64>
 8009078:	460c      	mov	r4, r1
 800907a:	6849      	ldr	r1, [r1, #4]
 800907c:	e7cc      	b.n	8009018 <_malloc_r+0x2c>
 800907e:	1cc4      	adds	r4, r0, #3
 8009080:	f024 0403 	bic.w	r4, r4, #3
 8009084:	42a0      	cmp	r0, r4
 8009086:	d005      	beq.n	8009094 <_malloc_r+0xa8>
 8009088:	1a21      	subs	r1, r4, r0
 800908a:	4630      	mov	r0, r6
 800908c:	f000 f884 	bl	8009198 <_sbrk_r>
 8009090:	3001      	adds	r0, #1
 8009092:	d0cf      	beq.n	8009034 <_malloc_r+0x48>
 8009094:	6025      	str	r5, [r4, #0]
 8009096:	e7db      	b.n	8009050 <_malloc_r+0x64>
 8009098:	20004a48 	.word	0x20004a48
 800909c:	20004a4c 	.word	0x20004a4c

080090a0 <iprintf>:
 80090a0:	b40f      	push	{r0, r1, r2, r3}
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <iprintf+0x2c>)
 80090a4:	b513      	push	{r0, r1, r4, lr}
 80090a6:	681c      	ldr	r4, [r3, #0]
 80090a8:	b124      	cbz	r4, 80090b4 <iprintf+0x14>
 80090aa:	69a3      	ldr	r3, [r4, #24]
 80090ac:	b913      	cbnz	r3, 80090b4 <iprintf+0x14>
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fa52 	bl	8009558 <__sinit>
 80090b4:	ab05      	add	r3, sp, #20
 80090b6:	9a04      	ldr	r2, [sp, #16]
 80090b8:	68a1      	ldr	r1, [r4, #8]
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fcb7 	bl	8009a30 <_vfiprintf_r>
 80090c2:	b002      	add	sp, #8
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	b004      	add	sp, #16
 80090ca:	4770      	bx	lr
 80090cc:	200000b0 	.word	0x200000b0

080090d0 <_puts_r>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4605      	mov	r5, r0
 80090d6:	b118      	cbz	r0, 80090e0 <_puts_r+0x10>
 80090d8:	6983      	ldr	r3, [r0, #24]
 80090da:	b90b      	cbnz	r3, 80090e0 <_puts_r+0x10>
 80090dc:	f000 fa3c 	bl	8009558 <__sinit>
 80090e0:	69ab      	ldr	r3, [r5, #24]
 80090e2:	68ac      	ldr	r4, [r5, #8]
 80090e4:	b913      	cbnz	r3, 80090ec <_puts_r+0x1c>
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 fa36 	bl	8009558 <__sinit>
 80090ec:	4b23      	ldr	r3, [pc, #140]	; (800917c <_puts_r+0xac>)
 80090ee:	429c      	cmp	r4, r3
 80090f0:	d117      	bne.n	8009122 <_puts_r+0x52>
 80090f2:	686c      	ldr	r4, [r5, #4]
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	071b      	lsls	r3, r3, #28
 80090f8:	d51d      	bpl.n	8009136 <_puts_r+0x66>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	b1db      	cbz	r3, 8009136 <_puts_r+0x66>
 80090fe:	3e01      	subs	r6, #1
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009106:	3b01      	subs	r3, #1
 8009108:	60a3      	str	r3, [r4, #8]
 800910a:	b9e9      	cbnz	r1, 8009148 <_puts_r+0x78>
 800910c:	2b00      	cmp	r3, #0
 800910e:	da2e      	bge.n	800916e <_puts_r+0x9e>
 8009110:	4622      	mov	r2, r4
 8009112:	210a      	movs	r1, #10
 8009114:	4628      	mov	r0, r5
 8009116:	f000 f86f 	bl	80091f8 <__swbuf_r>
 800911a:	3001      	adds	r0, #1
 800911c:	d011      	beq.n	8009142 <_puts_r+0x72>
 800911e:	200a      	movs	r0, #10
 8009120:	e011      	b.n	8009146 <_puts_r+0x76>
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <_puts_r+0xb0>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d101      	bne.n	800912c <_puts_r+0x5c>
 8009128:	68ac      	ldr	r4, [r5, #8]
 800912a:	e7e3      	b.n	80090f4 <_puts_r+0x24>
 800912c:	4b15      	ldr	r3, [pc, #84]	; (8009184 <_puts_r+0xb4>)
 800912e:	429c      	cmp	r4, r3
 8009130:	bf08      	it	eq
 8009132:	68ec      	ldreq	r4, [r5, #12]
 8009134:	e7de      	b.n	80090f4 <_puts_r+0x24>
 8009136:	4621      	mov	r1, r4
 8009138:	4628      	mov	r0, r5
 800913a:	f000 f8af 	bl	800929c <__swsetup_r>
 800913e:	2800      	cmp	r0, #0
 8009140:	d0dd      	beq.n	80090fe <_puts_r+0x2e>
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	2b00      	cmp	r3, #0
 800914a:	da04      	bge.n	8009156 <_puts_r+0x86>
 800914c:	69a2      	ldr	r2, [r4, #24]
 800914e:	429a      	cmp	r2, r3
 8009150:	dc06      	bgt.n	8009160 <_puts_r+0x90>
 8009152:	290a      	cmp	r1, #10
 8009154:	d004      	beq.n	8009160 <_puts_r+0x90>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	6022      	str	r2, [r4, #0]
 800915c:	7019      	strb	r1, [r3, #0]
 800915e:	e7cf      	b.n	8009100 <_puts_r+0x30>
 8009160:	4622      	mov	r2, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f000 f848 	bl	80091f8 <__swbuf_r>
 8009168:	3001      	adds	r0, #1
 800916a:	d1c9      	bne.n	8009100 <_puts_r+0x30>
 800916c:	e7e9      	b.n	8009142 <_puts_r+0x72>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	200a      	movs	r0, #10
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	6022      	str	r2, [r4, #0]
 8009176:	7018      	strb	r0, [r3, #0]
 8009178:	e7e5      	b.n	8009146 <_puts_r+0x76>
 800917a:	bf00      	nop
 800917c:	0800a3d4 	.word	0x0800a3d4
 8009180:	0800a3f4 	.word	0x0800a3f4
 8009184:	0800a3b4 	.word	0x0800a3b4

08009188 <puts>:
 8009188:	4b02      	ldr	r3, [pc, #8]	; (8009194 <puts+0xc>)
 800918a:	4601      	mov	r1, r0
 800918c:	6818      	ldr	r0, [r3, #0]
 800918e:	f7ff bf9f 	b.w	80090d0 <_puts_r>
 8009192:	bf00      	nop
 8009194:	200000b0 	.word	0x200000b0

08009198 <_sbrk_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4c06      	ldr	r4, [pc, #24]	; (80091b4 <_sbrk_r+0x1c>)
 800919c:	2300      	movs	r3, #0
 800919e:	4605      	mov	r5, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	f7f9 f904 	bl	80023b0 <_sbrk>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_sbrk_r+0x1a>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_sbrk_r+0x1a>
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	200050c0 	.word	0x200050c0

080091b8 <siprintf>:
 80091b8:	b40e      	push	{r1, r2, r3}
 80091ba:	b500      	push	{lr}
 80091bc:	b09c      	sub	sp, #112	; 0x70
 80091be:	ab1d      	add	r3, sp, #116	; 0x74
 80091c0:	9002      	str	r0, [sp, #8]
 80091c2:	9006      	str	r0, [sp, #24]
 80091c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091c8:	4809      	ldr	r0, [pc, #36]	; (80091f0 <siprintf+0x38>)
 80091ca:	9107      	str	r1, [sp, #28]
 80091cc:	9104      	str	r1, [sp, #16]
 80091ce:	4909      	ldr	r1, [pc, #36]	; (80091f4 <siprintf+0x3c>)
 80091d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d4:	9105      	str	r1, [sp, #20]
 80091d6:	6800      	ldr	r0, [r0, #0]
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	a902      	add	r1, sp, #8
 80091dc:	f000 fb06 	bl	80097ec <_svfiprintf_r>
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	b01c      	add	sp, #112	; 0x70
 80091e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ec:	b003      	add	sp, #12
 80091ee:	4770      	bx	lr
 80091f0:	200000b0 	.word	0x200000b0
 80091f4:	ffff0208 	.word	0xffff0208

080091f8 <__swbuf_r>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	460e      	mov	r6, r1
 80091fc:	4614      	mov	r4, r2
 80091fe:	4605      	mov	r5, r0
 8009200:	b118      	cbz	r0, 800920a <__swbuf_r+0x12>
 8009202:	6983      	ldr	r3, [r0, #24]
 8009204:	b90b      	cbnz	r3, 800920a <__swbuf_r+0x12>
 8009206:	f000 f9a7 	bl	8009558 <__sinit>
 800920a:	4b21      	ldr	r3, [pc, #132]	; (8009290 <__swbuf_r+0x98>)
 800920c:	429c      	cmp	r4, r3
 800920e:	d12a      	bne.n	8009266 <__swbuf_r+0x6e>
 8009210:	686c      	ldr	r4, [r5, #4]
 8009212:	69a3      	ldr	r3, [r4, #24]
 8009214:	60a3      	str	r3, [r4, #8]
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	071a      	lsls	r2, r3, #28
 800921a:	d52e      	bpl.n	800927a <__swbuf_r+0x82>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	b363      	cbz	r3, 800927a <__swbuf_r+0x82>
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	6820      	ldr	r0, [r4, #0]
 8009224:	1ac0      	subs	r0, r0, r3
 8009226:	6963      	ldr	r3, [r4, #20]
 8009228:	b2f6      	uxtb	r6, r6
 800922a:	4283      	cmp	r3, r0
 800922c:	4637      	mov	r7, r6
 800922e:	dc04      	bgt.n	800923a <__swbuf_r+0x42>
 8009230:	4621      	mov	r1, r4
 8009232:	4628      	mov	r0, r5
 8009234:	f000 f926 	bl	8009484 <_fflush_r>
 8009238:	bb28      	cbnz	r0, 8009286 <__swbuf_r+0x8e>
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	3b01      	subs	r3, #1
 800923e:	60a3      	str	r3, [r4, #8]
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	6022      	str	r2, [r4, #0]
 8009246:	701e      	strb	r6, [r3, #0]
 8009248:	6963      	ldr	r3, [r4, #20]
 800924a:	3001      	adds	r0, #1
 800924c:	4283      	cmp	r3, r0
 800924e:	d004      	beq.n	800925a <__swbuf_r+0x62>
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	07db      	lsls	r3, r3, #31
 8009254:	d519      	bpl.n	800928a <__swbuf_r+0x92>
 8009256:	2e0a      	cmp	r6, #10
 8009258:	d117      	bne.n	800928a <__swbuf_r+0x92>
 800925a:	4621      	mov	r1, r4
 800925c:	4628      	mov	r0, r5
 800925e:	f000 f911 	bl	8009484 <_fflush_r>
 8009262:	b190      	cbz	r0, 800928a <__swbuf_r+0x92>
 8009264:	e00f      	b.n	8009286 <__swbuf_r+0x8e>
 8009266:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <__swbuf_r+0x9c>)
 8009268:	429c      	cmp	r4, r3
 800926a:	d101      	bne.n	8009270 <__swbuf_r+0x78>
 800926c:	68ac      	ldr	r4, [r5, #8]
 800926e:	e7d0      	b.n	8009212 <__swbuf_r+0x1a>
 8009270:	4b09      	ldr	r3, [pc, #36]	; (8009298 <__swbuf_r+0xa0>)
 8009272:	429c      	cmp	r4, r3
 8009274:	bf08      	it	eq
 8009276:	68ec      	ldreq	r4, [r5, #12]
 8009278:	e7cb      	b.n	8009212 <__swbuf_r+0x1a>
 800927a:	4621      	mov	r1, r4
 800927c:	4628      	mov	r0, r5
 800927e:	f000 f80d 	bl	800929c <__swsetup_r>
 8009282:	2800      	cmp	r0, #0
 8009284:	d0cc      	beq.n	8009220 <__swbuf_r+0x28>
 8009286:	f04f 37ff 	mov.w	r7, #4294967295
 800928a:	4638      	mov	r0, r7
 800928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928e:	bf00      	nop
 8009290:	0800a3d4 	.word	0x0800a3d4
 8009294:	0800a3f4 	.word	0x0800a3f4
 8009298:	0800a3b4 	.word	0x0800a3b4

0800929c <__swsetup_r>:
 800929c:	4b32      	ldr	r3, [pc, #200]	; (8009368 <__swsetup_r+0xcc>)
 800929e:	b570      	push	{r4, r5, r6, lr}
 80092a0:	681d      	ldr	r5, [r3, #0]
 80092a2:	4606      	mov	r6, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	b125      	cbz	r5, 80092b2 <__swsetup_r+0x16>
 80092a8:	69ab      	ldr	r3, [r5, #24]
 80092aa:	b913      	cbnz	r3, 80092b2 <__swsetup_r+0x16>
 80092ac:	4628      	mov	r0, r5
 80092ae:	f000 f953 	bl	8009558 <__sinit>
 80092b2:	4b2e      	ldr	r3, [pc, #184]	; (800936c <__swsetup_r+0xd0>)
 80092b4:	429c      	cmp	r4, r3
 80092b6:	d10f      	bne.n	80092d8 <__swsetup_r+0x3c>
 80092b8:	686c      	ldr	r4, [r5, #4]
 80092ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092be:	b29a      	uxth	r2, r3
 80092c0:	0715      	lsls	r5, r2, #28
 80092c2:	d42c      	bmi.n	800931e <__swsetup_r+0x82>
 80092c4:	06d0      	lsls	r0, r2, #27
 80092c6:	d411      	bmi.n	80092ec <__swsetup_r+0x50>
 80092c8:	2209      	movs	r2, #9
 80092ca:	6032      	str	r2, [r6, #0]
 80092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	e03e      	b.n	8009356 <__swsetup_r+0xba>
 80092d8:	4b25      	ldr	r3, [pc, #148]	; (8009370 <__swsetup_r+0xd4>)
 80092da:	429c      	cmp	r4, r3
 80092dc:	d101      	bne.n	80092e2 <__swsetup_r+0x46>
 80092de:	68ac      	ldr	r4, [r5, #8]
 80092e0:	e7eb      	b.n	80092ba <__swsetup_r+0x1e>
 80092e2:	4b24      	ldr	r3, [pc, #144]	; (8009374 <__swsetup_r+0xd8>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	bf08      	it	eq
 80092e8:	68ec      	ldreq	r4, [r5, #12]
 80092ea:	e7e6      	b.n	80092ba <__swsetup_r+0x1e>
 80092ec:	0751      	lsls	r1, r2, #29
 80092ee:	d512      	bpl.n	8009316 <__swsetup_r+0x7a>
 80092f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092f2:	b141      	cbz	r1, 8009306 <__swsetup_r+0x6a>
 80092f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f8:	4299      	cmp	r1, r3
 80092fa:	d002      	beq.n	8009302 <__swsetup_r+0x66>
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff fe27 	bl	8008f50 <_free_r>
 8009302:	2300      	movs	r3, #0
 8009304:	6363      	str	r3, [r4, #52]	; 0x34
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	2300      	movs	r3, #0
 8009310:	6063      	str	r3, [r4, #4]
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f043 0308 	orr.w	r3, r3, #8
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	b94b      	cbnz	r3, 8009336 <__swsetup_r+0x9a>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800932c:	d003      	beq.n	8009336 <__swsetup_r+0x9a>
 800932e:	4621      	mov	r1, r4
 8009330:	4630      	mov	r0, r6
 8009332:	f000 f9bf 	bl	80096b4 <__smakebuf_r>
 8009336:	89a2      	ldrh	r2, [r4, #12]
 8009338:	f012 0301 	ands.w	r3, r2, #1
 800933c:	d00c      	beq.n	8009358 <__swsetup_r+0xbc>
 800933e:	2300      	movs	r3, #0
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6963      	ldr	r3, [r4, #20]
 8009344:	425b      	negs	r3, r3
 8009346:	61a3      	str	r3, [r4, #24]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	b953      	cbnz	r3, 8009362 <__swsetup_r+0xc6>
 800934c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009350:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009354:	d1ba      	bne.n	80092cc <__swsetup_r+0x30>
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	0792      	lsls	r2, r2, #30
 800935a:	bf58      	it	pl
 800935c:	6963      	ldrpl	r3, [r4, #20]
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	e7f2      	b.n	8009348 <__swsetup_r+0xac>
 8009362:	2000      	movs	r0, #0
 8009364:	e7f7      	b.n	8009356 <__swsetup_r+0xba>
 8009366:	bf00      	nop
 8009368:	200000b0 	.word	0x200000b0
 800936c:	0800a3d4 	.word	0x0800a3d4
 8009370:	0800a3f4 	.word	0x0800a3f4
 8009374:	0800a3b4 	.word	0x0800a3b4

08009378 <__sflush_r>:
 8009378:	898a      	ldrh	r2, [r1, #12]
 800937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	4605      	mov	r5, r0
 8009380:	0710      	lsls	r0, r2, #28
 8009382:	460c      	mov	r4, r1
 8009384:	d458      	bmi.n	8009438 <__sflush_r+0xc0>
 8009386:	684b      	ldr	r3, [r1, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	dc05      	bgt.n	8009398 <__sflush_r+0x20>
 800938c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	dc02      	bgt.n	8009398 <__sflush_r+0x20>
 8009392:	2000      	movs	r0, #0
 8009394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800939a:	2e00      	cmp	r6, #0
 800939c:	d0f9      	beq.n	8009392 <__sflush_r+0x1a>
 800939e:	2300      	movs	r3, #0
 80093a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093a4:	682f      	ldr	r7, [r5, #0]
 80093a6:	6a21      	ldr	r1, [r4, #32]
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	d032      	beq.n	8009412 <__sflush_r+0x9a>
 80093ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	075a      	lsls	r2, r3, #29
 80093b2:	d505      	bpl.n	80093c0 <__sflush_r+0x48>
 80093b4:	6863      	ldr	r3, [r4, #4]
 80093b6:	1ac0      	subs	r0, r0, r3
 80093b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093ba:	b10b      	cbz	r3, 80093c0 <__sflush_r+0x48>
 80093bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093be:	1ac0      	subs	r0, r0, r3
 80093c0:	2300      	movs	r3, #0
 80093c2:	4602      	mov	r2, r0
 80093c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093c6:	6a21      	ldr	r1, [r4, #32]
 80093c8:	4628      	mov	r0, r5
 80093ca:	47b0      	blx	r6
 80093cc:	1c43      	adds	r3, r0, #1
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	d106      	bne.n	80093e0 <__sflush_r+0x68>
 80093d2:	6829      	ldr	r1, [r5, #0]
 80093d4:	291d      	cmp	r1, #29
 80093d6:	d848      	bhi.n	800946a <__sflush_r+0xf2>
 80093d8:	4a29      	ldr	r2, [pc, #164]	; (8009480 <__sflush_r+0x108>)
 80093da:	40ca      	lsrs	r2, r1
 80093dc:	07d6      	lsls	r6, r2, #31
 80093de:	d544      	bpl.n	800946a <__sflush_r+0xf2>
 80093e0:	2200      	movs	r2, #0
 80093e2:	6062      	str	r2, [r4, #4]
 80093e4:	04d9      	lsls	r1, r3, #19
 80093e6:	6922      	ldr	r2, [r4, #16]
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	d504      	bpl.n	80093f6 <__sflush_r+0x7e>
 80093ec:	1c42      	adds	r2, r0, #1
 80093ee:	d101      	bne.n	80093f4 <__sflush_r+0x7c>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b903      	cbnz	r3, 80093f6 <__sflush_r+0x7e>
 80093f4:	6560      	str	r0, [r4, #84]	; 0x54
 80093f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093f8:	602f      	str	r7, [r5, #0]
 80093fa:	2900      	cmp	r1, #0
 80093fc:	d0c9      	beq.n	8009392 <__sflush_r+0x1a>
 80093fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009402:	4299      	cmp	r1, r3
 8009404:	d002      	beq.n	800940c <__sflush_r+0x94>
 8009406:	4628      	mov	r0, r5
 8009408:	f7ff fda2 	bl	8008f50 <_free_r>
 800940c:	2000      	movs	r0, #0
 800940e:	6360      	str	r0, [r4, #52]	; 0x34
 8009410:	e7c0      	b.n	8009394 <__sflush_r+0x1c>
 8009412:	2301      	movs	r3, #1
 8009414:	4628      	mov	r0, r5
 8009416:	47b0      	blx	r6
 8009418:	1c41      	adds	r1, r0, #1
 800941a:	d1c8      	bne.n	80093ae <__sflush_r+0x36>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0c5      	beq.n	80093ae <__sflush_r+0x36>
 8009422:	2b1d      	cmp	r3, #29
 8009424:	d001      	beq.n	800942a <__sflush_r+0xb2>
 8009426:	2b16      	cmp	r3, #22
 8009428:	d101      	bne.n	800942e <__sflush_r+0xb6>
 800942a:	602f      	str	r7, [r5, #0]
 800942c:	e7b1      	b.n	8009392 <__sflush_r+0x1a>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	e7ad      	b.n	8009394 <__sflush_r+0x1c>
 8009438:	690f      	ldr	r7, [r1, #16]
 800943a:	2f00      	cmp	r7, #0
 800943c:	d0a9      	beq.n	8009392 <__sflush_r+0x1a>
 800943e:	0793      	lsls	r3, r2, #30
 8009440:	680e      	ldr	r6, [r1, #0]
 8009442:	bf08      	it	eq
 8009444:	694b      	ldreq	r3, [r1, #20]
 8009446:	600f      	str	r7, [r1, #0]
 8009448:	bf18      	it	ne
 800944a:	2300      	movne	r3, #0
 800944c:	eba6 0807 	sub.w	r8, r6, r7
 8009450:	608b      	str	r3, [r1, #8]
 8009452:	f1b8 0f00 	cmp.w	r8, #0
 8009456:	dd9c      	ble.n	8009392 <__sflush_r+0x1a>
 8009458:	4643      	mov	r3, r8
 800945a:	463a      	mov	r2, r7
 800945c:	6a21      	ldr	r1, [r4, #32]
 800945e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009460:	4628      	mov	r0, r5
 8009462:	47b0      	blx	r6
 8009464:	2800      	cmp	r0, #0
 8009466:	dc06      	bgt.n	8009476 <__sflush_r+0xfe>
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	f04f 30ff 	mov.w	r0, #4294967295
 8009474:	e78e      	b.n	8009394 <__sflush_r+0x1c>
 8009476:	4407      	add	r7, r0
 8009478:	eba8 0800 	sub.w	r8, r8, r0
 800947c:	e7e9      	b.n	8009452 <__sflush_r+0xda>
 800947e:	bf00      	nop
 8009480:	20400001 	.word	0x20400001

08009484 <_fflush_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	690b      	ldr	r3, [r1, #16]
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b1db      	cbz	r3, 80094c6 <_fflush_r+0x42>
 800948e:	b118      	cbz	r0, 8009498 <_fflush_r+0x14>
 8009490:	6983      	ldr	r3, [r0, #24]
 8009492:	b90b      	cbnz	r3, 8009498 <_fflush_r+0x14>
 8009494:	f000 f860 	bl	8009558 <__sinit>
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <_fflush_r+0x48>)
 800949a:	429c      	cmp	r4, r3
 800949c:	d109      	bne.n	80094b2 <_fflush_r+0x2e>
 800949e:	686c      	ldr	r4, [r5, #4]
 80094a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a4:	b17b      	cbz	r3, 80094c6 <_fflush_r+0x42>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ae:	f7ff bf63 	b.w	8009378 <__sflush_r>
 80094b2:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <_fflush_r+0x4c>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	d101      	bne.n	80094bc <_fflush_r+0x38>
 80094b8:	68ac      	ldr	r4, [r5, #8]
 80094ba:	e7f1      	b.n	80094a0 <_fflush_r+0x1c>
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <_fflush_r+0x50>)
 80094be:	429c      	cmp	r4, r3
 80094c0:	bf08      	it	eq
 80094c2:	68ec      	ldreq	r4, [r5, #12]
 80094c4:	e7ec      	b.n	80094a0 <_fflush_r+0x1c>
 80094c6:	2000      	movs	r0, #0
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	0800a3d4 	.word	0x0800a3d4
 80094d0:	0800a3f4 	.word	0x0800a3f4
 80094d4:	0800a3b4 	.word	0x0800a3b4

080094d8 <std>:
 80094d8:	2300      	movs	r3, #0
 80094da:	b510      	push	{r4, lr}
 80094dc:	4604      	mov	r4, r0
 80094de:	e9c0 3300 	strd	r3, r3, [r0]
 80094e2:	6083      	str	r3, [r0, #8]
 80094e4:	8181      	strh	r1, [r0, #12]
 80094e6:	6643      	str	r3, [r0, #100]	; 0x64
 80094e8:	81c2      	strh	r2, [r0, #14]
 80094ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ee:	6183      	str	r3, [r0, #24]
 80094f0:	4619      	mov	r1, r3
 80094f2:	2208      	movs	r2, #8
 80094f4:	305c      	adds	r0, #92	; 0x5c
 80094f6:	f7ff fd22 	bl	8008f3e <memset>
 80094fa:	4b05      	ldr	r3, [pc, #20]	; (8009510 <std+0x38>)
 80094fc:	6263      	str	r3, [r4, #36]	; 0x24
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <std+0x3c>)
 8009500:	62a3      	str	r3, [r4, #40]	; 0x28
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <std+0x40>)
 8009504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <std+0x44>)
 8009508:	6224      	str	r4, [r4, #32]
 800950a:	6323      	str	r3, [r4, #48]	; 0x30
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	08009f6d 	.word	0x08009f6d
 8009514:	08009f8f 	.word	0x08009f8f
 8009518:	08009fc7 	.word	0x08009fc7
 800951c:	08009feb 	.word	0x08009feb

08009520 <_cleanup_r>:
 8009520:	4901      	ldr	r1, [pc, #4]	; (8009528 <_cleanup_r+0x8>)
 8009522:	f000 b885 	b.w	8009630 <_fwalk_reent>
 8009526:	bf00      	nop
 8009528:	08009485 	.word	0x08009485

0800952c <__sfmoreglue>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	1e4a      	subs	r2, r1, #1
 8009530:	2568      	movs	r5, #104	; 0x68
 8009532:	4355      	muls	r5, r2
 8009534:	460e      	mov	r6, r1
 8009536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800953a:	f7ff fd57 	bl	8008fec <_malloc_r>
 800953e:	4604      	mov	r4, r0
 8009540:	b140      	cbz	r0, 8009554 <__sfmoreglue+0x28>
 8009542:	2100      	movs	r1, #0
 8009544:	e9c0 1600 	strd	r1, r6, [r0]
 8009548:	300c      	adds	r0, #12
 800954a:	60a0      	str	r0, [r4, #8]
 800954c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009550:	f7ff fcf5 	bl	8008f3e <memset>
 8009554:	4620      	mov	r0, r4
 8009556:	bd70      	pop	{r4, r5, r6, pc}

08009558 <__sinit>:
 8009558:	6983      	ldr	r3, [r0, #24]
 800955a:	b510      	push	{r4, lr}
 800955c:	4604      	mov	r4, r0
 800955e:	bb33      	cbnz	r3, 80095ae <__sinit+0x56>
 8009560:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009564:	6503      	str	r3, [r0, #80]	; 0x50
 8009566:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <__sinit+0x58>)
 8009568:	4a12      	ldr	r2, [pc, #72]	; (80095b4 <__sinit+0x5c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6282      	str	r2, [r0, #40]	; 0x28
 800956e:	4298      	cmp	r0, r3
 8009570:	bf04      	itt	eq
 8009572:	2301      	moveq	r3, #1
 8009574:	6183      	streq	r3, [r0, #24]
 8009576:	f000 f81f 	bl	80095b8 <__sfp>
 800957a:	6060      	str	r0, [r4, #4]
 800957c:	4620      	mov	r0, r4
 800957e:	f000 f81b 	bl	80095b8 <__sfp>
 8009582:	60a0      	str	r0, [r4, #8]
 8009584:	4620      	mov	r0, r4
 8009586:	f000 f817 	bl	80095b8 <__sfp>
 800958a:	2200      	movs	r2, #0
 800958c:	60e0      	str	r0, [r4, #12]
 800958e:	2104      	movs	r1, #4
 8009590:	6860      	ldr	r0, [r4, #4]
 8009592:	f7ff ffa1 	bl	80094d8 <std>
 8009596:	2201      	movs	r2, #1
 8009598:	2109      	movs	r1, #9
 800959a:	68a0      	ldr	r0, [r4, #8]
 800959c:	f7ff ff9c 	bl	80094d8 <std>
 80095a0:	2202      	movs	r2, #2
 80095a2:	2112      	movs	r1, #18
 80095a4:	68e0      	ldr	r0, [r4, #12]
 80095a6:	f7ff ff97 	bl	80094d8 <std>
 80095aa:	2301      	movs	r3, #1
 80095ac:	61a3      	str	r3, [r4, #24]
 80095ae:	bd10      	pop	{r4, pc}
 80095b0:	0800a3b0 	.word	0x0800a3b0
 80095b4:	08009521 	.word	0x08009521

080095b8 <__sfp>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	4b1b      	ldr	r3, [pc, #108]	; (8009628 <__sfp+0x70>)
 80095bc:	681e      	ldr	r6, [r3, #0]
 80095be:	69b3      	ldr	r3, [r6, #24]
 80095c0:	4607      	mov	r7, r0
 80095c2:	b913      	cbnz	r3, 80095ca <__sfp+0x12>
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7ff ffc7 	bl	8009558 <__sinit>
 80095ca:	3648      	adds	r6, #72	; 0x48
 80095cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	d503      	bpl.n	80095dc <__sfp+0x24>
 80095d4:	6833      	ldr	r3, [r6, #0]
 80095d6:	b133      	cbz	r3, 80095e6 <__sfp+0x2e>
 80095d8:	6836      	ldr	r6, [r6, #0]
 80095da:	e7f7      	b.n	80095cc <__sfp+0x14>
 80095dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095e0:	b16d      	cbz	r5, 80095fe <__sfp+0x46>
 80095e2:	3468      	adds	r4, #104	; 0x68
 80095e4:	e7f4      	b.n	80095d0 <__sfp+0x18>
 80095e6:	2104      	movs	r1, #4
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ff9f 	bl	800952c <__sfmoreglue>
 80095ee:	6030      	str	r0, [r6, #0]
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1f1      	bne.n	80095d8 <__sfp+0x20>
 80095f4:	230c      	movs	r3, #12
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4604      	mov	r4, r0
 80095fa:	4620      	mov	r0, r4
 80095fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095fe:	4b0b      	ldr	r3, [pc, #44]	; (800962c <__sfp+0x74>)
 8009600:	6665      	str	r5, [r4, #100]	; 0x64
 8009602:	e9c4 5500 	strd	r5, r5, [r4]
 8009606:	60a5      	str	r5, [r4, #8]
 8009608:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800960c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009610:	2208      	movs	r2, #8
 8009612:	4629      	mov	r1, r5
 8009614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009618:	f7ff fc91 	bl	8008f3e <memset>
 800961c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009624:	e7e9      	b.n	80095fa <__sfp+0x42>
 8009626:	bf00      	nop
 8009628:	0800a3b0 	.word	0x0800a3b0
 800962c:	ffff0001 	.word	0xffff0001

08009630 <_fwalk_reent>:
 8009630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4680      	mov	r8, r0
 8009636:	4689      	mov	r9, r1
 8009638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800963c:	2600      	movs	r6, #0
 800963e:	b914      	cbnz	r4, 8009646 <_fwalk_reent+0x16>
 8009640:	4630      	mov	r0, r6
 8009642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009646:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800964a:	3f01      	subs	r7, #1
 800964c:	d501      	bpl.n	8009652 <_fwalk_reent+0x22>
 800964e:	6824      	ldr	r4, [r4, #0]
 8009650:	e7f5      	b.n	800963e <_fwalk_reent+0xe>
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d907      	bls.n	8009668 <_fwalk_reent+0x38>
 8009658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800965c:	3301      	adds	r3, #1
 800965e:	d003      	beq.n	8009668 <_fwalk_reent+0x38>
 8009660:	4629      	mov	r1, r5
 8009662:	4640      	mov	r0, r8
 8009664:	47c8      	blx	r9
 8009666:	4306      	orrs	r6, r0
 8009668:	3568      	adds	r5, #104	; 0x68
 800966a:	e7ee      	b.n	800964a <_fwalk_reent+0x1a>

0800966c <__swhatbuf_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	460e      	mov	r6, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	2900      	cmp	r1, #0
 8009676:	b096      	sub	sp, #88	; 0x58
 8009678:	4614      	mov	r4, r2
 800967a:	461d      	mov	r5, r3
 800967c:	da07      	bge.n	800968e <__swhatbuf_r+0x22>
 800967e:	2300      	movs	r3, #0
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	89b3      	ldrh	r3, [r6, #12]
 8009684:	061a      	lsls	r2, r3, #24
 8009686:	d410      	bmi.n	80096aa <__swhatbuf_r+0x3e>
 8009688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800968c:	e00e      	b.n	80096ac <__swhatbuf_r+0x40>
 800968e:	466a      	mov	r2, sp
 8009690:	f000 fcd2 	bl	800a038 <_fstat_r>
 8009694:	2800      	cmp	r0, #0
 8009696:	dbf2      	blt.n	800967e <__swhatbuf_r+0x12>
 8009698:	9a01      	ldr	r2, [sp, #4]
 800969a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800969e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096a2:	425a      	negs	r2, r3
 80096a4:	415a      	adcs	r2, r3
 80096a6:	602a      	str	r2, [r5, #0]
 80096a8:	e7ee      	b.n	8009688 <__swhatbuf_r+0x1c>
 80096aa:	2340      	movs	r3, #64	; 0x40
 80096ac:	2000      	movs	r0, #0
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	b016      	add	sp, #88	; 0x58
 80096b2:	bd70      	pop	{r4, r5, r6, pc}

080096b4 <__smakebuf_r>:
 80096b4:	898b      	ldrh	r3, [r1, #12]
 80096b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096b8:	079d      	lsls	r5, r3, #30
 80096ba:	4606      	mov	r6, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	d507      	bpl.n	80096d0 <__smakebuf_r+0x1c>
 80096c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	2301      	movs	r3, #1
 80096ca:	6163      	str	r3, [r4, #20]
 80096cc:	b002      	add	sp, #8
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	ab01      	add	r3, sp, #4
 80096d2:	466a      	mov	r2, sp
 80096d4:	f7ff ffca 	bl	800966c <__swhatbuf_r>
 80096d8:	9900      	ldr	r1, [sp, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff fc85 	bl	8008fec <_malloc_r>
 80096e2:	b948      	cbnz	r0, 80096f8 <__smakebuf_r+0x44>
 80096e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e8:	059a      	lsls	r2, r3, #22
 80096ea:	d4ef      	bmi.n	80096cc <__smakebuf_r+0x18>
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	f043 0302 	orr.w	r3, r3, #2
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	e7e3      	b.n	80096c0 <__smakebuf_r+0xc>
 80096f8:	4b0d      	ldr	r3, [pc, #52]	; (8009730 <__smakebuf_r+0x7c>)
 80096fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	6020      	str	r0, [r4, #0]
 8009700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009704:	81a3      	strh	r3, [r4, #12]
 8009706:	9b00      	ldr	r3, [sp, #0]
 8009708:	6163      	str	r3, [r4, #20]
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	6120      	str	r0, [r4, #16]
 800970e:	b15b      	cbz	r3, 8009728 <__smakebuf_r+0x74>
 8009710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009714:	4630      	mov	r0, r6
 8009716:	f000 fca1 	bl	800a05c <_isatty_r>
 800971a:	b128      	cbz	r0, 8009728 <__smakebuf_r+0x74>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	431d      	orrs	r5, r3
 800972c:	81a5      	strh	r5, [r4, #12]
 800972e:	e7cd      	b.n	80096cc <__smakebuf_r+0x18>
 8009730:	08009521 	.word	0x08009521

08009734 <__malloc_lock>:
 8009734:	4770      	bx	lr

08009736 <__malloc_unlock>:
 8009736:	4770      	bx	lr

08009738 <__ssputs_r>:
 8009738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800973c:	688e      	ldr	r6, [r1, #8]
 800973e:	429e      	cmp	r6, r3
 8009740:	4682      	mov	sl, r0
 8009742:	460c      	mov	r4, r1
 8009744:	4690      	mov	r8, r2
 8009746:	4699      	mov	r9, r3
 8009748:	d837      	bhi.n	80097ba <__ssputs_r+0x82>
 800974a:	898a      	ldrh	r2, [r1, #12]
 800974c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009750:	d031      	beq.n	80097b6 <__ssputs_r+0x7e>
 8009752:	6825      	ldr	r5, [r4, #0]
 8009754:	6909      	ldr	r1, [r1, #16]
 8009756:	1a6f      	subs	r7, r5, r1
 8009758:	6965      	ldr	r5, [r4, #20]
 800975a:	2302      	movs	r3, #2
 800975c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009760:	fb95 f5f3 	sdiv	r5, r5, r3
 8009764:	f109 0301 	add.w	r3, r9, #1
 8009768:	443b      	add	r3, r7
 800976a:	429d      	cmp	r5, r3
 800976c:	bf38      	it	cc
 800976e:	461d      	movcc	r5, r3
 8009770:	0553      	lsls	r3, r2, #21
 8009772:	d530      	bpl.n	80097d6 <__ssputs_r+0x9e>
 8009774:	4629      	mov	r1, r5
 8009776:	f7ff fc39 	bl	8008fec <_malloc_r>
 800977a:	4606      	mov	r6, r0
 800977c:	b950      	cbnz	r0, 8009794 <__ssputs_r+0x5c>
 800977e:	230c      	movs	r3, #12
 8009780:	f8ca 3000 	str.w	r3, [sl]
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009794:	463a      	mov	r2, r7
 8009796:	6921      	ldr	r1, [r4, #16]
 8009798:	f7ff fbc6 	bl	8008f28 <memcpy>
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	6126      	str	r6, [r4, #16]
 80097aa:	6165      	str	r5, [r4, #20]
 80097ac:	443e      	add	r6, r7
 80097ae:	1bed      	subs	r5, r5, r7
 80097b0:	6026      	str	r6, [r4, #0]
 80097b2:	60a5      	str	r5, [r4, #8]
 80097b4:	464e      	mov	r6, r9
 80097b6:	454e      	cmp	r6, r9
 80097b8:	d900      	bls.n	80097bc <__ssputs_r+0x84>
 80097ba:	464e      	mov	r6, r9
 80097bc:	4632      	mov	r2, r6
 80097be:	4641      	mov	r1, r8
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	f000 fc6d 	bl	800a0a0 <memmove>
 80097c6:	68a3      	ldr	r3, [r4, #8]
 80097c8:	1b9b      	subs	r3, r3, r6
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	441e      	add	r6, r3
 80097d0:	6026      	str	r6, [r4, #0]
 80097d2:	2000      	movs	r0, #0
 80097d4:	e7dc      	b.n	8009790 <__ssputs_r+0x58>
 80097d6:	462a      	mov	r2, r5
 80097d8:	f000 fc7b 	bl	800a0d2 <_realloc_r>
 80097dc:	4606      	mov	r6, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1e2      	bne.n	80097a8 <__ssputs_r+0x70>
 80097e2:	6921      	ldr	r1, [r4, #16]
 80097e4:	4650      	mov	r0, sl
 80097e6:	f7ff fbb3 	bl	8008f50 <_free_r>
 80097ea:	e7c8      	b.n	800977e <__ssputs_r+0x46>

080097ec <_svfiprintf_r>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	461d      	mov	r5, r3
 80097f2:	898b      	ldrh	r3, [r1, #12]
 80097f4:	061f      	lsls	r7, r3, #24
 80097f6:	b09d      	sub	sp, #116	; 0x74
 80097f8:	4680      	mov	r8, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	4616      	mov	r6, r2
 80097fe:	d50f      	bpl.n	8009820 <_svfiprintf_r+0x34>
 8009800:	690b      	ldr	r3, [r1, #16]
 8009802:	b96b      	cbnz	r3, 8009820 <_svfiprintf_r+0x34>
 8009804:	2140      	movs	r1, #64	; 0x40
 8009806:	f7ff fbf1 	bl	8008fec <_malloc_r>
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	6120      	str	r0, [r4, #16]
 800980e:	b928      	cbnz	r0, 800981c <_svfiprintf_r+0x30>
 8009810:	230c      	movs	r3, #12
 8009812:	f8c8 3000 	str.w	r3, [r8]
 8009816:	f04f 30ff 	mov.w	r0, #4294967295
 800981a:	e0c8      	b.n	80099ae <_svfiprintf_r+0x1c2>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	6163      	str	r3, [r4, #20]
 8009820:	2300      	movs	r3, #0
 8009822:	9309      	str	r3, [sp, #36]	; 0x24
 8009824:	2320      	movs	r3, #32
 8009826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800982a:	2330      	movs	r3, #48	; 0x30
 800982c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009830:	9503      	str	r5, [sp, #12]
 8009832:	f04f 0b01 	mov.w	fp, #1
 8009836:	4637      	mov	r7, r6
 8009838:	463d      	mov	r5, r7
 800983a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800983e:	b10b      	cbz	r3, 8009844 <_svfiprintf_r+0x58>
 8009840:	2b25      	cmp	r3, #37	; 0x25
 8009842:	d13e      	bne.n	80098c2 <_svfiprintf_r+0xd6>
 8009844:	ebb7 0a06 	subs.w	sl, r7, r6
 8009848:	d00b      	beq.n	8009862 <_svfiprintf_r+0x76>
 800984a:	4653      	mov	r3, sl
 800984c:	4632      	mov	r2, r6
 800984e:	4621      	mov	r1, r4
 8009850:	4640      	mov	r0, r8
 8009852:	f7ff ff71 	bl	8009738 <__ssputs_r>
 8009856:	3001      	adds	r0, #1
 8009858:	f000 80a4 	beq.w	80099a4 <_svfiprintf_r+0x1b8>
 800985c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985e:	4453      	add	r3, sl
 8009860:	9309      	str	r3, [sp, #36]	; 0x24
 8009862:	783b      	ldrb	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 809d 	beq.w	80099a4 <_svfiprintf_r+0x1b8>
 800986a:	2300      	movs	r3, #0
 800986c:	f04f 32ff 	mov.w	r2, #4294967295
 8009870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800987c:	931a      	str	r3, [sp, #104]	; 0x68
 800987e:	462f      	mov	r7, r5
 8009880:	2205      	movs	r2, #5
 8009882:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009886:	4850      	ldr	r0, [pc, #320]	; (80099c8 <_svfiprintf_r+0x1dc>)
 8009888:	f7f6 fca2 	bl	80001d0 <memchr>
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	b9d0      	cbnz	r0, 80098c6 <_svfiprintf_r+0xda>
 8009890:	06d9      	lsls	r1, r3, #27
 8009892:	bf44      	itt	mi
 8009894:	2220      	movmi	r2, #32
 8009896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800989a:	071a      	lsls	r2, r3, #28
 800989c:	bf44      	itt	mi
 800989e:	222b      	movmi	r2, #43	; 0x2b
 80098a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80098a4:	782a      	ldrb	r2, [r5, #0]
 80098a6:	2a2a      	cmp	r2, #42	; 0x2a
 80098a8:	d015      	beq.n	80098d6 <_svfiprintf_r+0xea>
 80098aa:	9a07      	ldr	r2, [sp, #28]
 80098ac:	462f      	mov	r7, r5
 80098ae:	2000      	movs	r0, #0
 80098b0:	250a      	movs	r5, #10
 80098b2:	4639      	mov	r1, r7
 80098b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b8:	3b30      	subs	r3, #48	; 0x30
 80098ba:	2b09      	cmp	r3, #9
 80098bc:	d94d      	bls.n	800995a <_svfiprintf_r+0x16e>
 80098be:	b1b8      	cbz	r0, 80098f0 <_svfiprintf_r+0x104>
 80098c0:	e00f      	b.n	80098e2 <_svfiprintf_r+0xf6>
 80098c2:	462f      	mov	r7, r5
 80098c4:	e7b8      	b.n	8009838 <_svfiprintf_r+0x4c>
 80098c6:	4a40      	ldr	r2, [pc, #256]	; (80099c8 <_svfiprintf_r+0x1dc>)
 80098c8:	1a80      	subs	r0, r0, r2
 80098ca:	fa0b f000 	lsl.w	r0, fp, r0
 80098ce:	4318      	orrs	r0, r3
 80098d0:	9004      	str	r0, [sp, #16]
 80098d2:	463d      	mov	r5, r7
 80098d4:	e7d3      	b.n	800987e <_svfiprintf_r+0x92>
 80098d6:	9a03      	ldr	r2, [sp, #12]
 80098d8:	1d11      	adds	r1, r2, #4
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	2a00      	cmp	r2, #0
 80098e0:	db01      	blt.n	80098e6 <_svfiprintf_r+0xfa>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e004      	b.n	80098f0 <_svfiprintf_r+0x104>
 80098e6:	4252      	negs	r2, r2
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	9207      	str	r2, [sp, #28]
 80098ee:	9304      	str	r3, [sp, #16]
 80098f0:	783b      	ldrb	r3, [r7, #0]
 80098f2:	2b2e      	cmp	r3, #46	; 0x2e
 80098f4:	d10c      	bne.n	8009910 <_svfiprintf_r+0x124>
 80098f6:	787b      	ldrb	r3, [r7, #1]
 80098f8:	2b2a      	cmp	r3, #42	; 0x2a
 80098fa:	d133      	bne.n	8009964 <_svfiprintf_r+0x178>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	1d1a      	adds	r2, r3, #4
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	9203      	str	r2, [sp, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	bfb8      	it	lt
 8009908:	f04f 33ff 	movlt.w	r3, #4294967295
 800990c:	3702      	adds	r7, #2
 800990e:	9305      	str	r3, [sp, #20]
 8009910:	4d2e      	ldr	r5, [pc, #184]	; (80099cc <_svfiprintf_r+0x1e0>)
 8009912:	7839      	ldrb	r1, [r7, #0]
 8009914:	2203      	movs	r2, #3
 8009916:	4628      	mov	r0, r5
 8009918:	f7f6 fc5a 	bl	80001d0 <memchr>
 800991c:	b138      	cbz	r0, 800992e <_svfiprintf_r+0x142>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	1b40      	subs	r0, r0, r5
 8009922:	fa03 f000 	lsl.w	r0, r3, r0
 8009926:	9b04      	ldr	r3, [sp, #16]
 8009928:	4303      	orrs	r3, r0
 800992a:	3701      	adds	r7, #1
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	7839      	ldrb	r1, [r7, #0]
 8009930:	4827      	ldr	r0, [pc, #156]	; (80099d0 <_svfiprintf_r+0x1e4>)
 8009932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009936:	2206      	movs	r2, #6
 8009938:	1c7e      	adds	r6, r7, #1
 800993a:	f7f6 fc49 	bl	80001d0 <memchr>
 800993e:	2800      	cmp	r0, #0
 8009940:	d038      	beq.n	80099b4 <_svfiprintf_r+0x1c8>
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <_svfiprintf_r+0x1e8>)
 8009944:	bb13      	cbnz	r3, 800998c <_svfiprintf_r+0x1a0>
 8009946:	9b03      	ldr	r3, [sp, #12]
 8009948:	3307      	adds	r3, #7
 800994a:	f023 0307 	bic.w	r3, r3, #7
 800994e:	3308      	adds	r3, #8
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009954:	444b      	add	r3, r9
 8009956:	9309      	str	r3, [sp, #36]	; 0x24
 8009958:	e76d      	b.n	8009836 <_svfiprintf_r+0x4a>
 800995a:	fb05 3202 	mla	r2, r5, r2, r3
 800995e:	2001      	movs	r0, #1
 8009960:	460f      	mov	r7, r1
 8009962:	e7a6      	b.n	80098b2 <_svfiprintf_r+0xc6>
 8009964:	2300      	movs	r3, #0
 8009966:	3701      	adds	r7, #1
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	4619      	mov	r1, r3
 800996c:	250a      	movs	r5, #10
 800996e:	4638      	mov	r0, r7
 8009970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009974:	3a30      	subs	r2, #48	; 0x30
 8009976:	2a09      	cmp	r2, #9
 8009978:	d903      	bls.n	8009982 <_svfiprintf_r+0x196>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c8      	beq.n	8009910 <_svfiprintf_r+0x124>
 800997e:	9105      	str	r1, [sp, #20]
 8009980:	e7c6      	b.n	8009910 <_svfiprintf_r+0x124>
 8009982:	fb05 2101 	mla	r1, r5, r1, r2
 8009986:	2301      	movs	r3, #1
 8009988:	4607      	mov	r7, r0
 800998a:	e7f0      	b.n	800996e <_svfiprintf_r+0x182>
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	4622      	mov	r2, r4
 8009992:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <_svfiprintf_r+0x1ec>)
 8009994:	a904      	add	r1, sp, #16
 8009996:	4640      	mov	r0, r8
 8009998:	f3af 8000 	nop.w
 800999c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80099a0:	4681      	mov	r9, r0
 80099a2:	d1d6      	bne.n	8009952 <_svfiprintf_r+0x166>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	065b      	lsls	r3, r3, #25
 80099a8:	f53f af35 	bmi.w	8009816 <_svfiprintf_r+0x2a>
 80099ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ae:	b01d      	add	sp, #116	; 0x74
 80099b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	ab03      	add	r3, sp, #12
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	4622      	mov	r2, r4
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <_svfiprintf_r+0x1ec>)
 80099bc:	a904      	add	r1, sp, #16
 80099be:	4640      	mov	r0, r8
 80099c0:	f000 f9c2 	bl	8009d48 <_printf_i>
 80099c4:	e7ea      	b.n	800999c <_svfiprintf_r+0x1b0>
 80099c6:	bf00      	nop
 80099c8:	0800a414 	.word	0x0800a414
 80099cc:	0800a41a 	.word	0x0800a41a
 80099d0:	0800a41e 	.word	0x0800a41e
 80099d4:	00000000 	.word	0x00000000
 80099d8:	08009739 	.word	0x08009739

080099dc <__sfputc_r>:
 80099dc:	6893      	ldr	r3, [r2, #8]
 80099de:	3b01      	subs	r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	b410      	push	{r4}
 80099e4:	6093      	str	r3, [r2, #8]
 80099e6:	da08      	bge.n	80099fa <__sfputc_r+0x1e>
 80099e8:	6994      	ldr	r4, [r2, #24]
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	db01      	blt.n	80099f2 <__sfputc_r+0x16>
 80099ee:	290a      	cmp	r1, #10
 80099f0:	d103      	bne.n	80099fa <__sfputc_r+0x1e>
 80099f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f6:	f7ff bbff 	b.w	80091f8 <__swbuf_r>
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	1c58      	adds	r0, r3, #1
 80099fe:	6010      	str	r0, [r2, #0]
 8009a00:	7019      	strb	r1, [r3, #0]
 8009a02:	4608      	mov	r0, r1
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <__sfputs_r>:
 8009a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	18d5      	adds	r5, r2, r3
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	d101      	bne.n	8009a1c <__sfputs_r+0x12>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e007      	b.n	8009a2c <__sfputs_r+0x22>
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffda 	bl	80099dc <__sfputc_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d1f3      	bne.n	8009a14 <__sfputs_r+0xa>
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a30 <_vfiprintf_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	460c      	mov	r4, r1
 8009a36:	b09d      	sub	sp, #116	; 0x74
 8009a38:	4617      	mov	r7, r2
 8009a3a:	461d      	mov	r5, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	b118      	cbz	r0, 8009a48 <_vfiprintf_r+0x18>
 8009a40:	6983      	ldr	r3, [r0, #24]
 8009a42:	b90b      	cbnz	r3, 8009a48 <_vfiprintf_r+0x18>
 8009a44:	f7ff fd88 	bl	8009558 <__sinit>
 8009a48:	4b7c      	ldr	r3, [pc, #496]	; (8009c3c <_vfiprintf_r+0x20c>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	d158      	bne.n	8009b00 <_vfiprintf_r+0xd0>
 8009a4e:	6874      	ldr	r4, [r6, #4]
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	0718      	lsls	r0, r3, #28
 8009a54:	d55e      	bpl.n	8009b14 <_vfiprintf_r+0xe4>
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05b      	beq.n	8009b14 <_vfiprintf_r+0xe4>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a60:	2320      	movs	r3, #32
 8009a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a66:	2330      	movs	r3, #48	; 0x30
 8009a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6c:	9503      	str	r5, [sp, #12]
 8009a6e:	f04f 0b01 	mov.w	fp, #1
 8009a72:	46b8      	mov	r8, r7
 8009a74:	4645      	mov	r5, r8
 8009a76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a7a:	b10b      	cbz	r3, 8009a80 <_vfiprintf_r+0x50>
 8009a7c:	2b25      	cmp	r3, #37	; 0x25
 8009a7e:	d154      	bne.n	8009b2a <_vfiprintf_r+0xfa>
 8009a80:	ebb8 0a07 	subs.w	sl, r8, r7
 8009a84:	d00b      	beq.n	8009a9e <_vfiprintf_r+0x6e>
 8009a86:	4653      	mov	r3, sl
 8009a88:	463a      	mov	r2, r7
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff ffbc 	bl	8009a0a <__sfputs_r>
 8009a92:	3001      	adds	r0, #1
 8009a94:	f000 80c2 	beq.w	8009c1c <_vfiprintf_r+0x1ec>
 8009a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9a:	4453      	add	r3, sl
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	f898 3000 	ldrb.w	r3, [r8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80ba 	beq.w	8009c1c <_vfiprintf_r+0x1ec>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8009aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aba:	931a      	str	r3, [sp, #104]	; 0x68
 8009abc:	46a8      	mov	r8, r5
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009ac4:	485e      	ldr	r0, [pc, #376]	; (8009c40 <_vfiprintf_r+0x210>)
 8009ac6:	f7f6 fb83 	bl	80001d0 <memchr>
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	bb78      	cbnz	r0, 8009b2e <_vfiprintf_r+0xfe>
 8009ace:	06d9      	lsls	r1, r3, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2220      	movmi	r2, #32
 8009ad4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ad8:	071a      	lsls	r2, r3, #28
 8009ada:	bf44      	itt	mi
 8009adc:	222b      	movmi	r2, #43	; 0x2b
 8009ade:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ae2:	782a      	ldrb	r2, [r5, #0]
 8009ae4:	2a2a      	cmp	r2, #42	; 0x2a
 8009ae6:	d02a      	beq.n	8009b3e <_vfiprintf_r+0x10e>
 8009ae8:	9a07      	ldr	r2, [sp, #28]
 8009aea:	46a8      	mov	r8, r5
 8009aec:	2000      	movs	r0, #0
 8009aee:	250a      	movs	r5, #10
 8009af0:	4641      	mov	r1, r8
 8009af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af6:	3b30      	subs	r3, #48	; 0x30
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d969      	bls.n	8009bd0 <_vfiprintf_r+0x1a0>
 8009afc:	b360      	cbz	r0, 8009b58 <_vfiprintf_r+0x128>
 8009afe:	e024      	b.n	8009b4a <_vfiprintf_r+0x11a>
 8009b00:	4b50      	ldr	r3, [pc, #320]	; (8009c44 <_vfiprintf_r+0x214>)
 8009b02:	429c      	cmp	r4, r3
 8009b04:	d101      	bne.n	8009b0a <_vfiprintf_r+0xda>
 8009b06:	68b4      	ldr	r4, [r6, #8]
 8009b08:	e7a2      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009b0a:	4b4f      	ldr	r3, [pc, #316]	; (8009c48 <_vfiprintf_r+0x218>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	bf08      	it	eq
 8009b10:	68f4      	ldreq	r4, [r6, #12]
 8009b12:	e79d      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff fbc0 	bl	800929c <__swsetup_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d09d      	beq.n	8009a5c <_vfiprintf_r+0x2c>
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	b01d      	add	sp, #116	; 0x74
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2a:	46a8      	mov	r8, r5
 8009b2c:	e7a2      	b.n	8009a74 <_vfiprintf_r+0x44>
 8009b2e:	4a44      	ldr	r2, [pc, #272]	; (8009c40 <_vfiprintf_r+0x210>)
 8009b30:	1a80      	subs	r0, r0, r2
 8009b32:	fa0b f000 	lsl.w	r0, fp, r0
 8009b36:	4318      	orrs	r0, r3
 8009b38:	9004      	str	r0, [sp, #16]
 8009b3a:	4645      	mov	r5, r8
 8009b3c:	e7be      	b.n	8009abc <_vfiprintf_r+0x8c>
 8009b3e:	9a03      	ldr	r2, [sp, #12]
 8009b40:	1d11      	adds	r1, r2, #4
 8009b42:	6812      	ldr	r2, [r2, #0]
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	db01      	blt.n	8009b4e <_vfiprintf_r+0x11e>
 8009b4a:	9207      	str	r2, [sp, #28]
 8009b4c:	e004      	b.n	8009b58 <_vfiprintf_r+0x128>
 8009b4e:	4252      	negs	r2, r2
 8009b50:	f043 0302 	orr.w	r3, r3, #2
 8009b54:	9207      	str	r2, [sp, #28]
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	f898 3000 	ldrb.w	r3, [r8]
 8009b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b5e:	d10e      	bne.n	8009b7e <_vfiprintf_r+0x14e>
 8009b60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009b64:	2b2a      	cmp	r3, #42	; 0x2a
 8009b66:	d138      	bne.n	8009bda <_vfiprintf_r+0x1aa>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	9203      	str	r2, [sp, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	bfb8      	it	lt
 8009b74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b78:	f108 0802 	add.w	r8, r8, #2
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	4d33      	ldr	r5, [pc, #204]	; (8009c4c <_vfiprintf_r+0x21c>)
 8009b80:	f898 1000 	ldrb.w	r1, [r8]
 8009b84:	2203      	movs	r2, #3
 8009b86:	4628      	mov	r0, r5
 8009b88:	f7f6 fb22 	bl	80001d0 <memchr>
 8009b8c:	b140      	cbz	r0, 8009ba0 <_vfiprintf_r+0x170>
 8009b8e:	2340      	movs	r3, #64	; 0x40
 8009b90:	1b40      	subs	r0, r0, r5
 8009b92:	fa03 f000 	lsl.w	r0, r3, r0
 8009b96:	9b04      	ldr	r3, [sp, #16]
 8009b98:	4303      	orrs	r3, r0
 8009b9a:	f108 0801 	add.w	r8, r8, #1
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	f898 1000 	ldrb.w	r1, [r8]
 8009ba4:	482a      	ldr	r0, [pc, #168]	; (8009c50 <_vfiprintf_r+0x220>)
 8009ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009baa:	2206      	movs	r2, #6
 8009bac:	f108 0701 	add.w	r7, r8, #1
 8009bb0:	f7f6 fb0e 	bl	80001d0 <memchr>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d037      	beq.n	8009c28 <_vfiprintf_r+0x1f8>
 8009bb8:	4b26      	ldr	r3, [pc, #152]	; (8009c54 <_vfiprintf_r+0x224>)
 8009bba:	bb1b      	cbnz	r3, 8009c04 <_vfiprintf_r+0x1d4>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	444b      	add	r3, r9
 8009bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bce:	e750      	b.n	8009a72 <_vfiprintf_r+0x42>
 8009bd0:	fb05 3202 	mla	r2, r5, r2, r3
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	4688      	mov	r8, r1
 8009bd8:	e78a      	b.n	8009af0 <_vfiprintf_r+0xc0>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f108 0801 	add.w	r8, r8, #1
 8009be0:	9305      	str	r3, [sp, #20]
 8009be2:	4619      	mov	r1, r3
 8009be4:	250a      	movs	r5, #10
 8009be6:	4640      	mov	r0, r8
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	; 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_vfiprintf_r+0x1ca>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c3      	beq.n	8009b7e <_vfiprintf_r+0x14e>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c1      	b.n	8009b7e <_vfiprintf_r+0x14e>
 8009bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4680      	mov	r8, r0
 8009c02:	e7f0      	b.n	8009be6 <_vfiprintf_r+0x1b6>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <_vfiprintf_r+0x228>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f3af 8000 	nop.w
 8009c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c18:	4681      	mov	r9, r0
 8009c1a:	d1d5      	bne.n	8009bc8 <_vfiprintf_r+0x198>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	065b      	lsls	r3, r3, #25
 8009c20:	f53f af7e 	bmi.w	8009b20 <_vfiprintf_r+0xf0>
 8009c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c26:	e77d      	b.n	8009b24 <_vfiprintf_r+0xf4>
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <_vfiprintf_r+0x228>)
 8009c30:	a904      	add	r1, sp, #16
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 f888 	bl	8009d48 <_printf_i>
 8009c38:	e7ec      	b.n	8009c14 <_vfiprintf_r+0x1e4>
 8009c3a:	bf00      	nop
 8009c3c:	0800a3d4 	.word	0x0800a3d4
 8009c40:	0800a414 	.word	0x0800a414
 8009c44:	0800a3f4 	.word	0x0800a3f4
 8009c48:	0800a3b4 	.word	0x0800a3b4
 8009c4c:	0800a41a 	.word	0x0800a41a
 8009c50:	0800a41e 	.word	0x0800a41e
 8009c54:	00000000 	.word	0x00000000
 8009c58:	08009a0b 	.word	0x08009a0b

08009c5c <_printf_common>:
 8009c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c60:	4691      	mov	r9, r2
 8009c62:	461f      	mov	r7, r3
 8009c64:	688a      	ldr	r2, [r1, #8]
 8009c66:	690b      	ldr	r3, [r1, #16]
 8009c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	bfb8      	it	lt
 8009c70:	4613      	movlt	r3, r2
 8009c72:	f8c9 3000 	str.w	r3, [r9]
 8009c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	b112      	cbz	r2, 8009c86 <_printf_common+0x2a>
 8009c80:	3301      	adds	r3, #1
 8009c82:	f8c9 3000 	str.w	r3, [r9]
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	0699      	lsls	r1, r3, #26
 8009c8a:	bf42      	ittt	mi
 8009c8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c90:	3302      	addmi	r3, #2
 8009c92:	f8c9 3000 	strmi.w	r3, [r9]
 8009c96:	6825      	ldr	r5, [r4, #0]
 8009c98:	f015 0506 	ands.w	r5, r5, #6
 8009c9c:	d107      	bne.n	8009cae <_printf_common+0x52>
 8009c9e:	f104 0a19 	add.w	sl, r4, #25
 8009ca2:	68e3      	ldr	r3, [r4, #12]
 8009ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca8:	1a9b      	subs	r3, r3, r2
 8009caa:	42ab      	cmp	r3, r5
 8009cac:	dc28      	bgt.n	8009d00 <_printf_common+0xa4>
 8009cae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009cb2:	6822      	ldr	r2, [r4, #0]
 8009cb4:	3300      	adds	r3, #0
 8009cb6:	bf18      	it	ne
 8009cb8:	2301      	movne	r3, #1
 8009cba:	0692      	lsls	r2, r2, #26
 8009cbc:	d42d      	bmi.n	8009d1a <_printf_common+0xbe>
 8009cbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	47c0      	blx	r8
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d020      	beq.n	8009d0e <_printf_common+0xb2>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	68e5      	ldr	r5, [r4, #12]
 8009cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8009cd4:	f003 0306 	and.w	r3, r3, #6
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	bf08      	it	eq
 8009cdc:	1aad      	subeq	r5, r5, r2
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	6922      	ldr	r2, [r4, #16]
 8009ce2:	bf0c      	ite	eq
 8009ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ce8:	2500      	movne	r5, #0
 8009cea:	4293      	cmp	r3, r2
 8009cec:	bfc4      	itt	gt
 8009cee:	1a9b      	subgt	r3, r3, r2
 8009cf0:	18ed      	addgt	r5, r5, r3
 8009cf2:	f04f 0900 	mov.w	r9, #0
 8009cf6:	341a      	adds	r4, #26
 8009cf8:	454d      	cmp	r5, r9
 8009cfa:	d11a      	bne.n	8009d32 <_printf_common+0xd6>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e008      	b.n	8009d12 <_printf_common+0xb6>
 8009d00:	2301      	movs	r3, #1
 8009d02:	4652      	mov	r2, sl
 8009d04:	4639      	mov	r1, r7
 8009d06:	4630      	mov	r0, r6
 8009d08:	47c0      	blx	r8
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d103      	bne.n	8009d16 <_printf_common+0xba>
 8009d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d16:	3501      	adds	r5, #1
 8009d18:	e7c3      	b.n	8009ca2 <_printf_common+0x46>
 8009d1a:	18e1      	adds	r1, r4, r3
 8009d1c:	1c5a      	adds	r2, r3, #1
 8009d1e:	2030      	movs	r0, #48	; 0x30
 8009d20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d24:	4422      	add	r2, r4
 8009d26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d2e:	3302      	adds	r3, #2
 8009d30:	e7c5      	b.n	8009cbe <_printf_common+0x62>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4622      	mov	r2, r4
 8009d36:	4639      	mov	r1, r7
 8009d38:	4630      	mov	r0, r6
 8009d3a:	47c0      	blx	r8
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d0e6      	beq.n	8009d0e <_printf_common+0xb2>
 8009d40:	f109 0901 	add.w	r9, r9, #1
 8009d44:	e7d8      	b.n	8009cf8 <_printf_common+0x9c>
	...

08009d48 <_printf_i>:
 8009d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d50:	460c      	mov	r4, r1
 8009d52:	7e09      	ldrb	r1, [r1, #24]
 8009d54:	b085      	sub	sp, #20
 8009d56:	296e      	cmp	r1, #110	; 0x6e
 8009d58:	4617      	mov	r7, r2
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	4698      	mov	r8, r3
 8009d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d60:	f000 80b3 	beq.w	8009eca <_printf_i+0x182>
 8009d64:	d822      	bhi.n	8009dac <_printf_i+0x64>
 8009d66:	2963      	cmp	r1, #99	; 0x63
 8009d68:	d036      	beq.n	8009dd8 <_printf_i+0x90>
 8009d6a:	d80a      	bhi.n	8009d82 <_printf_i+0x3a>
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	f000 80b9 	beq.w	8009ee4 <_printf_i+0x19c>
 8009d72:	2958      	cmp	r1, #88	; 0x58
 8009d74:	f000 8083 	beq.w	8009e7e <_printf_i+0x136>
 8009d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d80:	e032      	b.n	8009de8 <_printf_i+0xa0>
 8009d82:	2964      	cmp	r1, #100	; 0x64
 8009d84:	d001      	beq.n	8009d8a <_printf_i+0x42>
 8009d86:	2969      	cmp	r1, #105	; 0x69
 8009d88:	d1f6      	bne.n	8009d78 <_printf_i+0x30>
 8009d8a:	6820      	ldr	r0, [r4, #0]
 8009d8c:	6813      	ldr	r3, [r2, #0]
 8009d8e:	0605      	lsls	r5, r0, #24
 8009d90:	f103 0104 	add.w	r1, r3, #4
 8009d94:	d52a      	bpl.n	8009dec <_printf_i+0xa4>
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6011      	str	r1, [r2, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da03      	bge.n	8009da6 <_printf_i+0x5e>
 8009d9e:	222d      	movs	r2, #45	; 0x2d
 8009da0:	425b      	negs	r3, r3
 8009da2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009da6:	486f      	ldr	r0, [pc, #444]	; (8009f64 <_printf_i+0x21c>)
 8009da8:	220a      	movs	r2, #10
 8009daa:	e039      	b.n	8009e20 <_printf_i+0xd8>
 8009dac:	2973      	cmp	r1, #115	; 0x73
 8009dae:	f000 809d 	beq.w	8009eec <_printf_i+0x1a4>
 8009db2:	d808      	bhi.n	8009dc6 <_printf_i+0x7e>
 8009db4:	296f      	cmp	r1, #111	; 0x6f
 8009db6:	d020      	beq.n	8009dfa <_printf_i+0xb2>
 8009db8:	2970      	cmp	r1, #112	; 0x70
 8009dba:	d1dd      	bne.n	8009d78 <_printf_i+0x30>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	f043 0320 	orr.w	r3, r3, #32
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	e003      	b.n	8009dce <_printf_i+0x86>
 8009dc6:	2975      	cmp	r1, #117	; 0x75
 8009dc8:	d017      	beq.n	8009dfa <_printf_i+0xb2>
 8009dca:	2978      	cmp	r1, #120	; 0x78
 8009dcc:	d1d4      	bne.n	8009d78 <_printf_i+0x30>
 8009dce:	2378      	movs	r3, #120	; 0x78
 8009dd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dd4:	4864      	ldr	r0, [pc, #400]	; (8009f68 <_printf_i+0x220>)
 8009dd6:	e055      	b.n	8009e84 <_printf_i+0x13c>
 8009dd8:	6813      	ldr	r3, [r2, #0]
 8009dda:	1d19      	adds	r1, r3, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6011      	str	r1, [r2, #0]
 8009de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009de8:	2301      	movs	r3, #1
 8009dea:	e08c      	b.n	8009f06 <_printf_i+0x1be>
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6011      	str	r1, [r2, #0]
 8009df0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009df4:	bf18      	it	ne
 8009df6:	b21b      	sxthne	r3, r3
 8009df8:	e7cf      	b.n	8009d9a <_printf_i+0x52>
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	6825      	ldr	r5, [r4, #0]
 8009dfe:	1d18      	adds	r0, r3, #4
 8009e00:	6010      	str	r0, [r2, #0]
 8009e02:	0628      	lsls	r0, r5, #24
 8009e04:	d501      	bpl.n	8009e0a <_printf_i+0xc2>
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	e002      	b.n	8009e10 <_printf_i+0xc8>
 8009e0a:	0668      	lsls	r0, r5, #25
 8009e0c:	d5fb      	bpl.n	8009e06 <_printf_i+0xbe>
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	4854      	ldr	r0, [pc, #336]	; (8009f64 <_printf_i+0x21c>)
 8009e12:	296f      	cmp	r1, #111	; 0x6f
 8009e14:	bf14      	ite	ne
 8009e16:	220a      	movne	r2, #10
 8009e18:	2208      	moveq	r2, #8
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e20:	6865      	ldr	r5, [r4, #4]
 8009e22:	60a5      	str	r5, [r4, #8]
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	f2c0 8095 	blt.w	8009f54 <_printf_i+0x20c>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	f021 0104 	bic.w	r1, r1, #4
 8009e30:	6021      	str	r1, [r4, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d13d      	bne.n	8009eb2 <_printf_i+0x16a>
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	f040 808e 	bne.w	8009f58 <_printf_i+0x210>
 8009e3c:	4665      	mov	r5, ip
 8009e3e:	2a08      	cmp	r2, #8
 8009e40:	d10b      	bne.n	8009e5a <_printf_i+0x112>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	07db      	lsls	r3, r3, #31
 8009e46:	d508      	bpl.n	8009e5a <_printf_i+0x112>
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	6862      	ldr	r2, [r4, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	bfde      	ittt	le
 8009e50:	2330      	movle	r3, #48	; 0x30
 8009e52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e5a:	ebac 0305 	sub.w	r3, ip, r5
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	f8cd 8000 	str.w	r8, [sp]
 8009e64:	463b      	mov	r3, r7
 8009e66:	aa03      	add	r2, sp, #12
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff fef6 	bl	8009c5c <_printf_common>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d14d      	bne.n	8009f10 <_printf_i+0x1c8>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	b005      	add	sp, #20
 8009e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	4839      	ldr	r0, [pc, #228]	; (8009f64 <_printf_i+0x21c>)
 8009e80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e84:	6813      	ldr	r3, [r2, #0]
 8009e86:	6821      	ldr	r1, [r4, #0]
 8009e88:	1d1d      	adds	r5, r3, #4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6015      	str	r5, [r2, #0]
 8009e8e:	060a      	lsls	r2, r1, #24
 8009e90:	d50b      	bpl.n	8009eaa <_printf_i+0x162>
 8009e92:	07ca      	lsls	r2, r1, #31
 8009e94:	bf44      	itt	mi
 8009e96:	f041 0120 	orrmi.w	r1, r1, #32
 8009e9a:	6021      	strmi	r1, [r4, #0]
 8009e9c:	b91b      	cbnz	r3, 8009ea6 <_printf_i+0x15e>
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	f022 0220 	bic.w	r2, r2, #32
 8009ea4:	6022      	str	r2, [r4, #0]
 8009ea6:	2210      	movs	r2, #16
 8009ea8:	e7b7      	b.n	8009e1a <_printf_i+0xd2>
 8009eaa:	064d      	lsls	r5, r1, #25
 8009eac:	bf48      	it	mi
 8009eae:	b29b      	uxthmi	r3, r3
 8009eb0:	e7ef      	b.n	8009e92 <_printf_i+0x14a>
 8009eb2:	4665      	mov	r5, ip
 8009eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eb8:	fb02 3311 	mls	r3, r2, r1, r3
 8009ebc:	5cc3      	ldrb	r3, [r0, r3]
 8009ebe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d1f5      	bne.n	8009eb4 <_printf_i+0x16c>
 8009ec8:	e7b9      	b.n	8009e3e <_printf_i+0xf6>
 8009eca:	6813      	ldr	r3, [r2, #0]
 8009ecc:	6825      	ldr	r5, [r4, #0]
 8009ece:	6961      	ldr	r1, [r4, #20]
 8009ed0:	1d18      	adds	r0, r3, #4
 8009ed2:	6010      	str	r0, [r2, #0]
 8009ed4:	0628      	lsls	r0, r5, #24
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	d501      	bpl.n	8009ede <_printf_i+0x196>
 8009eda:	6019      	str	r1, [r3, #0]
 8009edc:	e002      	b.n	8009ee4 <_printf_i+0x19c>
 8009ede:	066a      	lsls	r2, r5, #25
 8009ee0:	d5fb      	bpl.n	8009eda <_printf_i+0x192>
 8009ee2:	8019      	strh	r1, [r3, #0]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6123      	str	r3, [r4, #16]
 8009ee8:	4665      	mov	r5, ip
 8009eea:	e7b9      	b.n	8009e60 <_printf_i+0x118>
 8009eec:	6813      	ldr	r3, [r2, #0]
 8009eee:	1d19      	adds	r1, r3, #4
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	681d      	ldr	r5, [r3, #0]
 8009ef4:	6862      	ldr	r2, [r4, #4]
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7f6 f969 	bl	80001d0 <memchr>
 8009efe:	b108      	cbz	r0, 8009f04 <_printf_i+0x1bc>
 8009f00:	1b40      	subs	r0, r0, r5
 8009f02:	6060      	str	r0, [r4, #4]
 8009f04:	6863      	ldr	r3, [r4, #4]
 8009f06:	6123      	str	r3, [r4, #16]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f0e:	e7a7      	b.n	8009e60 <_printf_i+0x118>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	462a      	mov	r2, r5
 8009f14:	4639      	mov	r1, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	47c0      	blx	r8
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d0aa      	beq.n	8009e74 <_printf_i+0x12c>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	079b      	lsls	r3, r3, #30
 8009f22:	d413      	bmi.n	8009f4c <_printf_i+0x204>
 8009f24:	68e0      	ldr	r0, [r4, #12]
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	4298      	cmp	r0, r3
 8009f2a:	bfb8      	it	lt
 8009f2c:	4618      	movlt	r0, r3
 8009f2e:	e7a3      	b.n	8009e78 <_printf_i+0x130>
 8009f30:	2301      	movs	r3, #1
 8009f32:	464a      	mov	r2, r9
 8009f34:	4639      	mov	r1, r7
 8009f36:	4630      	mov	r0, r6
 8009f38:	47c0      	blx	r8
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d09a      	beq.n	8009e74 <_printf_i+0x12c>
 8009f3e:	3501      	adds	r5, #1
 8009f40:	68e3      	ldr	r3, [r4, #12]
 8009f42:	9a03      	ldr	r2, [sp, #12]
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	42ab      	cmp	r3, r5
 8009f48:	dcf2      	bgt.n	8009f30 <_printf_i+0x1e8>
 8009f4a:	e7eb      	b.n	8009f24 <_printf_i+0x1dc>
 8009f4c:	2500      	movs	r5, #0
 8009f4e:	f104 0919 	add.w	r9, r4, #25
 8009f52:	e7f5      	b.n	8009f40 <_printf_i+0x1f8>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1ac      	bne.n	8009eb2 <_printf_i+0x16a>
 8009f58:	7803      	ldrb	r3, [r0, #0]
 8009f5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f62:	e76c      	b.n	8009e3e <_printf_i+0xf6>
 8009f64:	0800a425 	.word	0x0800a425
 8009f68:	0800a436 	.word	0x0800a436

08009f6c <__sread>:
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	460c      	mov	r4, r1
 8009f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f74:	f000 f8d4 	bl	800a120 <_read_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	bfab      	itete	ge
 8009f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f80:	181b      	addge	r3, r3, r0
 8009f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f86:	bfac      	ite	ge
 8009f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f8a:	81a3      	strhlt	r3, [r4, #12]
 8009f8c:	bd10      	pop	{r4, pc}

08009f8e <__swrite>:
 8009f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f92:	461f      	mov	r7, r3
 8009f94:	898b      	ldrh	r3, [r1, #12]
 8009f96:	05db      	lsls	r3, r3, #23
 8009f98:	4605      	mov	r5, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	4616      	mov	r6, r2
 8009f9e:	d505      	bpl.n	8009fac <__swrite+0x1e>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	f000 f868 	bl	800a07c <_lseek_r>
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fb6:	81a3      	strh	r3, [r4, #12]
 8009fb8:	4632      	mov	r2, r6
 8009fba:	463b      	mov	r3, r7
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc2:	f000 b817 	b.w	8009ff4 <_write_r>

08009fc6 <__sseek>:
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fce:	f000 f855 	bl	800a07c <_lseek_r>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	bf15      	itete	ne
 8009fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fe2:	81a3      	strheq	r3, [r4, #12]
 8009fe4:	bf18      	it	ne
 8009fe6:	81a3      	strhne	r3, [r4, #12]
 8009fe8:	bd10      	pop	{r4, pc}

08009fea <__sclose>:
 8009fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fee:	f000 b813 	b.w	800a018 <_close_r>
	...

08009ff4 <_write_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4c07      	ldr	r4, [pc, #28]	; (800a014 <_write_r+0x20>)
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	2200      	movs	r2, #0
 800a000:	6022      	str	r2, [r4, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	f7f6 fadb 	bl	80005be <_write>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_write_r+0x1e>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_write_r+0x1e>
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	200050c0 	.word	0x200050c0

0800a018 <_close_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4c06      	ldr	r4, [pc, #24]	; (800a034 <_close_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4605      	mov	r5, r0
 800a020:	4608      	mov	r0, r1
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	f7f8 f98f 	bl	8002346 <_close>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_close_r+0x1a>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_close_r+0x1a>
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	200050c0 	.word	0x200050c0

0800a038 <_fstat_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4c07      	ldr	r4, [pc, #28]	; (800a058 <_fstat_r+0x20>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4605      	mov	r5, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	f7f8 f98a 	bl	800235e <_fstat>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d102      	bne.n	800a054 <_fstat_r+0x1c>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	b103      	cbz	r3, 800a054 <_fstat_r+0x1c>
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	200050c0 	.word	0x200050c0

0800a05c <_isatty_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4c06      	ldr	r4, [pc, #24]	; (800a078 <_isatty_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4605      	mov	r5, r0
 800a064:	4608      	mov	r0, r1
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	f7f8 f989 	bl	800237e <_isatty>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_isatty_r+0x1a>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	b103      	cbz	r3, 800a076 <_isatty_r+0x1a>
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	200050c0 	.word	0x200050c0

0800a07c <_lseek_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4c07      	ldr	r4, [pc, #28]	; (800a09c <_lseek_r+0x20>)
 800a080:	4605      	mov	r5, r0
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	2200      	movs	r2, #0
 800a088:	6022      	str	r2, [r4, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f7f8 f982 	bl	8002394 <_lseek>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_lseek_r+0x1e>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	b103      	cbz	r3, 800a09a <_lseek_r+0x1e>
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	200050c0 	.word	0x200050c0

0800a0a0 <memmove>:
 800a0a0:	4288      	cmp	r0, r1
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	eb01 0302 	add.w	r3, r1, r2
 800a0a8:	d807      	bhi.n	800a0ba <memmove+0x1a>
 800a0aa:	1e42      	subs	r2, r0, #1
 800a0ac:	4299      	cmp	r1, r3
 800a0ae:	d00a      	beq.n	800a0c6 <memmove+0x26>
 800a0b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a0b8:	e7f8      	b.n	800a0ac <memmove+0xc>
 800a0ba:	4283      	cmp	r3, r0
 800a0bc:	d9f5      	bls.n	800a0aa <memmove+0xa>
 800a0be:	1881      	adds	r1, r0, r2
 800a0c0:	1ad2      	subs	r2, r2, r3
 800a0c2:	42d3      	cmn	r3, r2
 800a0c4:	d100      	bne.n	800a0c8 <memmove+0x28>
 800a0c6:	bd10      	pop	{r4, pc}
 800a0c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a0d0:	e7f7      	b.n	800a0c2 <memmove+0x22>

0800a0d2 <_realloc_r>:
 800a0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	4614      	mov	r4, r2
 800a0d8:	460e      	mov	r6, r1
 800a0da:	b921      	cbnz	r1, 800a0e6 <_realloc_r+0x14>
 800a0dc:	4611      	mov	r1, r2
 800a0de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0e2:	f7fe bf83 	b.w	8008fec <_malloc_r>
 800a0e6:	b922      	cbnz	r2, 800a0f2 <_realloc_r+0x20>
 800a0e8:	f7fe ff32 	bl	8008f50 <_free_r>
 800a0ec:	4625      	mov	r5, r4
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f2:	f000 f827 	bl	800a144 <_malloc_usable_size_r>
 800a0f6:	42a0      	cmp	r0, r4
 800a0f8:	d20f      	bcs.n	800a11a <_realloc_r+0x48>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	f7fe ff75 	bl	8008fec <_malloc_r>
 800a102:	4605      	mov	r5, r0
 800a104:	2800      	cmp	r0, #0
 800a106:	d0f2      	beq.n	800a0ee <_realloc_r+0x1c>
 800a108:	4631      	mov	r1, r6
 800a10a:	4622      	mov	r2, r4
 800a10c:	f7fe ff0c 	bl	8008f28 <memcpy>
 800a110:	4631      	mov	r1, r6
 800a112:	4638      	mov	r0, r7
 800a114:	f7fe ff1c 	bl	8008f50 <_free_r>
 800a118:	e7e9      	b.n	800a0ee <_realloc_r+0x1c>
 800a11a:	4635      	mov	r5, r6
 800a11c:	e7e7      	b.n	800a0ee <_realloc_r+0x1c>
	...

0800a120 <_read_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4c07      	ldr	r4, [pc, #28]	; (800a140 <_read_r+0x20>)
 800a124:	4605      	mov	r5, r0
 800a126:	4608      	mov	r0, r1
 800a128:	4611      	mov	r1, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	f7f8 f8ec 	bl	800230c <_read>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_read_r+0x1e>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_read_r+0x1e>
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	200050c0 	.word	0x200050c0

0800a144 <_malloc_usable_size_r>:
 800a144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a148:	1f18      	subs	r0, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfbc      	itt	lt
 800a14e:	580b      	ldrlt	r3, [r1, r0]
 800a150:	18c0      	addlt	r0, r0, r3
 800a152:	4770      	bx	lr

0800a154 <_init>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr

0800a160 <_fini>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr
