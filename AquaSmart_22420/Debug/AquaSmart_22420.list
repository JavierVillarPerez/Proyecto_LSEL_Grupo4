
AquaSmart_22420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e4  080088e4  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088ec  080088ec  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080088f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb4  20000114  08008a08  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc8  08008a08  00024cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a18  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000348f  00000000  00000000  00039b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  0003cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  0003e188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d1b  00000000  00000000  0003f198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001025a  00000000  00000000  00063eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2b8f  00000000  00000000  0007410d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  00146d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800864c 	.word	0x0800864c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800864c 	.word	0x0800864c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SX1278_hw_init>:
#include "main.h"
//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000578:	2101      	movs	r1, #1
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f80d 	bl	800059a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6858      	ldr	r0, [r3, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	b29b      	uxth	r3, r3
 800058a:	2201      	movs	r2, #1
 800058c:	4619      	mov	r1, r3
 800058e:	f002 fd4d 	bl	800302c <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6958      	ldr	r0, [r3, #20]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	b299      	uxth	r1, r3
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	bf0c      	ite	eq
 80005b4:	2301      	moveq	r3, #1
 80005b6:	2300      	movne	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	f002 fd36 	bl	800302c <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005d0:	2101      	movs	r1, #1
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff ffe1 	bl	800059a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6858      	ldr	r0, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	f002 fd21 	bl	800302c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 f855 	bl	800069a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6858      	ldr	r0, [r3, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	2201      	movs	r2, #1
 80005fc:	4619      	mov	r1, r3
 80005fe:	f002 fd15 	bl	800302c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000602:	2064      	movs	r0, #100	; 0x64
 8000604:	f000 f849 	bl	800069a <SX1278_hw_DelayMs>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffbb 	bl	800059a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6998      	ldr	r0, [r3, #24]
 8000628:	1cf9      	adds	r1, r7, #3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	2201      	movs	r2, #1
 8000630:	f003 f9a8 	bl	8003984 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000634:	bf00      	nop
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fc78 	bl	8003f30 <HAL_SPI_GetState>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d1f7      	bne.n	8000636 <SX1278_hw_SPICommand+0x26>
		;
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af02      	add	r7, sp, #8
 8000654:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800065a:	2300      	movs	r3, #0
 800065c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800065e:	2100      	movs	r1, #0
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff9a 	bl	800059a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6998      	ldr	r0, [r3, #24]
 800066a:	f107 020e 	add.w	r2, r7, #14
 800066e:	f107 010f 	add.w	r1, r7, #15
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2301      	movs	r3, #1
 800067a:	f003 fab7 	bl	8003bec <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800067e:	bf00      	nop
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fc53 	bl	8003f30 <HAL_SPI_GetState>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d1f7      	bne.n	8000680 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000690:	7bbb      	ldrb	r3, [r7, #14]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f001 fea0 	bl	80023e8 <HAL_Delay>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	4610      	mov	r0, r2
 80006c6:	f002 fc99 	bl	8002ffc <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	bf0c      	ite	eq
 80006d0:	2301      	moveq	r3, #1
 80006d2:	2300      	movne	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b084      	sub	sp, #16
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	78fa      	ldrb	r2, [r7, #3]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff8c 	bl	8000610 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffa6 	bl	800064e <SX1278_hw_SPIReadByte>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff44 	bl	800059a <SX1278_hw_SetNSS>
	return tmp;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
 8000728:	4613      	mov	r3, r2
 800072a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff31 	bl	800059a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	4610      	mov	r0, r2
 8000748:	f7ff ff62 	bl	8000610 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	78ba      	ldrb	r2, [r7, #2]
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff5b 	bl	8000610 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff1a 	bl	800059a <SX1278_hw_SetNSS>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 800076e:	b590      	push	{r4, r7, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	461a      	mov	r2, r3
 800077a:	460b      	mov	r3, r1
 800077c:	72fb      	strb	r3, [r7, #11]
 800077e:	4613      	mov	r3, r2
 8000780:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000782:	7abb      	ldrb	r3, [r7, #10]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d927      	bls.n	80007d8 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff03 	bl	800059a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7afa      	ldrb	r2, [r7, #11]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff37 	bl	8000610 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	75fb      	strb	r3, [r7, #23]
 80007a6:	e00c      	b.n	80007c2 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	18d4      	adds	r4, r2, r3
 80007b2:	4608      	mov	r0, r1
 80007b4:	f7ff ff4b 	bl	800064e <SX1278_hw_SPIReadByte>
 80007b8:	4603      	mov	r3, r0
 80007ba:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	3301      	adds	r3, #1
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	7dfa      	ldrb	r2, [r7, #23]
 80007c4:	7abb      	ldrb	r3, [r7, #10]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3ee      	bcc.n	80007a8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fee2 	bl	800059a <SX1278_hw_SetNSS>
 80007d6:	e000      	b.n	80007da <SX1278_SPIBurstRead+0x6c>
		return;
 80007d8:	bf00      	nop
	}
}
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}

080007e0 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	461a      	mov	r2, r3
 80007ec:	460b      	mov	r3, r1
 80007ee:	72fb      	strb	r3, [r7, #11]
 80007f0:	4613      	mov	r3, r2
 80007f2:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80007f4:	7abb      	ldrb	r3, [r7, #10]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d929      	bls.n	800084e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff feca 	bl	800059a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	4610      	mov	r0, r2
 8000816:	f7ff fefb 	bl	8000610 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	75fb      	strb	r3, [r7, #23]
 800081e:	e00b      	b.n	8000838 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f7ff feef 	bl	8000610 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	3301      	adds	r3, #1
 8000836:	75fb      	strb	r3, [r7, #23]
 8000838:	7dfa      	ldrb	r2, [r7, #23]
 800083a:	7abb      	ldrb	r3, [r7, #10]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3ef      	bcc.n	8000820 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fea7 	bl	800059a <SX1278_hw_SetNSS>
 800084c:	e000      	b.n	8000850 <SX1278_SPIBurstWrite+0x70>
		return;
 800084e:	bf00      	nop
	}
}
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af02      	add	r7, sp, #8
 800085c:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7919      	ldrb	r1, [r3, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795a      	ldrb	r2, [r3, #5]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7998      	ldrb	r0, [r3, #6]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	79db      	ldrb	r3, [r3, #7]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4603      	mov	r3, r0
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 f804 	bl	8000880 <SX1278_config>
			module->LoRa_BW);
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4603      	mov	r3, r0
 8000890:	70fb      	strb	r3, [r7, #3]
 8000892:	460b      	mov	r3, r1
 8000894:	70bb      	strb	r3, [r7, #2]
 8000896:	4613      	mov	r3, r2
 8000898:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f8aa 	bl	80009f4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80008a0:	200f      	movs	r0, #15
 80008a2:	f7ff fefa 	bl	800069a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f8b4 	bl	8000a14 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80008ac:	78fa      	ldrb	r2, [r7, #3]
 80008ae:	4613      	mov	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	4a43      	ldr	r2, [pc, #268]	; (80009c4 <SX1278_config+0x144>)
 80008b6:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80008b8:	2303      	movs	r3, #3
 80008ba:	2106      	movs	r1, #6
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff8f 	bl	80007e0 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80008c2:	78bb      	ldrb	r3, [r7, #2]
 80008c4:	4a40      	ldr	r2, [pc, #256]	; (80009c8 <SX1278_config+0x148>)
 80008c6:	5cd3      	ldrb	r3, [r2, r3]
 80008c8:	461a      	mov	r2, r3
 80008ca:	2109      	movs	r1, #9
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff25 	bl	800071c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80008d2:	220b      	movs	r2, #11
 80008d4:	210b      	movs	r1, #11
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff20 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80008dc:	2223      	movs	r2, #35	; 0x23
 80008de:	210c      	movs	r1, #12
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff1b 	bl	800071c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80008e6:	787b      	ldrb	r3, [r7, #1]
 80008e8:	4a38      	ldr	r2, [pc, #224]	; (80009cc <SX1278_config+0x14c>)
 80008ea:	5cd3      	ldrb	r3, [r2, r3]
 80008ec:	2b06      	cmp	r3, #6
 80008ee:	d131      	bne.n	8000954 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008f0:	7e3b      	ldrb	r3, [r7, #24]
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <SX1278_config+0x150>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008fa:	3303      	adds	r3, #3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	211d      	movs	r1, #29
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff0a 	bl	800071c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000908:	787b      	ldrb	r3, [r7, #1]
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <SX1278_config+0x14c>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000912:	3307      	adds	r3, #7
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	211e      	movs	r1, #30
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fefe 	bl	800071c <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000920:	2131      	movs	r1, #49	; 0x31
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fedb 	bl	80006de <SX1278_SPIRead>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	f023 0307 	bic.w	r3, r3, #7
 8000932:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f043 0305 	orr.w	r3, r3, #5
 800093a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	461a      	mov	r2, r3
 8000940:	2131      	movs	r1, #49	; 0x31
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff feea 	bl	800071c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000948:	220c      	movs	r2, #12
 800094a:	2137      	movs	r1, #55	; 0x37
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fee5 	bl	800071c <SX1278_SPIWrite>
 8000952:	e017      	b.n	8000984 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000954:	7e3b      	ldrb	r3, [r7, #24]
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <SX1278_config+0x150>)
 8000958:	5cd3      	ldrb	r3, [r2, r3]
 800095a:	011b      	lsls	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800095e:	3302      	adds	r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	211d      	movs	r1, #29
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fed8 	bl	800071c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800096c:	787b      	ldrb	r3, [r7, #1]
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <SX1278_config+0x14c>)
 8000970:	5cd3      	ldrb	r3, [r2, r3]
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000976:	3307      	adds	r3, #7
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	211e      	movs	r1, #30
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fecc 	bl	800071c <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	211f      	movs	r1, #31
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fec7 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fec2 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000998:	220c      	movs	r2, #12
 800099a:	2121      	movs	r1, #33	; 0x21
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff febd 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80009a2:	2201      	movs	r2, #1
 80009a4:	2141      	movs	r1, #65	; 0x41
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff feb8 	bl	800071c <SX1278_SPIWrite>
	module->readBytes = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f80d 	bl	80009d4 <SX1278_standby>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	08008724 	.word	0x08008724
 80009c8:	08008728 	.word	0x08008728
 80009cc:	0800872c 	.word	0x0800872c
 80009d0:	08008734 	.word	0x08008734

080009d4 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80009dc:	2209      	movs	r2, #9
 80009de:	2101      	movs	r1, #1
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fe9b 	bl	800071c <SX1278_SPIWrite>
	module->status = STANDBY;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	725a      	strb	r2, [r3, #9]
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80009fc:	2208      	movs	r2, #8
 80009fe:	2101      	movs	r1, #1
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fe8b 	bl	800071c <SX1278_SPIWrite>
	module->status = SLEEP;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	725a      	strb	r2, [r3, #9]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000a1c:	2288      	movs	r2, #136	; 0x88
 8000a1e:	2101      	movs	r1, #1
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fe7b 	bl	800071c <SX1278_SPIWrite>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000a36:	22ff      	movs	r2, #255	; 0xff
 8000a38:	2112      	movs	r1, #18
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fe6e 	bl	800071c <SX1278_SPIWrite>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	460b      	mov	r3, r1
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	7afa      	ldrb	r2, [r7, #11]
 8000a5a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fefa 	bl	8000856 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000a62:	2284      	movs	r2, #132	; 0x84
 8000a64:	214d      	movs	r1, #77	; 0x4d
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fe58 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000a6c:	22ff      	movs	r2, #255	; 0xff
 8000a6e:	2124      	movs	r1, #36	; 0x24
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fe53 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000a76:	2201      	movs	r2, #1
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f7ff fe4e 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a80:	223f      	movs	r2, #63	; 0x3f
 8000a82:	2111      	movs	r1, #17
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff fe49 	bl	800071c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f7ff ffcf 	bl	8000a2e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000a90:	7afb      	ldrb	r3, [r7, #11]
 8000a92:	461a      	mov	r2, r3
 8000a94:	2122      	movs	r1, #34	; 0x22
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fe40 	bl	800071c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff fe1d 	bl	80006de <SX1278_SPIRead>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	210d      	movs	r1, #13
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fe34 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ab4:	228d      	movs	r2, #141	; 0x8d
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff fe2f 	bl	800071c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ac6:	2118      	movs	r1, #24
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fe08 	bl	80006de <SX1278_SPIRead>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d104      	bne.n	8000ae2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2203      	movs	r2, #3
 8000adc:	725a      	strb	r2, [r3, #9]
			return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e013      	b.n	8000b0a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d109      	bne.n	8000b02 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd68 	bl	80005c8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff feac 	bl	8000856 <SX1278_defaultConfig>
			return 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e003      	b.n	8000b0a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fdc9 	bl	800069a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b08:	e7dd      	b.n	8000ac6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fdc6 	bl	80006b0 <SX1278_hw_GetDIO0>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d030      	beq.n	8000b8c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	330a      	adds	r3, #10
 8000b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f006 fce2 	bl	80074fe <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fdce 	bl	80006de <SX1278_SPIRead>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	210d      	movs	r1, #13
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fde5 	bl	800071c <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	799b      	ldrb	r3, [r3, #6]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a1b      	ldrb	r3, [r3, #8]
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e005      	b.n	8000b6e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000b62:	2113      	movs	r1, #19
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fdba 	bl	80006de <SX1278_SPIRead>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 020a 	add.w	r2, r3, #10
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2100      	movs	r1, #0
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fdf8 	bl	800076e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff51 	bl	8000a2e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	7afa      	ldrb	r2, [r7, #11]
 8000bac:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fe51 	bl	8000856 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000bb4:	2287      	movs	r2, #135	; 0x87
 8000bb6:	214d      	movs	r1, #77	; 0x4d
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff fdaf 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2124      	movs	r1, #36	; 0x24
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fdaa 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000bc8:	2241      	movs	r2, #65	; 0x41
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff fda5 	bl	800071c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff ff2b 	bl	8000a2e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000bd8:	22f7      	movs	r2, #247	; 0xf7
 8000bda:	2111      	movs	r1, #17
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fd9d 	bl	800071c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000be2:	7afb      	ldrb	r3, [r7, #11]
 8000be4:	461a      	mov	r2, r3
 8000be6:	2122      	movs	r1, #34	; 0x22
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff fd97 	bl	800071c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000bee:	210e      	movs	r1, #14
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff fd74 	bl	80006de <SX1278_SPIRead>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	210d      	movs	r1, #13
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff fd8b 	bl	800071c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000c06:	2122      	movs	r1, #34	; 0x22
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fd68 	bl	80006de <SX1278_SPIRead>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000c12:	7dba      	ldrb	r2, [r7, #22]
 8000c14:	7afb      	ldrb	r3, [r7, #11]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	725a      	strb	r2, [r3, #9]
			return 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e00e      	b.n	8000c42 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1ea      	bne.n	8000c06 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fcc7 	bl	80005c8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff fe0b 	bl	8000856 <SX1278_defaultConfig>
			return 0;
 8000c40:	2300      	movs	r3, #0
		}
	}
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4613      	mov	r3, r2
 8000c58:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	2100      	movs	r1, #0
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f7ff fdbd 	bl	80007e0 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000c66:	228b      	movs	r2, #139	; 0x8b
 8000c68:	2101      	movs	r1, #1
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff fd56 	bl	800071c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fd1b 	bl	80006b0 <SX1278_hw_GetDIO0>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00b      	beq.n	8000c98 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000c80:	2112      	movs	r1, #18
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f7ff fd2b 	bl	80006de <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fed0 	bl	8000a2e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fea0 	bl	80009d4 <SX1278_standby>
			return 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e013      	b.n	8000cc0 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fc8d 	bl	80005c8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff fdd1 	bl	8000856 <SX1278_defaultConfig>
			return 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e003      	b.n	8000cc0 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fcee 	bl	800069a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000cbe:	e7d7      	b.n	8000c70 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	70fb      	strb	r3, [r7, #3]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	70bb      	strb	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc42 	bl	8000570 <SX1278_hw_init>
	module->frequency = frequency;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	78fa      	ldrb	r2, [r7, #3]
 8000cf0:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	78ba      	ldrb	r2, [r7, #2]
 8000cf6:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	787a      	ldrb	r2, [r7, #1]
 8000cfc:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7c3a      	ldrb	r2, [r7, #16]
 8000d02:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7d3a      	ldrb	r2, [r7, #20]
 8000d08:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fda3 	bl	8000856 <SX1278_defaultConfig>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	4613      	mov	r3, r2
 8000d24:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d003      	beq.n	8000d3a <SX1278_read+0x22>
		length = module->readBytes;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d38:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	330a      	adds	r3, #10
 8000d3e:	79fa      	ldrb	r2, [r7, #7]
 8000d40:	4619      	mov	r1, r3
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f006 fbd0 	bl	80074e8 <memcpy>
	rxBuf[length] = '\0';
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <PreSleepProcessing>:
void PreSleepProcessing(uint32_t *ulExpectedIdleTime);
void PostSleepProcessing(uint32_t *ulExpectedIdleTime);

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	e01c      	b.n	8000dfa <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d113      	bne.n	8000df4 <fsm_fire+0x44>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	4798      	blx	r3
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00c      	beq.n	8000df4 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <fsm_fire+0x54>
        t->out(this);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
      break;
 8000df2:	e007      	b.n	8000e04 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3310      	adds	r3, #16
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dade      	bge.n	8000dc0 <fsm_fire+0x10>
    }
  }
}
 8000e02:	e000      	b.n	8000e06 <fsm_fire+0x56>
      break;
 8000e04:	bf00      	nop
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	2301      	movs	r3, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <error>:

int error (fsm_t* this) {
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <error+0x26>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	889a      	ldrh	r2, [r3, #4]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d901      	bls.n	8000e4e <error+0x2a>
		return 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <error+0x2c>
	else return 0;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <no_error>:

int no_error (fsm_t* this) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	889b      	ldrh	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <no_error+0x2a>
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	889a      	ldrh	r2, [r3, #4]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d801      	bhi.n	8000e86 <no_error+0x2a>
		return 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <no_error+0x2c>
	else return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <timer_sleep+0x2c>
 8000eae:	f001 fa8f 	bl	80023d0 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d301      	bcc.n	8000ec0 <timer_sleep+0x2c>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <timer_sleep+0x2e>
	else return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <timer_adc>:

int timer_adc (fsm_t* this) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>adc_timer);
 8000ed4:	f001 fa7c 	bl	80023d0 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <timer_adc+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	bf8c      	ite	hi
 8000ee2:	2301      	movhi	r3, #1
 8000ee4:	2300      	movls	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20004a9c 	.word	0x20004a9c

08000ef4 <timer_setup>:

int timer_setup (fsm_t* this) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000f06:	f001 fa63 	bl	80023d0 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	bf8c      	ite	hi
 8000f14:	2301      	movhi	r3, #1
 8000f16:	2300      	movls	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <warned>:

int warned (fsm_t* this) {
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	bfd4      	ite	le
 8000f3c:	2301      	movle	r3, #1
 8000f3e:	2300      	movgt	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	60bb      	str	r3, [r7, #8]

	if(config->measure_count>=(config->measure_average))
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	7f1b      	ldrb	r3, [r3, #28]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d301      	bcc.n	8000f72 <timer_measure+0x24>
	return 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e009      	b.n	8000f86 <timer_measure+0x38>
	else return (HAL_GetTick()>=(config->measure_timer));
 8000f72:	f001 fa2d 	bl	80023d0 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	bf2c      	ite	cs
 8000f80:	2301      	movcs	r3, #1
 8000f82:	2300      	movcc	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <warning_limit>:

int warning_limit (fsm_t* this) {
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	bfcc      	ite	gt
 8000fa8:	2301      	movgt	r3, #1
 8000faa:	2300      	movle	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <measuring>:

void measuring (fsm_t* this) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 8000fd2:	480f      	ldr	r0, [pc, #60]	; (8001010 <measuring+0x54>)
 8000fd4:	f001 fb67 	bl	80026a6 <HAL_ADC_GetValue>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	885a      	ldrh	r2, [r3, #2]
 8000fe0:	8afb      	ldrh	r3, [r7, #22]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	7f1b      	ldrb	r3, [r3, #28]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 8000ff6:	f001 f9eb 	bl	80023d0 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001000:	4413      	add	r3, r2
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	619a      	str	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20004a54 	.word	0x20004a54

08001014 <process_data>:

void process_data (fsm_t* this) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	885a      	ldrh	r2, [r3, #2]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <process_data+0x50>)
 8001030:	f001 fb06 	bl	8002640 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	889a      	ldrh	r2, [r3, #4]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800103c:	429a      	cmp	r2, r3
 800103e:	d809      	bhi.n	8001054 <process_data+0x40>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	889a      	ldrh	r2, [r3, #4]
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001048:	429a      	cmp	r2, r3
 800104a:	d303      	bcc.n	8001054 <process_data+0x40>
	{
		config->alarm = 0;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2200      	movs	r2, #0
 8001050:	719a      	strb	r2, [r3, #6]
 8001052:	e002      	b.n	800105a <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2201      	movs	r2, #1
 8001058:	719a      	strb	r2, [r3, #6]
	}

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20004a54 	.word	0x20004a54

08001068 <alert>:
void alert (fsm_t* this) {
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	615a      	str	r2, [r3, #20]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <sleep>:

void sleep (fsm_t* this) { // led orange
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 80010a2:	f001 f995 	bl	80023d0 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <sleep+0x5c>)
 80010be:	f001 ffb5 	bl	800302c <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2201      	movs	r2, #1
 80010c6:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2200      	movs	r2, #0
 80010cc:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	dd03      	ble.n	80010de <sleep+0x4e>
	{
		config->error = 1;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2201      	movs	r2, #1
 80010da:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 80010dc:	e002      	b.n	80010e4 <sleep+0x54>
		config->error = 0;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2200      	movs	r2, #0
 80010e2:	71da      	strb	r2, [r3, #7]
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40020c00 	.word	0x40020c00

080010f0 <init_adc>:

void init_adc (fsm_t* this) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <init_adc+0x24>)
 80010fa:	f001 faa1 	bl	8002640 <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 250;	/*Ensure ADC setup*/
 80010fe:	f001 f967 	bl	80023d0 <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
 8001104:	33fa      	adds	r3, #250	; 0xfa
 8001106:	461a      	mov	r2, r3
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <init_adc+0x28>)
 800110a:	601a      	str	r2, [r3, #0]

}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20004a54 	.word	0x20004a54
 8001118:	20004a9c 	.word	0x20004a9c

0800111c <setting_up>:


void setting_up (fsm_t* this) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2200      	movs	r2, #0
 8001132:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2200      	movs	r2, #0
 800113e:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2200      	movs	r2, #0
 8001144:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 8001146:	f001 f943 	bl	80023d0 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001150:	4413      	add	r3, r2
 8001152:	461a      	mov	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800115c:	2201      	movs	r2, #1
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <setting_up+0x64>)
 8001162:	f001 ff63 	bl	800302c <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <setting_up+0x68>)
 8001168:	f001 f9a4 	bl	80024b4 <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2201      	movs	r2, #1
 8001170:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2200      	movs	r2, #0
 8001176:	725a      	strb	r2, [r3, #9]
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020c00 	.word	0x40020c00
 8001184:	20004a54 	.word	0x20004a54

08001188 <save_data>:

void save_data (fsm_t* this)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	8bdb      	ldrh	r3, [r3, #30]
 800119e:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a6:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	79db      	ldrb	r3, [r3, #7]
 80011b2:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011be:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011c4:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	f000 fc09 	bl	80019e4 <save_new_data>
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 80011e6:	4905      	ldr	r1, [pc, #20]	; (80011fc <fsm_sensor_init+0x20>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fdcf 	bl	8000d8c <fsm_init>
  f->param = c;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000

08001200 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	817b      	strh	r3, [r7, #10]
 8001212:	460b      	mov	r3, r1
 8001214:	727b      	strb	r3, [r7, #9]
 8001216:	4613      	mov	r3, r2
 8001218:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	897a      	ldrh	r2, [r7, #10]
 8001266:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7a7a      	ldrb	r2, [r7, #9]
 800126c:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	7e3a      	ldrb	r2, [r7, #24]
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8bba      	ldrh	r2, [r7, #28]
 8001282:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8c3a      	ldrh	r2, [r7, #32]
 8001288:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800128e:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001294:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800129a:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012a0:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012a6:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ba:	f001 f823 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012be:	f000 f879 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c2:	f000 f967 	bl	8001594 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012c6:	f000 f92f 	bl	8001528 <MX_SPI1_Init>
  MX_ADC1_Init();
 80012ca:	f000 f8db 	bl	8001484 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012ce:	f002 fef1 	bl	80040b4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <main+0xac>)
 80012d4:	2134      	movs	r1, #52	; 0x34
 80012d6:	2001      	movs	r0, #1
 80012d8:	f003 f892 	bl	8004400 <osMessageQueueNew>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <main+0xb0>)
 80012e0:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor2_attributes);
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <main+0xb4>)
 80012e4:	2134      	movs	r1, #52	; 0x34
 80012e6:	2001      	movs	r0, #1
 80012e8:	f003 f88a 	bl	8004400 <osMessageQueueNew>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <main+0xb8>)
 80012f0:	601a      	str	r2, [r3, #0]

  /* creation of myQueueDataSaved */
  myQueueDataSavedHandle = osMessageQueueNew (2, sizeof(t_bool), &myQueueDataSaved_attributes);
 80012f2:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <main+0xbc>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	2002      	movs	r0, #2
 80012f8:	f003 f882 	bl	8004400 <osMessageQueueNew>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <main+0xc0>)
 8001300:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <main+0xc4>)
 8001304:	2100      	movs	r1, #0
 8001306:	481d      	ldr	r0, [pc, #116]	; (800137c <main+0xc8>)
 8001308:	f002 ff66 	bl	80041d8 <osThreadNew>
 800130c:	4602      	mov	r2, r0
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <main+0xcc>)
 8001310:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <main+0xd0>)
 8001318:	4619      	mov	r1, r3
 800131a:	481b      	ldr	r0, [pc, #108]	; (8001388 <main+0xd4>)
 800131c:	f002 ff5c 	bl	80041d8 <osThreadNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <main+0xd8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 8001326:	463b      	mov	r3, r7
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <main+0xdc>)
 800132a:	4619      	mov	r1, r3
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <main+0xe0>)
 800132e:	f002 ff53 	bl	80041d8 <osThreadNew>
 8001332:	4602      	mov	r2, r0
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <main+0xe4>)
 8001336:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <main+0xe8>)
 800133a:	2100      	movs	r1, #0
 800133c:	4818      	ldr	r0, [pc, #96]	; (80013a0 <main+0xec>)
 800133e:	f002 ff4b 	bl	80041d8 <osThreadNew>
 8001342:	4602      	mov	r2, r0
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <main+0xf0>)
 8001346:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <main+0xf4>)
 800134a:	2100      	movs	r1, #0
 800134c:	4817      	ldr	r0, [pc, #92]	; (80013ac <main+0xf8>)
 800134e:	f002 ff43 	bl	80041d8 <osThreadNew>
 8001352:	4602      	mov	r2, r0
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <main+0xfc>)
 8001356:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001358:	f002 fee0 	bl	800411c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0xa8>
 800135e:	bf00      	nop
 8001360:	080087f4 	.word	0x080087f4
 8001364:	20004c24 	.word	0x20004c24
 8001368:	0800880c 	.word	0x0800880c
 800136c:	20004aac 	.word	0x20004aac
 8001370:	08008824 	.word	0x08008824
 8001374:	20004ab8 	.word	0x20004ab8
 8001378:	08008740 	.word	0x08008740
 800137c:	08001a09 	.word	0x08001a09
 8001380:	20004aa4 	.word	0x20004aa4
 8001384:	08008764 	.word	0x08008764
 8001388:	08001a19 	.word	0x08001a19
 800138c:	20004ab4 	.word	0x20004ab4
 8001390:	08008788 	.word	0x08008788
 8001394:	08001b49 	.word	0x08001b49
 8001398:	20004c28 	.word	0x20004c28
 800139c:	080087ac 	.word	0x080087ac
 80013a0:	08001c79 	.word	0x08001c79
 80013a4:	20004b14 	.word	0x20004b14
 80013a8:	080087d0 	.word	0x080087d0
 80013ac:	08001d8d 	.word	0x08001d8d
 80013b0:	20004aa0 	.word	0x20004aa0

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f006 f89b 	bl	80074fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <SystemClock_Config+0xc8>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <SystemClock_Config+0xc8>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <SystemClock_Config+0xc8>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <SystemClock_Config+0xcc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <SystemClock_Config+0xcc>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <SystemClock_Config+0xcc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001410:	2301      	movs	r3, #1
 8001412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001428:	2348      	movs	r3, #72	; 0x48
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001430:	2303      	movs	r3, #3
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fe11 	bl	8003060 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001444:	f000 fce8 	bl	8001e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f002 f86b 	bl	8003540 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001470:	f000 fcd2 	bl	8001e18 <Error_Handler>
  }
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	; 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_ADC1_Init+0x98>)
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <MX_ADC1_Init+0x9c>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_ADC1_Init+0x98>)
 80014a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_ADC1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_ADC1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_ADC1_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_ADC1_Init+0x98>)
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <MX_ADC1_Init+0xa0>)
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_ADC1_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_ADC1_Init+0x98>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_ADC1_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_ADC1_Init+0x98>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_ADC1_Init+0x98>)
 80014e6:	f000 ffa1 	bl	800242c <HAL_ADC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 fc92 	bl	8001e18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_ADC1_Init+0x98>)
 8001506:	f001 f8db 	bl	80026c0 <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001510:	f000 fc82 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20004a54 	.word	0x20004a54
 8001520:	40012000 	.word	0x40012000
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_SPI1_Init+0x64>)
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <MX_SPI1_Init+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_SPI1_Init+0x64>)
 8001534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_SPI1_Init+0x64>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_SPI1_Init+0x64>)
 800155c:	2208      	movs	r2, #8
 800155e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_SPI1_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_SPI1_Init+0x64>)
 8001574:	220a      	movs	r2, #10
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_SPI1_Init+0x64>)
 800157a:	f002 f99f 	bl	80038bc <HAL_SPI_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001584:	f000 fc48 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20004abc 	.word	0x20004abc
 8001590:	40013000 	.word	0x40013000

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	4ba4      	ldr	r3, [pc, #656]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4aa3      	ldr	r2, [pc, #652]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4ba1      	ldr	r3, [pc, #644]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	4b9d      	ldr	r3, [pc, #628]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a9c      	ldr	r2, [pc, #624]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b96      	ldr	r3, [pc, #600]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a95      	ldr	r2, [pc, #596]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b93      	ldr	r3, [pc, #588]	; (8001840 <MX_GPIO_Init+0x2ac>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a8e      	ldr	r2, [pc, #568]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b8c      	ldr	r3, [pc, #560]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a87      	ldr	r2, [pc, #540]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <MX_GPIO_Init+0x2ac>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <MX_GPIO_Init+0x2ac>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a80      	ldr	r2, [pc, #512]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <MX_GPIO_Init+0x2ac>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2108      	movs	r1, #8
 8001656:	487b      	ldr	r0, [pc, #492]	; (8001844 <MX_GPIO_Init+0x2b0>)
 8001658:	f001 fce8 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2101      	movs	r1, #1
 8001660:	4879      	ldr	r0, [pc, #484]	; (8001848 <MX_GPIO_Init+0x2b4>)
 8001662:	f001 fce3 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2110      	movs	r1, #16
 800166a:	4878      	ldr	r0, [pc, #480]	; (800184c <MX_GPIO_Init+0x2b8>)
 800166c:	f001 fcde 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2102      	movs	r1, #2
 8001674:	4876      	ldr	r0, [pc, #472]	; (8001850 <MX_GPIO_Init+0x2bc>)
 8001676:	f001 fcd9 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800167a:	2200      	movs	r2, #0
 800167c:	f24f 0152 	movw	r1, #61522	; 0xf052
 8001680:	4874      	ldr	r0, [pc, #464]	; (8001854 <MX_GPIO_Init+0x2c0>)
 8001682:	f001 fcd3 	bl	800302c <HAL_GPIO_WritePin>
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001686:	2308      	movs	r3, #8
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4869      	ldr	r0, [pc, #420]	; (8001844 <MX_GPIO_Init+0x2b0>)
 800169e:	f001 fb13 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4863      	ldr	r0, [pc, #396]	; (8001848 <MX_GPIO_Init+0x2b4>)
 80016ba:	f001 fb05 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016be:	2308      	movs	r3, #8
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ce:	2305      	movs	r3, #5
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	485b      	ldr	r0, [pc, #364]	; (8001848 <MX_GPIO_Init+0x2b4>)
 80016da:	f001 faf5 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016de:	2301      	movs	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016e2:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <MX_GPIO_Init+0x2c4>)
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4856      	ldr	r0, [pc, #344]	; (800184c <MX_GPIO_Init+0x2b8>)
 80016f2:	f001 fae9 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80016f6:	2310      	movs	r3, #16
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	484f      	ldr	r0, [pc, #316]	; (800184c <MX_GPIO_Init+0x2b8>)
 800170e:	f001 fadb 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin MODE_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8001712:	2305      	movs	r3, #5
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	484a      	ldr	r0, [pc, #296]	; (8001850 <MX_GPIO_Init+0x2bc>)
 8001726:	f001 facf 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800172a:	2302      	movs	r3, #2
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4843      	ldr	r0, [pc, #268]	; (8001850 <MX_GPIO_Init+0x2bc>)
 8001742:	f001 fac1 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001758:	2305      	movs	r3, #5
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	483b      	ldr	r0, [pc, #236]	; (8001850 <MX_GPIO_Init+0x2bc>)
 8001764:	f001 fab0 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor1_Supply_Pin Audio_RST_Pin Sensor2_Supply_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001768:	f24f 0352 	movw	r3, #61522	; 0xf052
 800176c:	61fb      	str	r3, [r7, #28]
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4834      	ldr	r0, [pc, #208]	; (8001854 <MX_GPIO_Init+0x2c0>)
 8001782:	f001 faa1 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001786:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001798:	2306      	movs	r3, #6
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4829      	ldr	r0, [pc, #164]	; (8001848 <MX_GPIO_Init+0x2b4>)
 80017a4:	f001 fa90 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4823      	ldr	r0, [pc, #140]	; (800184c <MX_GPIO_Init+0x2b8>)
 80017be:	f001 fa83 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80017c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017d4:	230a      	movs	r3, #10
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	481b      	ldr	r0, [pc, #108]	; (800184c <MX_GPIO_Init+0x2b8>)
 80017e0:	f001 fa72 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017e4:	2320      	movs	r3, #32
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <MX_GPIO_Init+0x2c0>)
 80017f8:	f001 fa66 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80017fc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180e:	2304      	movs	r3, #4
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_GPIO_Init+0x2bc>)
 800181a:	f001 fa55 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <MX_GPIO_Init+0x2c4>)
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_GPIO_Init+0x2b0>)
 8001832:	f001 fa49 	bl	8002cc8 <HAL_GPIO_Init>

}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40021000 	.word	0x40021000
 8001848:	40020800 	.word	0x40020800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020c00 	.word	0x40020c00
 8001858:	10120000 	.word	0x10120000

0800185c <LoRa_initialization>:

/* USER CODE BEGIN 4 */
void LoRa_initialization(uint8_t init)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af02      	add	r7, sp, #8
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	/*Initialize ring buffer*/
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 8001866:	2104      	movs	r1, #4
 8001868:	4823      	ldr	r0, [pc, #140]	; (80018f8 <LoRa_initialization+0x9c>)
 800186a:	f000 fadc 	bl	8001e26 <ringbuf_init>

	//Initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <LoRa_initialization+0xa0>)
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <LoRa_initialization+0xa4>)
 8001872:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <LoRa_initialization+0xa0>)
 8001876:	2201      	movs	r2, #1
 8001878:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <LoRa_initialization+0xa0>)
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <LoRa_initialization+0xa8>)
 800187e:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <LoRa_initialization+0xa0>)
 8001882:	2210      	movs	r2, #16
 8001884:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <LoRa_initialization+0xa0>)
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <LoRa_initialization+0xa4>)
 800188a:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <LoRa_initialization+0xa0>)
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <LoRa_initialization+0xa0>)
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <LoRa_initialization+0xac>)
 8001896:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <LoRa_initialization+0xb0>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <LoRa_initialization+0xb0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <LoRa_initialization+0xb0>)
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <LoRa_initialization+0xa0>)
 80018aa:	601a      	str	r2, [r3, #0]

	//printf("Configuring LoRa module\r\n");
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 80018ac:	230a      	movs	r3, #10
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2303      	movs	r3, #3
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2302      	movs	r3, #2
 80018b6:	2201      	movs	r2, #1
 80018b8:	2100      	movs	r1, #0
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <LoRa_initialization+0xb0>)
 80018bc:	f7ff fa04 	bl	8000cc8 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	//printf("Done configuring LoRaModule\r\n");
	while (ret!=1){
 80018c0:	e013      	b.n	80018ea <LoRa_initialization+0x8e>
		if (init == 1) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <LoRa_initialization+0x7e>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80018c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018cc:	2110      	movs	r1, #16
 80018ce:	480f      	ldr	r0, [pc, #60]	; (800190c <LoRa_initialization+0xb0>)
 80018d0:	f7ff f963 	bl	8000b9a <SX1278_LoRaEntryTx>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e007      	b.n	80018ea <LoRa_initialization+0x8e>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 80018da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018de:	2110      	movs	r1, #16
 80018e0:	480a      	ldr	r0, [pc, #40]	; (800190c <LoRa_initialization+0xb0>)
 80018e2:	f7ff f8b1 	bl	8000a48 <SX1278_LoRaEntryRx>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73fb      	strb	r3, [r7, #15]
	while (ret!=1){
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d1e8      	bne.n	80018c2 <LoRa_initialization+0x66>
		}
		//printf("ret: %d\n", ret);
	}
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20004c48 	.word	0x20004c48
 80018fc:	20004c2c 	.word	0x20004c2c
 8001900:	40020400 	.word	0x40020400
 8001904:	40020000 	.word	0x40020000
 8001908:	20004abc 	.word	0x20004abc
 800190c:	20004b18 	.word	0x20004b18

08001910 <send_data>:


void send_data(void)
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	b09b      	sub	sp, #108	; 0x6c
 8001914:	af06      	add	r7, sp, #24
	sensor_buf_t data;
	uint8_t ret;
	char buffer[64];
	uint8_t message_length;

	data = ringbuf_get(&data_ring_buff); //Take data from ring buffer.
 8001916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191a:	4921      	ldr	r1, [pc, #132]	; (80019a0 <send_data+0x90>)
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fb02 	bl	8001f26 <ringbuf_get>

	/*Send data by LoRa*/
	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d", data.Device_ID, data.Sensor_ID, data.measure, data.alarm, data.error, data.threshold_L, data.threshold_H);
 8001922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001926:	461e      	mov	r6, r3
 8001928:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800192c:	469c      	mov	ip, r3
 800192e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001932:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001936:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800193a:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 800193e:	4604      	mov	r4, r0
 8001940:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8001944:	4605      	mov	r5, r0
 8001946:	4638      	mov	r0, r7
 8001948:	9504      	str	r5, [sp, #16]
 800194a:	9403      	str	r4, [sp, #12]
 800194c:	9102      	str	r1, [sp, #8]
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4663      	mov	r3, ip
 8001954:	4632      	mov	r2, r6
 8001956:	4913      	ldr	r1, [pc, #76]	; (80019a4 <send_data+0x94>)
 8001958:	f005 feaa 	bl	80076b0 <siprintf>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800196a:	4619      	mov	r1, r3
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <send_data+0x98>)
 800196e:	f7ff f914 	bl	8000b9a <SX1278_LoRaEntryTx>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	printf("Sending %s\r\n", buffer);
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <send_data+0x9c>)
 800197e:	f005 fe6f 	bl	8007660 <iprintf>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 8001982:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001986:	4639      	mov	r1, r7
 8001988:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <send_data+0x98>)
 800198e:	f7ff f95c 	bl	8000c4a <SX1278_LoRaTxPacket>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
}
 8001998:	bf00      	nop
 800199a:	3754      	adds	r7, #84	; 0x54
 800199c:	46bd      	mov	sp, r7
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	20004c48 	.word	0x20004c48
 80019a4:	080086dc 	.word	0x080086dc
 80019a8:	20004b18 	.word	0x20004b18
 80019ac:	080086fc 	.word	0x080086fc

080019b0 <receive_data>:

void receive_data(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b092      	sub	sp, #72	; 0x48
 80019b4:	af00      	add	r7, sp, #0
	uint8_t ret;
	char buffer[64];

	ret = SX1278_LoRaRxPacket(&SX1278);
 80019b6:	480a      	ldr	r0, [pc, #40]	; (80019e0 <receive_data+0x30>)
 80019b8:	f7ff f8ab 	bl	8000b12 <SX1278_LoRaRxPacket>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret > 0) {
 80019c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <receive_data+0x28>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 80019ca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <receive_data+0x30>)
 80019d4:	f7ff f9a0 	bl	8000d18 <SX1278_read>
		//printf("Content (%d): %s\r\n", ret, buffer);
	}
}
 80019d8:	bf00      	nop
 80019da:	3748      	adds	r7, #72	; 0x48
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20004b18 	.word	0x20004b18

080019e4 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ringbuf_put(&data_ring_buff, data);
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <save_new_data+0x20>)
 80019f6:	f000 fa33 	bl	8001e60 <ringbuf_put>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20004c48 	.word	0x20004c48

08001a08 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f002 fc87 	bl	8004324 <osDelay>
 8001a16:	e7fb      	b.n	8001a10 <StartDefaultTask+0x8>

08001a18 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09e      	sub	sp, #120	; 0x78
 8001a1c:	af08      	add	r7, sp, #32
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor1;
	t_bool sensor1_measured = FALSE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	76fb      	strb	r3, [r7, #27]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8001a3a:	f107 001c 	add.w	r0, r7, #28
 8001a3e:	2304      	movs	r3, #4
 8001a40:	9307      	str	r3, [sp, #28]
 8001a42:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a46:	9306      	str	r3, [sp, #24]
 8001a48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a4c:	9305      	str	r3, [sp, #20]
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	9304      	str	r3, [sp, #16]
 8001a54:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2301      	movs	r3, #1
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	f7ff fbc6 	bl	8001200 <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a7c:	f7ff fbae 	bl	80011dc <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8001a80:	f002 fb82 	bl	8004188 <osKernelGetTickCount>
 8001a84:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {

	/*Select ADC Channel 1*/

	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	dc2c      	bgt.n	8001ae8 <StartTaskSensor1+0xd0>
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <StartTaskSensor1+0x11c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d128      	bne.n	8001ae8 <StartTaskSensor1+0xd0>
	{
		sensor1_ON = TRUE;
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <StartTaskSensor1+0x120>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	4823      	ldr	r0, [pc, #140]	; (8001b3c <StartTaskSensor1+0x124>)
 8001ab0:	f000 fe06 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <StartTaskSensor1+0xa6>
		{
			Error_Handler();
 8001aba:	f000 f9ad 	bl	8001e18 <Error_Handler>
		}
		fsm_fire(&(fsm_s1->fsm));
 8001abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f975 	bl	8000db0 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <StartTaskSensor1+0x128>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f002 fd1b 	bl	800450c <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <StartTaskSensor1+0x12c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	f107 011b 	add.w	r1, r7, #27
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f002 fd13 	bl	800450c <osMessageQueuePut>
 8001ae6:	e002      	b.n	8001aee <StartTaskSensor1+0xd6>
	}
	else sensor1_ON = FALSE;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <StartTaskSensor1+0x120>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]

	if(fsm_s1->fsm.current_state > 4)
 8001aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	dd15      	ble.n	8001b22 <StartTaskSensor1+0x10a>
	{
		sensor1_measured = TRUE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	76fb      	strb	r3, [r7, #27]
		fsm_fire(&(fsm_s1->fsm));
 8001afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f957 	bl	8000db0 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <StartTaskSensor1+0x128>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f002 fcfd 	bl	800450c <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <StartTaskSensor1+0x12c>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f107 011b 	add.w	r1, r7, #27
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f002 fcf5 	bl	800450c <osMessageQueuePut>
	}
	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 8001b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b24:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001b28:	657b      	str	r3, [r7, #84]	; 0x54
    osDelayUntil(tDelay);
 8001b2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b2c:	f002 fc28 	bl	8004380 <osDelayUntil>
	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001b30:	e7a9      	b.n	8001a86 <StartTaskSensor1+0x6e>
 8001b32:	bf00      	nop
 8001b34:	20004aa8 	.word	0x20004aa8
 8001b38:	20004ab0 	.word	0x20004ab0
 8001b3c:	20004a54 	.word	0x20004a54
 8001b40:	20004c24 	.word	0x20004c24
 8001b44:	20004ab8 	.word	0x20004ab8

08001b48 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b09e      	sub	sp, #120	; 0x78
 8001b4c:	af08      	add	r7, sp, #32
 8001b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor2;
	t_bool sensor2_measured = FALSE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	76fb      	strb	r3, [r7, #27]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]

	fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	653b      	str	r3, [r7, #80]	; 0x50

	sensor_initialization(&sensor2, ID_Device, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 8001b6a:	f107 001c 	add.w	r0, r7, #28
 8001b6e:	2304      	movs	r3, #4
 8001b70:	9307      	str	r3, [sp, #28]
 8001b72:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001b76:	9306      	str	r3, [sp, #24]
 8001b78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b7c:	9305      	str	r3, [sp, #20]
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	9304      	str	r3, [sp, #16]
 8001b84:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001b88:	9303      	str	r3, [sp, #12]
 8001b8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	2302      	movs	r3, #2
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	f7ff fb2e 	bl	8001200 <sensor_initialization>
	fsm_sensor_init(fsm_s2, &sensor2);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bac:	f7ff fb16 	bl	80011dc <fsm_sensor_init>

	tDelay = osKernelGetTickCount();
 8001bb0:	f002 faea 	bl	8004188 <osKernelGetTickCount>
 8001bb4:	6578      	str	r0, [r7, #84]	; 0x54
	/* Infinite loop */
	/* Infinite loop */
	for(;;)
	{
		/*Select ADC Channel 2*/
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	dc2c      	bgt.n	8001c18 <StartTaskSensor2+0xd0>
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <StartTaskSensor2+0x11c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d128      	bne.n	8001c18 <StartTaskSensor2+0xd0>
		{
			sensor2_ON = TRUE;
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <StartTaskSensor2+0x120>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <StartTaskSensor2+0x124>)
 8001be0:	f000 fd6e 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <StartTaskSensor2+0xa6>
			{
				Error_Handler();
 8001bea:	f000 f915 	bl	8001e18 <Error_Handler>
			}
			fsm_fire(&(fsm_s2->fsm));
 8001bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f8dd 	bl	8000db0 <fsm_fire>
			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <StartTaskSensor2+0x128>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2200      	movs	r2, #0
 8001c02:	f002 fc83 	bl	800450c <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <StartTaskSensor2+0x12c>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f107 011b 	add.w	r1, r7, #27
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	f002 fc7b 	bl	800450c <osMessageQueuePut>
 8001c16:	e002      	b.n	8001c1e <StartTaskSensor2+0xd6>
		}
		else sensor2_ON = FALSE;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <StartTaskSensor2+0x120>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]

		if(fsm_s2->fsm.current_state > 4)
 8001c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	dd15      	ble.n	8001c52 <StartTaskSensor2+0x10a>
		{
			sensor2_measured = TRUE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	76fb      	strb	r3, [r7, #27]
			fsm_fire(&(fsm_s2->fsm));
 8001c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f8bf 	bl	8000db0 <fsm_fire>

			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <StartTaskSensor2+0x128>)
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f002 fc65 	bl	800450c <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <StartTaskSensor2+0x12c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	f107 011b 	add.w	r1, r7, #27
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f002 fc5d 	bl	800450c <osMessageQueuePut>
		}

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c58:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(tDelay);
 8001c5a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c5c:	f002 fb90 	bl	8004380 <osDelayUntil>
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001c60:	e7a9      	b.n	8001bb6 <StartTaskSensor2+0x6e>
 8001c62:	bf00      	nop
 8001c64:	20004ab0 	.word	0x20004ab0
 8001c68:	20004aa8 	.word	0x20004aa8
 8001c6c:	20004a54 	.word	0x20004a54
 8001c70:	20004aac 	.word	0x20004aac
 8001c74:	20004ab8 	.word	0x20004ab8

08001c78 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09e      	sub	sp, #120	; 0x78
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 8001c84:	f002 fa80 	bl	8004188 <osKernelGetTickCount>
 8001c88:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <StartTaskLEDs+0x108>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	f002 fcad 	bl	80045f4 <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <StartTaskLEDs+0x10c>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f107 010c 	add.w	r1, r7, #12
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f002 fca5 	bl	80045f4 <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 8001caa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d002      	beq.n	8001cb8 <StartTaskLEDs+0x40>
 8001cb2:	7d3b      	ldrb	r3, [r7, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10c      	bne.n	8001cd2 <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cbe:	4832      	ldr	r0, [pc, #200]	; (8001d88 <StartTaskLEDs+0x110>)
 8001cc0:	f001 f9b4 	bl	800302c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cca:	482f      	ldr	r0, [pc, #188]	; (8001d88 <StartTaskLEDs+0x110>)
 8001ccc:	f001 f9ae 	bl	800302c <HAL_GPIO_WritePin>
 8001cd0:	e039      	b.n	8001d46 <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 8001cd2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d129      	bne.n	8001d2e <StartTaskLEDs+0xb6>
 8001cda:	7d7b      	ldrb	r3, [r7, #21]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d126      	bne.n	8001d2e <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce6:	4828      	ldr	r0, [pc, #160]	; (8001d88 <StartTaskLEDs+0x110>)
 8001ce8:	f001 f9a0 	bl	800302c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001cec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d002      	beq.n	8001cfa <StartTaskLEDs+0x82>
 8001cf4:	7cfb      	ldrb	r3, [r7, #19]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10c      	bne.n	8001d14 <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	4821      	ldr	r0, [pc, #132]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d02:	f001 f993 	bl	800302c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d0c:	481e      	ldr	r0, [pc, #120]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d0e:	f001 f98d 	bl	800302c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001d12:	e018      	b.n	8001d46 <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1a:	481b      	ldr	r0, [pc, #108]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d1c:	f001 f986 	bl	800302c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d26:	4818      	ldr	r0, [pc, #96]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d28:	f001 f980 	bl	800302c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001d2c:	e00b      	b.n	8001d46 <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d34:	4814      	ldr	r0, [pc, #80]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d36:	f001 f979 	bl	800302c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d40:	4811      	ldr	r0, [pc, #68]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d42:	f001 f973 	bl	800302c <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001d46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d002      	beq.n	8001d54 <StartTaskLEDs+0xdc>
 8001d4e:	7cbb      	ldrb	r3, [r7, #18]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <StartTaskLEDs+0xea>
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d5c:	f001 f966 	bl	800302c <HAL_GPIO_WritePin>
 8001d60:	e005      	b.n	8001d6e <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <StartTaskLEDs+0x110>)
 8001d6a:	f001 f95f 	bl	800302c <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d74:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 8001d76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d78:	f002 fb02 	bl	8004380 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001d7c:	e785      	b.n	8001c8a <StartTaskLEDs+0x12>
 8001d7e:	bf00      	nop
 8001d80:	20004c24 	.word	0x20004c24
 8001d84:	20004aac 	.word	0x20004aac
 8001d88:	40020c00 	.word	0x40020c00

08001d8c <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
	  uint32_t tDelay = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
	  tDelay = osKernelGetTickCount();
 8001d98:	f002 f9f6 	bl	8004188 <osKernelGetTickCount>
 8001d9c:	60f8      	str	r0, [r7, #12]
	  uint8_t master;
	  t_bool sensor1_state = FALSE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	727b      	strb	r3, [r7, #9]
	  t_bool sensor2_state = FALSE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	723b      	strb	r3, [r7, #8]

	  /* master = 0 for slave.
	   * master = 1 for master.
	   * master 1 for all devices, 0 for GW*/
	  master = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	72bb      	strb	r3, [r7, #10]

	  LoRa_initialization(master);
 8001daa:	7abb      	ldrb	r3, [r7, #10]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fd55 	bl	800185c <LoRa_initialization>

	  /* Infinite loop */
	  for(;;)
	  {

		osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <StartTaskLoRa+0x88>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f107 0109 	add.w	r1, r7, #9
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f002 fc19 	bl	80045f4 <osMessageQueueGet>
		osMessageQueueGet(myQueueDataSavedHandle, &sensor2_state, 0, 0);
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <StartTaskLoRa+0x88>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 0108 	add.w	r1, r7, #8
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f002 fc11 	bl	80045f4 <osMessageQueueGet>

		if (master == 1)
 8001dd2:	7abb      	ldrb	r3, [r7, #10]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d111      	bne.n	8001dfc <StartTaskLoRa+0x70>
		{
			if(sensor1_state && sensor2_state)
 8001dd8:	7a7b      	ldrb	r3, [r7, #9]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <StartTaskLoRa+0x74>
 8001dde:	7a3b      	ldrb	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <StartTaskLoRa+0x74>
			{
				for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	72fb      	strb	r3, [r7, #11]
 8001de8:	e004      	b.n	8001df4 <StartTaskLoRa+0x68>
				{
					send_data();
 8001dea:	f7ff fd91 	bl	8001910 <send_data>
				for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	3301      	adds	r3, #1
 8001df2:	72fb      	strb	r3, [r7, #11]
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d9f7      	bls.n	8001dea <StartTaskLoRa+0x5e>
 8001dfa:	e001      	b.n	8001e00 <StartTaskLoRa+0x74>
				}
			}
		}
		else
		{
			receive_data();
 8001dfc:	f7ff fdd8 	bl	80019b0 <receive_data>
		}
		tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001e06:	3310      	adds	r3, #16
 8001e08:	60fb      	str	r3, [r7, #12]
	    osDelayUntil(tDelay);
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f002 fab8 	bl	8004380 <osDelayUntil>
		osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8001e10:	e7cf      	b.n	8001db2 <StartTaskLoRa+0x26>
 8001e12:	bf00      	nop
 8001e14:	20004ab8 	.word	0x20004ab8

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:(A+1) //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <ringbuf_init+0x1a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b30      	cmp	r3, #48	; 0x30
 8001e3e:	d003      	beq.n	8001e48 <ringbuf_init+0x22>

	 p=NULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 8001e44:	2330      	movs	r3, #48	; 0x30
 8001e46:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
  _this->tail = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001e60:	b490      	push	{r4, r7}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4638      	mov	r0, r7
 8001e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if((NEXT(_this->head) != 0) && (NEXT(_this->head)!= _this->tail)){
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d023      	beq.n	8001ebe <ringbuf_put+0x5e>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d01e      	beq.n	8001ebe <ringbuf_put+0x5e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d01a      	beq.n	8001ebe <ringbuf_put+0x5e>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d013      	beq.n	8001ebe <ringbuf_put+0x5e>
  _this->buf[_this->head] = item;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	461c      	mov	r4, r3
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebc:	e02e      	b.n	8001f1c <ringbuf_put+0xbc>
  }
  else
  {
	  _this->buf[_this->head] = item;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec2:	68f9      	ldr	r1, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	461c      	mov	r4, r3
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(NEXT(_this->head) == _this->tail)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d016      	beq.n	8001f10 <ringbuf_put+0xb0>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10f      	bne.n	8001f10 <ringbuf_put+0xb0>
	  {
		  _this->head = _this->tail;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
		  _this->tail = NEXT(_this->tail);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <ringbuf_put+0xa8>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	e000      	b.n	8001f0a <ringbuf_put+0xaa>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f0e:	e005      	b.n	8001f1c <ringbuf_put+0xbc>
	  }
	  else
	  {
		  _this->head = 0;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
		  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
	  }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc90      	pop	{r4, r7}
 8001f24:	4770      	bx	lr

08001f26 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001f26:	b490      	push	{r4, r7}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d01e      	beq.n	8001f7a <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	18ca      	adds	r2, r1, r3
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d00a      	beq.n	8001f74 <ringbuf_get+0x4e>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d005      	beq.n	8001f74 <ringbuf_get+0x4e>
		{
			_this->tail++;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
 8001f72:	e002      	b.n	8001f7a <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
		}
    }
	return item;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	461c      	mov	r4, r3
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f84:	6020      	str	r0, [r4, #0]
 8001f86:	6061      	str	r1, [r4, #4]
 8001f88:	60a2      	str	r2, [r4, #8]
}
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc90      	pop	{r4, r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f000 fe4c 	bl	8002c76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_ADC_MspInit+0x7c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d127      	bne.n	800205e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_ADC_MspInit+0x80>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|GPIO_PIN_2;
 8002046:	2306      	movs	r3, #6
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204a:	2303      	movs	r3, #3
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_ADC_MspInit+0x84>)
 800205a:	f000 fe35 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40012000 	.word	0x40012000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_SPI_MspInit+0x84>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12b      	bne.n	80020ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_SPI_MspInit+0x88>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_SPI_MspInit+0x88>)
 80020a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_SPI_MspInit+0x88>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_SPI_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_SPI_MspInit+0x88>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_SPI_MspInit+0x88>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80020ce:	23e0      	movs	r3, #224	; 0xe0
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020de:	2305      	movs	r3, #5
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_SPI_MspInit+0x8c>)
 80020ea:	f000 fded 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40013000 	.word	0x40013000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 f934 	bl	80023a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002140:	f004 f88c 	bl	800625c <xTaskGetSchedulerState>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800214a:	f004 fe5d 	bl	8006e08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}

08002152 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e00a      	b.n	800217a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002164:	f3af 8000 	nop.w
 8002168:	4601      	mov	r1, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	60ba      	str	r2, [r7, #8]
 8002170:	b2ca      	uxtb	r2, r1
 8002172:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	dbf0      	blt.n	8002164 <_read+0x12>
	}

return len;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e009      	b.n	80021b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	60ba      	str	r2, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3301      	adds	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	dbf1      	blt.n	800219e <_write+0x12>
	}
	return len;
 80021ba:	687b      	ldr	r3, [r7, #4]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_close>:

int _close(int file)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ec:	605a      	str	r2, [r3, #4]
	return 0;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_isatty>:

int _isatty(int file)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
	return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x50>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x16>
		heap_end = &end;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <_sbrk+0x50>)
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <_sbrk+0x54>)
 8002240:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <_sbrk+0x50>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <_sbrk+0x50>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	466a      	mov	r2, sp
 8002252:	4293      	cmp	r3, r2
 8002254:	d907      	bls.n	8002266 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002256:	f005 f91d 	bl	8007494 <__errno>
 800225a:	4602      	mov	r2, r0
 800225c:	230c      	movs	r3, #12
 800225e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e006      	b.n	8002274 <_sbrk+0x48>
	}

	heap_end += incr;
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <_sbrk+0x50>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a03      	ldr	r2, [pc, #12]	; (800227c <_sbrk+0x50>)
 8002270:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000130 	.word	0x20000130
 8002280:	20004cc8 	.word	0x20004cc8

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <SystemInit+0x28>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <SystemInit+0x28>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SystemInit+0x28>)
 800229a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229e:	609a      	str	r2, [r3, #8]
#endif
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022b6:	e003      	b.n	80022c0 <LoopCopyDataInit>

080022b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022be:	3104      	adds	r1, #4

080022c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022c0:	480b      	ldr	r0, [pc, #44]	; (80022f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022c8:	d3f6      	bcc.n	80022b8 <CopyDataInit>
  ldr  r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022cc:	e002      	b.n	80022d4 <LoopFillZerobss>

080022ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022d0:	f842 3b04 	str.w	r3, [r2], #4

080022d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022d8:	d3f9      	bcc.n	80022ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022da:	f7ff ffd3 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f005 f8df 	bl	80074a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7fe ffe7 	bl	80012b4 <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022ec:	080088f4 	.word	0x080088f4
  ldr  r0, =_sdata
 80022f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f4:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 80022f8:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 80022fc:	20004cc8 	.word	0x20004cc8

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fc97 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	200f      	movs	r0, #15
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fe2c 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fca1 	bl	8002cae <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 fc77 	bl	8002c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200000a0 	.word	0x200000a0
 80023a0:	200000a8 	.word	0x200000a8
 80023a4:	200000a4 	.word	0x200000a4

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	200000a8 	.word	0x200000a8
 80023cc:	20004c80 	.word	0x20004c80

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20004c80 	.word	0x20004c80

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_Delay+0x40>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200000a8 	.word	0x200000a8

0800242c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e033      	b.n	80024aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fdce 	bl	8001fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d118      	bne.n	800249c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002472:	f023 0302 	bic.w	r3, r3, #2
 8002476:	f043 0202 	orr.w	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa40 	bl	8002904 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
 800249a:	e001      	b.n	80024a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_Start+0x1a>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0a5      	b.n	800261a <HAL_ADC_Start+0x166>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d018      	beq.n	8002516 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_ADC_Start+0x174>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_ADC_Start+0x178>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0c9a      	lsrs	r2, r3, #18
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002508:	e002      	b.n	8002510 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d179      	bne.n	8002618 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800254e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d106      	bne.n	8002572 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f023 0206 	bic.w	r2, r3, #6
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
 8002570:	e002      	b.n	8002578 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_ADC_Start+0x17c>)
 8002582:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800258c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2b00      	cmp	r3, #0
 8002598:	d12a      	bne.n	80025f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a25      	ldr	r2, [pc, #148]	; (8002634 <HAL_ADC_Start+0x180>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d015      	beq.n	80025d0 <HAL_ADC_Start+0x11c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <HAL_ADC_Start+0x184>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_Start+0x106>
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_ADC_Start+0x17c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_ADC_Start+0x188>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d129      	bne.n	8002618 <HAL_ADC_Start+0x164>
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_ADC_Start+0x17c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d823      	bhi.n	8002618 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11c      	bne.n	8002618 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	e013      	b.n	8002618 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <HAL_ADC_Start+0x180>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10e      	bne.n	8002618 <HAL_ADC_Start+0x164>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002616:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200000a0 	.word	0x200000a0
 800262c:	431bde83 	.word	0x431bde83
 8002630:	40012300 	.word	0x40012300
 8002634:	40012000 	.word	0x40012000
 8002638:	40012100 	.word	0x40012100
 800263c:	40012200 	.word	0x40012200

08002640 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Stop+0x16>
 8002652:	2302      	movs	r3, #2
 8002654:	e021      	b.n	800269a <HAL_ADC_Stop+0x5a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x1c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e105      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x228>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d925      	bls.n	8002738 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68d9      	ldr	r1, [r3, #12]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	3b1e      	subs	r3, #30
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43da      	mvns	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	400a      	ands	r2, r1
 8002710:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	4603      	mov	r3, r0
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4403      	add	r3, r0
 800272a:	3b1e      	subs	r3, #30
 800272c:	409a      	lsls	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	e022      	b.n	800277e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6919      	ldr	r1, [r3, #16]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	2207      	movs	r2, #7
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	400a      	ands	r2, r1
 800275a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6919      	ldr	r1, [r3, #16]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	4603      	mov	r3, r0
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4403      	add	r3, r0
 8002774:	409a      	lsls	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d824      	bhi.n	80027d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	3b05      	subs	r3, #5
 8002798:	221f      	movs	r2, #31
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b05      	subs	r3, #5
 80027c2:	fa00 f203 	lsl.w	r2, r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	e04c      	b.n	800286a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d824      	bhi.n	8002822 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b23      	subs	r3, #35	; 0x23
 80027ea:	221f      	movs	r2, #31
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b23      	subs	r3, #35	; 0x23
 8002814:	fa00 f203 	lsl.w	r2, r0, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	e023      	b.n	800286a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b41      	subs	r3, #65	; 0x41
 8002834:	221f      	movs	r2, #31
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b41      	subs	r3, #65	; 0x41
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <HAL_ADC_ConfigChannel+0x234>)
 800286c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_ADC_ConfigChannel+0x238>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d109      	bne.n	800288c <HAL_ADC_ConfigChannel+0x1cc>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b12      	cmp	r3, #18
 800287e:	d105      	bne.n	800288c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_ADC_ConfigChannel+0x238>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d123      	bne.n	80028de <HAL_ADC_ConfigChannel+0x21e>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b10      	cmp	r3, #16
 800289c:	d003      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x1e6>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b11      	cmp	r3, #17
 80028a4:	d11b      	bne.n	80028de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d111      	bne.n	80028de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_ADC_ConfigChannel+0x23c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_ADC_ConfigChannel+0x240>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	0c9a      	lsrs	r2, r3, #18
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d0:	e002      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f9      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40012300 	.word	0x40012300
 80028f8:	40012000 	.word	0x40012000
 80028fc:	200000a0 	.word	0x200000a0
 8002900:	431bde83 	.word	0x431bde83

08002904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <ADC_Init+0x1f0>)
 800290e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800295c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <ADC_Init+0x1f4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e00f      	b.n	8002a02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0202 	bic.w	r2, r2, #2
 8002a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	035a      	lsls	r2, r3, #13
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e007      	b.n	8002a78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	051a      	lsls	r2, r3, #20
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aba:	025a      	lsls	r2, r3, #9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	029a      	lsls	r2, r3, #10
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40012300 	.word	0x40012300
 8002af8:	0f000001 	.word	0x0f000001

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff8e 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff47 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff5c 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff8e 	bl	8002bb4 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5d 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffb0 	bl	8002c1c <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e16b      	b.n	8002fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 815a 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d00b      	beq.n	8002d22 <HAL_GPIO_Init+0x5a>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d16:	2b11      	cmp	r3, #17
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b12      	cmp	r3, #18
 8002d20:	d130      	bne.n	8002d84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0xfc>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b12      	cmp	r3, #18
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80b4 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_GPIO_Init+0x308>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a5e      	ldr	r2, [pc, #376]	; (8002fd0 <HAL_GPIO_Init+0x308>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <HAL_GPIO_Init+0x308>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02b      	beq.n	8002eee <HAL_GPIO_Init+0x226>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a50      	ldr	r2, [pc, #320]	; (8002fdc <HAL_GPIO_Init+0x314>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d025      	beq.n	8002eea <HAL_GPIO_Init+0x222>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <HAL_GPIO_Init+0x318>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_GPIO_Init+0x21e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4e      	ldr	r2, [pc, #312]	; (8002fe4 <HAL_GPIO_Init+0x31c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_GPIO_Init+0x21a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_GPIO_Init+0x320>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x216>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4c      	ldr	r2, [pc, #304]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x212>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <HAL_GPIO_Init+0x328>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <HAL_GPIO_Init+0x32c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x20a>
 8002ece:	2307      	movs	r3, #7
 8002ed0:	e00e      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f32:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f38:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5c:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f ae90 	bls.w	8002ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	3724      	adds	r7, #36	; 0x24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40021400 	.word	0x40021400
 8002ff0:	40021800 	.word	0x40021800
 8002ff4:	40021c00 	.word	0x40021c00
 8002ff8:	40013c00 	.word	0x40013c00

08002ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e001      	b.n	800301e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e25b      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d075      	beq.n	800316a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307e:	4ba3      	ldr	r3, [pc, #652]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d00c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308a:	4ba0      	ldr	r3, [pc, #640]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d112      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b9d      	ldr	r3, [pc, #628]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a2:	d10b      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	4b99      	ldr	r3, [pc, #612]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05b      	beq.n	8003168 <HAL_RCC_OscConfig+0x108>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d157      	bne.n	8003168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e236      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x74>
 80030c6:	4b91      	ldr	r3, [pc, #580]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a90      	ldr	r2, [pc, #576]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x98>
 80030de:	4b8b      	ldr	r3, [pc, #556]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a8a      	ldr	r2, [pc, #552]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a87      	ldr	r2, [pc, #540]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030f8:	4b84      	ldr	r3, [pc, #528]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a83      	ldr	r2, [pc, #524]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b81      	ldr	r3, [pc, #516]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a80      	ldr	r2, [pc, #512]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff f95a 	bl	80023d0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7ff f956 	bl	80023d0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1fb      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xc0>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff f946 	bl	80023d0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7ff f942 	bl	80023d0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1e7      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b6c      	ldr	r3, [pc, #432]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0xe8>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1bb      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4952      	ldr	r1, [pc, #328]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e03a      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_RCC_OscConfig+0x2b0>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7ff f8fb 	bl	80023d0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031de:	f7ff f8f7 	bl	80023d0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e19c      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f0:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4940      	ldr	r1, [pc, #256]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0x2b0>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7ff f8da 	bl	80023d0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003220:	f7ff f8d6 	bl	80023d0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e17b      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d030      	beq.n	80032ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCC_OscConfig+0x2b4>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7ff f8ba 	bl	80023d0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003260:	f7ff f8b6 	bl	80023d0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e15b      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x200>
 800327e:	e015      	b.n	80032ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_OscConfig+0x2b4>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7ff f8a3 	bl	80023d0 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328e:	f7ff f89f 	bl	80023d0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e144      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a0 	beq.w	80033fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x2b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d121      	bne.n	800333a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_OscConfig+0x2b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_RCC_OscConfig+0x2b8>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7ff f865 	bl	80023d0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e011      	b.n	800332e <HAL_RCC_OscConfig+0x2ce>
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	42470000 	.word	0x42470000
 8003314:	42470e80 	.word	0x42470e80
 8003318:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7ff f858 	bl	80023d0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0fd      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b81      	ldr	r3, [pc, #516]	; (8003534 <HAL_RCC_OscConfig+0x4d4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d106      	bne.n	8003350 <HAL_RCC_OscConfig+0x2f0>
 8003342:	4b7d      	ldr	r3, [pc, #500]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a7c      	ldr	r2, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	e01c      	b.n	800338a <HAL_RCC_OscConfig+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d10c      	bne.n	8003372 <HAL_RCC_OscConfig+0x312>
 8003358:	4b77      	ldr	r3, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b74      	ldr	r3, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a73      	ldr	r2, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e00b      	b.n	800338a <HAL_RCC_OscConfig+0x32a>
 8003372:	4b71      	ldr	r3, [pc, #452]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a6d      	ldr	r2, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d015      	beq.n	80033be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7ff f81d 	bl	80023d0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7ff f819 	bl	80023d0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0bc      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ee      	beq.n	800339a <HAL_RCC_OscConfig+0x33a>
 80033bc:	e014      	b.n	80033e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7ff f807 	bl	80023d0 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7ff f803 	bl	80023d0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0a6      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	4b56      	ldr	r3, [pc, #344]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ee      	bne.n	80033c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b52      	ldr	r3, [pc, #328]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a51      	ldr	r2, [pc, #324]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8092 	beq.w	8003528 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003404:	4b4c      	ldr	r3, [pc, #304]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d05c      	beq.n	80034ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d141      	bne.n	800349c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCC_OscConfig+0x4dc>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe ffd7 	bl	80023d0 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe ffd3 	bl	80023d0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e078      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003438:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	4933      	ldr	r1, [pc, #204]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346e:	4b33      	ldr	r3, [pc, #204]	; (800353c <HAL_RCC_OscConfig+0x4dc>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe ffac 	bl	80023d0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe ffa8 	bl	80023d0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e04d      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x41c>
 800349a:	e045      	b.n	8003528 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x4dc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe ff95 	bl	80023d0 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe ff91 	bl	80023d0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e036      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x44a>
 80034c8:	e02e      	b.n	8003528 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e029      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d115      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d10d      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40007000 	.word	0x40007000
 8003538:	40023800 	.word	0x40023800
 800353c:	42470060 	.word	0x42470060

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe fece 	bl	80023d0 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe feca 	bl	80023d0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	fa21 f303 	lsr.w	r3, r1, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fe2e 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800883c 	.word	0x0800883c
 8003704:	200000a0 	.word	0x200000a0
 8003708:	200000a4 	.word	0x200000a4

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d007      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x32>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d008      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x38>
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80b4 	bne.w	80038a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800373a:	60bb      	str	r3, [r7, #8]
       break;
 800373c:	e0b3      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	e0b0      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4b5a      	ldr	r3, [pc, #360]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800374c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374e:	4b58      	ldr	r3, [pc, #352]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04a      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	ea03 0501 	and.w	r5, r3, r1
 8003770:	ea04 0602 	and.w	r6, r4, r2
 8003774:	4629      	mov	r1, r5
 8003776:	4632      	mov	r2, r6
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	0154      	lsls	r4, r2, #5
 8003782:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003786:	014b      	lsls	r3, r1, #5
 8003788:	4619      	mov	r1, r3
 800378a:	4622      	mov	r2, r4
 800378c:	1b49      	subs	r1, r1, r5
 800378e:	eb62 0206 	sbc.w	r2, r2, r6
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	0194      	lsls	r4, r2, #6
 800379c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037a0:	018b      	lsls	r3, r1, #6
 80037a2:	1a5b      	subs	r3, r3, r1
 80037a4:	eb64 0402 	sbc.w	r4, r4, r2
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	00e2      	lsls	r2, r4, #3
 80037b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037b6:	00d9      	lsls	r1, r3, #3
 80037b8:	460b      	mov	r3, r1
 80037ba:	4614      	mov	r4, r2
 80037bc:	195b      	adds	r3, r3, r5
 80037be:	eb44 0406 	adc.w	r4, r4, r6
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	0262      	lsls	r2, r4, #9
 80037cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037d0:	0259      	lsls	r1, r3, #9
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	4621      	mov	r1, r4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	f7fc fd44 	bl	8000270 <__aeabi_uldivmod>
 80037e8:	4603      	mov	r3, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	e049      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f0:	4b2f      	ldr	r3, [pc, #188]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	f04f 0400 	mov.w	r4, #0
 80037fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	ea03 0501 	and.w	r5, r3, r1
 8003806:	ea04 0602 	and.w	r6, r4, r2
 800380a:	4629      	mov	r1, r5
 800380c:	4632      	mov	r2, r6
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	0154      	lsls	r4, r2, #5
 8003818:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800381c:	014b      	lsls	r3, r1, #5
 800381e:	4619      	mov	r1, r3
 8003820:	4622      	mov	r2, r4
 8003822:	1b49      	subs	r1, r1, r5
 8003824:	eb62 0206 	sbc.w	r2, r2, r6
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	f04f 0400 	mov.w	r4, #0
 8003830:	0194      	lsls	r4, r2, #6
 8003832:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	1a5b      	subs	r3, r3, r1
 800383a:	eb64 0402 	sbc.w	r4, r4, r2
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	00e2      	lsls	r2, r4, #3
 8003848:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800384c:	00d9      	lsls	r1, r3, #3
 800384e:	460b      	mov	r3, r1
 8003850:	4614      	mov	r4, r2
 8003852:	195b      	adds	r3, r3, r5
 8003854:	eb44 0406 	adc.w	r4, r4, r6
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	02a2      	lsls	r2, r4, #10
 8003862:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003866:	0299      	lsls	r1, r3, #10
 8003868:	460b      	mov	r3, r1
 800386a:	4614      	mov	r4, r2
 800386c:	4618      	mov	r0, r3
 800386e:	4621      	mov	r1, r4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	461a      	mov	r2, r3
 8003878:	4623      	mov	r3, r4
 800387a:	f7fc fcf9 	bl	8000270 <__aeabi_uldivmod>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	60bb      	str	r3, [r7, #8]
      break;
 800389e:	e002      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038a2:	60bb      	str	r3, [r7, #8]
      break;
 80038a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a6:	68bb      	ldr	r3, [r7, #8]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e056      	b.n	800397c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fe fbc3 	bl	8002074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003904:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	ea42 0103 	orr.w	r1, r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	f003 0104 	and.w	r1, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_SPI_Transmit+0x22>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e11e      	b.n	8003be4 <HAL_SPI_Transmit+0x260>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ae:	f7fe fd0f 	bl	80023d0 <HAL_GetTick>
 80039b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d002      	beq.n	80039ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
 80039c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039c8:	e103      	b.n	8003bd2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0x52>
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039da:	e0fa      	b.n	8003bd2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2203      	movs	r2, #3
 80039e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a22:	d107      	bne.n	8003a34 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d007      	beq.n	8003a52 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5a:	d14b      	bne.n	8003af4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_SPI_Transmit+0xe6>
 8003a64:	8afb      	ldrh	r3, [r7, #22]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d13e      	bne.n	8003ae8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	1c9a      	adds	r2, r3, #2
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a8e:	e02b      	b.n	8003ae8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d112      	bne.n	8003ac4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	1c9a      	adds	r2, r3, #2
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac2:	e011      	b.n	8003ae8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac4:	f7fe fc84 	bl	80023d0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d803      	bhi.n	8003adc <HAL_SPI_Transmit+0x158>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_Transmit+0x15e>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ae6:	e074      	b.n	8003bd2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ce      	bne.n	8003a90 <HAL_SPI_Transmit+0x10c>
 8003af2:	e04c      	b.n	8003b8e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit+0x17e>
 8003afc:	8afb      	ldrh	r3, [r7, #22]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d140      	bne.n	8003b84 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b28:	e02c      	b.n	8003b84 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d113      	bne.n	8003b60 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b5e:	e011      	b.n	8003b84 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b60:	f7fe fc36 	bl	80023d0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d803      	bhi.n	8003b78 <HAL_SPI_Transmit+0x1f4>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d102      	bne.n	8003b7e <HAL_SPI_Transmit+0x1fa>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b82:	e026      	b.n	8003bd2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1cd      	bne.n	8003b2a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fa44 	bl	8004020 <SPI_EndRxTxTransaction>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e000      	b.n	8003bd2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003bd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x26>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e18a      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x33c>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1a:	f7fe fbd9 	bl	80023d0 <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d00f      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x70>
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c42:	d107      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x68>
 8003c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d003      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c5a:	e15b      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x82>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x82>
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c74:	e14e      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d003      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2205      	movs	r2, #5
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	887a      	ldrh	r2, [r7, #2]
 8003c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	887a      	ldrh	r2, [r7, #2]
 8003cb2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d007      	beq.n	8003cde <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce6:	d178      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x10a>
 8003cf0:	8b7b      	ldrh	r3, [r7, #26]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d166      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1a:	e053      	b.n	8003dc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d11b      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x176>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x176>
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d113      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d119      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x1b8>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	b292      	uxth	r2, r2
 8003d86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da0:	2301      	movs	r3, #1
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003da4:	f7fe fb14 	bl	80023d0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d807      	bhi.n	8003dc4 <HAL_SPI_TransmitReceive+0x1d8>
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d003      	beq.n	8003dc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dc2:	e0a7      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1a6      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x130>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1a1      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x130>
 8003dd8:	e07c      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x1fc>
 8003de2:	8b7b      	ldrh	r3, [r7, #26]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d16b      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0e:	e057      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d11c      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x26c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d017      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x26c>
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d114      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d119      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x2ae>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d014      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e96:	2301      	movs	r3, #1
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e9a:	f7fe fa99 	bl	80023d0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d803      	bhi.n	8003eb2 <HAL_SPI_TransmitReceive+0x2c6>
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d102      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x2cc>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ebe:	e029      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1a2      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x224>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d19d      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f8a1 	bl	8004020 <SPI_EndRxTxTransaction>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ef0:	e010      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e000      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3730      	adds	r7, #48	; 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f3e:	b2db      	uxtb	r3, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5c:	e04c      	b.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d048      	beq.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f66:	f7fe fa33 	bl	80023d0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d902      	bls.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d13d      	bne.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f94:	d111      	bne.n	8003fba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9e:	d004      	beq.n	8003faa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	d107      	bne.n	8003fba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d10f      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e00f      	b.n	8004018 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	429a      	cmp	r2, r3
 8004014:	d1a3      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <SPI_EndRxTxTransaction+0x7c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <SPI_EndRxTxTransaction+0x80>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0d5b      	lsrs	r3, r3, #21
 8004038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404a:	d112      	bne.n	8004072 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ff78 	bl	8003f4c <SPI_WaitFlagStateUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e00f      	b.n	8004092 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3b01      	subs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d0f2      	beq.n	8004072 <SPI_EndRxTxTransaction+0x52>
 800408c:	e000      	b.n	8004090 <SPI_EndRxTxTransaction+0x70>
        break;
 800408e:	bf00      	nop
  }

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200000a0 	.word	0x200000a0
 80040a0:	165e9f81 	.word	0x165e9f81

080040a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ba:	f3ef 8305 	mrs	r3, IPSR
 80040be:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ca:	607b      	str	r3, [r7, #4]
  return(result);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d105      	bne.n	80040de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d2:	f3ef 8311 	mrs	r3, BASEPRI
 80040d6:	603b      	str	r3, [r7, #0]
  return(result);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <osKernelInitialize+0x3a>
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <osKernelInitialize+0x64>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d103      	bne.n	80040ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040e6:	f06f 0305 	mvn.w	r3, #5
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	e00c      	b.n	8004108 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <osKernelInitialize+0x64>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <osKernelInitialize+0x64>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e002      	b.n	8004108 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000134 	.word	0x20000134

0800411c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	60bb      	str	r3, [r7, #8]
  return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	607b      	str	r3, [r7, #4]
  return(result);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800413a:	f3ef 8311 	mrs	r3, BASEPRI
 800413e:	603b      	str	r3, [r7, #0]
  return(result);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <osKernelStart+0x3a>
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <osKernelStart+0x68>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d103      	bne.n	8004156 <osKernelStart+0x3a>
    stat = osErrorISR;
 800414e:	f06f 0305 	mvn.w	r3, #5
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e010      	b.n	8004178 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <osKernelStart+0x68>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d109      	bne.n	8004172 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800415e:	f7ff ffa1 	bl	80040a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <osKernelStart+0x68>)
 8004164:	2202      	movs	r2, #2
 8004166:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004168:	f001 fb7c 	bl	8005864 <vTaskStartScheduler>
      stat = osOK;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e002      	b.n	8004178 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004172:	f04f 33ff 	mov.w	r3, #4294967295
 8004176:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000134 	.word	0x20000134

08004188 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418e:	f3ef 8305 	mrs	r3, IPSR
 8004192:	60bb      	str	r3, [r7, #8]
  return(result);
 8004194:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	607b      	str	r3, [r7, #4]
  return(result);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a6:	f3ef 8311 	mrs	r3, BASEPRI
 80041aa:	603b      	str	r3, [r7, #0]
  return(result);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <osKernelGetTickCount+0x3a>
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <osKernelGetTickCount+0x4c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d103      	bne.n	80041c2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80041ba:	f001 fca9 	bl	8005b10 <xTaskGetTickCountFromISR>
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	e002      	b.n	80041c8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80041c2:	f001 fc95 	bl	8005af0 <xTaskGetTickCount>
 80041c6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000134 	.word	0x20000134

080041d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b090      	sub	sp, #64	; 0x40
 80041dc:	af04      	add	r7, sp, #16
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e8:	f3ef 8305 	mrs	r3, IPSR
 80041ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80041ee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 808f 	bne.w	8004314 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004202:	f3ef 8311 	mrs	r3, BASEPRI
 8004206:	617b      	str	r3, [r7, #20]
  return(result);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osThreadNew+0x3e>
 800420e:	4b44      	ldr	r3, [pc, #272]	; (8004320 <osThreadNew+0x148>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d07e      	beq.n	8004314 <osThreadNew+0x13c>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d07b      	beq.n	8004314 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004220:	2318      	movs	r3, #24
 8004222:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d045      	beq.n	80042c0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <osThreadNew+0x6a>
        name = attr->name;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <osThreadNew+0x90>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	2b38      	cmp	r3, #56	; 0x38
 800425a:	d805      	bhi.n	8004268 <osThreadNew+0x90>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <osThreadNew+0x94>
        return (NULL);
 8004268:	2300      	movs	r3, #0
 800426a:	e054      	b.n	8004316 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <osThreadNew+0xca>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b5b      	cmp	r3, #91	; 0x5b
 800428a:	d90a      	bls.n	80042a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <osThreadNew+0xca>
        mem = 1;
 800429c:	2301      	movs	r3, #1
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	e010      	b.n	80042c4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <osThreadNew+0xec>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <osThreadNew+0xec>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <osThreadNew+0xec>
          mem = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	e001      	b.n	80042c4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d110      	bne.n	80042ec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042d2:	9202      	str	r2, [sp, #8]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f001 f873 	bl	80053cc <xTaskCreateStatic>
 80042e6:	4603      	mov	r3, r0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e013      	b.n	8004314 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d110      	bne.n	8004314 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	f107 0310 	add.w	r3, r7, #16
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f001 f8bb 	bl	8005480 <xTaskCreate>
 800430a:	4603      	mov	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	d001      	beq.n	8004314 <osThreadNew+0x13c>
          hTask = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004314:	693b      	ldr	r3, [r7, #16]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3730      	adds	r7, #48	; 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000134 	.word	0x20000134

08004324 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800432c:	f3ef 8305 	mrs	r3, IPSR
 8004330:	613b      	str	r3, [r7, #16]
  return(result);
 8004332:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10f      	bne.n	8004358 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004338:	f3ef 8310 	mrs	r3, PRIMASK
 800433c:	60fb      	str	r3, [r7, #12]
  return(result);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004344:	f3ef 8311 	mrs	r3, BASEPRI
 8004348:	60bb      	str	r3, [r7, #8]
  return(result);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <osDelay+0x3c>
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <osDelay+0x58>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d103      	bne.n	8004360 <osDelay+0x3c>
    stat = osErrorISR;
 8004358:	f06f 0305 	mvn.w	r3, #5
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e007      	b.n	8004370 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <osDelay+0x4c>
      vTaskDelay(ticks);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 fa46 	bl	80057fc <vTaskDelay>
    }
  }

  return (stat);
 8004370:	697b      	ldr	r3, [r7, #20]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000134 	.word	0x20000134

08004380 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004388:	f3ef 8305 	mrs	r3, IPSR
 800438c:	617b      	str	r3, [r7, #20]
  return(result);
 800438e:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10f      	bne.n	80043b4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	613b      	str	r3, [r7, #16]
  return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043a0:	f3ef 8311 	mrs	r3, BASEPRI
 80043a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <osDelayUntil+0x3c>
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <osDelayUntil+0x7c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d103      	bne.n	80043bc <osDelayUntil+0x3c>
    stat = osErrorISR;
 80043b4:	f06f 0305 	mvn.w	r3, #5
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e019      	b.n	80043f0 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80043c0:	f001 fb96 	bl	8005af0 <xTaskGetTickCount>
 80043c4:	4603      	mov	r3, r0
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <osDelayUntil+0x6a>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db06      	blt.n	80043ea <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f990 	bl	8005708 <vTaskDelayUntil>
 80043e8:	e002      	b.n	80043f0 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80043ea:	f06f 0303 	mvn.w	r3, #3
 80043ee:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80043f0:	69fb      	ldr	r3, [r7, #28]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000134 	.word	0x20000134

08004400 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004410:	f3ef 8305 	mrs	r3, IPSR
 8004414:	61bb      	str	r3, [r7, #24]
  return(result);
 8004416:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004418:	2b00      	cmp	r3, #0
 800441a:	d170      	bne.n	80044fe <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441c:	f3ef 8310 	mrs	r3, PRIMASK
 8004420:	617b      	str	r3, [r7, #20]
  return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004428:	f3ef 8311 	mrs	r3, BASEPRI
 800442c:	613b      	str	r3, [r7, #16]
  return(result);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <osMessageQueueNew+0x3c>
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <osMessageQueueNew+0x108>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d060      	beq.n	80044fe <osMessageQueueNew+0xfe>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d05d      	beq.n	80044fe <osMessageQueueNew+0xfe>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05a      	beq.n	80044fe <osMessageQueueNew+0xfe>
    mem = -1;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d029      	beq.n	80044a8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <osMessageQueueNew+0x82>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b4f      	cmp	r3, #79	; 0x4f
 8004462:	d90e      	bls.n	8004482 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <osMessageQueueNew+0x82>
        mem = 1;
 800447c:	2301      	movs	r3, #1
 800447e:	623b      	str	r3, [r7, #32]
 8004480:	e014      	b.n	80044ac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d110      	bne.n	80044ac <osMessageQueueNew+0xac>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <osMessageQueueNew+0xac>
          mem = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	e001      	b.n	80044ac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6899      	ldr	r1, [r3, #8]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	460b      	mov	r3, r1
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fa58 	bl	8004978 <xQueueGenericCreateStatic>
 80044c8:	6278      	str	r0, [r7, #36]	; 0x24
 80044ca:	e008      	b.n	80044de <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80044d2:	2200      	movs	r2, #0
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fac1 	bl	8004a5e <xQueueGenericCreate>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e001      	b.n	80044f6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044fa:	f000 ff0b 	bl	8005314 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000134 	.word	0x20000134

0800450c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004524:	f3ef 8305 	mrs	r3, IPSR
 8004528:	61fb      	str	r3, [r7, #28]
  return(result);
 800452a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004530:	f3ef 8310 	mrs	r3, PRIMASK
 8004534:	61bb      	str	r3, [r7, #24]
  return(result);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800453c:	f3ef 8311 	mrs	r3, BASEPRI
 8004540:	617b      	str	r3, [r7, #20]
  return(result);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02c      	beq.n	80045a2 <osMessageQueuePut+0x96>
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <osMessageQueuePut+0xe0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d128      	bne.n	80045a2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <osMessageQueuePut+0x56>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <osMessageQueuePut+0x56>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004562:	f06f 0303 	mvn.w	r3, #3
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004568:	e039      	b.n	80045de <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800456e:	f107 0210 	add.w	r2, r7, #16
 8004572:	2300      	movs	r3, #0
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6a38      	ldr	r0, [r7, #32]
 8004578:	f000 fbce 	bl	8004d18 <xQueueGenericSendFromISR>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d003      	beq.n	800458a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004582:	f06f 0302 	mvn.w	r3, #2
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004588:	e029      	b.n	80045de <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d026      	beq.n	80045de <osMessageQueuePut+0xd2>
 8004590:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <osMessageQueuePut+0xe4>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045a0:	e01d      	b.n	80045de <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <osMessageQueuePut+0xa2>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80045ae:	f06f 0303 	mvn.w	r3, #3
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e014      	b.n	80045e0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80045b6:	2300      	movs	r3, #0
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	6a38      	ldr	r0, [r7, #32]
 80045be:	f000 fab1 	bl	8004b24 <xQueueGenericSend>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d00b      	beq.n	80045e0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80045ce:	f06f 0301 	mvn.w	r3, #1
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
 80045d4:	e004      	b.n	80045e0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80045d6:	f06f 0302 	mvn.w	r3, #2
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	e000      	b.n	80045e0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	; 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000134 	.word	0x20000134
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004606:	2300      	movs	r3, #0
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800460a:	f3ef 8305 	mrs	r3, IPSR
 800460e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004610:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004616:	f3ef 8310 	mrs	r3, PRIMASK
 800461a:	61bb      	str	r3, [r7, #24]
  return(result);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004622:	f3ef 8311 	mrs	r3, BASEPRI
 8004626:	617b      	str	r3, [r7, #20]
  return(result);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02c      	beq.n	8004688 <osMessageQueueGet+0x94>
 800462e:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <osMessageQueueGet+0xdc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d128      	bne.n	8004688 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <osMessageQueueGet+0x54>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osMessageQueueGet+0x54>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004648:	f06f 0303 	mvn.w	r3, #3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800464e:	e038      	b.n	80046c2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004654:	f107 0310 	add.w	r3, r7, #16
 8004658:	461a      	mov	r2, r3
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	6a38      	ldr	r0, [r7, #32]
 800465e:	f000 fccb 	bl	8004ff8 <xQueueReceiveFromISR>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d003      	beq.n	8004670 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004668:	f06f 0302 	mvn.w	r3, #2
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800466e:	e028      	b.n	80046c2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d025      	beq.n	80046c2 <osMessageQueueGet+0xce>
 8004676:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <osMessageQueueGet+0xe0>)
 8004678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004686:	e01c      	b.n	80046c2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <osMessageQueueGet+0xa0>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004694:	f06f 0303 	mvn.w	r3, #3
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e013      	b.n	80046c4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	6a38      	ldr	r0, [r7, #32]
 80046a2:	f000 fbcd 	bl	8004e40 <xQueueReceive>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d00b      	beq.n	80046c4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80046b2:	f06f 0301 	mvn.w	r3, #1
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	e004      	b.n	80046c4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80046ba:	f06f 0302 	mvn.w	r3, #2
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
 80046c0:	e000      	b.n	80046c4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3728      	adds	r7, #40	; 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000134 	.word	0x20000134
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a07      	ldr	r2, [pc, #28]	; (8004704 <vApplicationGetIdleTaskMemory+0x2c>)
 80046e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a06      	ldr	r2, [pc, #24]	; (8004708 <vApplicationGetIdleTaskMemory+0x30>)
 80046ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000138 	.word	0x20000138
 8004708:	20000194 	.word	0x20000194

0800470c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a07      	ldr	r2, [pc, #28]	; (8004738 <vApplicationGetTimerTaskMemory+0x2c>)
 800471c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4a06      	ldr	r2, [pc, #24]	; (800473c <vApplicationGetTimerTaskMemory+0x30>)
 8004722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800472a:	601a      	str	r2, [r3, #0]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20000394 	.word	0x20000394
 800473c:	200003f0 	.word	0x200003f0

08004740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f103 0208 	add.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f103 0208 	add.w	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f103 0208 	add.w	r2, r3, #8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d103      	bne.n	8004802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e00c      	b.n	800481c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3308      	adds	r3, #8
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e002      	b.n	8004810 <vListInsert+0x2e>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	d2f6      	bcs.n	800480a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6852      	ldr	r2, [r2, #4]
 8004874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d103      	bne.n	8004888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	e7fe      	b.n	80048ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80048d0:	f002 fa0c 	bl	8006cec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	441a      	add	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	3b01      	subs	r3, #1
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	22ff      	movs	r2, #255	; 0xff
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	22ff      	movs	r2, #255	; 0xff
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d114      	bne.n	8004950 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01a      	beq.n	8004964 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3310      	adds	r3, #16
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fa86 	bl	8005e44 <xTaskRemoveFromEventList>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d012      	beq.n	8004964 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <xQueueGenericReset+0xcc>)
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	e009      	b.n	8004964 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3310      	adds	r3, #16
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fef3 	bl	8004740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3324      	adds	r3, #36	; 0x24
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff feee 	bl	8004740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004964:	f002 f9f0 	bl	8006d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004968:	2301      	movs	r3, #1
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <xQueueGenericCreateStatic+0x28>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	e7fe      	b.n	800499e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <xQueueGenericCreateStatic+0x42>
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <xQueueGenericCreateStatic+0x4e>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <xQueueGenericCreateStatic+0x52>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xQueueGenericCreateStatic+0x54>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <xQueueGenericCreateStatic+0x6c>
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	e7fe      	b.n	80049e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <xQueueGenericCreateStatic+0x78>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xQueueGenericCreateStatic+0x7c>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <xQueueGenericCreateStatic+0x7e>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <xQueueGenericCreateStatic+0x96>
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e7fe      	b.n	8004a0c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a0e:	2350      	movs	r3, #80	; 0x50
 8004a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d009      	beq.n	8004a2c <xQueueGenericCreateStatic+0xb4>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e7fe      	b.n	8004a2a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00d      	beq.n	8004a54 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f844 	bl	8004adc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3730      	adds	r7, #48	; 0x30
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b08a      	sub	sp, #40	; 0x28
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <xQueueGenericCreate+0x28>
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e004      	b.n	8004a9c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	3350      	adds	r3, #80	; 0x50
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f002 fb21 	bl	80070e8 <pvPortMalloc>
 8004aa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3350      	adds	r3, #80	; 0x50
 8004ab6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ac0:	79fa      	ldrb	r2, [r7, #7]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f805 	bl	8004adc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e002      	b.n	8004afe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	69b8      	ldr	r0, [r7, #24]
 8004b0e:	f7ff fecb 	bl	80048a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <xQueueGenericSend+0x30>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <xQueueGenericSend+0x3e>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <xQueueGenericSend+0x42>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueGenericSend+0x44>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <xQueueGenericSend+0x5c>
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	e7fe      	b.n	8004b7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d103      	bne.n	8004b8e <xQueueGenericSend+0x6a>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <xQueueGenericSend+0x6e>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueGenericSend+0x70>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <xQueueGenericSend+0x88>
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	e7fe      	b.n	8004baa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bac:	f001 fb56 	bl	800625c <xTaskGetSchedulerState>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <xQueueGenericSend+0x98>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <xQueueGenericSend+0x9c>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <xQueueGenericSend+0x9e>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <xQueueGenericSend+0xb6>
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bda:	f002 f887 	bl	8006cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <xQueueGenericSend+0xcc>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d129      	bne.n	8004c44 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf6:	f000 fa7c 	bl	80050f2 <prvCopyDataToQueue>
 8004bfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	3324      	adds	r3, #36	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f91b 	bl	8005e44 <xTaskRemoveFromEventList>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d013      	beq.n	8004c3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c14:	4b3f      	ldr	r3, [pc, #252]	; (8004d14 <xQueueGenericSend+0x1f0>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	e00a      	b.n	8004c3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b39      	ldr	r3, [pc, #228]	; (8004d14 <xQueueGenericSend+0x1f0>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c3c:	f002 f884 	bl	8006d48 <vPortExitCritical>
				return pdPASS;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e063      	b.n	8004d0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c4a:	f002 f87d 	bl	8006d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e05c      	b.n	8004d0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f955 	bl	8005f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c66:	f002 f86f 	bl	8006d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c6a:	f000 fe5f 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6e:	f002 f83d 	bl	8006cec <vPortEnterCritical>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d103      	bne.n	8004c88 <xQueueGenericSend+0x164>
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSend+0x17a>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9e:	f002 f853 	bl	8006d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca2:	1d3a      	adds	r2, r7, #4
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 f944 	bl	8005f38 <xTaskCheckForTimeOut>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d124      	bne.n	8004d00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb8:	f000 fb13 	bl	80052e2 <prvIsQueueFull>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	3310      	adds	r3, #16
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 f86c 	bl	8005da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd2:	f000 fa9e 	bl	8005212 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cd6:	f000 fe6f 	bl	80059b8 <xTaskResumeAll>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f47f af7c 	bne.w	8004bda <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <xQueueGenericSend+0x1f0>)
 8004ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	e772      	b.n	8004bda <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf6:	f000 fa8c 	bl	8005212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cfa:	f000 fe5d 	bl	80059b8 <xTaskResumeAll>
 8004cfe:	e76c      	b.n	8004bda <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d02:	f000 fa86 	bl	8005212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d06:	f000 fe57 	bl	80059b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3738      	adds	r7, #56	; 0x38
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08e      	sub	sp, #56	; 0x38
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <xQueueGenericSendFromISR+0x2c>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e7fe      	b.n	8004d42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <xQueueGenericSendFromISR+0x3a>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <xQueueGenericSendFromISR+0x3e>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <xQueueGenericSendFromISR+0x40>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <xQueueGenericSendFromISR+0x58>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	e7fe      	b.n	8004d6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d103      	bne.n	8004d7e <xQueueGenericSendFromISR+0x66>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <xQueueGenericSendFromISR+0x6a>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueGenericSendFromISR+0x6c>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <xQueueGenericSendFromISR+0x84>
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e7fe      	b.n	8004d9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d9c:	f002 f966 	bl	800706c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004da0:	f3ef 8211 	mrs	r2, BASEPRI
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61ba      	str	r2, [r7, #24]
 8004db6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004db8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <xQueueGenericSendFromISR+0xb6>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d12c      	bne.n	8004e28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dde:	f000 f988 	bl	80050f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004de2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d112      	bne.n	8004e12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d016      	beq.n	8004e22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 f823 	bl	8005e44 <xTaskRemoveFromEventList>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e007      	b.n	8004e22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e16:	3301      	adds	r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	b25a      	sxtb	r2, r3
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e22:	2301      	movs	r3, #1
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e26:	e001      	b.n	8004e2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3738      	adds	r7, #56	; 0x38
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <xQueueReceive+0x2e>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	623b      	str	r3, [r7, #32]
 8004e6c:	e7fe      	b.n	8004e6c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d103      	bne.n	8004e7c <xQueueReceive+0x3c>
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <xQueueReceive+0x40>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <xQueueReceive+0x42>
 8004e80:	2300      	movs	r3, #0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <xQueueReceive+0x5a>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	e7fe      	b.n	8004e98 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e9a:	f001 f9df 	bl	800625c <xTaskGetSchedulerState>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <xQueueReceive+0x6a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <xQueueReceive+0x6e>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <xQueueReceive+0x70>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xQueueReceive+0x88>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ec8:	f001 ff10 	bl	8006cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01f      	beq.n	8004f18 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004edc:	f000 f973 	bl	80051c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1e5a      	subs	r2, r3, #1
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00f      	beq.n	8004f10 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 ffa5 	bl	8005e44 <xTaskRemoveFromEventList>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f00:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <xQueueReceive+0x1b4>)
 8004f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f10:	f001 ff1a 	bl	8006d48 <vPortExitCritical>
				return pdPASS;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e069      	b.n	8004fec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f1e:	f001 ff13 	bl	8006d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e062      	b.n	8004fec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 ffeb 	bl	8005f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f3a:	f001 ff05 	bl	8006d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f3e:	f000 fcf5 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f42:	f001 fed3 	bl	8006cec <vPortEnterCritical>
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d103      	bne.n	8004f5c <xQueueReceive+0x11c>
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d103      	bne.n	8004f72 <xQueueReceive+0x132>
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f72:	f001 fee9 	bl	8006d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f76:	1d3a      	adds	r2, r7, #4
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 ffda 	bl	8005f38 <xTaskCheckForTimeOut>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d123      	bne.n	8004fd2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	f000 f993 	bl	80052b6 <prvIsQueueEmpty>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d017      	beq.n	8004fc6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	3324      	adds	r3, #36	; 0x24
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ff02 	bl	8005da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa6:	f000 f934 	bl	8005212 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004faa:	f000 fd05 	bl	80059b8 <xTaskResumeAll>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d189      	bne.n	8004ec8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <xQueueReceive+0x1b4>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	e780      	b.n	8004ec8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc8:	f000 f923 	bl	8005212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fcc:	f000 fcf4 	bl	80059b8 <xTaskResumeAll>
 8004fd0:	e77a      	b.n	8004ec8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd4:	f000 f91d 	bl	8005212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fd8:	f000 fcee 	bl	80059b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fde:	f000 f96a 	bl	80052b6 <prvIsQueueEmpty>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f43f af6f 	beq.w	8004ec8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3730      	adds	r7, #48	; 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	e000ed04 	.word	0xe000ed04

08004ff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08e      	sub	sp, #56	; 0x38
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <xQueueReceiveFromISR+0x2a>
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	623b      	str	r3, [r7, #32]
 8005020:	e7fe      	b.n	8005020 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <xQueueReceiveFromISR+0x38>
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <xQueueReceiveFromISR+0x3c>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <xQueueReceiveFromISR+0x3e>
 8005034:	2300      	movs	r3, #0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <xQueueReceiveFromISR+0x56>
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	e7fe      	b.n	800504c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800504e:	f002 f80d 	bl	800706c <vPortValidateInterruptPriority>
	__asm volatile
 8005052:	f3ef 8211 	mrs	r2, BASEPRI
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	61ba      	str	r2, [r7, #24]
 8005068:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800506a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d02f      	beq.n	80050da <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005088:	f000 f89d 	bl	80051c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005094:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d112      	bne.n	80050c4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	3310      	adds	r3, #16
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 feca 	bl	8005e44 <xTaskRemoveFromEventList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c8:	3301      	adds	r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	b25a      	sxtb	r2, r3
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80050d4:	2301      	movs	r3, #1
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
 80050d8:	e001      	b.n	80050de <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3738      	adds	r7, #56	; 0x38
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d14d      	bne.n	80051b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f8bb 	bl	8006298 <xTaskPriorityDisinherit>
 8005122:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
 800512a:	e043      	b.n	80051b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d119      	bne.n	8005166 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6858      	ldr	r0, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	461a      	mov	r2, r3
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	f002 f9d3 	bl	80074e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	441a      	add	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d32b      	bcc.n	80051b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	e026      	b.n	80051b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68d8      	ldr	r0, [r3, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	461a      	mov	r2, r3
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	f002 f9b9 	bl	80074e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	425b      	negs	r3, r3
 8005180:	441a      	add	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d207      	bcs.n	80051a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	425b      	negs	r3, r3
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d105      	bne.n	80051b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051bc:	697b      	ldr	r3, [r7, #20]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d018      	beq.n	800520a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d303      	bcc.n	80051fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68d9      	ldr	r1, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	461a      	mov	r2, r3
 8005204:	6838      	ldr	r0, [r7, #0]
 8005206:	f002 f96f 	bl	80074e8 <memcpy>
	}
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800521a:	f001 fd67 	bl	8006cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005224:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005226:	e011      	b.n	800524c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fe05 	bl	8005e44 <xTaskRemoveFromEventList>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005240:	f000 feda 	bl	8005ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	3b01      	subs	r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800524c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005250:	2b00      	cmp	r3, #0
 8005252:	dce9      	bgt.n	8005228 <prvUnlockQueue+0x16>
 8005254:	e000      	b.n	8005258 <prvUnlockQueue+0x46>
					break;
 8005256:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	22ff      	movs	r2, #255	; 0xff
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005260:	f001 fd72 	bl	8006d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005264:	f001 fd42 	bl	8006cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800526e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005270:	e011      	b.n	8005296 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d012      	beq.n	80052a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3310      	adds	r3, #16
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fde0 	bl	8005e44 <xTaskRemoveFromEventList>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800528a:	f000 feb5 	bl	8005ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	3b01      	subs	r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800529a:	2b00      	cmp	r3, #0
 800529c:	dce9      	bgt.n	8005272 <prvUnlockQueue+0x60>
 800529e:	e000      	b.n	80052a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	22ff      	movs	r2, #255	; 0xff
 80052a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052aa:	f001 fd4d 	bl	8006d48 <vPortExitCritical>
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052be:	f001 fd15 	bl	8006cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e001      	b.n	80052d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052d4:	f001 fd38 	bl	8006d48 <vPortExitCritical>

	return xReturn;
 80052d8:	68fb      	ldr	r3, [r7, #12]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052ea:	f001 fcff 	bl	8006cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d102      	bne.n	8005300 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e001      	b.n	8005304 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005304:	f001 fd20 	bl	8006d48 <vPortExitCritical>

	return xReturn;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e014      	b.n	800534e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005324:	4a0e      	ldr	r2, [pc, #56]	; (8005360 <vQueueAddToRegistry+0x4c>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005330:	490b      	ldr	r1, [pc, #44]	; (8005360 <vQueueAddToRegistry+0x4c>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800533a:	4a09      	ldr	r2, [pc, #36]	; (8005360 <vQueueAddToRegistry+0x4c>)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005346:	e005      	b.n	8005354 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b07      	cmp	r3, #7
 8005352:	d9e7      	bls.n	8005324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	20004c84 	.word	0x20004c84

08005364 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005374:	f001 fcba 	bl	8006cec <vPortEnterCritical>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537e:	b25b      	sxtb	r3, r3
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d103      	bne.n	800538e <vQueueWaitForMessageRestricted+0x2a>
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005394:	b25b      	sxtb	r3, r3
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <vQueueWaitForMessageRestricted+0x40>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a4:	f001 fcd0 	bl	8006d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3324      	adds	r3, #36	; 0x24
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fd19 	bl	8005df0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	f7ff ff27 	bl	8005212 <prvUnlockQueue>
	}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af04      	add	r7, sp, #16
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d109      	bne.n	80053f4 <xTaskCreateStatic+0x28>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	623b      	str	r3, [r7, #32]
 80053f2:	e7fe      	b.n	80053f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <xTaskCreateStatic+0x42>
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e7fe      	b.n	800540c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800540e:	235c      	movs	r3, #92	; 0x5c
 8005410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b5c      	cmp	r3, #92	; 0x5c
 8005416:	d009      	beq.n	800542c <xTaskCreateStatic+0x60>
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	e7fe      	b.n	800542a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800542c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01e      	beq.n	8005472 <xTaskCreateStatic+0xa6>
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01b      	beq.n	8005472 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005442:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800544c:	2300      	movs	r3, #0
 800544e:	9303      	str	r3, [sp, #12]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	9302      	str	r3, [sp, #8]
 8005454:	f107 0314 	add.w	r3, r7, #20
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f850 	bl	800550a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800546a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546c:	f000 f8dc 	bl	8005628 <prvAddNewTaskToReadyList>
 8005470:	e001      	b.n	8005476 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005476:	697b      	ldr	r3, [r7, #20]
	}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	; 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08c      	sub	sp, #48	; 0x30
 8005484:	af04      	add	r7, sp, #16
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f001 fe27 	bl	80070e8 <pvPortMalloc>
 800549a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054a2:	205c      	movs	r0, #92	; 0x5c
 80054a4:	f001 fe20 	bl	80070e8 <pvPortMalloc>
 80054a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
 80054b6:	e005      	b.n	80054c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f001 fed7 	bl	800726c <vPortFree>
 80054be:	e001      	b.n	80054c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d017      	beq.n	80054fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	2300      	movs	r3, #0
 80054d6:	9303      	str	r3, [sp, #12]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f80e 	bl	800550a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ee:	69f8      	ldr	r0, [r7, #28]
 80054f0:	f000 f89a 	bl	8005628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054f4:	2301      	movs	r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	e002      	b.n	8005500 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295
 80054fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005500:	69bb      	ldr	r3, [r7, #24]
	}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b088      	sub	sp, #32
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	461a      	mov	r2, r3
 8005522:	21a5      	movs	r1, #165	; 0xa5
 8005524:	f001 ffeb 	bl	80074fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005532:	3b01      	subs	r3, #1
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	2b00      	cmp	r3, #0
 800554a:	d009      	beq.n	8005560 <prvInitialiseNewTask+0x56>
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e7fe      	b.n	800555e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01f      	beq.n	80055a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e012      	b.n	8005592 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	7819      	ldrb	r1, [r3, #0]
 8005574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	3334      	adds	r3, #52	; 0x34
 800557c:	460a      	mov	r2, r1
 800557e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b0f      	cmp	r3, #15
 8005596:	d9e9      	bls.n	800556c <prvInitialiseNewTask+0x62>
 8005598:	e000      	b.n	800559c <prvInitialiseNewTask+0x92>
			{
				break;
 800559a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a4:	e003      	b.n	80055ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	2b37      	cmp	r3, #55	; 0x37
 80055b2:	d901      	bls.n	80055b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055b4:	2337      	movs	r3, #55	; 0x37
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	2200      	movs	r2, #0
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f8d6 	bl	8004780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	3318      	adds	r3, #24
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff f8d1 	bl	8004780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	69b8      	ldr	r0, [r7, #24]
 8005608:	f001 fa4c 	bl	8006aa4 <pxPortInitialiseStack>
 800560c:	4602      	mov	r2, r0
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561e:	bf00      	nop
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005630:	f001 fb5c 	bl	8006cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <prvAddNewTaskToReadyList+0xc4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <prvAddNewTaskToReadyList+0xc4>)
 800563c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005646:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800564c:	4b27      	ldr	r3, [pc, #156]	; (80056ec <prvAddNewTaskToReadyList+0xc4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d110      	bne.n	8005676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005654:	f000 fd48 	bl	80060e8 <prvInitialiseTaskLists>
 8005658:	e00d      	b.n	8005676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <prvAddNewTaskToReadyList+0xcc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005662:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	429a      	cmp	r2, r3
 800566e:	d802      	bhi.n	8005676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005676:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <prvAddNewTaskToReadyList+0xd0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	4a1e      	ldr	r2, [pc, #120]	; (80056f8 <prvAddNewTaskToReadyList+0xd0>)
 800567e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <prvAddNewTaskToReadyList+0xd0>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <prvAddNewTaskToReadyList+0xd4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <prvAddNewTaskToReadyList+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <prvAddNewTaskToReadyList+0xd4>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4a15      	ldr	r2, [pc, #84]	; (8005700 <prvAddNewTaskToReadyList+0xd8>)
 80056aa:	441a      	add	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7ff f871 	bl	800479a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056b8:	f001 fb46 	bl	8006d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <prvAddNewTaskToReadyList+0xcc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <prvAddNewTaskToReadyList+0xc8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d207      	bcs.n	80056e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <prvAddNewTaskToReadyList+0xdc>)
 80056d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000cc4 	.word	0x20000cc4
 80056f0:	200007f0 	.word	0x200007f0
 80056f4:	20000cd0 	.word	0x20000cd0
 80056f8:	20000ce0 	.word	0x20000ce0
 80056fc:	20000ccc 	.word	0x20000ccc
 8005700:	200007f4 	.word	0x200007f4
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <vTaskDelayUntil+0x28>
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e7fe      	b.n	800572e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <vTaskDelayUntil+0x42>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e7fe      	b.n	8005748 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <vTaskDelayUntil+0xe8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <vTaskDelayUntil+0x5e>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e7fe      	b.n	8005764 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005766:	f000 f8e1 	bl	800592c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800576a:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <vTaskDelayUntil+0xec>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	4413      	add	r3, r2
 8005778:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	429a      	cmp	r2, r3
 8005782:	d20b      	bcs.n	800579c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	429a      	cmp	r2, r3
 800578c:	d211      	bcs.n	80057b2 <vTaskDelayUntil+0xaa>
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90d      	bls.n	80057b2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	e00a      	b.n	80057b2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d303      	bcc.n	80057ae <vTaskDelayUntil+0xa6>
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d901      	bls.n	80057b2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2100      	movs	r1, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fdd2 	bl	8006370 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80057cc:	f000 f8f4 	bl	80059b8 <xTaskResumeAll>
 80057d0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <vTaskDelayUntil+0xf0>)
 80057da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057e8:	bf00      	nop
 80057ea:	3728      	adds	r7, #40	; 0x28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000cec 	.word	0x20000cec
 80057f4:	20000cc8 	.word	0x20000cc8
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <vTaskDelay+0x60>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <vTaskDelay+0x2e>
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	e7fe      	b.n	8005828 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800582a:	f000 f87f 	bl	800592c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800582e:	2100      	movs	r1, #0
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fd9d 	bl	8006370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005836:	f000 f8bf 	bl	80059b8 <xTaskResumeAll>
 800583a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <vTaskDelay+0x64>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000cec 	.word	0x20000cec
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005872:	463a      	mov	r2, r7
 8005874:	1d39      	adds	r1, r7, #4
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe ff2c 	bl	80046d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	9202      	str	r2, [sp, #8]
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	2300      	movs	r3, #0
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2300      	movs	r3, #0
 8005890:	460a      	mov	r2, r1
 8005892:	4920      	ldr	r1, [pc, #128]	; (8005914 <vTaskStartScheduler+0xb0>)
 8005894:	4820      	ldr	r0, [pc, #128]	; (8005918 <vTaskStartScheduler+0xb4>)
 8005896:	f7ff fd99 	bl	80053cc <xTaskCreateStatic>
 800589a:	4602      	mov	r2, r0
 800589c:	4b1f      	ldr	r3, [pc, #124]	; (800591c <vTaskStartScheduler+0xb8>)
 800589e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058a0:	4b1e      	ldr	r3, [pc, #120]	; (800591c <vTaskStartScheduler+0xb8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058a8:	2301      	movs	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e001      	b.n	80058b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058b8:	f000 fdae 	bl	8006418 <xTimerCreateTimerTask>
 80058bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d115      	bne.n	80058f0 <vTaskStartScheduler+0x8c>
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <vTaskStartScheduler+0xbc>)
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <vTaskStartScheduler+0xc0>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <vTaskStartScheduler+0xc4>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ea:	f001 f961 	bl	8006bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ee:	e00d      	b.n	800590c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d109      	bne.n	800590c <vTaskStartScheduler+0xa8>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e7fe      	b.n	800590a <vTaskStartScheduler+0xa6>
}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	0800870c 	.word	0x0800870c
 8005918:	08006011 	.word	0x08006011
 800591c:	20000ce8 	.word	0x20000ce8
 8005920:	20000ce4 	.word	0x20000ce4
 8005924:	20000cd0 	.word	0x20000cd0
 8005928:	20000cc8 	.word	0x20000cc8

0800592c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <vTaskSuspendAll+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a03      	ldr	r2, [pc, #12]	; (8005944 <vTaskSuspendAll+0x18>)
 8005938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20000cec 	.word	0x20000cec

08005948 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8005952:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <prvGetExpectedIdleTime+0x5c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800595a:	2301      	movs	r3, #1
 800595c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <prvGetExpectedIdleTime+0x60>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	e012      	b.n	8005994 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <prvGetExpectedIdleTime+0x64>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d902      	bls.n	800597c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	e00b      	b.n	8005994 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	e005      	b.n	8005994 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <prvGetExpectedIdleTime+0x68>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <prvGetExpectedIdleTime+0x6c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8005994:	687b      	ldr	r3, [r7, #4]
	}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000ccc 	.word	0x20000ccc
 80059a8:	200007f0 	.word	0x200007f0
 80059ac:	200007f4 	.word	0x200007f4
 80059b0:	20000ce4 	.word	0x20000ce4
 80059b4:	20000cc8 	.word	0x20000cc8

080059b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059c6:	4b41      	ldr	r3, [pc, #260]	; (8005acc <xTaskResumeAll+0x114>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <xTaskResumeAll+0x2a>
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	e7fe      	b.n	80059e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059e2:	f001 f983 	bl	8006cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059e6:	4b39      	ldr	r3, [pc, #228]	; (8005acc <xTaskResumeAll+0x114>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4a37      	ldr	r2, [pc, #220]	; (8005acc <xTaskResumeAll+0x114>)
 80059ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <xTaskResumeAll+0x114>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d162      	bne.n	8005abe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059f8:	4b35      	ldr	r3, [pc, #212]	; (8005ad0 <xTaskResumeAll+0x118>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05e      	beq.n	8005abe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a00:	e02f      	b.n	8005a62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a02:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <xTaskResumeAll+0x11c>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe ff20 	bl	8004854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe ff1b 	bl	8004854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <xTaskResumeAll+0x120>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d903      	bls.n	8005a32 <xTaskResumeAll+0x7a>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <xTaskResumeAll+0x120>)
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a27      	ldr	r2, [pc, #156]	; (8005adc <xTaskResumeAll+0x124>)
 8005a40:	441a      	add	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7fe fea6 	bl	800479a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <xTaskResumeAll+0x128>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a5c:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <xTaskResumeAll+0x12c>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <xTaskResumeAll+0x11c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1cb      	bne.n	8005a02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a70:	f000 fbd4 	bl	800621c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a74:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <xTaskResumeAll+0x130>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d010      	beq.n	8005aa2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a80:	f000 f87e 	bl	8005b80 <xTaskIncrementTick>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <xTaskResumeAll+0x12c>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f1      	bne.n	8005a80 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <xTaskResumeAll+0x130>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <xTaskResumeAll+0x12c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <xTaskResumeAll+0x134>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005abe:	f001 f943 	bl	8006d48 <vPortExitCritical>

	return xAlreadyYielded;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000cec 	.word	0x20000cec
 8005ad0:	20000cc4 	.word	0x20000cc4
 8005ad4:	20000c84 	.word	0x20000c84
 8005ad8:	20000ccc 	.word	0x20000ccc
 8005adc:	200007f4 	.word	0x200007f4
 8005ae0:	200007f0 	.word	0x200007f0
 8005ae4:	20000cd8 	.word	0x20000cd8
 8005ae8:	20000cd4 	.word	0x20000cd4
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <xTaskGetTickCount+0x1c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005afc:	687b      	ldr	r3, [r7, #4]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000cc8 	.word	0x20000cc8

08005b10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b16:	f001 faa9 	bl	800706c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <xTaskGetTickCountFromISR+0x20>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b24:	683b      	ldr	r3, [r7, #0]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000cc8 	.word	0x20000cc8

08005b34 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <vTaskStepTick+0x44>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	441a      	add	r2, r3
 8005b44:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <vTaskStepTick+0x48>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d909      	bls.n	8005b60 <vTaskStepTick+0x2c>
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e7fe      	b.n	8005b5e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <vTaskStepTick+0x44>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	4a03      	ldr	r2, [pc, #12]	; (8005b78 <vTaskStepTick+0x44>)
 8005b6a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20000cc8 	.word	0x20000cc8
 8005b7c:	20000ce4 	.word	0x20000ce4

08005b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b8a:	4b4e      	ldr	r3, [pc, #312]	; (8005cc4 <xTaskIncrementTick+0x144>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f040 8088 	bne.w	8005ca4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b94:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <xTaskIncrementTick+0x148>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b9c:	4a4a      	ldr	r2, [pc, #296]	; (8005cc8 <xTaskIncrementTick+0x148>)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d11f      	bne.n	8005be8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ba8:	4b48      	ldr	r3, [pc, #288]	; (8005ccc <xTaskIncrementTick+0x14c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <xTaskIncrementTick+0x46>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskIncrementTick+0x44>
 8005bc6:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <xTaskIncrementTick+0x14c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <xTaskIncrementTick+0x150>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a3e      	ldr	r2, [pc, #248]	; (8005ccc <xTaskIncrementTick+0x14c>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4a3e      	ldr	r2, [pc, #248]	; (8005cd0 <xTaskIncrementTick+0x150>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4b3e      	ldr	r3, [pc, #248]	; (8005cd4 <xTaskIncrementTick+0x154>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	4a3c      	ldr	r2, [pc, #240]	; (8005cd4 <xTaskIncrementTick+0x154>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	f000 fb1a 	bl	800621c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005be8:	4b3b      	ldr	r3, [pc, #236]	; (8005cd8 <xTaskIncrementTick+0x158>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d349      	bcc.n	8005c86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf2:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <xTaskIncrementTick+0x14c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfc:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <xTaskIncrementTick+0x158>)
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	601a      	str	r2, [r3, #0]
					break;
 8005c04:	e03f      	b.n	8005c86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c06:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <xTaskIncrementTick+0x14c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d203      	bcs.n	8005c26 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c1e:	4a2e      	ldr	r2, [pc, #184]	; (8005cd8 <xTaskIncrementTick+0x158>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c24:	e02f      	b.n	8005c86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe fe12 	bl	8004854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe fe09 	bl	8004854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c46:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <xTaskIncrementTick+0x15c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d903      	bls.n	8005c56 <xTaskIncrementTick+0xd6>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	4a22      	ldr	r2, [pc, #136]	; (8005cdc <xTaskIncrementTick+0x15c>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <xTaskIncrementTick+0x160>)
 8005c64:	441a      	add	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7fe fd94 	bl	800479a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <xTaskIncrementTick+0x164>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d3b8      	bcc.n	8005bf2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c84:	e7b5      	b.n	8005bf2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c86:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <xTaskIncrementTick+0x164>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	4914      	ldr	r1, [pc, #80]	; (8005ce0 <xTaskIncrementTick+0x160>)
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d907      	bls.n	8005cae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e004      	b.n	8005cae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ca4:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <xTaskIncrementTick+0x168>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a0f      	ldr	r2, [pc, #60]	; (8005ce8 <xTaskIncrementTick+0x168>)
 8005cac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <xTaskIncrementTick+0x16c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005cba:	697b      	ldr	r3, [r7, #20]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000cec 	.word	0x20000cec
 8005cc8:	20000cc8 	.word	0x20000cc8
 8005ccc:	20000c7c 	.word	0x20000c7c
 8005cd0:	20000c80 	.word	0x20000c80
 8005cd4:	20000cdc 	.word	0x20000cdc
 8005cd8:	20000ce4 	.word	0x20000ce4
 8005cdc:	20000ccc 	.word	0x20000ccc
 8005ce0:	200007f4 	.word	0x200007f4
 8005ce4:	200007f0 	.word	0x200007f0
 8005ce8:	20000cd4 	.word	0x20000cd4
 8005cec:	20000cd8 	.word	0x20000cd8

08005cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <vTaskSwitchContext+0xa4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cfe:	4b26      	ldr	r3, [pc, #152]	; (8005d98 <vTaskSwitchContext+0xa8>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d04:	e040      	b.n	8005d88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <vTaskSwitchContext+0xa8>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <vTaskSwitchContext+0xac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e00f      	b.n	8005d34 <vTaskSwitchContext+0x44>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <vTaskSwitchContext+0x3e>
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e7fe      	b.n	8005d2c <vTaskSwitchContext+0x3c>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	491a      	ldr	r1, [pc, #104]	; (8005da0 <vTaskSwitchContext+0xb0>)
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0e5      	beq.n	8005d14 <vTaskSwitchContext+0x24>
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <vTaskSwitchContext+0xb0>)
 8005d54:	4413      	add	r3, r2
 8005d56:	60bb      	str	r3, [r7, #8]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d104      	bne.n	8005d78 <vTaskSwitchContext+0x88>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <vTaskSwitchContext+0xb4>)
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4a06      	ldr	r2, [pc, #24]	; (8005d9c <vTaskSwitchContext+0xac>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6013      	str	r3, [r2, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20000cec 	.word	0x20000cec
 8005d98:	20000cd8 	.word	0x20000cd8
 8005d9c:	20000ccc 	.word	0x20000ccc
 8005da0:	200007f4 	.word	0x200007f4
 8005da4:	200007f0 	.word	0x200007f0

08005da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <vTaskPlaceOnEventList+0x24>
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e7fe      	b.n	8005dca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <vTaskPlaceOnEventList+0x44>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fe fd04 	bl	80047e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dda:	2101      	movs	r1, #1
 8005ddc:	6838      	ldr	r0, [r7, #0]
 8005dde:	f000 fac7 	bl	8006370 <prvAddCurrentTaskToDelayedList>
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200007f0 	.word	0x200007f0

08005df0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <vTaskPlaceOnEventListRestricted+0x26>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e7fe      	b.n	8005e14 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <vTaskPlaceOnEventListRestricted+0x50>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3318      	adds	r3, #24
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7fe fcbb 	bl	800479a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	68b8      	ldr	r0, [r7, #8]
 8005e34:	f000 fa9c 	bl	8006370 <prvAddCurrentTaskToDelayedList>
	}
 8005e38:	bf00      	nop
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	200007f0 	.word	0x200007f0

08005e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <xTaskRemoveFromEventList+0x2a>
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e7fe      	b.n	8005e6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3318      	adds	r3, #24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fcee 	bl	8004854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e78:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <xTaskRemoveFromEventList+0xb0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11f      	bne.n	8005ec0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fce5 	bl	8004854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <xTaskRemoveFromEventList+0xb4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d903      	bls.n	8005e9e <xTaskRemoveFromEventList+0x5a>
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <xTaskRemoveFromEventList+0xb4>)
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4a14      	ldr	r2, [pc, #80]	; (8005efc <xTaskRemoveFromEventList+0xb8>)
 8005eac:	441a      	add	r2, r3
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7fe fc70 	bl	800479a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8005eba:	f000 f9af 	bl	800621c <prvResetNextTaskUnblockTime>
 8005ebe:	e005      	b.n	8005ecc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	3318      	adds	r3, #24
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	480e      	ldr	r0, [pc, #56]	; (8005f00 <xTaskRemoveFromEventList+0xbc>)
 8005ec8:	f7fe fc67 	bl	800479a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <xTaskRemoveFromEventList+0xc0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d905      	bls.n	8005ee6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <xTaskRemoveFromEventList+0xc4>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e001      	b.n	8005eea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000cec 	.word	0x20000cec
 8005ef8:	20000ccc 	.word	0x20000ccc
 8005efc:	200007f4 	.word	0x200007f4
 8005f00:	20000c84 	.word	0x20000c84
 8005f04:	200007f0 	.word	0x200007f0
 8005f08:	20000cd8 	.word	0x20000cd8

08005f0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <vTaskInternalSetTimeOutState+0x24>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <vTaskInternalSetTimeOutState+0x28>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	20000cdc 	.word	0x20000cdc
 8005f34:	20000cc8 	.word	0x20000cc8

08005f38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <xTaskCheckForTimeOut+0x24>
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	e7fe      	b.n	8005f5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <xTaskCheckForTimeOut+0x3e>
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e7fe      	b.n	8005f74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005f76:	f000 feb9 	bl	8006cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <xTaskCheckForTimeOut+0xb8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d102      	bne.n	8005f9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e023      	b.n	8005fe2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <xTaskCheckForTimeOut+0xbc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d007      	beq.n	8005fb6 <xTaskCheckForTimeOut+0x7e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d302      	bcc.n	8005fb6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e015      	b.n	8005fe2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d20b      	bcs.n	8005fd8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff ff9d 	bl	8005f0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e004      	b.n	8005fe2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fe2:	f000 feb1 	bl	8006d48 <vPortExitCritical>

	return xReturn;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000cc8 	.word	0x20000cc8
 8005ff4:	20000cdc 	.word	0x20000cdc

08005ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <vTaskMissedYield+0x14>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000cd8 	.word	0x20000cd8

08006010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006018:	f000 f8a6 	bl	8006168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800601c:	4b17      	ldr	r3, [pc, #92]	; (800607c <prvIdleTask+0x6c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d907      	bls.n	8006034 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006024:	4b16      	ldr	r3, [pc, #88]	; (8006080 <prvIdleTask+0x70>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8006034:	f7ff fc88 	bl	8005948 <prvGetExpectedIdleTime>
 8006038:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d9eb      	bls.n	8006018 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8006040:	f7ff fc74 	bl	800592c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <prvIdleTask+0x74>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <prvIdleTask+0x78>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d209      	bcs.n	8006064 <prvIdleTask+0x54>
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	e7fe      	b.n	8006062 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8006064:	f7ff fc70 	bl	8005948 <prvGetExpectedIdleTime>
 8006068:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d902      	bls.n	8006076 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fee9 	bl	8006e48 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8006076:	f7ff fc9f 	bl	80059b8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800607a:	e7cd      	b.n	8006018 <prvIdleTask+0x8>
 800607c:	200007f4 	.word	0x200007f4
 8006080:	e000ed04 	.word	0xe000ed04
 8006084:	20000ce4 	.word	0x20000ce4
 8006088:	20000cc8 	.word	0x20000cc8

0800608c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8006092:	2301      	movs	r3, #1
 8006094:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8006096:	2301      	movs	r3, #1
 8006098:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <eTaskConfirmSleepModeStatus+0x4c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80060a2:	2300      	movs	r3, #0
 80060a4:	71fb      	strb	r3, [r7, #7]
 80060a6:	e010      	b.n	80060ca <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <eTaskConfirmSleepModeStatus+0x50>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80060b0:	2300      	movs	r3, #0
 80060b2:	71fb      	strb	r3, [r7, #7]
 80060b4:	e009      	b.n	80060ca <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <eTaskConfirmSleepModeStatus+0x54>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <eTaskConfirmSleepModeStatus+0x58>)
 80060bc:	6819      	ldr	r1, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	1acb      	subs	r3, r1, r3
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d101      	bne.n	80060ca <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80060c6:	2302      	movs	r3, #2
 80060c8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80060ca:	79fb      	ldrb	r3, [r7, #7]
	}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20000c84 	.word	0x20000c84
 80060dc:	20000cd8 	.word	0x20000cd8
 80060e0:	20000cb0 	.word	0x20000cb0
 80060e4:	20000cc4 	.word	0x20000cc4

080060e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ee:	2300      	movs	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	e00c      	b.n	800610e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <prvInitialiseTaskLists+0x60>)
 8006100:	4413      	add	r3, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fb1c 	bl	8004740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3301      	adds	r3, #1
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b37      	cmp	r3, #55	; 0x37
 8006112:	d9ef      	bls.n	80060f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <prvInitialiseTaskLists+0x64>)
 8006116:	f7fe fb13 	bl	8004740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800611a:	480d      	ldr	r0, [pc, #52]	; (8006150 <prvInitialiseTaskLists+0x68>)
 800611c:	f7fe fb10 	bl	8004740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006120:	480c      	ldr	r0, [pc, #48]	; (8006154 <prvInitialiseTaskLists+0x6c>)
 8006122:	f7fe fb0d 	bl	8004740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006126:	480c      	ldr	r0, [pc, #48]	; (8006158 <prvInitialiseTaskLists+0x70>)
 8006128:	f7fe fb0a 	bl	8004740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800612c:	480b      	ldr	r0, [pc, #44]	; (800615c <prvInitialiseTaskLists+0x74>)
 800612e:	f7fe fb07 	bl	8004740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006132:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <prvInitialiseTaskLists+0x78>)
 8006134:	4a05      	ldr	r2, [pc, #20]	; (800614c <prvInitialiseTaskLists+0x64>)
 8006136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <prvInitialiseTaskLists+0x7c>)
 800613a:	4a05      	ldr	r2, [pc, #20]	; (8006150 <prvInitialiseTaskLists+0x68>)
 800613c:	601a      	str	r2, [r3, #0]
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200007f4 	.word	0x200007f4
 800614c:	20000c54 	.word	0x20000c54
 8006150:	20000c68 	.word	0x20000c68
 8006154:	20000c84 	.word	0x20000c84
 8006158:	20000c98 	.word	0x20000c98
 800615c:	20000cb0 	.word	0x20000cb0
 8006160:	20000c7c 	.word	0x20000c7c
 8006164:	20000c80 	.word	0x20000c80

08006168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800616e:	e019      	b.n	80061a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006170:	f000 fdbc 	bl	8006cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006174:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <prvCheckTasksWaitingTermination+0x4c>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fb67 	bl	8004854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <prvCheckTasksWaitingTermination+0x50>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3b01      	subs	r3, #1
 800618c:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <prvCheckTasksWaitingTermination+0x50>)
 800618e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvCheckTasksWaitingTermination+0x54>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3b01      	subs	r3, #1
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <prvCheckTasksWaitingTermination+0x54>)
 8006198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800619a:	f000 fdd5 	bl	8006d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f80e 	bl	80061c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <prvCheckTasksWaitingTermination+0x54>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e1      	bne.n	8006170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000c98 	.word	0x20000c98
 80061b8:	20000cc4 	.word	0x20000cc4
 80061bc:	20000cac 	.word	0x20000cac

080061c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f848 	bl	800726c <vPortFree>
				vPortFree( pxTCB );
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f845 	bl	800726c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061e2:	e017      	b.n	8006214 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d103      	bne.n	80061f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 f83c 	bl	800726c <vPortFree>
	}
 80061f4:	e00e      	b.n	8006214 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d009      	beq.n	8006214 <prvDeleteTCB+0x54>
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e7fe      	b.n	8006212 <prvDeleteTCB+0x52>
	}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <prvResetNextTaskUnblockTime+0x38>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <prvResetNextTaskUnblockTime+0x3c>)
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006234:	e008      	b.n	8006248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <prvResetNextTaskUnblockTime+0x38>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a04      	ldr	r2, [pc, #16]	; (8006258 <prvResetNextTaskUnblockTime+0x3c>)
 8006246:	6013      	str	r3, [r2, #0]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20000c7c 	.word	0x20000c7c
 8006258:	20000ce4 	.word	0x20000ce4

0800625c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <xTaskGetSchedulerState+0x34>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800626a:	2301      	movs	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e008      	b.n	8006282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <xTaskGetSchedulerState+0x38>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006278:	2302      	movs	r3, #2
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e001      	b.n	8006282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006282:	687b      	ldr	r3, [r7, #4]
	}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000cd0 	.word	0x20000cd0
 8006294:	20000cec 	.word	0x20000cec

08006298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d054      	beq.n	8006358 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062ae:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <xTaskPriorityDisinherit+0xcc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d009      	beq.n	80062cc <xTaskPriorityDisinherit+0x34>
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e7fe      	b.n	80062ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <xTaskPriorityDisinherit+0x50>
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	e7fe      	b.n	80062e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ec:	1e5a      	subs	r2, r3, #1
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d02c      	beq.n	8006358 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006302:	2b00      	cmp	r3, #0
 8006304:	d128      	bne.n	8006358 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe faa2 	bl	8004854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <xTaskPriorityDisinherit+0xd0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d903      	bls.n	8006338 <xTaskPriorityDisinherit+0xa0>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <xTaskPriorityDisinherit+0xd0>)
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4a09      	ldr	r2, [pc, #36]	; (800636c <xTaskPriorityDisinherit+0xd4>)
 8006346:	441a      	add	r2, r3
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f7fe fa23 	bl	800479a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006358:	697b      	ldr	r3, [r7, #20]
	}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200007f0 	.word	0x200007f0
 8006368:	20000ccc 	.word	0x20000ccc
 800636c:	200007f4 	.word	0x200007f4

08006370 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800637a:	4b21      	ldr	r3, [pc, #132]	; (8006400 <prvAddCurrentTaskToDelayedList+0x90>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006380:	4b20      	ldr	r3, [pc, #128]	; (8006404 <prvAddCurrentTaskToDelayedList+0x94>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3304      	adds	r3, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fa64 	bl	8004854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d10a      	bne.n	80063aa <prvAddCurrentTaskToDelayedList+0x3a>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800639a:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <prvAddCurrentTaskToDelayedList+0x94>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3304      	adds	r3, #4
 80063a0:	4619      	mov	r1, r3
 80063a2:	4819      	ldr	r0, [pc, #100]	; (8006408 <prvAddCurrentTaskToDelayedList+0x98>)
 80063a4:	f7fe f9f9 	bl	800479a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063a8:	e026      	b.n	80063f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063b2:	4b14      	ldr	r3, [pc, #80]	; (8006404 <prvAddCurrentTaskToDelayedList+0x94>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d209      	bcs.n	80063d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <prvAddCurrentTaskToDelayedList+0x9c>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <prvAddCurrentTaskToDelayedList+0x94>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7fe fa07 	bl	80047e2 <vListInsert>
}
 80063d4:	e010      	b.n	80063f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <prvAddCurrentTaskToDelayedList+0x94>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3304      	adds	r3, #4
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7fe f9fd 	bl	80047e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d202      	bcs.n	80063f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063f2:	4a08      	ldr	r2, [pc, #32]	; (8006414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6013      	str	r3, [r2, #0]
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000cc8 	.word	0x20000cc8
 8006404:	200007f0 	.word	0x200007f0
 8006408:	20000cb0 	.word	0x20000cb0
 800640c:	20000c80 	.word	0x20000c80
 8006410:	20000c7c 	.word	0x20000c7c
 8006414:	20000ce4 	.word	0x20000ce4

08006418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006422:	f000 faff 	bl	8006a24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <xTimerCreateTimerTask+0x80>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d021      	beq.n	8006472 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006436:	1d3a      	adds	r2, r7, #4
 8006438:	f107 0108 	add.w	r1, r7, #8
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe f963 	bl	800470c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	9202      	str	r2, [sp, #8]
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	2302      	movs	r3, #2
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	460a      	mov	r2, r1
 8006458:	4910      	ldr	r1, [pc, #64]	; (800649c <xTimerCreateTimerTask+0x84>)
 800645a:	4811      	ldr	r0, [pc, #68]	; (80064a0 <xTimerCreateTimerTask+0x88>)
 800645c:	f7fe ffb6 	bl	80053cc <xTaskCreateStatic>
 8006460:	4602      	mov	r2, r0
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <xTimerCreateTimerTask+0x8c>)
 8006464:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <xTimerCreateTimerTask+0x8c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800646e:	2301      	movs	r3, #1
 8006470:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <xTimerCreateTimerTask+0x74>
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	e7fe      	b.n	800648a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800648c:	697b      	ldr	r3, [r7, #20]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000d20 	.word	0x20000d20
 800649c:	08008714 	.word	0x08008714
 80064a0:	080065d9 	.word	0x080065d9
 80064a4:	20000d24 	.word	0x20000d24

080064a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <xTimerGenericCommand+0x2c>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	623b      	str	r3, [r7, #32]
 80064d2:	e7fe      	b.n	80064d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <xTimerGenericCommand+0x94>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02a      	beq.n	8006532 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	dc18      	bgt.n	8006520 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064ee:	f7ff feb5 	bl	800625c <xTaskGetSchedulerState>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d109      	bne.n	800650c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <xTimerGenericCommand+0x94>)
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	f107 0110 	add.w	r1, r7, #16
 8006500:	2300      	movs	r3, #0
 8006502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006504:	f7fe fb0e 	bl	8004b24 <xQueueGenericSend>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24
 800650a:	e012      	b.n	8006532 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <xTimerGenericCommand+0x94>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	f107 0110 	add.w	r1, r7, #16
 8006514:	2300      	movs	r3, #0
 8006516:	2200      	movs	r2, #0
 8006518:	f7fe fb04 	bl	8004b24 <xQueueGenericSend>
 800651c:	6278      	str	r0, [r7, #36]	; 0x24
 800651e:	e008      	b.n	8006532 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <xTimerGenericCommand+0x94>)
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	f107 0110 	add.w	r1, r7, #16
 8006528:	2300      	movs	r3, #0
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	f7fe fbf4 	bl	8004d18 <xQueueGenericSendFromISR>
 8006530:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006534:	4618      	mov	r0, r3
 8006536:	3728      	adds	r7, #40	; 0x28
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000d20 	.word	0x20000d20

08006540 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af02      	add	r7, sp, #8
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654a:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <prvProcessExpiredTimer+0x94>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	3304      	adds	r3, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe f97b 	bl	8004854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d021      	beq.n	80065b0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	18d1      	adds	r1, r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6978      	ldr	r0, [r7, #20]
 800657a:	f000 f8d1 	bl	8006720 <prvInsertTimerInActiveList>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01e      	beq.n	80065c2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006584:	2300      	movs	r3, #0
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	2100      	movs	r1, #0
 800658e:	6978      	ldr	r0, [r7, #20]
 8006590:	f7ff ff8a 	bl	80064a8 <xTimerGenericCommand>
 8006594:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d112      	bne.n	80065c2 <prvProcessExpiredTimer+0x82>
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e7fe      	b.n	80065ae <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	6978      	ldr	r0, [r7, #20]
 80065c8:	4798      	blx	r3
}
 80065ca:	bf00      	nop
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000d18 	.word	0x20000d18

080065d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065e0:	f107 0308 	add.w	r3, r7, #8
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f857 	bl	8006698 <prvGetNextExpireTime>
 80065ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4619      	mov	r1, r3
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f803 	bl	80065fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065f6:	f000 f8d5 	bl	80067a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065fa:	e7f1      	b.n	80065e0 <prvTimerTask+0x8>

080065fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006606:	f7ff f991 	bl	800592c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f866 	bl	80066e0 <prvSampleTimeNow>
 8006614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d130      	bne.n	800667e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <prvProcessTimerOrBlockTask+0x3c>
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	429a      	cmp	r2, r3
 8006628:	d806      	bhi.n	8006638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800662a:	f7ff f9c5 	bl	80059b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff85 	bl	8006540 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006636:	e024      	b.n	8006682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <prvProcessTimerOrBlockTask+0x90>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <prvProcessTimerOrBlockTask+0x50>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <prvProcessTimerOrBlockTask+0x52>
 800664c:	2300      	movs	r3, #0
 800664e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <prvProcessTimerOrBlockTask+0x94>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4619      	mov	r1, r3
 800665e:	f7fe fe81 	bl	8005364 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006662:	f7ff f9a9 	bl	80059b8 <xTaskResumeAll>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <prvProcessTimerOrBlockTask+0x98>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
}
 800667c:	e001      	b.n	8006682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800667e:	f7ff f99b 	bl	80059b8 <xTaskResumeAll>
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000d1c 	.word	0x20000d1c
 8006690:	20000d20 	.word	0x20000d20
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066a0:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <prvGetNextExpireTime+0x44>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <prvGetNextExpireTime+0x16>
 80066aa:	2201      	movs	r2, #1
 80066ac:	e000      	b.n	80066b0 <prvGetNextExpireTime+0x18>
 80066ae:	2200      	movs	r2, #0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <prvGetNextExpireTime+0x44>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e001      	b.n	80066cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000d18 	.word	0x20000d18

080066e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066e8:	f7ff fa02 	bl	8005af0 <xTaskGetTickCount>
 80066ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <prvSampleTimeNow+0x3c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d205      	bcs.n	8006704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066f8:	f000 f930 	bl	800695c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e002      	b.n	800670a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800670a:	4a04      	ldr	r2, [pc, #16]	; (800671c <prvSampleTimeNow+0x3c>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000d28 	.word	0x20000d28

08006720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d812      	bhi.n	800676c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	429a      	cmp	r2, r3
 8006752:	d302      	bcc.n	800675a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e01b      	b.n	8006792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <prvInsertTimerInActiveList+0x7c>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3304      	adds	r3, #4
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7fe f83c 	bl	80047e2 <vListInsert>
 800676a:	e012      	b.n	8006792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d206      	bcs.n	8006782 <prvInsertTimerInActiveList+0x62>
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e007      	b.n	8006792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006782:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <prvInsertTimerInActiveList+0x80>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fe f828 	bl	80047e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006792:	697b      	ldr	r3, [r7, #20]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000d1c 	.word	0x20000d1c
 80067a0:	20000d18 	.word	0x20000d18

080067a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	; 0x38
 80067a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067aa:	e0c6      	b.n	800693a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da17      	bge.n	80067e2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067b2:	1d3b      	adds	r3, r7, #4
 80067b4:	3304      	adds	r3, #4
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <prvProcessReceivedCommands+0x2e>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e7fe      	b.n	80067d0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d8:	6850      	ldr	r0, [r2, #4]
 80067da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067dc:	6892      	ldr	r2, [r2, #8]
 80067de:	4611      	mov	r1, r2
 80067e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f2c0 80a7 	blt.w	8006938 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	3304      	adds	r3, #4
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe f82a 	bl	8004854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006800:	463b      	mov	r3, r7
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ff6c 	bl	80066e0 <prvSampleTimeNow>
 8006808:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b09      	cmp	r3, #9
 800680e:	f200 8094 	bhi.w	800693a <prvProcessReceivedCommands+0x196>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <prvProcessReceivedCommands+0x74>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006841 	.word	0x08006841
 800681c:	08006841 	.word	0x08006841
 8006820:	08006841 	.word	0x08006841
 8006824:	080068b3 	.word	0x080068b3
 8006828:	080068c7 	.word	0x080068c7
 800682c:	0800690f 	.word	0x0800690f
 8006830:	08006841 	.word	0x08006841
 8006834:	08006841 	.word	0x08006841
 8006838:	080068b3 	.word	0x080068b3
 800683c:	080068c7 	.word	0x080068c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	b2da      	uxtb	r2, r3
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	18d1      	adds	r1, r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006860:	f7ff ff5e 	bl	8006720 <prvInsertTimerInActiveList>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d067      	beq.n	800693a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006870:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d05c      	beq.n	800693a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	441a      	add	r2, r3
 8006888:	2300      	movs	r3, #0
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2300      	movs	r3, #0
 800688e:	2100      	movs	r1, #0
 8006890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006892:	f7ff fe09 	bl	80064a8 <xTimerGenericCommand>
 8006896:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d14d      	bne.n	800693a <prvProcessReceivedCommands+0x196>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e7fe      	b.n	80068b0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80068c4:	e039      	b.n	800693a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvProcessReceivedCommands+0x156>
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	e7fe      	b.n	80068f8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	18d1      	adds	r1, r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006908:	f7ff ff0a 	bl	8006720 <prvInsertTimerInActiveList>
					break;
 800690c:	e015      	b.n	800693a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800691c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691e:	f000 fca5 	bl	800726c <vPortFree>
 8006922:	e00a      	b.n	800693a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	b2da      	uxtb	r2, r3
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006936:	e000      	b.n	800693a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800693a:	4b07      	ldr	r3, [pc, #28]	; (8006958 <prvProcessReceivedCommands+0x1b4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	1d39      	adds	r1, r7, #4
 8006940:	2200      	movs	r2, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fa7c 	bl	8004e40 <xQueueReceive>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f af2e 	bne.w	80067ac <prvProcessReceivedCommands+0x8>
	}
}
 8006950:	bf00      	nop
 8006952:	3730      	adds	r7, #48	; 0x30
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000d20 	.word	0x20000d20

0800695c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006962:	e047      	b.n	80069f4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006964:	4b2d      	ldr	r3, [pc, #180]	; (8006a1c <prvSwitchTimerLists+0xc0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696e:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <prvSwitchTimerLists+0xc0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3304      	adds	r3, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f7fd ff69 	bl	8004854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02d      	beq.n	80069f4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4413      	add	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d90e      	bls.n	80069c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <prvSwitchTimerLists+0xc0>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3304      	adds	r3, #4
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f7fd ff0e 	bl	80047e2 <vListInsert>
 80069c6:	e015      	b.n	80069f4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069c8:	2300      	movs	r3, #0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	2300      	movs	r3, #0
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	2100      	movs	r1, #0
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff fd68 	bl	80064a8 <xTimerGenericCommand>
 80069d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <prvSwitchTimerLists+0x98>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	e7fe      	b.n	80069f2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069f4:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <prvSwitchTimerLists+0xc0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1b2      	bne.n	8006964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <prvSwitchTimerLists+0xc0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <prvSwitchTimerLists+0xc4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <prvSwitchTimerLists+0xc0>)
 8006a0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <prvSwitchTimerLists+0xc4>)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	6013      	str	r3, [r2, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000d18 	.word	0x20000d18
 8006a20:	20000d1c 	.word	0x20000d1c

08006a24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a2a:	f000 f95f 	bl	8006cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a2e:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <prvCheckForValidListAndQueue+0x60>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d120      	bne.n	8006a78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a36:	4814      	ldr	r0, [pc, #80]	; (8006a88 <prvCheckForValidListAndQueue+0x64>)
 8006a38:	f7fd fe82 	bl	8004740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a3c:	4813      	ldr	r0, [pc, #76]	; (8006a8c <prvCheckForValidListAndQueue+0x68>)
 8006a3e:	f7fd fe7f 	bl	8004740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a42:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <prvCheckForValidListAndQueue+0x6c>)
 8006a44:	4a10      	ldr	r2, [pc, #64]	; (8006a88 <prvCheckForValidListAndQueue+0x64>)
 8006a46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <prvCheckForValidListAndQueue+0x70>)
 8006a4a:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <prvCheckForValidListAndQueue+0x68>)
 8006a4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <prvCheckForValidListAndQueue+0x74>)
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <prvCheckForValidListAndQueue+0x78>)
 8006a56:	2110      	movs	r1, #16
 8006a58:	200a      	movs	r0, #10
 8006a5a:	f7fd ff8d 	bl	8004978 <xQueueGenericCreateStatic>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <prvCheckForValidListAndQueue+0x60>)
 8006a62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <prvCheckForValidListAndQueue+0x60>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <prvCheckForValidListAndQueue+0x60>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	490b      	ldr	r1, [pc, #44]	; (8006aa0 <prvCheckForValidListAndQueue+0x7c>)
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fc4e 	bl	8005314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a78:	f000 f966 	bl	8006d48 <vPortExitCritical>
}
 8006a7c:	bf00      	nop
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000d20 	.word	0x20000d20
 8006a88:	20000cf0 	.word	0x20000cf0
 8006a8c:	20000d04 	.word	0x20000d04
 8006a90:	20000d18 	.word	0x20000d18
 8006a94:	20000d1c 	.word	0x20000d1c
 8006a98:	20000dcc 	.word	0x20000dcc
 8006a9c:	20000d2c 	.word	0x20000d2c
 8006aa0:	0800871c 	.word	0x0800871c

08006aa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3b04      	subs	r3, #4
 8006ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3b04      	subs	r3, #4
 8006ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <pxPortInitialiseStack+0x64>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3b14      	subs	r3, #20
 8006ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3b04      	subs	r3, #4
 8006aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f06f 0202 	mvn.w	r2, #2
 8006af2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3b20      	subs	r3, #32
 8006af8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006afa:	68fb      	ldr	r3, [r7, #12]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	08006b0d 	.word	0x08006b0d

08006b0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b16:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <prvTaskExitError+0x50>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d009      	beq.n	8006b34 <prvTaskExitError+0x28>
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	e7fe      	b.n	8006b32 <prvTaskExitError+0x26>
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b46:	bf00      	nop
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0fc      	beq.n	8006b48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	200000ac 	.word	0x200000ac

08006b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	4770      	bx	lr
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst2>:
 8006b80:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b88:	4808      	ldr	r0, [pc, #32]	; (8006bac <prvPortStartFirstTask+0x24>)
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	6800      	ldr	r0, [r0, #0]
 8006b8e:	f380 8808 	msr	MSP, r0
 8006b92:	f04f 0000 	mov.w	r0, #0
 8006b96:	f380 8814 	msr	CONTROL, r0
 8006b9a:	b662      	cpsie	i
 8006b9c:	b661      	cpsie	f
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	df00      	svc	0
 8006ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006baa:	bf00      	nop
 8006bac:	e000ed08 	.word	0xe000ed08

08006bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bb6:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <xPortStartScheduler+0x118>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <xPortStartScheduler+0x11c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <xPortStartScheduler+0x24>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e7fe      	b.n	8006bd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bd4:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <xPortStartScheduler+0x118>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a3d      	ldr	r2, [pc, #244]	; (8006cd0 <xPortStartScheduler+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d109      	bne.n	8006bf2 <xPortStartScheduler+0x42>
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e7fe      	b.n	8006bf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <xPortStartScheduler+0x124>)
 8006bf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	22ff      	movs	r2, #255	; 0xff
 8006c02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <xPortStartScheduler+0x128>)
 8006c18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c1a:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c1c:	2207      	movs	r2, #7
 8006c1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c20:	e009      	b.n	8006c36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d0ef      	beq.n	8006c22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c42:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f1c3 0307 	rsb	r3, r3, #7
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d009      	beq.n	8006c62 <xPortStartScheduler+0xb2>
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	e7fe      	b.n	8006c60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c62:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	4a1c      	ldr	r2, [pc, #112]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c80:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c98:	f000 f9a2 	bl	8006fe0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ca2:	f000 f9d9 	bl	8007058 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cb2:	f7ff ff69 	bl	8006b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cb6:	f7ff f81b 	bl	8005cf0 <vTaskSwitchContext>
	prvTaskExitError();
 8006cba:	f7ff ff27 	bl	8006b0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed00 	.word	0xe000ed00
 8006ccc:	410fc271 	.word	0x410fc271
 8006cd0:	410fc270 	.word	0x410fc270
 8006cd4:	e000e400 	.word	0xe000e400
 8006cd8:	20000e28 	.word	0x20000e28
 8006cdc:	20000e2c 	.word	0x20000e2c
 8006ce0:	e000ed20 	.word	0xe000ed20
 8006ce4:	200000ac 	.word	0x200000ac
 8006ce8:	e000ef34 	.word	0xe000ef34

08006cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a0d      	ldr	r2, [pc, #52]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <vPortEnterCritical+0x54>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d10e      	bne.n	8006d34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <vPortEnterCritical+0x58>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <vPortEnterCritical+0x48>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	e7fe      	b.n	8006d32 <vPortEnterCritical+0x46>
	}
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	200000ac 	.word	0x200000ac
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <vPortExitCritical+0x22>
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e7fe      	b.n	8006d68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <vPortExitCritical+0x4c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <vPortExitCritical+0x3e>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	200000ac 	.word	0x200000ac
	...

08006da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006da0:	f3ef 8009 	mrs	r0, PSP
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <pxCurrentTCBConst>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	f01e 0f10 	tst.w	lr, #16
 8006db0:	bf08      	it	eq
 8006db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dba:	6010      	str	r0, [r2, #0]
 8006dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dc4:	f380 8811 	msr	BASEPRI, r0
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f7fe ff8e 	bl	8005cf0 <vTaskSwitchContext>
 8006dd4:	f04f 0000 	mov.w	r0, #0
 8006dd8:	f380 8811 	msr	BASEPRI, r0
 8006ddc:	bc09      	pop	{r0, r3}
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	6808      	ldr	r0, [r1, #0]
 8006de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de6:	f01e 0f10 	tst.w	lr, #16
 8006dea:	bf08      	it	eq
 8006dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006df0:	f380 8809 	msr	PSP, r0
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w

08006e00 <pxCurrentTCBConst>:
 8006e00:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop

08006e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e20:	f7fe feae 	bl	8005b80 <xTaskIncrementTick>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <xPortSysTickHandler+0x3c>)
 8006e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4b5d      	ldr	r3, [pc, #372]	; (8006fc8 <vPortSuppressTicksAndSleep+0x180>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d902      	bls.n	8006e60 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8006e5a:	4b5b      	ldr	r3, [pc, #364]	; (8006fc8 <vPortSuppressTicksAndSleep+0x180>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8006e60:	4b5a      	ldr	r3, [pc, #360]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a59      	ldr	r2, [pc, #356]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <vPortSuppressTicksAndSleep+0x188>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	4957      	ldr	r1, [pc, #348]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006e76:	6809      	ldr	r1, [r1, #0]
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8006e80:	4b55      	ldr	r3, [pc, #340]	; (8006fd8 <vPortSuppressTicksAndSleep+0x190>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d904      	bls.n	8006e94 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8006e8a:	4b53      	ldr	r3, [pc, #332]	; (8006fd8 <vPortSuppressTicksAndSleep+0x190>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8006e94:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8006e96:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8006e9a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8006e9e:	f7ff f8f5 	bl	800608c <eTaskConfirmSleepModeStatus>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d110      	bne.n	8006eca <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006ea8:	4b49      	ldr	r3, [pc, #292]	; (8006fd0 <vPortSuppressTicksAndSleep+0x188>)
 8006eaa:	4a4c      	ldr	r2, [pc, #304]	; (8006fdc <vPortSuppressTicksAndSleep+0x194>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006eb0:	4b46      	ldr	r3, [pc, #280]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a45      	ldr	r2, [pc, #276]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006ebc:	4b45      	ldr	r3, [pc, #276]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a46      	ldr	r2, [pc, #280]	; (8006fdc <vPortSuppressTicksAndSleep+0x194>)
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8006ec6:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8006ec8:	e07a      	b.n	8006fc0 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8006eca:	4a44      	ldr	r2, [pc, #272]	; (8006fdc <vPortSuppressTicksAndSleep+0x194>)
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ed0:	4b3f      	ldr	r3, [pc, #252]	; (8006fd0 <vPortSuppressTicksAndSleep+0x188>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a3c      	ldr	r2, [pc, #240]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7f9 ff3a 	bl	8000d64 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8006ef6:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8006efa:	bf30      	wfi
				__asm volatile( "isb" );
 8006efc:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7f9 ff38 	bl	8000d78 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8006f08:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8006f0a:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006f0e:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8006f12:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8006f14:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006f18:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8006f1c:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006f1e:	2206      	movs	r2, #6
 8006f20:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8006f22:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01d      	beq.n	8006f6a <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b27      	ldr	r3, [pc, #156]	; (8006fd0 <vPortSuppressTicksAndSleep+0x188>)
 8006f34:	6819      	ldr	r1, [r3, #0]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	1acb      	subs	r3, r1, r3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <vPortSuppressTicksAndSleep+0x190>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d304      	bcc.n	8006f54 <vPortSuppressTicksAndSleep+0x10c>
 8006f4a:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8006f54:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8006f5c:	4a1f      	ldr	r2, [pc, #124]	; (8006fdc <vPortSuppressTicksAndSleep+0x194>)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e018      	b.n	8006f9c <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	fb02 f203 	mul.w	r2, r2, r3
 8006f74:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <vPortSuppressTicksAndSleep+0x188>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f86:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	fb02 f203 	mul.w	r2, r2, r3
 8006f94:	4911      	ldr	r1, [pc, #68]	; (8006fdc <vPortSuppressTicksAndSleep+0x194>)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <vPortSuppressTicksAndSleep+0x188>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <vPortSuppressTicksAndSleep+0x184>)
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8006fae:	69b8      	ldr	r0, [r7, #24]
 8006fb0:	f7fe fdc0 	bl	8005b34 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <vPortSuppressTicksAndSleep+0x18c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <vPortSuppressTicksAndSleep+0x194>)
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8006fbe:	b662      	cpsie	i
	}
 8006fc0:	bf00      	nop
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000e20 	.word	0x20000e20
 8006fcc:	e000e010 	.word	0xe000e010
 8006fd0:	e000e018 	.word	0xe000e018
 8006fd4:	20000e1c 	.word	0x20000e1c
 8006fd8:	20000e24 	.word	0x20000e24
 8006fdc:	e000e014 	.word	0xe000e014

08006fe0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8006fe4:	4b14      	ldr	r3, [pc, #80]	; (8007038 <vPortSetupTimerInterrupt+0x58>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <vPortSetupTimerInterrupt+0x5c>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	4a13      	ldr	r2, [pc, #76]	; (8007040 <vPortSetupTimerInterrupt+0x60>)
 8006ff2:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8006ff4:	4b12      	ldr	r3, [pc, #72]	; (8007040 <vPortSetupTimerInterrupt+0x60>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	4a10      	ldr	r2, [pc, #64]	; (8007044 <vPortSetupTimerInterrupt+0x64>)
 8007002:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007004:	4b10      	ldr	r3, [pc, #64]	; (8007048 <vPortSetupTimerInterrupt+0x68>)
 8007006:	222d      	movs	r2, #45	; 0x2d
 8007008:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800700a:	4b10      	ldr	r3, [pc, #64]	; (800704c <vPortSetupTimerInterrupt+0x6c>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <vPortSetupTimerInterrupt+0x70>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007016:	4b08      	ldr	r3, [pc, #32]	; (8007038 <vPortSetupTimerInterrupt+0x58>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <vPortSetupTimerInterrupt+0x5c>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	099b      	lsrs	r3, r3, #6
 8007022:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <vPortSetupTimerInterrupt+0x74>)
 8007024:	3b01      	subs	r3, #1
 8007026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <vPortSetupTimerInterrupt+0x6c>)
 800702a:	2207      	movs	r2, #7
 800702c:	601a      	str	r2, [r3, #0]
}
 800702e:	bf00      	nop
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	200000a0 	.word	0x200000a0
 800703c:	10624dd3 	.word	0x10624dd3
 8007040:	20000e1c 	.word	0x20000e1c
 8007044:	20000e20 	.word	0x20000e20
 8007048:	20000e24 	.word	0x20000e24
 800704c:	e000e010 	.word	0xe000e010
 8007050:	e000e018 	.word	0xe000e018
 8007054:	e000e014 	.word	0xe000e014

08007058 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007058:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007068 <vPortEnableVFP+0x10>
 800705c:	6801      	ldr	r1, [r0, #0]
 800705e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007062:	6001      	str	r1, [r0, #0]
 8007064:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007066:	bf00      	nop
 8007068:	e000ed88 	.word	0xe000ed88

0800706c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007072:	f3ef 8305 	mrs	r3, IPSR
 8007076:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d913      	bls.n	80070a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800707e:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <vPortValidateInterruptPriority+0x6c>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007088:	4b14      	ldr	r3, [pc, #80]	; (80070dc <vPortValidateInterruptPriority+0x70>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	7afa      	ldrb	r2, [r7, #11]
 800708e:	429a      	cmp	r2, r3
 8007090:	d209      	bcs.n	80070a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e7fe      	b.n	80070a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070a6:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <vPortValidateInterruptPriority+0x74>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <vPortValidateInterruptPriority+0x78>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d909      	bls.n	80070ca <vPortValidateInterruptPriority+0x5e>
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	e7fe      	b.n	80070c8 <vPortValidateInterruptPriority+0x5c>
	}
 80070ca:	bf00      	nop
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000e3f0 	.word	0xe000e3f0
 80070dc:	20000e28 	.word	0x20000e28
 80070e0:	e000ed0c 	.word	0xe000ed0c
 80070e4:	20000e2c 	.word	0x20000e2c

080070e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070f4:	f7fe fc1a 	bl	800592c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070f8:	4b57      	ldr	r3, [pc, #348]	; (8007258 <pvPortMalloc+0x170>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007100:	f000 f90c 	bl	800731c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007104:	4b55      	ldr	r3, [pc, #340]	; (800725c <pvPortMalloc+0x174>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 808c 	bne.w	800722a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01c      	beq.n	8007152 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007118:	2208      	movs	r2, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d013      	beq.n	8007152 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	3308      	adds	r3, #8
 8007132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <pvPortMalloc+0x6a>
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e7fe      	b.n	8007150 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d068      	beq.n	800722a <pvPortMalloc+0x142>
 8007158:	4b41      	ldr	r3, [pc, #260]	; (8007260 <pvPortMalloc+0x178>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d863      	bhi.n	800722a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007162:	4b40      	ldr	r3, [pc, #256]	; (8007264 <pvPortMalloc+0x17c>)
 8007164:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007166:	4b3f      	ldr	r3, [pc, #252]	; (8007264 <pvPortMalloc+0x17c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800716c:	e004      	b.n	8007178 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	429a      	cmp	r2, r3
 8007180:	d903      	bls.n	800718a <pvPortMalloc+0xa2>
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f1      	bne.n	800716e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800718a:	4b33      	ldr	r3, [pc, #204]	; (8007258 <pvPortMalloc+0x170>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007190:	429a      	cmp	r2, r3
 8007192:	d04a      	beq.n	800722a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2208      	movs	r2, #8
 800719a:	4413      	add	r3, r2
 800719c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	1ad2      	subs	r2, r2, r3
 80071ae:	2308      	movs	r3, #8
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d91e      	bls.n	80071f4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4413      	add	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d009      	beq.n	80071dc <pvPortMalloc+0xf4>
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	e7fe      	b.n	80071da <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ee:	69b8      	ldr	r0, [r7, #24]
 80071f0:	f000 f8f6 	bl	80073e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <pvPortMalloc+0x178>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	4a18      	ldr	r2, [pc, #96]	; (8007260 <pvPortMalloc+0x178>)
 8007200:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007202:	4b17      	ldr	r3, [pc, #92]	; (8007260 <pvPortMalloc+0x178>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b18      	ldr	r3, [pc, #96]	; (8007268 <pvPortMalloc+0x180>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d203      	bcs.n	8007216 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <pvPortMalloc+0x178>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a15      	ldr	r2, [pc, #84]	; (8007268 <pvPortMalloc+0x180>)
 8007214:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <pvPortMalloc+0x174>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	431a      	orrs	r2, r3
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800722a:	f7fe fbc5 	bl	80059b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <pvPortMalloc+0x164>
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e7fe      	b.n	800724a <pvPortMalloc+0x162>
	return pvReturn;
 800724c:	69fb      	ldr	r3, [r7, #28]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20004a38 	.word	0x20004a38
 800725c:	20004a44 	.word	0x20004a44
 8007260:	20004a3c 	.word	0x20004a3c
 8007264:	20004a30 	.word	0x20004a30
 8007268:	20004a40 	.word	0x20004a40

0800726c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d046      	beq.n	800730c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800727e:	2308      	movs	r3, #8
 8007280:	425b      	negs	r3, r3
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	4b20      	ldr	r3, [pc, #128]	; (8007314 <vPortFree+0xa8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4013      	ands	r3, r2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <vPortFree+0x42>
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e7fe      	b.n	80072ac <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <vPortFree+0x5e>
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	e7fe      	b.n	80072c8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	4b11      	ldr	r3, [pc, #68]	; (8007314 <vPortFree+0xa8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d019      	beq.n	800730c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d115      	bne.n	800730c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <vPortFree+0xa8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072f0:	f7fe fb1c 	bl	800592c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <vPortFree+0xac>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4413      	add	r3, r2
 80072fe:	4a06      	ldr	r2, [pc, #24]	; (8007318 <vPortFree+0xac>)
 8007300:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007302:	6938      	ldr	r0, [r7, #16]
 8007304:	f000 f86c 	bl	80073e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007308:	f7fe fb56 	bl	80059b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800730c:	bf00      	nop
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20004a44 	.word	0x20004a44
 8007318:	20004a3c 	.word	0x20004a3c

0800731c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007322:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007328:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <prvHeapInit+0xac>)
 800732a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00c      	beq.n	8007350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3307      	adds	r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <prvHeapInit+0xac>)
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007354:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <prvHeapInit+0xb0>)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800735a:	4b1c      	ldr	r3, [pc, #112]	; (80073cc <prvHeapInit+0xb0>)
 800735c:	2200      	movs	r2, #0
 800735e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007368:	2208      	movs	r2, #8
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0307 	bic.w	r3, r3, #7
 8007376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <prvHeapInit+0xb4>)
 800737c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800737e:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <prvHeapInit+0xb4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007386:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <prvHeapInit+0xb4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800739c:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <prvHeapInit+0xb4>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a0a      	ldr	r2, [pc, #40]	; (80073d4 <prvHeapInit+0xb8>)
 80073aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <prvHeapInit+0xbc>)
 80073b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073b4:	4b09      	ldr	r3, [pc, #36]	; (80073dc <prvHeapInit+0xc0>)
 80073b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073ba:	601a      	str	r2, [r3, #0]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20000e30 	.word	0x20000e30
 80073cc:	20004a30 	.word	0x20004a30
 80073d0:	20004a38 	.word	0x20004a38
 80073d4:	20004a40 	.word	0x20004a40
 80073d8:	20004a3c 	.word	0x20004a3c
 80073dc:	20004a44 	.word	0x20004a44

080073e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073e8:	4b28      	ldr	r3, [pc, #160]	; (800748c <prvInsertBlockIntoFreeList+0xac>)
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e002      	b.n	80073f4 <prvInsertBlockIntoFreeList+0x14>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d8f7      	bhi.n	80073ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	4413      	add	r3, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d108      	bne.n	8007422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	441a      	add	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d118      	bne.n	8007468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <prvInsertBlockIntoFreeList+0xb0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d00d      	beq.n	800745e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	441a      	add	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e008      	b.n	8007470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800745e:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <prvInsertBlockIntoFreeList+0xb0>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	e003      	b.n	8007470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d002      	beq.n	800747e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20004a30 	.word	0x20004a30
 8007490:	20004a38 	.word	0x20004a38

08007494 <__errno>:
 8007494:	4b01      	ldr	r3, [pc, #4]	; (800749c <__errno+0x8>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	200000b0 	.word	0x200000b0

080074a0 <__libc_init_array>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0d      	ldr	r6, [pc, #52]	; (80074d8 <__libc_init_array+0x38>)
 80074a4:	4c0d      	ldr	r4, [pc, #52]	; (80074dc <__libc_init_array+0x3c>)
 80074a6:	1ba4      	subs	r4, r4, r6
 80074a8:	10a4      	asrs	r4, r4, #2
 80074aa:	2500      	movs	r5, #0
 80074ac:	42a5      	cmp	r5, r4
 80074ae:	d109      	bne.n	80074c4 <__libc_init_array+0x24>
 80074b0:	4e0b      	ldr	r6, [pc, #44]	; (80074e0 <__libc_init_array+0x40>)
 80074b2:	4c0c      	ldr	r4, [pc, #48]	; (80074e4 <__libc_init_array+0x44>)
 80074b4:	f001 f8ca 	bl	800864c <_init>
 80074b8:	1ba4      	subs	r4, r4, r6
 80074ba:	10a4      	asrs	r4, r4, #2
 80074bc:	2500      	movs	r5, #0
 80074be:	42a5      	cmp	r5, r4
 80074c0:	d105      	bne.n	80074ce <__libc_init_array+0x2e>
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074c8:	4798      	blx	r3
 80074ca:	3501      	adds	r5, #1
 80074cc:	e7ee      	b.n	80074ac <__libc_init_array+0xc>
 80074ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074d2:	4798      	blx	r3
 80074d4:	3501      	adds	r5, #1
 80074d6:	e7f2      	b.n	80074be <__libc_init_array+0x1e>
 80074d8:	080088ec 	.word	0x080088ec
 80074dc:	080088ec 	.word	0x080088ec
 80074e0:	080088ec 	.word	0x080088ec
 80074e4:	080088f0 	.word	0x080088f0

080074e8 <memcpy>:
 80074e8:	b510      	push	{r4, lr}
 80074ea:	1e43      	subs	r3, r0, #1
 80074ec:	440a      	add	r2, r1
 80074ee:	4291      	cmp	r1, r2
 80074f0:	d100      	bne.n	80074f4 <memcpy+0xc>
 80074f2:	bd10      	pop	{r4, pc}
 80074f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074fc:	e7f7      	b.n	80074ee <memcpy+0x6>

080074fe <memset>:
 80074fe:	4402      	add	r2, r0
 8007500:	4603      	mov	r3, r0
 8007502:	4293      	cmp	r3, r2
 8007504:	d100      	bne.n	8007508 <memset+0xa>
 8007506:	4770      	bx	lr
 8007508:	f803 1b01 	strb.w	r1, [r3], #1
 800750c:	e7f9      	b.n	8007502 <memset+0x4>
	...

08007510 <_free_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4605      	mov	r5, r0
 8007514:	2900      	cmp	r1, #0
 8007516:	d045      	beq.n	80075a4 <_free_r+0x94>
 8007518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751c:	1f0c      	subs	r4, r1, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfb8      	it	lt
 8007522:	18e4      	addlt	r4, r4, r3
 8007524:	f000 f9ae 	bl	8007884 <__malloc_lock>
 8007528:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <_free_r+0x98>)
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	4610      	mov	r0, r2
 800752e:	b933      	cbnz	r3, 800753e <_free_r+0x2e>
 8007530:	6063      	str	r3, [r4, #4]
 8007532:	6014      	str	r4, [r2, #0]
 8007534:	4628      	mov	r0, r5
 8007536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753a:	f000 b9a4 	b.w	8007886 <__malloc_unlock>
 800753e:	42a3      	cmp	r3, r4
 8007540:	d90c      	bls.n	800755c <_free_r+0x4c>
 8007542:	6821      	ldr	r1, [r4, #0]
 8007544:	1862      	adds	r2, r4, r1
 8007546:	4293      	cmp	r3, r2
 8007548:	bf04      	itt	eq
 800754a:	681a      	ldreq	r2, [r3, #0]
 800754c:	685b      	ldreq	r3, [r3, #4]
 800754e:	6063      	str	r3, [r4, #4]
 8007550:	bf04      	itt	eq
 8007552:	1852      	addeq	r2, r2, r1
 8007554:	6022      	streq	r2, [r4, #0]
 8007556:	6004      	str	r4, [r0, #0]
 8007558:	e7ec      	b.n	8007534 <_free_r+0x24>
 800755a:	4613      	mov	r3, r2
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	b10a      	cbz	r2, 8007564 <_free_r+0x54>
 8007560:	42a2      	cmp	r2, r4
 8007562:	d9fa      	bls.n	800755a <_free_r+0x4a>
 8007564:	6819      	ldr	r1, [r3, #0]
 8007566:	1858      	adds	r0, r3, r1
 8007568:	42a0      	cmp	r0, r4
 800756a:	d10b      	bne.n	8007584 <_free_r+0x74>
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	4401      	add	r1, r0
 8007570:	1858      	adds	r0, r3, r1
 8007572:	4282      	cmp	r2, r0
 8007574:	6019      	str	r1, [r3, #0]
 8007576:	d1dd      	bne.n	8007534 <_free_r+0x24>
 8007578:	6810      	ldr	r0, [r2, #0]
 800757a:	6852      	ldr	r2, [r2, #4]
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	4401      	add	r1, r0
 8007580:	6019      	str	r1, [r3, #0]
 8007582:	e7d7      	b.n	8007534 <_free_r+0x24>
 8007584:	d902      	bls.n	800758c <_free_r+0x7c>
 8007586:	230c      	movs	r3, #12
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	e7d3      	b.n	8007534 <_free_r+0x24>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428a      	cmp	r2, r1
 8007592:	bf04      	itt	eq
 8007594:	6811      	ldreq	r1, [r2, #0]
 8007596:	6852      	ldreq	r2, [r2, #4]
 8007598:	6062      	str	r2, [r4, #4]
 800759a:	bf04      	itt	eq
 800759c:	1809      	addeq	r1, r1, r0
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	605c      	str	r4, [r3, #4]
 80075a2:	e7c7      	b.n	8007534 <_free_r+0x24>
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
 80075a6:	bf00      	nop
 80075a8:	20004a48 	.word	0x20004a48

080075ac <_malloc_r>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	1ccd      	adds	r5, r1, #3
 80075b0:	f025 0503 	bic.w	r5, r5, #3
 80075b4:	3508      	adds	r5, #8
 80075b6:	2d0c      	cmp	r5, #12
 80075b8:	bf38      	it	cc
 80075ba:	250c      	movcc	r5, #12
 80075bc:	2d00      	cmp	r5, #0
 80075be:	4606      	mov	r6, r0
 80075c0:	db01      	blt.n	80075c6 <_malloc_r+0x1a>
 80075c2:	42a9      	cmp	r1, r5
 80075c4:	d903      	bls.n	80075ce <_malloc_r+0x22>
 80075c6:	230c      	movs	r3, #12
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	2000      	movs	r0, #0
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
 80075ce:	f000 f959 	bl	8007884 <__malloc_lock>
 80075d2:	4a21      	ldr	r2, [pc, #132]	; (8007658 <_malloc_r+0xac>)
 80075d4:	6814      	ldr	r4, [r2, #0]
 80075d6:	4621      	mov	r1, r4
 80075d8:	b991      	cbnz	r1, 8007600 <_malloc_r+0x54>
 80075da:	4c20      	ldr	r4, [pc, #128]	; (800765c <_malloc_r+0xb0>)
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	b91b      	cbnz	r3, 80075e8 <_malloc_r+0x3c>
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 f855 	bl	8007690 <_sbrk_r>
 80075e6:	6020      	str	r0, [r4, #0]
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f000 f850 	bl	8007690 <_sbrk_r>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d124      	bne.n	800763e <_malloc_r+0x92>
 80075f4:	230c      	movs	r3, #12
 80075f6:	6033      	str	r3, [r6, #0]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f944 	bl	8007886 <__malloc_unlock>
 80075fe:	e7e4      	b.n	80075ca <_malloc_r+0x1e>
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	1b5b      	subs	r3, r3, r5
 8007604:	d418      	bmi.n	8007638 <_malloc_r+0x8c>
 8007606:	2b0b      	cmp	r3, #11
 8007608:	d90f      	bls.n	800762a <_malloc_r+0x7e>
 800760a:	600b      	str	r3, [r1, #0]
 800760c:	50cd      	str	r5, [r1, r3]
 800760e:	18cc      	adds	r4, r1, r3
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f938 	bl	8007886 <__malloc_unlock>
 8007616:	f104 000b 	add.w	r0, r4, #11
 800761a:	1d23      	adds	r3, r4, #4
 800761c:	f020 0007 	bic.w	r0, r0, #7
 8007620:	1ac3      	subs	r3, r0, r3
 8007622:	d0d3      	beq.n	80075cc <_malloc_r+0x20>
 8007624:	425a      	negs	r2, r3
 8007626:	50e2      	str	r2, [r4, r3]
 8007628:	e7d0      	b.n	80075cc <_malloc_r+0x20>
 800762a:	428c      	cmp	r4, r1
 800762c:	684b      	ldr	r3, [r1, #4]
 800762e:	bf16      	itet	ne
 8007630:	6063      	strne	r3, [r4, #4]
 8007632:	6013      	streq	r3, [r2, #0]
 8007634:	460c      	movne	r4, r1
 8007636:	e7eb      	b.n	8007610 <_malloc_r+0x64>
 8007638:	460c      	mov	r4, r1
 800763a:	6849      	ldr	r1, [r1, #4]
 800763c:	e7cc      	b.n	80075d8 <_malloc_r+0x2c>
 800763e:	1cc4      	adds	r4, r0, #3
 8007640:	f024 0403 	bic.w	r4, r4, #3
 8007644:	42a0      	cmp	r0, r4
 8007646:	d005      	beq.n	8007654 <_malloc_r+0xa8>
 8007648:	1a21      	subs	r1, r4, r0
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f820 	bl	8007690 <_sbrk_r>
 8007650:	3001      	adds	r0, #1
 8007652:	d0cf      	beq.n	80075f4 <_malloc_r+0x48>
 8007654:	6025      	str	r5, [r4, #0]
 8007656:	e7db      	b.n	8007610 <_malloc_r+0x64>
 8007658:	20004a48 	.word	0x20004a48
 800765c:	20004a4c 	.word	0x20004a4c

08007660 <iprintf>:
 8007660:	b40f      	push	{r0, r1, r2, r3}
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <iprintf+0x2c>)
 8007664:	b513      	push	{r0, r1, r4, lr}
 8007666:	681c      	ldr	r4, [r3, #0]
 8007668:	b124      	cbz	r4, 8007674 <iprintf+0x14>
 800766a:	69a3      	ldr	r3, [r4, #24]
 800766c:	b913      	cbnz	r3, 8007674 <iprintf+0x14>
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f87e 	bl	8007770 <__sinit>
 8007674:	ab05      	add	r3, sp, #20
 8007676:	9a04      	ldr	r2, [sp, #16]
 8007678:	68a1      	ldr	r1, [r4, #8]
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fa7f 	bl	8007b80 <_vfiprintf_r>
 8007682:	b002      	add	sp, #8
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	b004      	add	sp, #16
 800768a:	4770      	bx	lr
 800768c:	200000b0 	.word	0x200000b0

08007690 <_sbrk_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4c06      	ldr	r4, [pc, #24]	; (80076ac <_sbrk_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4605      	mov	r5, r0
 8007698:	4608      	mov	r0, r1
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	f7fa fdc6 	bl	800222c <_sbrk>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_sbrk_r+0x1a>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_sbrk_r+0x1a>
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20004cc4 	.word	0x20004cc4

080076b0 <siprintf>:
 80076b0:	b40e      	push	{r1, r2, r3}
 80076b2:	b500      	push	{lr}
 80076b4:	b09c      	sub	sp, #112	; 0x70
 80076b6:	ab1d      	add	r3, sp, #116	; 0x74
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	9006      	str	r0, [sp, #24]
 80076bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076c0:	4809      	ldr	r0, [pc, #36]	; (80076e8 <siprintf+0x38>)
 80076c2:	9107      	str	r1, [sp, #28]
 80076c4:	9104      	str	r1, [sp, #16]
 80076c6:	4909      	ldr	r1, [pc, #36]	; (80076ec <siprintf+0x3c>)
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	9105      	str	r1, [sp, #20]
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	a902      	add	r1, sp, #8
 80076d4:	f000 f932 	bl	800793c <_svfiprintf_r>
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	b01c      	add	sp, #112	; 0x70
 80076e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e4:	b003      	add	sp, #12
 80076e6:	4770      	bx	lr
 80076e8:	200000b0 	.word	0x200000b0
 80076ec:	ffff0208 	.word	0xffff0208

080076f0 <std>:
 80076f0:	2300      	movs	r3, #0
 80076f2:	b510      	push	{r4, lr}
 80076f4:	4604      	mov	r4, r0
 80076f6:	e9c0 3300 	strd	r3, r3, [r0]
 80076fa:	6083      	str	r3, [r0, #8]
 80076fc:	8181      	strh	r1, [r0, #12]
 80076fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007700:	81c2      	strh	r2, [r0, #14]
 8007702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007706:	6183      	str	r3, [r0, #24]
 8007708:	4619      	mov	r1, r3
 800770a:	2208      	movs	r2, #8
 800770c:	305c      	adds	r0, #92	; 0x5c
 800770e:	f7ff fef6 	bl	80074fe <memset>
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <std+0x38>)
 8007714:	6263      	str	r3, [r4, #36]	; 0x24
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <std+0x3c>)
 8007718:	62a3      	str	r3, [r4, #40]	; 0x28
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <std+0x40>)
 800771c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <std+0x44>)
 8007720:	6224      	str	r4, [r4, #32]
 8007722:	6323      	str	r3, [r4, #48]	; 0x30
 8007724:	bd10      	pop	{r4, pc}
 8007726:	bf00      	nop
 8007728:	080080bd 	.word	0x080080bd
 800772c:	080080df 	.word	0x080080df
 8007730:	08008117 	.word	0x08008117
 8007734:	0800813b 	.word	0x0800813b

08007738 <_cleanup_r>:
 8007738:	4901      	ldr	r1, [pc, #4]	; (8007740 <_cleanup_r+0x8>)
 800773a:	f000 b885 	b.w	8007848 <_fwalk_reent>
 800773e:	bf00      	nop
 8007740:	08008415 	.word	0x08008415

08007744 <__sfmoreglue>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	1e4a      	subs	r2, r1, #1
 8007748:	2568      	movs	r5, #104	; 0x68
 800774a:	4355      	muls	r5, r2
 800774c:	460e      	mov	r6, r1
 800774e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007752:	f7ff ff2b 	bl	80075ac <_malloc_r>
 8007756:	4604      	mov	r4, r0
 8007758:	b140      	cbz	r0, 800776c <__sfmoreglue+0x28>
 800775a:	2100      	movs	r1, #0
 800775c:	e9c0 1600 	strd	r1, r6, [r0]
 8007760:	300c      	adds	r0, #12
 8007762:	60a0      	str	r0, [r4, #8]
 8007764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007768:	f7ff fec9 	bl	80074fe <memset>
 800776c:	4620      	mov	r0, r4
 800776e:	bd70      	pop	{r4, r5, r6, pc}

08007770 <__sinit>:
 8007770:	6983      	ldr	r3, [r0, #24]
 8007772:	b510      	push	{r4, lr}
 8007774:	4604      	mov	r4, r0
 8007776:	bb33      	cbnz	r3, 80077c6 <__sinit+0x56>
 8007778:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800777c:	6503      	str	r3, [r0, #80]	; 0x50
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <__sinit+0x58>)
 8007780:	4a12      	ldr	r2, [pc, #72]	; (80077cc <__sinit+0x5c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6282      	str	r2, [r0, #40]	; 0x28
 8007786:	4298      	cmp	r0, r3
 8007788:	bf04      	itt	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	6183      	streq	r3, [r0, #24]
 800778e:	f000 f81f 	bl	80077d0 <__sfp>
 8007792:	6060      	str	r0, [r4, #4]
 8007794:	4620      	mov	r0, r4
 8007796:	f000 f81b 	bl	80077d0 <__sfp>
 800779a:	60a0      	str	r0, [r4, #8]
 800779c:	4620      	mov	r0, r4
 800779e:	f000 f817 	bl	80077d0 <__sfp>
 80077a2:	2200      	movs	r2, #0
 80077a4:	60e0      	str	r0, [r4, #12]
 80077a6:	2104      	movs	r1, #4
 80077a8:	6860      	ldr	r0, [r4, #4]
 80077aa:	f7ff ffa1 	bl	80076f0 <std>
 80077ae:	2201      	movs	r2, #1
 80077b0:	2109      	movs	r1, #9
 80077b2:	68a0      	ldr	r0, [r4, #8]
 80077b4:	f7ff ff9c 	bl	80076f0 <std>
 80077b8:	2202      	movs	r2, #2
 80077ba:	2112      	movs	r1, #18
 80077bc:	68e0      	ldr	r0, [r4, #12]
 80077be:	f7ff ff97 	bl	80076f0 <std>
 80077c2:	2301      	movs	r3, #1
 80077c4:	61a3      	str	r3, [r4, #24]
 80077c6:	bd10      	pop	{r4, pc}
 80077c8:	0800884c 	.word	0x0800884c
 80077cc:	08007739 	.word	0x08007739

080077d0 <__sfp>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <__sfp+0x70>)
 80077d4:	681e      	ldr	r6, [r3, #0]
 80077d6:	69b3      	ldr	r3, [r6, #24]
 80077d8:	4607      	mov	r7, r0
 80077da:	b913      	cbnz	r3, 80077e2 <__sfp+0x12>
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff ffc7 	bl	8007770 <__sinit>
 80077e2:	3648      	adds	r6, #72	; 0x48
 80077e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	d503      	bpl.n	80077f4 <__sfp+0x24>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	b133      	cbz	r3, 80077fe <__sfp+0x2e>
 80077f0:	6836      	ldr	r6, [r6, #0]
 80077f2:	e7f7      	b.n	80077e4 <__sfp+0x14>
 80077f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077f8:	b16d      	cbz	r5, 8007816 <__sfp+0x46>
 80077fa:	3468      	adds	r4, #104	; 0x68
 80077fc:	e7f4      	b.n	80077e8 <__sfp+0x18>
 80077fe:	2104      	movs	r1, #4
 8007800:	4638      	mov	r0, r7
 8007802:	f7ff ff9f 	bl	8007744 <__sfmoreglue>
 8007806:	6030      	str	r0, [r6, #0]
 8007808:	2800      	cmp	r0, #0
 800780a:	d1f1      	bne.n	80077f0 <__sfp+0x20>
 800780c:	230c      	movs	r3, #12
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4604      	mov	r4, r0
 8007812:	4620      	mov	r0, r4
 8007814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <__sfp+0x74>)
 8007818:	6665      	str	r5, [r4, #100]	; 0x64
 800781a:	e9c4 5500 	strd	r5, r5, [r4]
 800781e:	60a5      	str	r5, [r4, #8]
 8007820:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007824:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007828:	2208      	movs	r2, #8
 800782a:	4629      	mov	r1, r5
 800782c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007830:	f7ff fe65 	bl	80074fe <memset>
 8007834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800783c:	e7e9      	b.n	8007812 <__sfp+0x42>
 800783e:	bf00      	nop
 8007840:	0800884c 	.word	0x0800884c
 8007844:	ffff0001 	.word	0xffff0001

08007848 <_fwalk_reent>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007854:	2600      	movs	r6, #0
 8007856:	b914      	cbnz	r4, 800785e <_fwalk_reent+0x16>
 8007858:	4630      	mov	r0, r6
 800785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007862:	3f01      	subs	r7, #1
 8007864:	d501      	bpl.n	800786a <_fwalk_reent+0x22>
 8007866:	6824      	ldr	r4, [r4, #0]
 8007868:	e7f5      	b.n	8007856 <_fwalk_reent+0xe>
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d907      	bls.n	8007880 <_fwalk_reent+0x38>
 8007870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007874:	3301      	adds	r3, #1
 8007876:	d003      	beq.n	8007880 <_fwalk_reent+0x38>
 8007878:	4629      	mov	r1, r5
 800787a:	4640      	mov	r0, r8
 800787c:	47c8      	blx	r9
 800787e:	4306      	orrs	r6, r0
 8007880:	3568      	adds	r5, #104	; 0x68
 8007882:	e7ee      	b.n	8007862 <_fwalk_reent+0x1a>

08007884 <__malloc_lock>:
 8007884:	4770      	bx	lr

08007886 <__malloc_unlock>:
 8007886:	4770      	bx	lr

08007888 <__ssputs_r>:
 8007888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	688e      	ldr	r6, [r1, #8]
 800788e:	429e      	cmp	r6, r3
 8007890:	4682      	mov	sl, r0
 8007892:	460c      	mov	r4, r1
 8007894:	4690      	mov	r8, r2
 8007896:	4699      	mov	r9, r3
 8007898:	d837      	bhi.n	800790a <__ssputs_r+0x82>
 800789a:	898a      	ldrh	r2, [r1, #12]
 800789c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078a0:	d031      	beq.n	8007906 <__ssputs_r+0x7e>
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	6909      	ldr	r1, [r1, #16]
 80078a6:	1a6f      	subs	r7, r5, r1
 80078a8:	6965      	ldr	r5, [r4, #20]
 80078aa:	2302      	movs	r3, #2
 80078ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80078b4:	f109 0301 	add.w	r3, r9, #1
 80078b8:	443b      	add	r3, r7
 80078ba:	429d      	cmp	r5, r3
 80078bc:	bf38      	it	cc
 80078be:	461d      	movcc	r5, r3
 80078c0:	0553      	lsls	r3, r2, #21
 80078c2:	d530      	bpl.n	8007926 <__ssputs_r+0x9e>
 80078c4:	4629      	mov	r1, r5
 80078c6:	f7ff fe71 	bl	80075ac <_malloc_r>
 80078ca:	4606      	mov	r6, r0
 80078cc:	b950      	cbnz	r0, 80078e4 <__ssputs_r+0x5c>
 80078ce:	230c      	movs	r3, #12
 80078d0:	f8ca 3000 	str.w	r3, [sl]
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e4:	463a      	mov	r2, r7
 80078e6:	6921      	ldr	r1, [r4, #16]
 80078e8:	f7ff fdfe 	bl	80074e8 <memcpy>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	6126      	str	r6, [r4, #16]
 80078fa:	6165      	str	r5, [r4, #20]
 80078fc:	443e      	add	r6, r7
 80078fe:	1bed      	subs	r5, r5, r7
 8007900:	6026      	str	r6, [r4, #0]
 8007902:	60a5      	str	r5, [r4, #8]
 8007904:	464e      	mov	r6, r9
 8007906:	454e      	cmp	r6, r9
 8007908:	d900      	bls.n	800790c <__ssputs_r+0x84>
 800790a:	464e      	mov	r6, r9
 800790c:	4632      	mov	r2, r6
 800790e:	4641      	mov	r1, r8
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	f000 fe1f 	bl	8008554 <memmove>
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	1b9b      	subs	r3, r3, r6
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	441e      	add	r6, r3
 8007920:	6026      	str	r6, [r4, #0]
 8007922:	2000      	movs	r0, #0
 8007924:	e7dc      	b.n	80078e0 <__ssputs_r+0x58>
 8007926:	462a      	mov	r2, r5
 8007928:	f000 fe2d 	bl	8008586 <_realloc_r>
 800792c:	4606      	mov	r6, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	d1e2      	bne.n	80078f8 <__ssputs_r+0x70>
 8007932:	6921      	ldr	r1, [r4, #16]
 8007934:	4650      	mov	r0, sl
 8007936:	f7ff fdeb 	bl	8007510 <_free_r>
 800793a:	e7c8      	b.n	80078ce <__ssputs_r+0x46>

0800793c <_svfiprintf_r>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	461d      	mov	r5, r3
 8007942:	898b      	ldrh	r3, [r1, #12]
 8007944:	061f      	lsls	r7, r3, #24
 8007946:	b09d      	sub	sp, #116	; 0x74
 8007948:	4680      	mov	r8, r0
 800794a:	460c      	mov	r4, r1
 800794c:	4616      	mov	r6, r2
 800794e:	d50f      	bpl.n	8007970 <_svfiprintf_r+0x34>
 8007950:	690b      	ldr	r3, [r1, #16]
 8007952:	b96b      	cbnz	r3, 8007970 <_svfiprintf_r+0x34>
 8007954:	2140      	movs	r1, #64	; 0x40
 8007956:	f7ff fe29 	bl	80075ac <_malloc_r>
 800795a:	6020      	str	r0, [r4, #0]
 800795c:	6120      	str	r0, [r4, #16]
 800795e:	b928      	cbnz	r0, 800796c <_svfiprintf_r+0x30>
 8007960:	230c      	movs	r3, #12
 8007962:	f8c8 3000 	str.w	r3, [r8]
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
 800796a:	e0c8      	b.n	8007afe <_svfiprintf_r+0x1c2>
 800796c:	2340      	movs	r3, #64	; 0x40
 800796e:	6163      	str	r3, [r4, #20]
 8007970:	2300      	movs	r3, #0
 8007972:	9309      	str	r3, [sp, #36]	; 0x24
 8007974:	2320      	movs	r3, #32
 8007976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800797a:	2330      	movs	r3, #48	; 0x30
 800797c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007980:	9503      	str	r5, [sp, #12]
 8007982:	f04f 0b01 	mov.w	fp, #1
 8007986:	4637      	mov	r7, r6
 8007988:	463d      	mov	r5, r7
 800798a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800798e:	b10b      	cbz	r3, 8007994 <_svfiprintf_r+0x58>
 8007990:	2b25      	cmp	r3, #37	; 0x25
 8007992:	d13e      	bne.n	8007a12 <_svfiprintf_r+0xd6>
 8007994:	ebb7 0a06 	subs.w	sl, r7, r6
 8007998:	d00b      	beq.n	80079b2 <_svfiprintf_r+0x76>
 800799a:	4653      	mov	r3, sl
 800799c:	4632      	mov	r2, r6
 800799e:	4621      	mov	r1, r4
 80079a0:	4640      	mov	r0, r8
 80079a2:	f7ff ff71 	bl	8007888 <__ssputs_r>
 80079a6:	3001      	adds	r0, #1
 80079a8:	f000 80a4 	beq.w	8007af4 <_svfiprintf_r+0x1b8>
 80079ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ae:	4453      	add	r3, sl
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	783b      	ldrb	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 809d 	beq.w	8007af4 <_svfiprintf_r+0x1b8>
 80079ba:	2300      	movs	r3, #0
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295
 80079c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079cc:	931a      	str	r3, [sp, #104]	; 0x68
 80079ce:	462f      	mov	r7, r5
 80079d0:	2205      	movs	r2, #5
 80079d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079d6:	4850      	ldr	r0, [pc, #320]	; (8007b18 <_svfiprintf_r+0x1dc>)
 80079d8:	f7f8 fbfa 	bl	80001d0 <memchr>
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	b9d0      	cbnz	r0, 8007a16 <_svfiprintf_r+0xda>
 80079e0:	06d9      	lsls	r1, r3, #27
 80079e2:	bf44      	itt	mi
 80079e4:	2220      	movmi	r2, #32
 80079e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079ea:	071a      	lsls	r2, r3, #28
 80079ec:	bf44      	itt	mi
 80079ee:	222b      	movmi	r2, #43	; 0x2b
 80079f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079f4:	782a      	ldrb	r2, [r5, #0]
 80079f6:	2a2a      	cmp	r2, #42	; 0x2a
 80079f8:	d015      	beq.n	8007a26 <_svfiprintf_r+0xea>
 80079fa:	9a07      	ldr	r2, [sp, #28]
 80079fc:	462f      	mov	r7, r5
 80079fe:	2000      	movs	r0, #0
 8007a00:	250a      	movs	r5, #10
 8007a02:	4639      	mov	r1, r7
 8007a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a08:	3b30      	subs	r3, #48	; 0x30
 8007a0a:	2b09      	cmp	r3, #9
 8007a0c:	d94d      	bls.n	8007aaa <_svfiprintf_r+0x16e>
 8007a0e:	b1b8      	cbz	r0, 8007a40 <_svfiprintf_r+0x104>
 8007a10:	e00f      	b.n	8007a32 <_svfiprintf_r+0xf6>
 8007a12:	462f      	mov	r7, r5
 8007a14:	e7b8      	b.n	8007988 <_svfiprintf_r+0x4c>
 8007a16:	4a40      	ldr	r2, [pc, #256]	; (8007b18 <_svfiprintf_r+0x1dc>)
 8007a18:	1a80      	subs	r0, r0, r2
 8007a1a:	fa0b f000 	lsl.w	r0, fp, r0
 8007a1e:	4318      	orrs	r0, r3
 8007a20:	9004      	str	r0, [sp, #16]
 8007a22:	463d      	mov	r5, r7
 8007a24:	e7d3      	b.n	80079ce <_svfiprintf_r+0x92>
 8007a26:	9a03      	ldr	r2, [sp, #12]
 8007a28:	1d11      	adds	r1, r2, #4
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	9103      	str	r1, [sp, #12]
 8007a2e:	2a00      	cmp	r2, #0
 8007a30:	db01      	blt.n	8007a36 <_svfiprintf_r+0xfa>
 8007a32:	9207      	str	r2, [sp, #28]
 8007a34:	e004      	b.n	8007a40 <_svfiprintf_r+0x104>
 8007a36:	4252      	negs	r2, r2
 8007a38:	f043 0302 	orr.w	r3, r3, #2
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	783b      	ldrb	r3, [r7, #0]
 8007a42:	2b2e      	cmp	r3, #46	; 0x2e
 8007a44:	d10c      	bne.n	8007a60 <_svfiprintf_r+0x124>
 8007a46:	787b      	ldrb	r3, [r7, #1]
 8007a48:	2b2a      	cmp	r3, #42	; 0x2a
 8007a4a:	d133      	bne.n	8007ab4 <_svfiprintf_r+0x178>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	1d1a      	adds	r2, r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	9203      	str	r2, [sp, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfb8      	it	lt
 8007a58:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a5c:	3702      	adds	r7, #2
 8007a5e:	9305      	str	r3, [sp, #20]
 8007a60:	4d2e      	ldr	r5, [pc, #184]	; (8007b1c <_svfiprintf_r+0x1e0>)
 8007a62:	7839      	ldrb	r1, [r7, #0]
 8007a64:	2203      	movs	r2, #3
 8007a66:	4628      	mov	r0, r5
 8007a68:	f7f8 fbb2 	bl	80001d0 <memchr>
 8007a6c:	b138      	cbz	r0, 8007a7e <_svfiprintf_r+0x142>
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	1b40      	subs	r0, r0, r5
 8007a72:	fa03 f000 	lsl.w	r0, r3, r0
 8007a76:	9b04      	ldr	r3, [sp, #16]
 8007a78:	4303      	orrs	r3, r0
 8007a7a:	3701      	adds	r7, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	7839      	ldrb	r1, [r7, #0]
 8007a80:	4827      	ldr	r0, [pc, #156]	; (8007b20 <_svfiprintf_r+0x1e4>)
 8007a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a86:	2206      	movs	r2, #6
 8007a88:	1c7e      	adds	r6, r7, #1
 8007a8a:	f7f8 fba1 	bl	80001d0 <memchr>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d038      	beq.n	8007b04 <_svfiprintf_r+0x1c8>
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <_svfiprintf_r+0x1e8>)
 8007a94:	bb13      	cbnz	r3, 8007adc <_svfiprintf_r+0x1a0>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	444b      	add	r3, r9
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	e76d      	b.n	8007986 <_svfiprintf_r+0x4a>
 8007aaa:	fb05 3202 	mla	r2, r5, r2, r3
 8007aae:	2001      	movs	r0, #1
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	e7a6      	b.n	8007a02 <_svfiprintf_r+0xc6>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	3701      	adds	r7, #1
 8007ab8:	9305      	str	r3, [sp, #20]
 8007aba:	4619      	mov	r1, r3
 8007abc:	250a      	movs	r5, #10
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac4:	3a30      	subs	r2, #48	; 0x30
 8007ac6:	2a09      	cmp	r2, #9
 8007ac8:	d903      	bls.n	8007ad2 <_svfiprintf_r+0x196>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0c8      	beq.n	8007a60 <_svfiprintf_r+0x124>
 8007ace:	9105      	str	r1, [sp, #20]
 8007ad0:	e7c6      	b.n	8007a60 <_svfiprintf_r+0x124>
 8007ad2:	fb05 2101 	mla	r1, r5, r1, r2
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4607      	mov	r7, r0
 8007ada:	e7f0      	b.n	8007abe <_svfiprintf_r+0x182>
 8007adc:	ab03      	add	r3, sp, #12
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <_svfiprintf_r+0x1ec>)
 8007ae4:	a904      	add	r1, sp, #16
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f3af 8000 	nop.w
 8007aec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007af0:	4681      	mov	r9, r0
 8007af2:	d1d6      	bne.n	8007aa2 <_svfiprintf_r+0x166>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	065b      	lsls	r3, r3, #25
 8007af8:	f53f af35 	bmi.w	8007966 <_svfiprintf_r+0x2a>
 8007afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afe:	b01d      	add	sp, #116	; 0x74
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4b07      	ldr	r3, [pc, #28]	; (8007b28 <_svfiprintf_r+0x1ec>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4640      	mov	r0, r8
 8007b10:	f000 f9c2 	bl	8007e98 <_printf_i>
 8007b14:	e7ea      	b.n	8007aec <_svfiprintf_r+0x1b0>
 8007b16:	bf00      	nop
 8007b18:	080088b0 	.word	0x080088b0
 8007b1c:	080088b6 	.word	0x080088b6
 8007b20:	080088ba 	.word	0x080088ba
 8007b24:	00000000 	.word	0x00000000
 8007b28:	08007889 	.word	0x08007889

08007b2c <__sfputc_r>:
 8007b2c:	6893      	ldr	r3, [r2, #8]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	b410      	push	{r4}
 8007b34:	6093      	str	r3, [r2, #8]
 8007b36:	da08      	bge.n	8007b4a <__sfputc_r+0x1e>
 8007b38:	6994      	ldr	r4, [r2, #24]
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	db01      	blt.n	8007b42 <__sfputc_r+0x16>
 8007b3e:	290a      	cmp	r1, #10
 8007b40:	d103      	bne.n	8007b4a <__sfputc_r+0x1e>
 8007b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b46:	f000 bafd 	b.w	8008144 <__swbuf_r>
 8007b4a:	6813      	ldr	r3, [r2, #0]
 8007b4c:	1c58      	adds	r0, r3, #1
 8007b4e:	6010      	str	r0, [r2, #0]
 8007b50:	7019      	strb	r1, [r3, #0]
 8007b52:	4608      	mov	r0, r1
 8007b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <__sfputs_r>:
 8007b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	460f      	mov	r7, r1
 8007b60:	4614      	mov	r4, r2
 8007b62:	18d5      	adds	r5, r2, r3
 8007b64:	42ac      	cmp	r4, r5
 8007b66:	d101      	bne.n	8007b6c <__sfputs_r+0x12>
 8007b68:	2000      	movs	r0, #0
 8007b6a:	e007      	b.n	8007b7c <__sfputs_r+0x22>
 8007b6c:	463a      	mov	r2, r7
 8007b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b72:	4630      	mov	r0, r6
 8007b74:	f7ff ffda 	bl	8007b2c <__sfputc_r>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d1f3      	bne.n	8007b64 <__sfputs_r+0xa>
 8007b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b80 <_vfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	460c      	mov	r4, r1
 8007b86:	b09d      	sub	sp, #116	; 0x74
 8007b88:	4617      	mov	r7, r2
 8007b8a:	461d      	mov	r5, r3
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	b118      	cbz	r0, 8007b98 <_vfiprintf_r+0x18>
 8007b90:	6983      	ldr	r3, [r0, #24]
 8007b92:	b90b      	cbnz	r3, 8007b98 <_vfiprintf_r+0x18>
 8007b94:	f7ff fdec 	bl	8007770 <__sinit>
 8007b98:	4b7c      	ldr	r3, [pc, #496]	; (8007d8c <_vfiprintf_r+0x20c>)
 8007b9a:	429c      	cmp	r4, r3
 8007b9c:	d158      	bne.n	8007c50 <_vfiprintf_r+0xd0>
 8007b9e:	6874      	ldr	r4, [r6, #4]
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	0718      	lsls	r0, r3, #28
 8007ba4:	d55e      	bpl.n	8007c64 <_vfiprintf_r+0xe4>
 8007ba6:	6923      	ldr	r3, [r4, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d05b      	beq.n	8007c64 <_vfiprintf_r+0xe4>
 8007bac:	2300      	movs	r3, #0
 8007bae:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bb6:	2330      	movs	r3, #48	; 0x30
 8007bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bbc:	9503      	str	r5, [sp, #12]
 8007bbe:	f04f 0b01 	mov.w	fp, #1
 8007bc2:	46b8      	mov	r8, r7
 8007bc4:	4645      	mov	r5, r8
 8007bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bca:	b10b      	cbz	r3, 8007bd0 <_vfiprintf_r+0x50>
 8007bcc:	2b25      	cmp	r3, #37	; 0x25
 8007bce:	d154      	bne.n	8007c7a <_vfiprintf_r+0xfa>
 8007bd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8007bd4:	d00b      	beq.n	8007bee <_vfiprintf_r+0x6e>
 8007bd6:	4653      	mov	r3, sl
 8007bd8:	463a      	mov	r2, r7
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7ff ffbc 	bl	8007b5a <__sfputs_r>
 8007be2:	3001      	adds	r0, #1
 8007be4:	f000 80c2 	beq.w	8007d6c <_vfiprintf_r+0x1ec>
 8007be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bea:	4453      	add	r3, sl
 8007bec:	9309      	str	r3, [sp, #36]	; 0x24
 8007bee:	f898 3000 	ldrb.w	r3, [r8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80ba 	beq.w	8007d6c <_vfiprintf_r+0x1ec>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	9307      	str	r3, [sp, #28]
 8007c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c0c:	46a8      	mov	r8, r5
 8007c0e:	2205      	movs	r2, #5
 8007c10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007c14:	485e      	ldr	r0, [pc, #376]	; (8007d90 <_vfiprintf_r+0x210>)
 8007c16:	f7f8 fadb 	bl	80001d0 <memchr>
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	bb78      	cbnz	r0, 8007c7e <_vfiprintf_r+0xfe>
 8007c1e:	06d9      	lsls	r1, r3, #27
 8007c20:	bf44      	itt	mi
 8007c22:	2220      	movmi	r2, #32
 8007c24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c28:	071a      	lsls	r2, r3, #28
 8007c2a:	bf44      	itt	mi
 8007c2c:	222b      	movmi	r2, #43	; 0x2b
 8007c2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c32:	782a      	ldrb	r2, [r5, #0]
 8007c34:	2a2a      	cmp	r2, #42	; 0x2a
 8007c36:	d02a      	beq.n	8007c8e <_vfiprintf_r+0x10e>
 8007c38:	9a07      	ldr	r2, [sp, #28]
 8007c3a:	46a8      	mov	r8, r5
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	250a      	movs	r5, #10
 8007c40:	4641      	mov	r1, r8
 8007c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c46:	3b30      	subs	r3, #48	; 0x30
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d969      	bls.n	8007d20 <_vfiprintf_r+0x1a0>
 8007c4c:	b360      	cbz	r0, 8007ca8 <_vfiprintf_r+0x128>
 8007c4e:	e024      	b.n	8007c9a <_vfiprintf_r+0x11a>
 8007c50:	4b50      	ldr	r3, [pc, #320]	; (8007d94 <_vfiprintf_r+0x214>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d101      	bne.n	8007c5a <_vfiprintf_r+0xda>
 8007c56:	68b4      	ldr	r4, [r6, #8]
 8007c58:	e7a2      	b.n	8007ba0 <_vfiprintf_r+0x20>
 8007c5a:	4b4f      	ldr	r3, [pc, #316]	; (8007d98 <_vfiprintf_r+0x218>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	bf08      	it	eq
 8007c60:	68f4      	ldreq	r4, [r6, #12]
 8007c62:	e79d      	b.n	8007ba0 <_vfiprintf_r+0x20>
 8007c64:	4621      	mov	r1, r4
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 fad0 	bl	800820c <__swsetup_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d09d      	beq.n	8007bac <_vfiprintf_r+0x2c>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	b01d      	add	sp, #116	; 0x74
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	46a8      	mov	r8, r5
 8007c7c:	e7a2      	b.n	8007bc4 <_vfiprintf_r+0x44>
 8007c7e:	4a44      	ldr	r2, [pc, #272]	; (8007d90 <_vfiprintf_r+0x210>)
 8007c80:	1a80      	subs	r0, r0, r2
 8007c82:	fa0b f000 	lsl.w	r0, fp, r0
 8007c86:	4318      	orrs	r0, r3
 8007c88:	9004      	str	r0, [sp, #16]
 8007c8a:	4645      	mov	r5, r8
 8007c8c:	e7be      	b.n	8007c0c <_vfiprintf_r+0x8c>
 8007c8e:	9a03      	ldr	r2, [sp, #12]
 8007c90:	1d11      	adds	r1, r2, #4
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	9103      	str	r1, [sp, #12]
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	db01      	blt.n	8007c9e <_vfiprintf_r+0x11e>
 8007c9a:	9207      	str	r2, [sp, #28]
 8007c9c:	e004      	b.n	8007ca8 <_vfiprintf_r+0x128>
 8007c9e:	4252      	negs	r2, r2
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	9207      	str	r2, [sp, #28]
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	f898 3000 	ldrb.w	r3, [r8]
 8007cac:	2b2e      	cmp	r3, #46	; 0x2e
 8007cae:	d10e      	bne.n	8007cce <_vfiprintf_r+0x14e>
 8007cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb6:	d138      	bne.n	8007d2a <_vfiprintf_r+0x1aa>
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	1d1a      	adds	r2, r3, #4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	9203      	str	r2, [sp, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bfb8      	it	lt
 8007cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc8:	f108 0802 	add.w	r8, r8, #2
 8007ccc:	9305      	str	r3, [sp, #20]
 8007cce:	4d33      	ldr	r5, [pc, #204]	; (8007d9c <_vfiprintf_r+0x21c>)
 8007cd0:	f898 1000 	ldrb.w	r1, [r8]
 8007cd4:	2203      	movs	r2, #3
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7f8 fa7a 	bl	80001d0 <memchr>
 8007cdc:	b140      	cbz	r0, 8007cf0 <_vfiprintf_r+0x170>
 8007cde:	2340      	movs	r3, #64	; 0x40
 8007ce0:	1b40      	subs	r0, r0, r5
 8007ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	4303      	orrs	r3, r0
 8007cea:	f108 0801 	add.w	r8, r8, #1
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	f898 1000 	ldrb.w	r1, [r8]
 8007cf4:	482a      	ldr	r0, [pc, #168]	; (8007da0 <_vfiprintf_r+0x220>)
 8007cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cfa:	2206      	movs	r2, #6
 8007cfc:	f108 0701 	add.w	r7, r8, #1
 8007d00:	f7f8 fa66 	bl	80001d0 <memchr>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d037      	beq.n	8007d78 <_vfiprintf_r+0x1f8>
 8007d08:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <_vfiprintf_r+0x224>)
 8007d0a:	bb1b      	cbnz	r3, 8007d54 <_vfiprintf_r+0x1d4>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	3307      	adds	r3, #7
 8007d10:	f023 0307 	bic.w	r3, r3, #7
 8007d14:	3308      	adds	r3, #8
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1a:	444b      	add	r3, r9
 8007d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1e:	e750      	b.n	8007bc2 <_vfiprintf_r+0x42>
 8007d20:	fb05 3202 	mla	r2, r5, r2, r3
 8007d24:	2001      	movs	r0, #1
 8007d26:	4688      	mov	r8, r1
 8007d28:	e78a      	b.n	8007c40 <_vfiprintf_r+0xc0>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f108 0801 	add.w	r8, r8, #1
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	4619      	mov	r1, r3
 8007d34:	250a      	movs	r5, #10
 8007d36:	4640      	mov	r0, r8
 8007d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d3c:	3a30      	subs	r2, #48	; 0x30
 8007d3e:	2a09      	cmp	r2, #9
 8007d40:	d903      	bls.n	8007d4a <_vfiprintf_r+0x1ca>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0c3      	beq.n	8007cce <_vfiprintf_r+0x14e>
 8007d46:	9105      	str	r1, [sp, #20]
 8007d48:	e7c1      	b.n	8007cce <_vfiprintf_r+0x14e>
 8007d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007d4e:	2301      	movs	r3, #1
 8007d50:	4680      	mov	r8, r0
 8007d52:	e7f0      	b.n	8007d36 <_vfiprintf_r+0x1b6>
 8007d54:	ab03      	add	r3, sp, #12
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <_vfiprintf_r+0x228>)
 8007d5c:	a904      	add	r1, sp, #16
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f3af 8000 	nop.w
 8007d64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d68:	4681      	mov	r9, r0
 8007d6a:	d1d5      	bne.n	8007d18 <_vfiprintf_r+0x198>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	065b      	lsls	r3, r3, #25
 8007d70:	f53f af7e 	bmi.w	8007c70 <_vfiprintf_r+0xf0>
 8007d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d76:	e77d      	b.n	8007c74 <_vfiprintf_r+0xf4>
 8007d78:	ab03      	add	r3, sp, #12
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <_vfiprintf_r+0x228>)
 8007d80:	a904      	add	r1, sp, #16
 8007d82:	4630      	mov	r0, r6
 8007d84:	f000 f888 	bl	8007e98 <_printf_i>
 8007d88:	e7ec      	b.n	8007d64 <_vfiprintf_r+0x1e4>
 8007d8a:	bf00      	nop
 8007d8c:	08008870 	.word	0x08008870
 8007d90:	080088b0 	.word	0x080088b0
 8007d94:	08008890 	.word	0x08008890
 8007d98:	08008850 	.word	0x08008850
 8007d9c:	080088b6 	.word	0x080088b6
 8007da0:	080088ba 	.word	0x080088ba
 8007da4:	00000000 	.word	0x00000000
 8007da8:	08007b5b 	.word	0x08007b5b

08007dac <_printf_common>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	4691      	mov	r9, r2
 8007db2:	461f      	mov	r7, r3
 8007db4:	688a      	ldr	r2, [r1, #8]
 8007db6:	690b      	ldr	r3, [r1, #16]
 8007db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	bfb8      	it	lt
 8007dc0:	4613      	movlt	r3, r2
 8007dc2:	f8c9 3000 	str.w	r3, [r9]
 8007dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	b112      	cbz	r2, 8007dd6 <_printf_common+0x2a>
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	f8c9 3000 	str.w	r3, [r9]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	0699      	lsls	r1, r3, #26
 8007dda:	bf42      	ittt	mi
 8007ddc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007de0:	3302      	addmi	r3, #2
 8007de2:	f8c9 3000 	strmi.w	r3, [r9]
 8007de6:	6825      	ldr	r5, [r4, #0]
 8007de8:	f015 0506 	ands.w	r5, r5, #6
 8007dec:	d107      	bne.n	8007dfe <_printf_common+0x52>
 8007dee:	f104 0a19 	add.w	sl, r4, #25
 8007df2:	68e3      	ldr	r3, [r4, #12]
 8007df4:	f8d9 2000 	ldr.w	r2, [r9]
 8007df8:	1a9b      	subs	r3, r3, r2
 8007dfa:	42ab      	cmp	r3, r5
 8007dfc:	dc28      	bgt.n	8007e50 <_printf_common+0xa4>
 8007dfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	3300      	adds	r3, #0
 8007e06:	bf18      	it	ne
 8007e08:	2301      	movne	r3, #1
 8007e0a:	0692      	lsls	r2, r2, #26
 8007e0c:	d42d      	bmi.n	8007e6a <_printf_common+0xbe>
 8007e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e12:	4639      	mov	r1, r7
 8007e14:	4630      	mov	r0, r6
 8007e16:	47c0      	blx	r8
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d020      	beq.n	8007e5e <_printf_common+0xb2>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	68e5      	ldr	r5, [r4, #12]
 8007e20:	f8d9 2000 	ldr.w	r2, [r9]
 8007e24:	f003 0306 	and.w	r3, r3, #6
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	bf08      	it	eq
 8007e2c:	1aad      	subeq	r5, r5, r2
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	6922      	ldr	r2, [r4, #16]
 8007e32:	bf0c      	ite	eq
 8007e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e38:	2500      	movne	r5, #0
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	bfc4      	itt	gt
 8007e3e:	1a9b      	subgt	r3, r3, r2
 8007e40:	18ed      	addgt	r5, r5, r3
 8007e42:	f04f 0900 	mov.w	r9, #0
 8007e46:	341a      	adds	r4, #26
 8007e48:	454d      	cmp	r5, r9
 8007e4a:	d11a      	bne.n	8007e82 <_printf_common+0xd6>
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	e008      	b.n	8007e62 <_printf_common+0xb6>
 8007e50:	2301      	movs	r3, #1
 8007e52:	4652      	mov	r2, sl
 8007e54:	4639      	mov	r1, r7
 8007e56:	4630      	mov	r0, r6
 8007e58:	47c0      	blx	r8
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d103      	bne.n	8007e66 <_printf_common+0xba>
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e66:	3501      	adds	r5, #1
 8007e68:	e7c3      	b.n	8007df2 <_printf_common+0x46>
 8007e6a:	18e1      	adds	r1, r4, r3
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	2030      	movs	r0, #48	; 0x30
 8007e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e74:	4422      	add	r2, r4
 8007e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e7e:	3302      	adds	r3, #2
 8007e80:	e7c5      	b.n	8007e0e <_printf_common+0x62>
 8007e82:	2301      	movs	r3, #1
 8007e84:	4622      	mov	r2, r4
 8007e86:	4639      	mov	r1, r7
 8007e88:	4630      	mov	r0, r6
 8007e8a:	47c0      	blx	r8
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d0e6      	beq.n	8007e5e <_printf_common+0xb2>
 8007e90:	f109 0901 	add.w	r9, r9, #1
 8007e94:	e7d8      	b.n	8007e48 <_printf_common+0x9c>
	...

08007e98 <_printf_i>:
 8007e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	7e09      	ldrb	r1, [r1, #24]
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	296e      	cmp	r1, #110	; 0x6e
 8007ea8:	4617      	mov	r7, r2
 8007eaa:	4606      	mov	r6, r0
 8007eac:	4698      	mov	r8, r3
 8007eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eb0:	f000 80b3 	beq.w	800801a <_printf_i+0x182>
 8007eb4:	d822      	bhi.n	8007efc <_printf_i+0x64>
 8007eb6:	2963      	cmp	r1, #99	; 0x63
 8007eb8:	d036      	beq.n	8007f28 <_printf_i+0x90>
 8007eba:	d80a      	bhi.n	8007ed2 <_printf_i+0x3a>
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	f000 80b9 	beq.w	8008034 <_printf_i+0x19c>
 8007ec2:	2958      	cmp	r1, #88	; 0x58
 8007ec4:	f000 8083 	beq.w	8007fce <_printf_i+0x136>
 8007ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ecc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ed0:	e032      	b.n	8007f38 <_printf_i+0xa0>
 8007ed2:	2964      	cmp	r1, #100	; 0x64
 8007ed4:	d001      	beq.n	8007eda <_printf_i+0x42>
 8007ed6:	2969      	cmp	r1, #105	; 0x69
 8007ed8:	d1f6      	bne.n	8007ec8 <_printf_i+0x30>
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	6813      	ldr	r3, [r2, #0]
 8007ede:	0605      	lsls	r5, r0, #24
 8007ee0:	f103 0104 	add.w	r1, r3, #4
 8007ee4:	d52a      	bpl.n	8007f3c <_printf_i+0xa4>
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6011      	str	r1, [r2, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	da03      	bge.n	8007ef6 <_printf_i+0x5e>
 8007eee:	222d      	movs	r2, #45	; 0x2d
 8007ef0:	425b      	negs	r3, r3
 8007ef2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ef6:	486f      	ldr	r0, [pc, #444]	; (80080b4 <_printf_i+0x21c>)
 8007ef8:	220a      	movs	r2, #10
 8007efa:	e039      	b.n	8007f70 <_printf_i+0xd8>
 8007efc:	2973      	cmp	r1, #115	; 0x73
 8007efe:	f000 809d 	beq.w	800803c <_printf_i+0x1a4>
 8007f02:	d808      	bhi.n	8007f16 <_printf_i+0x7e>
 8007f04:	296f      	cmp	r1, #111	; 0x6f
 8007f06:	d020      	beq.n	8007f4a <_printf_i+0xb2>
 8007f08:	2970      	cmp	r1, #112	; 0x70
 8007f0a:	d1dd      	bne.n	8007ec8 <_printf_i+0x30>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	f043 0320 	orr.w	r3, r3, #32
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	e003      	b.n	8007f1e <_printf_i+0x86>
 8007f16:	2975      	cmp	r1, #117	; 0x75
 8007f18:	d017      	beq.n	8007f4a <_printf_i+0xb2>
 8007f1a:	2978      	cmp	r1, #120	; 0x78
 8007f1c:	d1d4      	bne.n	8007ec8 <_printf_i+0x30>
 8007f1e:	2378      	movs	r3, #120	; 0x78
 8007f20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f24:	4864      	ldr	r0, [pc, #400]	; (80080b8 <_printf_i+0x220>)
 8007f26:	e055      	b.n	8007fd4 <_printf_i+0x13c>
 8007f28:	6813      	ldr	r3, [r2, #0]
 8007f2a:	1d19      	adds	r1, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6011      	str	r1, [r2, #0]
 8007f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e08c      	b.n	8008056 <_printf_i+0x1be>
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6011      	str	r1, [r2, #0]
 8007f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f44:	bf18      	it	ne
 8007f46:	b21b      	sxthne	r3, r3
 8007f48:	e7cf      	b.n	8007eea <_printf_i+0x52>
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	6825      	ldr	r5, [r4, #0]
 8007f4e:	1d18      	adds	r0, r3, #4
 8007f50:	6010      	str	r0, [r2, #0]
 8007f52:	0628      	lsls	r0, r5, #24
 8007f54:	d501      	bpl.n	8007f5a <_printf_i+0xc2>
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	e002      	b.n	8007f60 <_printf_i+0xc8>
 8007f5a:	0668      	lsls	r0, r5, #25
 8007f5c:	d5fb      	bpl.n	8007f56 <_printf_i+0xbe>
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	4854      	ldr	r0, [pc, #336]	; (80080b4 <_printf_i+0x21c>)
 8007f62:	296f      	cmp	r1, #111	; 0x6f
 8007f64:	bf14      	ite	ne
 8007f66:	220a      	movne	r2, #10
 8007f68:	2208      	moveq	r2, #8
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f70:	6865      	ldr	r5, [r4, #4]
 8007f72:	60a5      	str	r5, [r4, #8]
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	f2c0 8095 	blt.w	80080a4 <_printf_i+0x20c>
 8007f7a:	6821      	ldr	r1, [r4, #0]
 8007f7c:	f021 0104 	bic.w	r1, r1, #4
 8007f80:	6021      	str	r1, [r4, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d13d      	bne.n	8008002 <_printf_i+0x16a>
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	f040 808e 	bne.w	80080a8 <_printf_i+0x210>
 8007f8c:	4665      	mov	r5, ip
 8007f8e:	2a08      	cmp	r2, #8
 8007f90:	d10b      	bne.n	8007faa <_printf_i+0x112>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	07db      	lsls	r3, r3, #31
 8007f96:	d508      	bpl.n	8007faa <_printf_i+0x112>
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	6862      	ldr	r2, [r4, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	bfde      	ittt	le
 8007fa0:	2330      	movle	r3, #48	; 0x30
 8007fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007faa:	ebac 0305 	sub.w	r3, ip, r5
 8007fae:	6123      	str	r3, [r4, #16]
 8007fb0:	f8cd 8000 	str.w	r8, [sp]
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	aa03      	add	r2, sp, #12
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff fef6 	bl	8007dac <_printf_common>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d14d      	bne.n	8008060 <_printf_i+0x1c8>
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	b005      	add	sp, #20
 8007fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fce:	4839      	ldr	r0, [pc, #228]	; (80080b4 <_printf_i+0x21c>)
 8007fd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007fd4:	6813      	ldr	r3, [r2, #0]
 8007fd6:	6821      	ldr	r1, [r4, #0]
 8007fd8:	1d1d      	adds	r5, r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6015      	str	r5, [r2, #0]
 8007fde:	060a      	lsls	r2, r1, #24
 8007fe0:	d50b      	bpl.n	8007ffa <_printf_i+0x162>
 8007fe2:	07ca      	lsls	r2, r1, #31
 8007fe4:	bf44      	itt	mi
 8007fe6:	f041 0120 	orrmi.w	r1, r1, #32
 8007fea:	6021      	strmi	r1, [r4, #0]
 8007fec:	b91b      	cbnz	r3, 8007ff6 <_printf_i+0x15e>
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	f022 0220 	bic.w	r2, r2, #32
 8007ff4:	6022      	str	r2, [r4, #0]
 8007ff6:	2210      	movs	r2, #16
 8007ff8:	e7b7      	b.n	8007f6a <_printf_i+0xd2>
 8007ffa:	064d      	lsls	r5, r1, #25
 8007ffc:	bf48      	it	mi
 8007ffe:	b29b      	uxthmi	r3, r3
 8008000:	e7ef      	b.n	8007fe2 <_printf_i+0x14a>
 8008002:	4665      	mov	r5, ip
 8008004:	fbb3 f1f2 	udiv	r1, r3, r2
 8008008:	fb02 3311 	mls	r3, r2, r1, r3
 800800c:	5cc3      	ldrb	r3, [r0, r3]
 800800e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008012:	460b      	mov	r3, r1
 8008014:	2900      	cmp	r1, #0
 8008016:	d1f5      	bne.n	8008004 <_printf_i+0x16c>
 8008018:	e7b9      	b.n	8007f8e <_printf_i+0xf6>
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	6825      	ldr	r5, [r4, #0]
 800801e:	6961      	ldr	r1, [r4, #20]
 8008020:	1d18      	adds	r0, r3, #4
 8008022:	6010      	str	r0, [r2, #0]
 8008024:	0628      	lsls	r0, r5, #24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	d501      	bpl.n	800802e <_printf_i+0x196>
 800802a:	6019      	str	r1, [r3, #0]
 800802c:	e002      	b.n	8008034 <_printf_i+0x19c>
 800802e:	066a      	lsls	r2, r5, #25
 8008030:	d5fb      	bpl.n	800802a <_printf_i+0x192>
 8008032:	8019      	strh	r1, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	4665      	mov	r5, ip
 800803a:	e7b9      	b.n	8007fb0 <_printf_i+0x118>
 800803c:	6813      	ldr	r3, [r2, #0]
 800803e:	1d19      	adds	r1, r3, #4
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	681d      	ldr	r5, [r3, #0]
 8008044:	6862      	ldr	r2, [r4, #4]
 8008046:	2100      	movs	r1, #0
 8008048:	4628      	mov	r0, r5
 800804a:	f7f8 f8c1 	bl	80001d0 <memchr>
 800804e:	b108      	cbz	r0, 8008054 <_printf_i+0x1bc>
 8008050:	1b40      	subs	r0, r0, r5
 8008052:	6060      	str	r0, [r4, #4]
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	6123      	str	r3, [r4, #16]
 8008058:	2300      	movs	r3, #0
 800805a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805e:	e7a7      	b.n	8007fb0 <_printf_i+0x118>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	462a      	mov	r2, r5
 8008064:	4639      	mov	r1, r7
 8008066:	4630      	mov	r0, r6
 8008068:	47c0      	blx	r8
 800806a:	3001      	adds	r0, #1
 800806c:	d0aa      	beq.n	8007fc4 <_printf_i+0x12c>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	079b      	lsls	r3, r3, #30
 8008072:	d413      	bmi.n	800809c <_printf_i+0x204>
 8008074:	68e0      	ldr	r0, [r4, #12]
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	4298      	cmp	r0, r3
 800807a:	bfb8      	it	lt
 800807c:	4618      	movlt	r0, r3
 800807e:	e7a3      	b.n	8007fc8 <_printf_i+0x130>
 8008080:	2301      	movs	r3, #1
 8008082:	464a      	mov	r2, r9
 8008084:	4639      	mov	r1, r7
 8008086:	4630      	mov	r0, r6
 8008088:	47c0      	blx	r8
 800808a:	3001      	adds	r0, #1
 800808c:	d09a      	beq.n	8007fc4 <_printf_i+0x12c>
 800808e:	3501      	adds	r5, #1
 8008090:	68e3      	ldr	r3, [r4, #12]
 8008092:	9a03      	ldr	r2, [sp, #12]
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	42ab      	cmp	r3, r5
 8008098:	dcf2      	bgt.n	8008080 <_printf_i+0x1e8>
 800809a:	e7eb      	b.n	8008074 <_printf_i+0x1dc>
 800809c:	2500      	movs	r5, #0
 800809e:	f104 0919 	add.w	r9, r4, #25
 80080a2:	e7f5      	b.n	8008090 <_printf_i+0x1f8>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1ac      	bne.n	8008002 <_printf_i+0x16a>
 80080a8:	7803      	ldrb	r3, [r0, #0]
 80080aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080b2:	e76c      	b.n	8007f8e <_printf_i+0xf6>
 80080b4:	080088c1 	.word	0x080088c1
 80080b8:	080088d2 	.word	0x080088d2

080080bc <__sread>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	460c      	mov	r4, r1
 80080c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c4:	f000 fa86 	bl	80085d4 <_read_r>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	bfab      	itete	ge
 80080cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080ce:	89a3      	ldrhlt	r3, [r4, #12]
 80080d0:	181b      	addge	r3, r3, r0
 80080d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080d6:	bfac      	ite	ge
 80080d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80080da:	81a3      	strhlt	r3, [r4, #12]
 80080dc:	bd10      	pop	{r4, pc}

080080de <__swrite>:
 80080de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e2:	461f      	mov	r7, r3
 80080e4:	898b      	ldrh	r3, [r1, #12]
 80080e6:	05db      	lsls	r3, r3, #23
 80080e8:	4605      	mov	r5, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	4616      	mov	r6, r2
 80080ee:	d505      	bpl.n	80080fc <__swrite+0x1e>
 80080f0:	2302      	movs	r3, #2
 80080f2:	2200      	movs	r2, #0
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	f000 f9b6 	bl	8008468 <_lseek_r>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	4632      	mov	r2, r6
 800810a:	463b      	mov	r3, r7
 800810c:	4628      	mov	r0, r5
 800810e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	f000 b869 	b.w	80081e8 <_write_r>

08008116 <__sseek>:
 8008116:	b510      	push	{r4, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811e:	f000 f9a3 	bl	8008468 <_lseek_r>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	bf15      	itete	ne
 8008128:	6560      	strne	r0, [r4, #84]	; 0x54
 800812a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800812e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008132:	81a3      	strheq	r3, [r4, #12]
 8008134:	bf18      	it	ne
 8008136:	81a3      	strhne	r3, [r4, #12]
 8008138:	bd10      	pop	{r4, pc}

0800813a <__sclose>:
 800813a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813e:	f000 b8d3 	b.w	80082e8 <_close_r>
	...

08008144 <__swbuf_r>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	460e      	mov	r6, r1
 8008148:	4614      	mov	r4, r2
 800814a:	4605      	mov	r5, r0
 800814c:	b118      	cbz	r0, 8008156 <__swbuf_r+0x12>
 800814e:	6983      	ldr	r3, [r0, #24]
 8008150:	b90b      	cbnz	r3, 8008156 <__swbuf_r+0x12>
 8008152:	f7ff fb0d 	bl	8007770 <__sinit>
 8008156:	4b21      	ldr	r3, [pc, #132]	; (80081dc <__swbuf_r+0x98>)
 8008158:	429c      	cmp	r4, r3
 800815a:	d12a      	bne.n	80081b2 <__swbuf_r+0x6e>
 800815c:	686c      	ldr	r4, [r5, #4]
 800815e:	69a3      	ldr	r3, [r4, #24]
 8008160:	60a3      	str	r3, [r4, #8]
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	071a      	lsls	r2, r3, #28
 8008166:	d52e      	bpl.n	80081c6 <__swbuf_r+0x82>
 8008168:	6923      	ldr	r3, [r4, #16]
 800816a:	b363      	cbz	r3, 80081c6 <__swbuf_r+0x82>
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	6820      	ldr	r0, [r4, #0]
 8008170:	1ac0      	subs	r0, r0, r3
 8008172:	6963      	ldr	r3, [r4, #20]
 8008174:	b2f6      	uxtb	r6, r6
 8008176:	4283      	cmp	r3, r0
 8008178:	4637      	mov	r7, r6
 800817a:	dc04      	bgt.n	8008186 <__swbuf_r+0x42>
 800817c:	4621      	mov	r1, r4
 800817e:	4628      	mov	r0, r5
 8008180:	f000 f948 	bl	8008414 <_fflush_r>
 8008184:	bb28      	cbnz	r0, 80081d2 <__swbuf_r+0x8e>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	3b01      	subs	r3, #1
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	6022      	str	r2, [r4, #0]
 8008192:	701e      	strb	r6, [r3, #0]
 8008194:	6963      	ldr	r3, [r4, #20]
 8008196:	3001      	adds	r0, #1
 8008198:	4283      	cmp	r3, r0
 800819a:	d004      	beq.n	80081a6 <__swbuf_r+0x62>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	07db      	lsls	r3, r3, #31
 80081a0:	d519      	bpl.n	80081d6 <__swbuf_r+0x92>
 80081a2:	2e0a      	cmp	r6, #10
 80081a4:	d117      	bne.n	80081d6 <__swbuf_r+0x92>
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f933 	bl	8008414 <_fflush_r>
 80081ae:	b190      	cbz	r0, 80081d6 <__swbuf_r+0x92>
 80081b0:	e00f      	b.n	80081d2 <__swbuf_r+0x8e>
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <__swbuf_r+0x9c>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d101      	bne.n	80081bc <__swbuf_r+0x78>
 80081b8:	68ac      	ldr	r4, [r5, #8]
 80081ba:	e7d0      	b.n	800815e <__swbuf_r+0x1a>
 80081bc:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <__swbuf_r+0xa0>)
 80081be:	429c      	cmp	r4, r3
 80081c0:	bf08      	it	eq
 80081c2:	68ec      	ldreq	r4, [r5, #12]
 80081c4:	e7cb      	b.n	800815e <__swbuf_r+0x1a>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f81f 	bl	800820c <__swsetup_r>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0cc      	beq.n	800816c <__swbuf_r+0x28>
 80081d2:	f04f 37ff 	mov.w	r7, #4294967295
 80081d6:	4638      	mov	r0, r7
 80081d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081da:	bf00      	nop
 80081dc:	08008870 	.word	0x08008870
 80081e0:	08008890 	.word	0x08008890
 80081e4:	08008850 	.word	0x08008850

080081e8 <_write_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4c07      	ldr	r4, [pc, #28]	; (8008208 <_write_r+0x20>)
 80081ec:	4605      	mov	r5, r0
 80081ee:	4608      	mov	r0, r1
 80081f0:	4611      	mov	r1, r2
 80081f2:	2200      	movs	r2, #0
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f7f9 ffc8 	bl	800218c <_write>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_write_r+0x1e>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	b103      	cbz	r3, 8008206 <_write_r+0x1e>
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	20004cc4 	.word	0x20004cc4

0800820c <__swsetup_r>:
 800820c:	4b32      	ldr	r3, [pc, #200]	; (80082d8 <__swsetup_r+0xcc>)
 800820e:	b570      	push	{r4, r5, r6, lr}
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	4606      	mov	r6, r0
 8008214:	460c      	mov	r4, r1
 8008216:	b125      	cbz	r5, 8008222 <__swsetup_r+0x16>
 8008218:	69ab      	ldr	r3, [r5, #24]
 800821a:	b913      	cbnz	r3, 8008222 <__swsetup_r+0x16>
 800821c:	4628      	mov	r0, r5
 800821e:	f7ff faa7 	bl	8007770 <__sinit>
 8008222:	4b2e      	ldr	r3, [pc, #184]	; (80082dc <__swsetup_r+0xd0>)
 8008224:	429c      	cmp	r4, r3
 8008226:	d10f      	bne.n	8008248 <__swsetup_r+0x3c>
 8008228:	686c      	ldr	r4, [r5, #4]
 800822a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822e:	b29a      	uxth	r2, r3
 8008230:	0715      	lsls	r5, r2, #28
 8008232:	d42c      	bmi.n	800828e <__swsetup_r+0x82>
 8008234:	06d0      	lsls	r0, r2, #27
 8008236:	d411      	bmi.n	800825c <__swsetup_r+0x50>
 8008238:	2209      	movs	r2, #9
 800823a:	6032      	str	r2, [r6, #0]
 800823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	e03e      	b.n	80082c6 <__swsetup_r+0xba>
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <__swsetup_r+0xd4>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <__swsetup_r+0x46>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7eb      	b.n	800822a <__swsetup_r+0x1e>
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <__swsetup_r+0xd8>)
 8008254:	429c      	cmp	r4, r3
 8008256:	bf08      	it	eq
 8008258:	68ec      	ldreq	r4, [r5, #12]
 800825a:	e7e6      	b.n	800822a <__swsetup_r+0x1e>
 800825c:	0751      	lsls	r1, r2, #29
 800825e:	d512      	bpl.n	8008286 <__swsetup_r+0x7a>
 8008260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008262:	b141      	cbz	r1, 8008276 <__swsetup_r+0x6a>
 8008264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008268:	4299      	cmp	r1, r3
 800826a:	d002      	beq.n	8008272 <__swsetup_r+0x66>
 800826c:	4630      	mov	r0, r6
 800826e:	f7ff f94f 	bl	8007510 <_free_r>
 8008272:	2300      	movs	r3, #0
 8008274:	6363      	str	r3, [r4, #52]	; 0x34
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	2300      	movs	r3, #0
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f043 0308 	orr.w	r3, r3, #8
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	b94b      	cbnz	r3, 80082a6 <__swsetup_r+0x9a>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829c:	d003      	beq.n	80082a6 <__swsetup_r+0x9a>
 800829e:	4621      	mov	r1, r4
 80082a0:	4630      	mov	r0, r6
 80082a2:	f000 f917 	bl	80084d4 <__smakebuf_r>
 80082a6:	89a2      	ldrh	r2, [r4, #12]
 80082a8:	f012 0301 	ands.w	r3, r2, #1
 80082ac:	d00c      	beq.n	80082c8 <__swsetup_r+0xbc>
 80082ae:	2300      	movs	r3, #0
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	6963      	ldr	r3, [r4, #20]
 80082b4:	425b      	negs	r3, r3
 80082b6:	61a3      	str	r3, [r4, #24]
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	b953      	cbnz	r3, 80082d2 <__swsetup_r+0xc6>
 80082bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80082c4:	d1ba      	bne.n	800823c <__swsetup_r+0x30>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	0792      	lsls	r2, r2, #30
 80082ca:	bf58      	it	pl
 80082cc:	6963      	ldrpl	r3, [r4, #20]
 80082ce:	60a3      	str	r3, [r4, #8]
 80082d0:	e7f2      	b.n	80082b8 <__swsetup_r+0xac>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7f7      	b.n	80082c6 <__swsetup_r+0xba>
 80082d6:	bf00      	nop
 80082d8:	200000b0 	.word	0x200000b0
 80082dc:	08008870 	.word	0x08008870
 80082e0:	08008890 	.word	0x08008890
 80082e4:	08008850 	.word	0x08008850

080082e8 <_close_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4c06      	ldr	r4, [pc, #24]	; (8008304 <_close_r+0x1c>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4605      	mov	r5, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	f7f9 ff66 	bl	80021c4 <_close>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_close_r+0x1a>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_close_r+0x1a>
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20004cc4 	.word	0x20004cc4

08008308 <__sflush_r>:
 8008308:	898a      	ldrh	r2, [r1, #12]
 800830a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830e:	4605      	mov	r5, r0
 8008310:	0710      	lsls	r0, r2, #28
 8008312:	460c      	mov	r4, r1
 8008314:	d458      	bmi.n	80083c8 <__sflush_r+0xc0>
 8008316:	684b      	ldr	r3, [r1, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc05      	bgt.n	8008328 <__sflush_r+0x20>
 800831c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	dc02      	bgt.n	8008328 <__sflush_r+0x20>
 8008322:	2000      	movs	r0, #0
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800832a:	2e00      	cmp	r6, #0
 800832c:	d0f9      	beq.n	8008322 <__sflush_r+0x1a>
 800832e:	2300      	movs	r3, #0
 8008330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008334:	682f      	ldr	r7, [r5, #0]
 8008336:	6a21      	ldr	r1, [r4, #32]
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	d032      	beq.n	80083a2 <__sflush_r+0x9a>
 800833c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	075a      	lsls	r2, r3, #29
 8008342:	d505      	bpl.n	8008350 <__sflush_r+0x48>
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	1ac0      	subs	r0, r0, r3
 8008348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800834a:	b10b      	cbz	r3, 8008350 <__sflush_r+0x48>
 800834c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800834e:	1ac0      	subs	r0, r0, r3
 8008350:	2300      	movs	r3, #0
 8008352:	4602      	mov	r2, r0
 8008354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008356:	6a21      	ldr	r1, [r4, #32]
 8008358:	4628      	mov	r0, r5
 800835a:	47b0      	blx	r6
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	d106      	bne.n	8008370 <__sflush_r+0x68>
 8008362:	6829      	ldr	r1, [r5, #0]
 8008364:	291d      	cmp	r1, #29
 8008366:	d848      	bhi.n	80083fa <__sflush_r+0xf2>
 8008368:	4a29      	ldr	r2, [pc, #164]	; (8008410 <__sflush_r+0x108>)
 800836a:	40ca      	lsrs	r2, r1
 800836c:	07d6      	lsls	r6, r2, #31
 800836e:	d544      	bpl.n	80083fa <__sflush_r+0xf2>
 8008370:	2200      	movs	r2, #0
 8008372:	6062      	str	r2, [r4, #4]
 8008374:	04d9      	lsls	r1, r3, #19
 8008376:	6922      	ldr	r2, [r4, #16]
 8008378:	6022      	str	r2, [r4, #0]
 800837a:	d504      	bpl.n	8008386 <__sflush_r+0x7e>
 800837c:	1c42      	adds	r2, r0, #1
 800837e:	d101      	bne.n	8008384 <__sflush_r+0x7c>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b903      	cbnz	r3, 8008386 <__sflush_r+0x7e>
 8008384:	6560      	str	r0, [r4, #84]	; 0x54
 8008386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008388:	602f      	str	r7, [r5, #0]
 800838a:	2900      	cmp	r1, #0
 800838c:	d0c9      	beq.n	8008322 <__sflush_r+0x1a>
 800838e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008392:	4299      	cmp	r1, r3
 8008394:	d002      	beq.n	800839c <__sflush_r+0x94>
 8008396:	4628      	mov	r0, r5
 8008398:	f7ff f8ba 	bl	8007510 <_free_r>
 800839c:	2000      	movs	r0, #0
 800839e:	6360      	str	r0, [r4, #52]	; 0x34
 80083a0:	e7c0      	b.n	8008324 <__sflush_r+0x1c>
 80083a2:	2301      	movs	r3, #1
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b0      	blx	r6
 80083a8:	1c41      	adds	r1, r0, #1
 80083aa:	d1c8      	bne.n	800833e <__sflush_r+0x36>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0c5      	beq.n	800833e <__sflush_r+0x36>
 80083b2:	2b1d      	cmp	r3, #29
 80083b4:	d001      	beq.n	80083ba <__sflush_r+0xb2>
 80083b6:	2b16      	cmp	r3, #22
 80083b8:	d101      	bne.n	80083be <__sflush_r+0xb6>
 80083ba:	602f      	str	r7, [r5, #0]
 80083bc:	e7b1      	b.n	8008322 <__sflush_r+0x1a>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	e7ad      	b.n	8008324 <__sflush_r+0x1c>
 80083c8:	690f      	ldr	r7, [r1, #16]
 80083ca:	2f00      	cmp	r7, #0
 80083cc:	d0a9      	beq.n	8008322 <__sflush_r+0x1a>
 80083ce:	0793      	lsls	r3, r2, #30
 80083d0:	680e      	ldr	r6, [r1, #0]
 80083d2:	bf08      	it	eq
 80083d4:	694b      	ldreq	r3, [r1, #20]
 80083d6:	600f      	str	r7, [r1, #0]
 80083d8:	bf18      	it	ne
 80083da:	2300      	movne	r3, #0
 80083dc:	eba6 0807 	sub.w	r8, r6, r7
 80083e0:	608b      	str	r3, [r1, #8]
 80083e2:	f1b8 0f00 	cmp.w	r8, #0
 80083e6:	dd9c      	ble.n	8008322 <__sflush_r+0x1a>
 80083e8:	4643      	mov	r3, r8
 80083ea:	463a      	mov	r2, r7
 80083ec:	6a21      	ldr	r1, [r4, #32]
 80083ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b0      	blx	r6
 80083f4:	2800      	cmp	r0, #0
 80083f6:	dc06      	bgt.n	8008406 <__sflush_r+0xfe>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e78e      	b.n	8008324 <__sflush_r+0x1c>
 8008406:	4407      	add	r7, r0
 8008408:	eba8 0800 	sub.w	r8, r8, r0
 800840c:	e7e9      	b.n	80083e2 <__sflush_r+0xda>
 800840e:	bf00      	nop
 8008410:	20400001 	.word	0x20400001

08008414 <_fflush_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	690b      	ldr	r3, [r1, #16]
 8008418:	4605      	mov	r5, r0
 800841a:	460c      	mov	r4, r1
 800841c:	b1db      	cbz	r3, 8008456 <_fflush_r+0x42>
 800841e:	b118      	cbz	r0, 8008428 <_fflush_r+0x14>
 8008420:	6983      	ldr	r3, [r0, #24]
 8008422:	b90b      	cbnz	r3, 8008428 <_fflush_r+0x14>
 8008424:	f7ff f9a4 	bl	8007770 <__sinit>
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <_fflush_r+0x48>)
 800842a:	429c      	cmp	r4, r3
 800842c:	d109      	bne.n	8008442 <_fflush_r+0x2e>
 800842e:	686c      	ldr	r4, [r5, #4]
 8008430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008434:	b17b      	cbz	r3, 8008456 <_fflush_r+0x42>
 8008436:	4621      	mov	r1, r4
 8008438:	4628      	mov	r0, r5
 800843a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843e:	f7ff bf63 	b.w	8008308 <__sflush_r>
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <_fflush_r+0x4c>)
 8008444:	429c      	cmp	r4, r3
 8008446:	d101      	bne.n	800844c <_fflush_r+0x38>
 8008448:	68ac      	ldr	r4, [r5, #8]
 800844a:	e7f1      	b.n	8008430 <_fflush_r+0x1c>
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <_fflush_r+0x50>)
 800844e:	429c      	cmp	r4, r3
 8008450:	bf08      	it	eq
 8008452:	68ec      	ldreq	r4, [r5, #12]
 8008454:	e7ec      	b.n	8008430 <_fflush_r+0x1c>
 8008456:	2000      	movs	r0, #0
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	08008870 	.word	0x08008870
 8008460:	08008890 	.word	0x08008890
 8008464:	08008850 	.word	0x08008850

08008468 <_lseek_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4c07      	ldr	r4, [pc, #28]	; (8008488 <_lseek_r+0x20>)
 800846c:	4605      	mov	r5, r0
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	2200      	movs	r2, #0
 8008474:	6022      	str	r2, [r4, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f7f9 fecb 	bl	8002212 <_lseek>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_lseek_r+0x1e>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	b103      	cbz	r3, 8008486 <_lseek_r+0x1e>
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	20004cc4 	.word	0x20004cc4

0800848c <__swhatbuf_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	460e      	mov	r6, r1
 8008490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008494:	2900      	cmp	r1, #0
 8008496:	b096      	sub	sp, #88	; 0x58
 8008498:	4614      	mov	r4, r2
 800849a:	461d      	mov	r5, r3
 800849c:	da07      	bge.n	80084ae <__swhatbuf_r+0x22>
 800849e:	2300      	movs	r3, #0
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	89b3      	ldrh	r3, [r6, #12]
 80084a4:	061a      	lsls	r2, r3, #24
 80084a6:	d410      	bmi.n	80084ca <__swhatbuf_r+0x3e>
 80084a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ac:	e00e      	b.n	80084cc <__swhatbuf_r+0x40>
 80084ae:	466a      	mov	r2, sp
 80084b0:	f000 f8a2 	bl	80085f8 <_fstat_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dbf2      	blt.n	800849e <__swhatbuf_r+0x12>
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084c2:	425a      	negs	r2, r3
 80084c4:	415a      	adcs	r2, r3
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	e7ee      	b.n	80084a8 <__swhatbuf_r+0x1c>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	2000      	movs	r0, #0
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	b016      	add	sp, #88	; 0x58
 80084d2:	bd70      	pop	{r4, r5, r6, pc}

080084d4 <__smakebuf_r>:
 80084d4:	898b      	ldrh	r3, [r1, #12]
 80084d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d8:	079d      	lsls	r5, r3, #30
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	d507      	bpl.n	80084f0 <__smakebuf_r+0x1c>
 80084e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	2301      	movs	r3, #1
 80084ea:	6163      	str	r3, [r4, #20]
 80084ec:	b002      	add	sp, #8
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	ab01      	add	r3, sp, #4
 80084f2:	466a      	mov	r2, sp
 80084f4:	f7ff ffca 	bl	800848c <__swhatbuf_r>
 80084f8:	9900      	ldr	r1, [sp, #0]
 80084fa:	4605      	mov	r5, r0
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff f855 	bl	80075ac <_malloc_r>
 8008502:	b948      	cbnz	r0, 8008518 <__smakebuf_r+0x44>
 8008504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008508:	059a      	lsls	r2, r3, #22
 800850a:	d4ef      	bmi.n	80084ec <__smakebuf_r+0x18>
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	f043 0302 	orr.w	r3, r3, #2
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	e7e3      	b.n	80084e0 <__smakebuf_r+0xc>
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <__smakebuf_r+0x7c>)
 800851a:	62b3      	str	r3, [r6, #40]	; 0x28
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	6163      	str	r3, [r4, #20]
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	6120      	str	r0, [r4, #16]
 800852e:	b15b      	cbz	r3, 8008548 <__smakebuf_r+0x74>
 8008530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f871 	bl	800861c <_isatty_r>
 800853a:	b128      	cbz	r0, 8008548 <__smakebuf_r+0x74>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	431d      	orrs	r5, r3
 800854c:	81a5      	strh	r5, [r4, #12]
 800854e:	e7cd      	b.n	80084ec <__smakebuf_r+0x18>
 8008550:	08007739 	.word	0x08007739

08008554 <memmove>:
 8008554:	4288      	cmp	r0, r1
 8008556:	b510      	push	{r4, lr}
 8008558:	eb01 0302 	add.w	r3, r1, r2
 800855c:	d807      	bhi.n	800856e <memmove+0x1a>
 800855e:	1e42      	subs	r2, r0, #1
 8008560:	4299      	cmp	r1, r3
 8008562:	d00a      	beq.n	800857a <memmove+0x26>
 8008564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008568:	f802 4f01 	strb.w	r4, [r2, #1]!
 800856c:	e7f8      	b.n	8008560 <memmove+0xc>
 800856e:	4283      	cmp	r3, r0
 8008570:	d9f5      	bls.n	800855e <memmove+0xa>
 8008572:	1881      	adds	r1, r0, r2
 8008574:	1ad2      	subs	r2, r2, r3
 8008576:	42d3      	cmn	r3, r2
 8008578:	d100      	bne.n	800857c <memmove+0x28>
 800857a:	bd10      	pop	{r4, pc}
 800857c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008580:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008584:	e7f7      	b.n	8008576 <memmove+0x22>

08008586 <_realloc_r>:
 8008586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008588:	4607      	mov	r7, r0
 800858a:	4614      	mov	r4, r2
 800858c:	460e      	mov	r6, r1
 800858e:	b921      	cbnz	r1, 800859a <_realloc_r+0x14>
 8008590:	4611      	mov	r1, r2
 8008592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008596:	f7ff b809 	b.w	80075ac <_malloc_r>
 800859a:	b922      	cbnz	r2, 80085a6 <_realloc_r+0x20>
 800859c:	f7fe ffb8 	bl	8007510 <_free_r>
 80085a0:	4625      	mov	r5, r4
 80085a2:	4628      	mov	r0, r5
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a6:	f000 f849 	bl	800863c <_malloc_usable_size_r>
 80085aa:	42a0      	cmp	r0, r4
 80085ac:	d20f      	bcs.n	80085ce <_realloc_r+0x48>
 80085ae:	4621      	mov	r1, r4
 80085b0:	4638      	mov	r0, r7
 80085b2:	f7fe fffb 	bl	80075ac <_malloc_r>
 80085b6:	4605      	mov	r5, r0
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d0f2      	beq.n	80085a2 <_realloc_r+0x1c>
 80085bc:	4631      	mov	r1, r6
 80085be:	4622      	mov	r2, r4
 80085c0:	f7fe ff92 	bl	80074e8 <memcpy>
 80085c4:	4631      	mov	r1, r6
 80085c6:	4638      	mov	r0, r7
 80085c8:	f7fe ffa2 	bl	8007510 <_free_r>
 80085cc:	e7e9      	b.n	80085a2 <_realloc_r+0x1c>
 80085ce:	4635      	mov	r5, r6
 80085d0:	e7e7      	b.n	80085a2 <_realloc_r+0x1c>
	...

080085d4 <_read_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4c07      	ldr	r4, [pc, #28]	; (80085f4 <_read_r+0x20>)
 80085d8:	4605      	mov	r5, r0
 80085da:	4608      	mov	r0, r1
 80085dc:	4611      	mov	r1, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f7f9 fdb5 	bl	8002152 <_read>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_read_r+0x1e>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_read_r+0x1e>
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20004cc4 	.word	0x20004cc4

080085f8 <_fstat_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4c07      	ldr	r4, [pc, #28]	; (8008618 <_fstat_r+0x20>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4605      	mov	r5, r0
 8008600:	4608      	mov	r0, r1
 8008602:	4611      	mov	r1, r2
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	f7f9 fde9 	bl	80021dc <_fstat>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	d102      	bne.n	8008614 <_fstat_r+0x1c>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	b103      	cbz	r3, 8008614 <_fstat_r+0x1c>
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	bf00      	nop
 8008618:	20004cc4 	.word	0x20004cc4

0800861c <_isatty_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4c06      	ldr	r4, [pc, #24]	; (8008638 <_isatty_r+0x1c>)
 8008620:	2300      	movs	r3, #0
 8008622:	4605      	mov	r5, r0
 8008624:	4608      	mov	r0, r1
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	f7f9 fde8 	bl	80021fc <_isatty>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_isatty_r+0x1a>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	b103      	cbz	r3, 8008636 <_isatty_r+0x1a>
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	20004cc4 	.word	0x20004cc4

0800863c <_malloc_usable_size_r>:
 800863c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008640:	1f18      	subs	r0, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfbc      	itt	lt
 8008646:	580b      	ldrlt	r3, [r1, r0]
 8008648:	18c0      	addlt	r0, r0, r3
 800864a:	4770      	bx	lr

0800864c <_init>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	bf00      	nop
 8008650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008652:	bc08      	pop	{r3}
 8008654:	469e      	mov	lr, r3
 8008656:	4770      	bx	lr

08008658 <_fini>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr
