
AquaSmart_22420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006930  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006ac0  08006ac0  00016ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c8c  08006c8c  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c94  08006c94  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08006c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  20000114  08006db0  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  08006db0  00024d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187af  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000347f  00000000  00000000  000388f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001050  00000000  00000000  0003bd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004bde  00000000  00000000  0003dc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fef8  00000000  00000000  0004285e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1d99  00000000  00000000  00052756  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001244ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  0012456c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aa8 	.word	0x08006aa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	08006aa8 	.word	0x08006aa8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_ADC1_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_ADC1_Init+0x98>)
 8000590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f001 f99f 	bl	8001914 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 ff2b 	bl	8001436 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f001 fad9 	bl	8001ba8 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 ff1b 	bl	8001436 <Error_Handler>
  }

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20004a50 	.word	0x20004a50
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_ADC_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d127      	bne.n	8000686 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <HAL_ADC_MspInit+0x80>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6453      	str	r3, [r2, #68]	; 0x44
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_ADC_MspInit+0x80>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_ADC_MspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|GPIO_PIN_2;
 800066e:	2306      	movs	r3, #6
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <HAL_ADC_MspInit+0x84>)
 8000682:	f001 fd95 	bl	80021b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40012000 	.word	0x40012000
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000

0800069c <PreSleepProcessing>:
void PreSleepProcessing(uint32_t *ulExpectedIdleTime);
void PostSleepProcessing(uint32_t *ulExpectedIdleTime);

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 80006ca:	4a1f      	ldr	r2, [pc, #124]	; (8000748 <MX_FREERTOS_Init+0x84>)
 80006cc:	2134      	movs	r1, #52	; 0x34
 80006ce:	2001      	movs	r0, #1
 80006d0:	f002 fd62 	bl	8003198 <osMessageQueueNew>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_FREERTOS_Init+0x88>)
 80006d8:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (2, sizeof(sensor_t), &myQueueSensor2_attributes);
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <MX_FREERTOS_Init+0x8c>)
 80006dc:	2134      	movs	r1, #52	; 0x34
 80006de:	2002      	movs	r0, #2
 80006e0:	f002 fd5a 	bl	8003198 <osMessageQueueNew>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_FREERTOS_Init+0x90>)
 80006e8:	601a      	str	r2, [r3, #0]

  /* creation of myQueueDataSaved */
  myQueueDataSavedHandle = osMessageQueueNew (2, sizeof(t_bool), &myQueueDataSaved_attributes);
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_FREERTOS_Init+0x94>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	2002      	movs	r0, #2
 80006f0:	f002 fd52 	bl	8003198 <osMessageQueueNew>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_FREERTOS_Init+0x98>)
 80006f8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <MX_FREERTOS_Init+0x9c>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4819      	ldr	r0, [pc, #100]	; (8000764 <MX_FREERTOS_Init+0xa0>)
 8000700:	f002 fc36 	bl	8002f70 <osThreadNew>
 8000704:	4602      	mov	r2, r0
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_FREERTOS_Init+0xa4>)
 8000708:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_FREERTOS_Init+0xa8>)
 8000710:	4619      	mov	r1, r3
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <MX_FREERTOS_Init+0xac>)
 8000714:	f002 fc2c 	bl	8002f70 <osThreadNew>
 8000718:	4602      	mov	r2, r0
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_FREERTOS_Init+0xb0>)
 800071c:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_FREERTOS_Init+0xb4>)
 8000720:	2100      	movs	r1, #0
 8000722:	4816      	ldr	r0, [pc, #88]	; (800077c <MX_FREERTOS_Init+0xb8>)
 8000724:	f002 fc24 	bl	8002f70 <osThreadNew>
 8000728:	4602      	mov	r2, r0
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_FREERTOS_Init+0xbc>)
 800072c:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
//  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_FREERTOS_Init+0xc0>)
 8000730:	2100      	movs	r1, #0
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_FREERTOS_Init+0xc4>)
 8000734:	f002 fc1c 	bl	8002f70 <osThreadNew>
 8000738:	4602      	mov	r2, r0
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_FREERTOS_Init+0xc8>)
 800073c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	08006c00 	.word	0x08006c00
 800074c:	20004ab8 	.word	0x20004ab8
 8000750:	08006c18 	.word	0x08006c18
 8000754:	20004aa4 	.word	0x20004aa4
 8000758:	08006c30 	.word	0x08006c30
 800075c:	20004ab0 	.word	0x20004ab0
 8000760:	08006b70 	.word	0x08006b70
 8000764:	08000791 	.word	0x08000791
 8000768:	20004a9c 	.word	0x20004a9c
 800076c:	08006b94 	.word	0x08006b94
 8000770:	080007a1 	.word	0x080007a1
 8000774:	20004aac 	.word	0x20004aac
 8000778:	08006bb8 	.word	0x08006bb8
 800077c:	080008a5 	.word	0x080008a5
 8000780:	20004a98 	.word	0x20004a98
 8000784:	08006bdc 	.word	0x08006bdc
 8000788:	08000919 	.word	0x08000919
 800078c:	20004ab4 	.word	0x20004ab4

08000790 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f002 fc8f 	bl	80030bc <osDelay>
 800079e:	e7fb      	b.n	8000798 <StartDefaultTask+0x8>

080007a0 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09a      	sub	sp, #104	; 0x68
 80007a4:	af08      	add	r7, sp, #32
 80007a6:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN StartTaskSensor1 */
		uint32_t tDelay = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
		sensor_t sensor1;
		t_bool sensor1_measured = FALSE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	72fb      	strb	r3, [r7, #11]

	    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40

	    sensor2_ON = FALSE;
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <StartTaskSensor1+0xf4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]

	    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 80007ba:	f107 000c 	add.w	r0, r7, #12
 80007be:	2304      	movs	r3, #4
 80007c0:	9307      	str	r3, [sp, #28]
 80007c2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80007c6:	9306      	str	r3, [sp, #24]
 80007c8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007cc:	9305      	str	r3, [sp, #20]
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	9304      	str	r3, [sp, #16]
 80007d4:	f44f 7361 	mov.w	r3, #900	; 0x384
 80007d8:	9303      	str	r3, [sp, #12]
 80007da:	f44f 7348 	mov.w	r3, #800	; 0x320
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	f240 23ee 	movw	r3, #750	; 0x2ee
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2302      	movs	r3, #2
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	f000 fb4c 	bl	8000e8c <sensor_initialization>
	    fsm_sensor_init(fsm_s1, &sensor1);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007fc:	f000 fb34 	bl	8000e68 <fsm_sensor_init>

	    tDelay = osKernelGetTickCount();
 8000800:	f002 fb8e 	bl	8002f20 <osKernelGetTickCount>
 8000804:	6478      	str	r0, [r7, #68]	; 0x44
	  for(;;)
	  {

		/*Select ADC Channel 1*/

		if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8000806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b04      	cmp	r3, #4
 800080c:	dc1d      	bgt.n	800084a <StartTaskSensor1+0xaa>
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <StartTaskSensor1+0xf4>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d119      	bne.n	800084a <StartTaskSensor1+0xaa>
		{
			sensor1_ON = TRUE;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <StartTaskSensor1+0xf8>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
			adc_config_ch1();
 800081c:	f000 fd70 	bl	8001300 <adc_config_ch1>
			fsm_fire(&(fsm_s1->fsm));
 8000820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f908 	bl	8000a38 <fsm_fire>
			osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <StartTaskSensor1+0xfc>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800082e:	6899      	ldr	r1, [r3, #8]
 8000830:	2300      	movs	r3, #0
 8000832:	2200      	movs	r2, #0
 8000834:	f002 fd36 	bl	80032a4 <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <StartTaskSensor1+0x100>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	f107 010b 	add.w	r1, r7, #11
 8000840:	2300      	movs	r3, #0
 8000842:	2200      	movs	r2, #0
 8000844:	f002 fd2e 	bl	80032a4 <osMessageQueuePut>
 8000848:	e002      	b.n	8000850 <StartTaskSensor1+0xb0>
		}
		else sensor1_ON = FALSE;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <StartTaskSensor1+0xf8>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

		if(fsm_s1->fsm.current_state > 4)
 8000850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b04      	cmp	r3, #4
 8000856:	dd15      	ble.n	8000884 <StartTaskSensor1+0xe4>
		{
			sensor1_measured = TRUE;
 8000858:	2301      	movs	r3, #1
 800085a:	72fb      	strb	r3, [r7, #11]
			fsm_fire(&(fsm_s1->fsm));
 800085c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f8ea 	bl	8000a38 <fsm_fire>
			osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <StartTaskSensor1+0xfc>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800086a:	6899      	ldr	r1, [r3, #8]
 800086c:	2300      	movs	r3, #0
 800086e:	2200      	movs	r2, #0
 8000870:	f002 fd18 	bl	80032a4 <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <StartTaskSensor1+0x100>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f107 010b 	add.w	r1, r7, #11
 800087c:	2300      	movs	r3, #0
 800087e:	2200      	movs	r2, #0
 8000880:	f002 fd10 	bl	80032a4 <osMessageQueuePut>
		}
		//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
	    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 8000884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000886:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
	    osDelayUntil(tDelay);
 800088c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800088e:	f002 fc43 	bl	8003118 <osDelayUntil>
		if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8000892:	e7b8      	b.n	8000806 <StartTaskSensor1+0x66>
 8000894:	20004aa0 	.word	0x20004aa0
 8000898:	20004aa8 	.word	0x20004aa8
 800089c:	20004ab8 	.word	0x20004ab8
 80008a0:	20004ab0 	.word	0x20004ab0

080008a4 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN StartTaskLoRa */
	  uint32_t tDelay = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
	  sensor_buf_t data2send;
	  tDelay = osKernelGetTickCount();
 80008b0:	f002 fb36 	bl	8002f20 <osKernelGetTickCount>
 80008b4:	61f8      	str	r0, [r7, #28]
	  uint8_t master;
	  t_bool sensor1_state = FALSE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	72fb      	strb	r3, [r7, #11]
	  t_bool sensor2_state = FALSE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	76bb      	strb	r3, [r7, #26]

	  /*master 1 for all devices, 0 for GW*/
	  master = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	767b      	strb	r3, [r7, #25]

	  Lora_inicio(master);  //0 es esclavo, 1 es maestro
 80008c2:	7e7b      	ldrb	r3, [r7, #25]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fd4d 	bl	8001364 <Lora_inicio>

	  /* Infinite loop */
	  for(;;)
	  {
		  osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <StartTaskLoRa+0x70>)
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	f107 010b 	add.w	r1, r7, #11
 80008d2:	2300      	movs	r3, #0
 80008d4:	2200      	movs	r2, #0
 80008d6:	f002 fd59 	bl	800338c <osMessageQueueGet>
	//	  osMessageQueueGet(myQueueDataSavedHandle, &sensor2_state, 0, 0);

		if (master == 1)
 80008da:	7e7b      	ldrb	r3, [r7, #25]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10e      	bne.n	80008fe <StartTaskLoRa+0x5a>
		{
//			if(sensor1_state && sensor2_state)
			if(sensor1_state)
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00d      	beq.n	8000902 <StartTaskLoRa+0x5e>
			{
				for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	76fb      	strb	r3, [r7, #27]
 80008ea:	e004      	b.n	80008f6 <StartTaskLoRa+0x52>
				{
					Lora_envia();
 80008ec:	f000 fd72 	bl	80013d4 <Lora_envia>
				for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 80008f0:	7efb      	ldrb	r3, [r7, #27]
 80008f2:	3301      	adds	r3, #1
 80008f4:	76fb      	strb	r3, [r7, #27]
 80008f6:	7efb      	ldrb	r3, [r7, #27]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d9f7      	bls.n	80008ec <StartTaskLoRa+0x48>
 80008fc:	e001      	b.n	8000902 <StartTaskLoRa+0x5e>
				}
			}
		}
		else
		{
			Lora_recibe();
 80008fe:	f000 fd91 	bl	8001424 <Lora_recibe>
		}
		tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000908:	3310      	adds	r3, #16
 800090a:	61fb      	str	r3, [r7, #28]
	    osDelayUntil(tDelay);
 800090c:	69f8      	ldr	r0, [r7, #28]
 800090e:	f002 fc03 	bl	8003118 <osDelayUntil>
		  osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8000912:	e7da      	b.n	80008ca <StartTaskLoRa+0x26>
 8000914:	20004ab0 	.word	0x20004ab0

08000918 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	; 0x78
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN StartTaskLEDs */
		uint32_t tDelay = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	677b      	str	r3, [r7, #116]	; 0x74
		sensor_t sensor1;
		sensor_t sensor2;

		tDelay = osKernelGetTickCount();
 8000924:	f002 fafc 	bl	8002f20 <osKernelGetTickCount>
 8000928:	6778      	str	r0, [r7, #116]	; 0x74

	  /* Infinite loop */
	  for(;;)
	  {
			osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <StartTaskLEDs+0xf0>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000932:	2300      	movs	r3, #0
 8000934:	2200      	movs	r2, #0
 8000936:	f002 fd29 	bl	800338c <osMessageQueueGet>
			osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 800093a:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <StartTaskLEDs+0xf4>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f107 010c 	add.w	r1, r7, #12
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	f002 fd21 	bl	800338c <osMessageQueueGet>


//			if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
			if(sensor1.measuring == TRUE) /*LED BLUE => MEASURING*/
 800094a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10c      	bne.n	800096c <StartTaskLEDs+0x54>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000958:	482d      	ldr	r0, [pc, #180]	; (8000a10 <StartTaskLEDs+0xf8>)
 800095a:	f001 fdc3 	bl	80024e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <StartTaskLEDs+0xf8>)
 8000966:	f001 fdbd 	bl	80024e4 <HAL_GPIO_WritePin>
 800096a:	e033      	b.n	80009d4 <StartTaskLEDs+0xbc>
			}
			else
			{
				if(sensor1.sleeping == TRUE)
 800096c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000970:	2b01      	cmp	r3, #1
 8000972:	d123      	bne.n	80009bc <StartTaskLEDs+0xa4>
//				if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
				{
					HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <StartTaskLEDs+0xf8>)
 800097c:	f001 fdb2 	bl	80024e4 <HAL_GPIO_WritePin>
//					if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
					if(sensor1.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8000980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10c      	bne.n	80009a2 <StartTaskLEDs+0x8a>
					{
						HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <StartTaskLEDs+0xf8>)
 8000990:	f001 fda8 	bl	80024e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <StartTaskLEDs+0xf8>)
 800099c:	f001 fda2 	bl	80024e4 <HAL_GPIO_WritePin>
 80009a0:	e018      	b.n	80009d4 <StartTaskLEDs+0xbc>
					}
					else	/*GREEN LED => SLEEPING ALL OK*/
					{
						HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	4819      	ldr	r0, [pc, #100]	; (8000a10 <StartTaskLEDs+0xf8>)
 80009aa:	f001 fd9b 	bl	80024e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <StartTaskLEDs+0xf8>)
 80009b6:	f001 fd95 	bl	80024e4 <HAL_GPIO_WritePin>
 80009ba:	e00b      	b.n	80009d4 <StartTaskLEDs+0xbc>
					}

				}
				else /*STATE UNREACHABLE*/
				{
					HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <StartTaskLEDs+0xf8>)
 80009c4:	f001 fd8e 	bl	80024e4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <StartTaskLEDs+0xf8>)
 80009d0:	f001 fd88 	bl	80024e4 <HAL_GPIO_WritePin>
				}
			}

//			if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
			if(sensor1.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80009d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d106      	bne.n	80009ea <StartTaskLEDs+0xd2>
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <StartTaskLEDs+0xf8>)
 80009e4:	f001 fd7e 	bl	80024e4 <HAL_GPIO_WritePin>
 80009e8:	e005      	b.n	80009f6 <StartTaskLEDs+0xde>
			else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <StartTaskLEDs+0xf8>)
 80009f2:	f001 fd77 	bl	80024e4 <HAL_GPIO_WritePin>

			tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 80009f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009f8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80009fc:	677b      	str	r3, [r7, #116]	; 0x74
		    osDelayUntil(tDelay);
 80009fe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000a00:	f002 fb8a 	bl	8003118 <osDelayUntil>
			osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8000a04:	e791      	b.n	800092a <StartTaskLEDs+0x12>
 8000a06:	bf00      	nop
 8000a08:	20004ab8 	.word	0x20004ab8
 8000a0c:	20004aa4 	.word	0x20004aa4
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e01c      	b.n	8000a82 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d113      	bne.n	8000a7c <fsm_fire+0x44>
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	4798      	blx	r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00c      	beq.n	8000a7c <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00c      	beq.n	8000a8c <fsm_fire+0x54>
        t->out(this);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	4798      	blx	r3
      break;
 8000a7a:	e007      	b.n	8000a8c <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3310      	adds	r3, #16
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	dade      	bge.n	8000a48 <fsm_fire+0x10>
    }
  }
}
 8000a8a:	e000      	b.n	8000a8e <fsm_fire+0x56>
      break;
 8000a8c:	bf00      	nop
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <error>:

int error (fsm_t* this) {
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	889b      	ldrh	r3, [r3, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <error+0x26>
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	889a      	ldrh	r2, [r3, #4]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d901      	bls.n	8000ad6 <error+0x2a>
		return 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <error+0x2c>
	else return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <no_error>:

int no_error (fsm_t* this) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	889b      	ldrh	r3, [r3, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d007      	beq.n	8000b0e <no_error+0x2a>
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	889a      	ldrh	r2, [r3, #4]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d801      	bhi.n	8000b0e <no_error+0x2a>
		return 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <no_error+0x2c>
	else return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d008      	beq.n	8000b48 <timer_sleep+0x2c>
 8000b36:	f000 fee1 	bl	80018fc <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d301      	bcc.n	8000b48 <timer_sleep+0x2c>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <timer_sleep+0x2e>
	else return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <timer_adc>:

int timer_adc (fsm_t* this) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>250); /*Timer to ensure ADC setup*/
 8000b5a:	f000 fecf 	bl	80018fc <HAL_GetTick>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2bfa      	cmp	r3, #250	; 0xfa
 8000b62:	bf8c      	ite	hi
 8000b64:	2301      	movhi	r3, #1
 8000b66:	2300      	movls	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <timer_setup>:

int timer_setup (fsm_t* this) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000b84:	f000 feba 	bl	80018fc <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	bf8c      	ite	hi
 8000b92:	2301      	movhi	r3, #1
 8000b94:	2300      	movls	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <warned>:

int warned (fsm_t* this) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	bfd4      	ite	le
 8000bba:	2301      	movle	r3, #1
 8000bbc:	2300      	movgt	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	long debug = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	60fb      	str	r3, [r7, #12]

	debug = HAL_GetTick();
 8000be2:	f000 fe8b 	bl	80018fc <HAL_GetTick>
 8000be6:	4603      	mov	r3, r0
 8000be8:	617b      	str	r3, [r7, #20]
	if(config->measure_count>=(config->measure_average))
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	7f1b      	ldrb	r3, [r3, #28]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d301      	bcc.n	8000bfc <timer_measure+0x30>
	return 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e009      	b.n	8000c10 <timer_measure+0x44>
	else return (HAL_GetTick()>=(config->measure_timer));
 8000bfc:	f000 fe7e 	bl	80018fc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	bf2c      	ite	cs
 8000c0a:	2301      	movcs	r3, #1
 8000c0c:	2300      	movcc	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <warning_limit>:

int warning_limit (fsm_t* this) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	bfcc      	ite	gt
 8000c32:	2301      	movgt	r3, #1
 8000c34:	2300      	movle	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <measuring>:

void measuring (fsm_t* this) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <measuring+0x54>)
 8000c5c:	f000 ff97 	bl	8001b8e <HAL_ADC_GetValue>
 8000c60:	4603      	mov	r3, r0
 8000c62:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	885a      	ldrh	r2, [r3, #2]
 8000c68:	8afb      	ldrh	r3, [r7, #22]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	7f1b      	ldrb	r3, [r3, #28]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 8000c7e:	f000 fe3d 	bl	80018fc <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000c88:	4413      	add	r3, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	619a      	str	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20004a50 	.word	0x20004a50

08000c9c <process_data>:

void process_data (fsm_t* this) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	885a      	ldrh	r2, [r3, #2]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <process_data+0x50>)
 8000cb8:	f000 ff36 	bl	8001b28 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	889a      	ldrh	r2, [r3, #4]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d809      	bhi.n	8000cdc <process_data+0x40>
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	889a      	ldrh	r2, [r3, #4]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d303      	bcc.n	8000cdc <process_data+0x40>
	{
		config->alarm = 0;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	719a      	strb	r2, [r3, #6]
 8000cda:	e002      	b.n	8000ce2 <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	719a      	strb	r2, [r3, #6]
	}

}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20004a50 	.word	0x20004a50

08000cf0 <alert>:
void alert (fsm_t* this) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	615a      	str	r2, [r3, #20]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <sleep>:

void sleep (fsm_t* this) { // led orange
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 8000d2a:	f000 fde7 	bl	80018fc <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d34:	4413      	add	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <sleep+0x5c>)
 8000d46:	f001 fbcd 	bl	80024e4 <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2200      	movs	r2, #0
 8000d54:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	dd03      	ble.n	8000d66 <sleep+0x4e>
	{
		config->error = 1;
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2201      	movs	r2, #1
 8000d62:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 8000d64:	e002      	b.n	8000d6c <sleep+0x54>
		config->error = 0;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	71da      	strb	r2, [r3, #7]
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40020c00 	.word	0x40020c00

08000d78 <init_adc>:

void init_adc (fsm_t* this) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <init_adc+0x28>)
 8000d82:	f000 fed1 	bl	8001b28 <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 1000;
 8000d86:	f000 fdb9 	bl	80018fc <HAL_GetTick>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3b18      	subs	r3, #24
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <init_adc+0x2c>)
 8000d94:	701a      	strb	r2, [r3, #0]

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20004a50 	.word	0x20004a50
 8000da4:	20004ac1 	.word	0x20004ac1

08000da8 <setting_up>:


void setting_up (fsm_t* this) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 8000dd2:	f000 fd93 	bl	80018fc <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ddc:	4413      	add	r3, r2
 8000dde:	461a      	mov	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <setting_up+0x64>)
 8000dee:	f001 fb79 	bl	80024e4 <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <setting_up+0x68>)
 8000df4:	f000 fdd2 	bl	800199c <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2200      	movs	r2, #0
 8000e02:	725a      	strb	r2, [r3, #9]
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	20004a50 	.word	0x20004a50

08000e14 <save_data>:

void save_data (fsm_t* this)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	8bdb      	ldrh	r3, [r3, #30]
 8000e2a:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e32:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	799b      	ldrb	r3, [r3, #6]
 8000e38:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	79db      	ldrb	r3, [r3, #7]
 8000e3e:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e4a:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e50:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e5a:	f000 fa71 	bl	8001340 <save_new_data>
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 8000e72:	4905      	ldr	r1, [pc, #20]	; (8000e88 <fsm_sensor_init+0x20>)
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fdcd 	bl	8000a14 <fsm_init>
  f->param = c;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	609a      	str	r2, [r3, #8]
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000

08000e8c <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	4608      	mov	r0, r1
 8000e96:	4611      	mov	r1, r2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	817b      	strh	r3, [r7, #10]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	727b      	strb	r3, [r7, #9]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	897a      	ldrh	r2, [r7, #10]
 8000ef2:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	7a7a      	ldrb	r2, [r7, #9]
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	88fa      	ldrh	r2, [r7, #6]
 8000f00:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	7e3a      	ldrb	r2, [r7, #24]
 8000f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8bba      	ldrh	r2, [r7, #28]
 8000f0e:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8c3a      	ldrh	r2, [r7, #32]
 8000f14:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f20:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f26:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f2c:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000f32:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	4ba4      	ldr	r3, [pc, #656]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4aa3      	ldr	r2, [pc, #652]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4ba1      	ldr	r3, [pc, #644]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	4b9d      	ldr	r3, [pc, #628]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a9c      	ldr	r2, [pc, #624]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b9a      	ldr	r3, [pc, #616]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b96      	ldr	r3, [pc, #600]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a95      	ldr	r2, [pc, #596]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b93      	ldr	r3, [pc, #588]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b8f      	ldr	r3, [pc, #572]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a8e      	ldr	r2, [pc, #568]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b8c      	ldr	r3, [pc, #560]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b88      	ldr	r3, [pc, #544]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a87      	ldr	r2, [pc, #540]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b85      	ldr	r3, [pc, #532]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b81      	ldr	r3, [pc, #516]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a80      	ldr	r2, [pc, #512]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <MX_GPIO_Init+0x2ac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	487b      	ldr	r0, [pc, #492]	; (80011f0 <MX_GPIO_Init+0x2b0>)
 8001004:	f001 fa6e 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2101      	movs	r1, #1
 800100c:	4879      	ldr	r0, [pc, #484]	; (80011f4 <MX_GPIO_Init+0x2b4>)
 800100e:	f001 fa69 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	4878      	ldr	r0, [pc, #480]	; (80011f8 <MX_GPIO_Init+0x2b8>)
 8001018:	f001 fa64 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2102      	movs	r1, #2
 8001020:	4876      	ldr	r0, [pc, #472]	; (80011fc <MX_GPIO_Init+0x2bc>)
 8001022:	f001 fa5f 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001026:	2200      	movs	r2, #0
 8001028:	f24f 0152 	movw	r1, #61522	; 0xf052
 800102c:	4874      	ldr	r0, [pc, #464]	; (8001200 <MX_GPIO_Init+0x2c0>)
 800102e:	f001 fa59 	bl	80024e4 <HAL_GPIO_WritePin>
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001032:	2308      	movs	r3, #8
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4869      	ldr	r0, [pc, #420]	; (80011f0 <MX_GPIO_Init+0x2b0>)
 800104a:	f001 f8b1 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800104e:	2301      	movs	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4863      	ldr	r0, [pc, #396]	; (80011f4 <MX_GPIO_Init+0x2b4>)
 8001066:	f001 f8a3 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800106a:	2308      	movs	r3, #8
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800107a:	2305      	movs	r3, #5
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	485b      	ldr	r0, [pc, #364]	; (80011f4 <MX_GPIO_Init+0x2b4>)
 8001086:	f001 f893 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108a:	2301      	movs	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <MX_GPIO_Init+0x2c4>)
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4856      	ldr	r0, [pc, #344]	; (80011f8 <MX_GPIO_Init+0x2b8>)
 800109e:	f001 f887 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80010a2:	2310      	movs	r3, #16
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	484f      	ldr	r0, [pc, #316]	; (80011f8 <MX_GPIO_Init+0x2b8>)
 80010ba:	f001 f879 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 80010be:	2305      	movs	r3, #5
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	484a      	ldr	r0, [pc, #296]	; (80011fc <MX_GPIO_Init+0x2bc>)
 80010d2:	f001 f86d 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4843      	ldr	r0, [pc, #268]	; (80011fc <MX_GPIO_Init+0x2bc>)
 80010ee:	f001 f85f 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001104:	2305      	movs	r3, #5
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	483b      	ldr	r0, [pc, #236]	; (80011fc <MX_GPIO_Init+0x2bc>)
 8001110:	f001 f84e 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001114:	f24f 0352 	movw	r3, #61522	; 0xf052
 8001118:	61fb      	str	r3, [r7, #28]
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4834      	ldr	r0, [pc, #208]	; (8001200 <MX_GPIO_Init+0x2c0>)
 800112e:	f001 f83f 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001132:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001144:	2306      	movs	r3, #6
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <MX_GPIO_Init+0x2b4>)
 8001150:	f001 f82e 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4823      	ldr	r0, [pc, #140]	; (80011f8 <MX_GPIO_Init+0x2b8>)
 800116a:	f001 f821 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800116e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001180:	230a      	movs	r3, #10
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <MX_GPIO_Init+0x2b8>)
 800118c:	f001 f810 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001190:	2320      	movs	r3, #32
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4817      	ldr	r0, [pc, #92]	; (8001200 <MX_GPIO_Init+0x2c0>)
 80011a4:	f001 f804 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011a8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ae:	2312      	movs	r3, #18
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ba:	2304      	movs	r3, #4
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_GPIO_Init+0x2bc>)
 80011c6:	f000 fff3 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <MX_GPIO_Init+0x2c4>)
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0x2b0>)
 80011de:	f000 ffe7 	bl	80021b0 <HAL_GPIO_Init>

}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020c00 	.word	0x40020c00
 8001204:	10120000 	.word	0x10120000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fb10 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f80e 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f7ff fe94 	bl	8000f40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001218:	f000 f9cc 	bl	80015b4 <MX_SPI1_Init>
  MX_ADC1_Init();
 800121c:	f7ff f9a8 	bl	8000570 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001220:	f001 fe14 	bl	8002e4c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001224:	f7ff fa4e 	bl	80006c4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001228:	f001 fe44 	bl	8002eb4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800122c:	e7fe      	b.n	800122c <main+0x24>
	...

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f82d 	bl	800629e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <SystemClock_Config+0xc8>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <SystemClock_Config+0xc8>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <SystemClock_Config+0xc8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <SystemClock_Config+0xcc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <SystemClock_Config+0xcc>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <SystemClock_Config+0xcc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012a4:	2348      	movs	r3, #72	; 0x48
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 f92f 	bl	8002518 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c0:	f000 f8b9 	bl	8001436 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2102      	movs	r1, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fb89 	bl	80029f8 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012ec:	f000 f8a3 	bl	8001436 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <adc_config_ch1>:

/* USER CODE BEGIN 4 */

void adc_config_ch1(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_1;
 8001312:	2301      	movs	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <adc_config_ch1+0x3c>)
 8001324:	f000 fc40 	bl	8001ba8 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <adc_config_ch1+0x32>
	{
		Error_Handler();
 800132e:	f000 f882 	bl	8001436 <Error_Handler>
	}
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20004a50 	.word	0x20004a50

08001340 <save_new_data>:
		Error_Handler();
	}
}

void save_new_data(sensor_buf_t data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ringbuf_put(&data_ring_buff, data);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <save_new_data+0x20>)
 8001352:	f000 f894 	bl	800147e <ringbuf_put>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20004bec 	.word	0x20004bec

08001364 <Lora_inicio>:

void Lora_inicio(int init){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module

	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 800136c:	210a      	movs	r1, #10
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <Lora_inicio+0x58>)
 8001370:	f000 f868 	bl	8001444 <ringbuf_init>

	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <Lora_inicio+0x5c>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <Lora_inicio+0x60>)
 8001378:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <Lora_inicio+0x5c>)
 800137c:	2201      	movs	r2, #1
 800137e:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <Lora_inicio+0x5c>)
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <Lora_inicio+0x64>)
 8001384:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <Lora_inicio+0x5c>)
 8001388:	2210      	movs	r2, #16
 800138a:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <Lora_inicio+0x5c>)
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <Lora_inicio+0x60>)
 8001390:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <Lora_inicio+0x5c>)
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <Lora_inicio+0x5c>)
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <Lora_inicio+0x68>)
 800139c:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <Lora_inicio+0x6c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Lora_inicio+0x6c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <Lora_inicio+0x6c>)
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <Lora_inicio+0x5c>)
 80013b0:	601a      	str	r2, [r3, #0]
//		} else {
//			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
//		}
//		printf("ret: %d\n", ret);
//	}
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20004bec 	.word	0x20004bec
 80013c0:	20004bd0 	.word	0x20004bd0
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020000 	.word	0x40020000
 80013cc:	20004c6c 	.word	0x20004c6c
 80013d0:	20004ac4 	.word	0x20004ac4

080013d4 <Lora_envia>:


void Lora_envia(void){
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	b09b      	sub	sp, #108	; 0x6c
 80013d8:	af06      	add	r7, sp, #24
	int ret;
	char buffer[64];
	int message_length;
	sensor_buf_t data;

	data = ringbuf_get(&data_ring_buff);
 80013da:	463b      	mov	r3, r7
 80013dc:	490f      	ldr	r1, [pc, #60]	; (800141c <Lora_envia+0x48>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f8b0 	bl	8001544 <ringbuf_get>

	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d", data.Device_ID, data.Sensor_ID, data.measure, data.alarm, data.error, data.threshold_L, data.threshold_H);
 80013e4:	883b      	ldrh	r3, [r7, #0]
 80013e6:	461e      	mov	r6, r3
 80013e8:	78bb      	ldrb	r3, [r7, #2]
 80013ea:	469c      	mov	ip, r3
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	79f9      	ldrb	r1, [r7, #7]
 80013f2:	8938      	ldrh	r0, [r7, #8]
 80013f4:	4604      	mov	r4, r0
 80013f6:	8978      	ldrh	r0, [r7, #10]
 80013f8:	4605      	mov	r5, r0
 80013fa:	f107 000c 	add.w	r0, r7, #12
 80013fe:	9504      	str	r5, [sp, #16]
 8001400:	9403      	str	r4, [sp, #12]
 8001402:	9102      	str	r1, [sp, #8]
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4663      	mov	r3, ip
 800140a:	4632      	mov	r2, r6
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <Lora_envia+0x4c>)
 800140e:	f005 f807 	bl	8006420 <siprintf>
 8001412:	64f8      	str	r0, [r7, #76]	; 0x4c
//	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
//	printf("Sending %s\r\n", buffer);
//	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
}
 8001414:	bf00      	nop
 8001416:	3754      	adds	r7, #84	; 0x54
 8001418:	46bd      	mov	sp, r7
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	20004bec 	.word	0x20004bec
 8001420:	08006b38 	.word	0x08006b38

08001424 <Lora_recibe>:

void Lora_recibe(void){
 8001424:	b480      	push	{r7}
 8001426:	b091      	sub	sp, #68	; 0x44
 8001428:	af00      	add	r7, sp, #0
//	ret = SX1278_LoRaRxPacket(&SX1278);
//	if (ret > 0) {
//		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
//		printf("Content (%d): %s\r\n", ret, buffer);
//	}
}
 800142a:	bf00      	nop
 800142c:	3744      	adds	r7, #68	; 0x44
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:A+1 //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <ringbuf_init+0x1a>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b78      	cmp	r3, #120	; 0x78
 800145c:	d003      	beq.n	8001466 <ringbuf_init+0x22>

	 p=NULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 8001462:	2378      	movs	r3, #120	; 0x78
 8001464:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	679a      	str	r2, [r3, #120]	; 0x78
  _this->tail = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 800147e:	b490      	push	{r4, r7}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	4638      	mov	r0, r7
 8001488:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if((NEXT(_this->head) != 0) && (NEXT(_this->head)!= _this->tail)){
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001490:	2b09      	cmp	r3, #9
 8001492:	d023      	beq.n	80014dc <ringbuf_put+0x5e>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d01e      	beq.n	80014dc <ringbuf_put+0x5e>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014a2:	2b09      	cmp	r3, #9
 80014a4:	d01a      	beq.n	80014dc <ringbuf_put+0x5e>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d013      	beq.n	80014dc <ringbuf_put+0x5e>
  _this->buf[_this->head] = item;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80014b8:	68f9      	ldr	r1, [r7, #12]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	461c      	mov	r4, r3
 80014c6:	463b      	mov	r3, r7
 80014c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	679a      	str	r2, [r3, #120]	; 0x78
 80014da:	e02e      	b.n	800153a <ringbuf_put+0xbc>
  }
  else
  {
	  _this->buf[_this->head] = item;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	461c      	mov	r4, r3
 80014ee:	463b      	mov	r3, r7
 80014f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(NEXT(_this->head) == _this->tail)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014fc:	2b09      	cmp	r3, #9
 80014fe:	d016      	beq.n	800152e <ringbuf_put+0xb0>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800150a:	429a      	cmp	r2, r3
 800150c:	d10f      	bne.n	800152e <ringbuf_put+0xb0>
	  {
		  _this->head = _this->tail;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = NEXT(_this->tail);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800151a:	2b09      	cmp	r3, #9
 800151c:	d003      	beq.n	8001526 <ringbuf_put+0xa8>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001522:	3301      	adds	r3, #1
 8001524:	e000      	b.n	8001528 <ringbuf_put+0xaa>
 8001526:	2300      	movs	r3, #0
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	67d3      	str	r3, [r2, #124]	; 0x7c
 800152c:	e005      	b.n	800153a <ringbuf_put+0xbc>
	  }
	  else
	  {
		  _this->head = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2209      	movs	r2, #9
 8001538:	67da      	str	r2, [r3, #124]	; 0x7c
	  }
  }
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bc90      	pop	{r4, r7}
 8001542:	4770      	bx	lr

08001544 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001544:	b490      	push	{r4, r7}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001556:	429a      	cmp	r2, r3
 8001558:	d01e      	beq.n	8001598 <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	18ca      	adds	r2, r1, r3
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001578:	2b09      	cmp	r3, #9
 800157a:	d00a      	beq.n	8001592 <ringbuf_get+0x4e>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <ringbuf_get+0x4e>
		{
			_this->tail++;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001590:	e002      	b.n	8001598 <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2200      	movs	r2, #0
 8001596:	67da      	str	r2, [r3, #124]	; 0x7c
		}
    }
	return item;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	461c      	mov	r4, r3
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015a2:	6020      	str	r0, [r4, #0]
 80015a4:	6061      	str	r1, [r4, #4]
 80015a6:	60a2      	str	r2, [r4, #8]
}
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc90      	pop	{r4, r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <MX_SPI1_Init+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e8:	2208      	movs	r2, #8
 80015ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x64>)
 8001600:	220a      	movs	r2, #10
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_SPI1_Init+0x64>)
 8001606:	f001 fbb5 	bl	8002d74 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001610:	f7ff ff11 	bl	8001436 <Error_Handler>
  }

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20004c6c 	.word	0x20004c6c
 800161c:	40013000 	.word	0x40013000

08001620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_SPI_MspInit+0x84>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12b      	bne.n	800169a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 800164c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_SPI_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800167a:	23e0      	movs	r3, #224	; 0xe0
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	2302      	movs	r3, #2
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800168a:	2305      	movs	r3, #5
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_SPI_MspInit+0x8c>)
 8001696:	f000 fd8b 	bl	80021b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40013000 	.word	0x40013000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x54>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_MspInit+0x54>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x54>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_MspInit+0x54>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_MspInit+0x54>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_MspInit+0x54>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	f06f 0001 	mvn.w	r0, #1
 80016f6:	f000 fd32 	bl	800215e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f8c8 	bl	80018d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001744:	f003 fc56 	bl	8004ff4 <xTaskGetSchedulerState>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800174e:	f004 fa2b 	bl	8005ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <_sbrk+0x50>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x16>
		heap_end = &end;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <_sbrk+0x50>)
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <_sbrk+0x54>)
 800176c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <_sbrk+0x50>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <_sbrk+0x50>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4413      	add	r3, r2
 800177c:	466a      	mov	r2, sp
 800177e:	4293      	cmp	r3, r2
 8001780:	d907      	bls.n	8001792 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001782:	f004 fd57 	bl	8006234 <__errno>
 8001786:	4602      	mov	r2, r0
 8001788:	230c      	movs	r3, #12
 800178a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	e006      	b.n	80017a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <_sbrk+0x50>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <_sbrk+0x50>)
 800179c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000130 	.word	0x20000130
 80017ac:	20004d10 	.word	0x20004d10

080017b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <SystemInit+0x28>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <SystemInit+0x28>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SystemInit+0x28>)
 80017c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ca:	609a      	str	r2, [r3, #8]
#endif
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017e2:	e003      	b.n	80017ec <LoopCopyDataInit>

080017e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ea:	3104      	adds	r1, #4

080017ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017f4:	d3f6      	bcc.n	80017e4 <CopyDataInit>
  ldr  r2, =_sbss
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017f8:	e002      	b.n	8001800 <LoopFillZerobss>

080017fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017fc:	f842 3b04 	str.w	r3, [r2], #4

08001800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001804:	d3f9      	bcc.n	80017fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001806:	f7ff ffd3 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f004 fd19 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7ff fcfb 	bl	8001208 <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001814:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001818:	08006c9c 	.word	0x08006c9c
  ldr  r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001820:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 8001824:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 8001828:	20004d0c 	.word	0x20004d0c

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fc75 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff ff24 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fc7f 	bl	8002196 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 fc55 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200000a0 	.word	0x200000a0
 80018cc:	200000a8 	.word	0x200000a8
 80018d0:	200000a4 	.word	0x200000a4

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200000a8 	.word	0x200000a8
 80018f8:	20004cc4 	.word	0x20004cc4

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20004cc4 	.word	0x20004cc4

08001914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e033      	b.n	8001992 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe fe6e 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800195a:	f023 0302 	bic.w	r3, r3, #2
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fa40 	bl	8001dec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	e001      	b.n	8001988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_Start+0x1a>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e0a5      	b.n	8001b02 <HAL_ADC_Start+0x166>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d018      	beq.n	80019fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_ADC_Start+0x174>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <HAL_ADC_Start+0x178>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0c9a      	lsrs	r2, r3, #18
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d179      	bne.n	8001b00 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f023 0206 	bic.w	r2, r3, #6
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_ADC_Start+0x17c>)
 8001a6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d12a      	bne.n	8001ad8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <HAL_ADC_Start+0x180>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d015      	beq.n	8001ab8 <HAL_ADC_Start+0x11c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_ADC_Start+0x184>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_Start+0x106>
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_ADC_Start+0x17c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_ADC_Start+0x188>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d129      	bne.n	8001b00 <HAL_ADC_Start+0x164>
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_ADC_Start+0x17c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d823      	bhi.n	8001b00 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11c      	bne.n	8001b00 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	e013      	b.n	8001b00 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_ADC_Start+0x180>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_ADC_Start+0x164>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001afe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200000a0 	.word	0x200000a0
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	40012300 	.word	0x40012300
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40012100 	.word	0x40012100
 8001b24:	40012200 	.word	0x40012200

08001b28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Stop+0x16>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e021      	b.n	8001b82 <HAL_ADC_Stop+0x5a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e105      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x228>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	d925      	bls.n	8001c20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68d9      	ldr	r1, [r3, #12]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	3b1e      	subs	r3, #30
 8001bea:	2207      	movs	r2, #7
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68d9      	ldr	r1, [r3, #12]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4403      	add	r3, r0
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	409a      	lsls	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	e022      	b.n	8001c66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	2207      	movs	r2, #7
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4403      	add	r3, r0
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d824      	bhi.n	8001cb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b05      	subs	r3, #5
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b05      	subs	r3, #5
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb6:	e04c      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d824      	bhi.n	8001d0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b23      	subs	r3, #35	; 0x23
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	400a      	ands	r2, r1
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b23      	subs	r3, #35	; 0x23
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
 8001d08:	e023      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b41      	subs	r3, #65	; 0x41
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b41      	subs	r3, #65	; 0x41
 8001d46:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_ADC_ConfigChannel+0x234>)
 8001d54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <HAL_ADC_ConfigChannel+0x238>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d109      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1cc>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_ADC_ConfigChannel+0x238>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d003      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x1e6>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d111      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_ADC_ConfigChannel+0x23c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_ADC_ConfigChannel+0x240>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9a      	lsrs	r2, r3, #18
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	40012000 	.word	0x40012000
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <ADC_Init+0x1f0>)
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <ADC_Init+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e00f      	b.n	8001eea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e007      	b.n	8001f60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051a      	lsls	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa2:	025a      	lsls	r2, r3, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	029a      	lsls	r2, r3, #10
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	0f000001 	.word	0x0f000001

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff47 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff5c 	bl	800202c <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffb0 	bl	8002104 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e16b      	b.n	80024a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	f040 815a 	bne.w	800249e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d00b      	beq.n	800220a <HAL_GPIO_Init+0x5a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b12      	cmp	r3, #18
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0xfc>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d123      	bne.n	80022f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	69b9      	ldr	r1, [r7, #24]
 80022f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80b4 	beq.w	800249e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b5f      	ldr	r3, [pc, #380]	; (80024b8 <HAL_GPIO_Init+0x308>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a5e      	ldr	r2, [pc, #376]	; (80024b8 <HAL_GPIO_Init+0x308>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b5c      	ldr	r3, [pc, #368]	; (80024b8 <HAL_GPIO_Init+0x308>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002352:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <HAL_GPIO_Init+0x30c>)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_GPIO_Init+0x310>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02b      	beq.n	80023d6 <HAL_GPIO_Init+0x226>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a50      	ldr	r2, [pc, #320]	; (80024c4 <HAL_GPIO_Init+0x314>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d025      	beq.n	80023d2 <HAL_GPIO_Init+0x222>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4f      	ldr	r2, [pc, #316]	; (80024c8 <HAL_GPIO_Init+0x318>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <HAL_GPIO_Init+0x21e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4e      	ldr	r2, [pc, #312]	; (80024cc <HAL_GPIO_Init+0x31c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <HAL_GPIO_Init+0x21a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <HAL_GPIO_Init+0x320>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x216>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4c      	ldr	r2, [pc, #304]	; (80024d4 <HAL_GPIO_Init+0x324>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x212>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <HAL_GPIO_Init+0x328>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x20e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x20a>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e00e      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023ba:	2308      	movs	r3, #8
 80023bc:	e00c      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023be:	2306      	movs	r3, #6
 80023c0:	e00a      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_GPIO_Init+0x30c>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <HAL_GPIO_Init+0x330>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241a:	4a31      	ldr	r2, [pc, #196]	; (80024e0 <HAL_GPIO_Init+0x330>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <HAL_GPIO_Init+0x330>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_GPIO_Init+0x330>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f ae90 	bls.w	80021cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	3724      	adds	r7, #36	; 0x24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002500:	e003      	b.n	800250a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	041a      	lsls	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e25b      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d075      	beq.n	8002622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002536:	4ba3      	ldr	r3, [pc, #652]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d00c      	beq.n	800255c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4ba0      	ldr	r3, [pc, #640]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254a:	2b08      	cmp	r3, #8
 800254c:	d112      	bne.n	8002574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254e:	4b9d      	ldr	r3, [pc, #628]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255a:	d10b      	bne.n	8002574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d05b      	beq.n	8002620 <HAL_RCC_OscConfig+0x108>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d157      	bne.n	8002620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e236      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x74>
 800257e:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a90      	ldr	r2, [pc, #576]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xb0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a8a      	ldr	r2, [pc, #552]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a87      	ldr	r2, [pc, #540]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xb0>
 80025b0:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a83      	ldr	r2, [pc, #524]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff f994 	bl	80018fc <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff f990 	bl	80018fc <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1fb      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xc0>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff f980 	bl	80018fc <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff f97c 	bl	80018fc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1e7      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0xe8>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b62      	ldr	r3, [pc, #392]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002642:	2b08      	cmp	r3, #8
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x152>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1bb      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4952      	ldr	r1, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	e03a      	b.n	80026f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <HAL_RCC_OscConfig+0x2b0>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff f935 	bl	80018fc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7ff f931 	bl	80018fc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e19c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4940      	ldr	r1, [pc, #256]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
 80026c8:	e015      	b.n	80026f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_RCC_OscConfig+0x2b0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7ff f914 	bl	80018fc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d8:	f7ff f910 	bl	80018fc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e17b      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d030      	beq.n	8002764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x2b4>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7ff f8f4 	bl	80018fc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002718:	f7ff f8f0 	bl	80018fc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e15b      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x200>
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x2b4>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7ff f8dd 	bl	80018fc <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff f8d9 	bl	80018fc <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e144      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a0 	beq.w	80028b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x2b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d121      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_RCC_OscConfig+0x2b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_RCC_OscConfig+0x2b8>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7ff f89f 	bl	80018fc <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e011      	b.n	80027e6 <HAL_RCC_OscConfig+0x2ce>
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	42470000 	.word	0x42470000
 80027cc:	42470e80 	.word	0x42470e80
 80027d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7ff f892 	bl	80018fc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0fd      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x4d4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x2f0>
 80027fa:	4b7d      	ldr	r3, [pc, #500]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a7c      	ldr	r2, [pc, #496]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x32a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x312>
 8002810:	4b77      	ldr	r3, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a76      	ldr	r2, [pc, #472]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a73      	ldr	r2, [pc, #460]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x32a>
 800282a:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a70      	ldr	r2, [pc, #448]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a6d      	ldr	r2, [pc, #436]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7ff f857 	bl	80018fc <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff f853 	bl	80018fc <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0bc      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	4b61      	ldr	r3, [pc, #388]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x33a>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff f841 	bl	80018fc <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff f83d 	bl	80018fc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0a6      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8092 	beq.w	80029e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d05c      	beq.n	8002982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d141      	bne.n	8002954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <HAL_RCC_OscConfig+0x4dc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff f811 	bl	80018fc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff f80d 	bl	80018fc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e078      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	019b      	lsls	r3, r3, #6
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	4933      	ldr	r1, [pc, #204]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002926:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_RCC_OscConfig+0x4dc>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe ffe6 	bl	80018fc <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe ffe2 	bl	80018fc <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04d      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x41c>
 8002952:	e045      	b.n	80029e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_RCC_OscConfig+0x4dc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe ffcf 	bl	80018fc <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe ffcb 	bl	80018fc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e036      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x44a>
 8002980:	e02e      	b.n	80029e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e029      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_RCC_OscConfig+0x4d8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d115      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000
 80029f0:	40023800 	.word	0x40023800
 80029f4:	42470060 	.word	0x42470060

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90c      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d044      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e067      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4934      	ldr	r1, [pc, #208]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe ff08 	bl	80018fc <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe ff04 	bl	80018fc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d20c      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4601      	mov	r1, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	fa21 f303 	lsr.w	r3, r1, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fe68 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08006c48 	.word	0x08006c48
 8002bbc:	200000a0 	.word	0x200000a0
 8002bc0:	200000a4 	.word	0x200000a4

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d008      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x38>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 80b4 	bne.w	8002d58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bf2:	60bb      	str	r3, [r7, #8]
       break;
 8002bf4:	e0b3      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bf8:	60bb      	str	r3, [r7, #8]
      break;
 8002bfa:	e0b0      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfc:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c06:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d04a      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	ea03 0501 	and.w	r5, r3, r1
 8002c28:	ea04 0602 	and.w	r6, r4, r2
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	4632      	mov	r2, r6
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	0154      	lsls	r4, r2, #5
 8002c3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c3e:	014b      	lsls	r3, r1, #5
 8002c40:	4619      	mov	r1, r3
 8002c42:	4622      	mov	r2, r4
 8002c44:	1b49      	subs	r1, r1, r5
 8002c46:	eb62 0206 	sbc.w	r2, r2, r6
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	0194      	lsls	r4, r2, #6
 8002c54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c58:	018b      	lsls	r3, r1, #6
 8002c5a:	1a5b      	subs	r3, r3, r1
 8002c5c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	00e2      	lsls	r2, r4, #3
 8002c6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c6e:	00d9      	lsls	r1, r3, #3
 8002c70:	460b      	mov	r3, r1
 8002c72:	4614      	mov	r4, r2
 8002c74:	195b      	adds	r3, r3, r5
 8002c76:	eb44 0406 	adc.w	r4, r4, r6
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	0262      	lsls	r2, r4, #9
 8002c84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c88:	0259      	lsls	r1, r3, #9
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	4621      	mov	r1, r4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f04f 0400 	mov.w	r4, #0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	f7fd fae8 	bl	8000270 <__aeabi_uldivmod>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e049      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	ea03 0501 	and.w	r5, r3, r1
 8002cbe:	ea04 0602 	and.w	r6, r4, r2
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f04f 0400 	mov.w	r4, #0
 8002cce:	0154      	lsls	r4, r2, #5
 8002cd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cd4:	014b      	lsls	r3, r1, #5
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4622      	mov	r2, r4
 8002cda:	1b49      	subs	r1, r1, r5
 8002cdc:	eb62 0206 	sbc.w	r2, r2, r6
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	0194      	lsls	r4, r2, #6
 8002cea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cee:	018b      	lsls	r3, r1, #6
 8002cf0:	1a5b      	subs	r3, r3, r1
 8002cf2:	eb64 0402 	sbc.w	r4, r4, r2
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	00e2      	lsls	r2, r4, #3
 8002d00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d04:	00d9      	lsls	r1, r3, #3
 8002d06:	460b      	mov	r3, r1
 8002d08:	4614      	mov	r4, r2
 8002d0a:	195b      	adds	r3, r3, r5
 8002d0c:	eb44 0406 	adc.w	r4, r4, r6
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	02a2      	lsls	r2, r4, #10
 8002d1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d1e:	0299      	lsls	r1, r3, #10
 8002d20:	460b      	mov	r3, r1
 8002d22:	4614      	mov	r4, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	4621      	mov	r1, r4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f04f 0400 	mov.w	r4, #0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4623      	mov	r3, r4
 8002d32:	f7fd fa9d 	bl	8000270 <__aeabi_uldivmod>
 8002d36:	4603      	mov	r3, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	3301      	adds	r3, #1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	60bb      	str	r3, [r7, #8]
      break;
 8002d56:	e002      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d5a:	60bb      	str	r3, [r7, #8]
      break;
 8002d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	00f42400 	.word	0x00f42400
 8002d70:	007a1200 	.word	0x007a1200

08002d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e056      	b.n	8002e34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe fc3d 	bl	8001620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	ea42 0103 	orr.w	r1, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	f003 0104 	and.w	r1, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e52:	f3ef 8305 	mrs	r3, IPSR
 8002e56:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e62:	607b      	str	r3, [r7, #4]
  return(result);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e6e:	603b      	str	r3, [r7, #0]
  return(result);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <osKernelInitialize+0x3a>
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <osKernelInitialize+0x64>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d103      	bne.n	8002e86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e7e:	f06f 0305 	mvn.w	r3, #5
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e00c      	b.n	8002ea0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <osKernelInitialize+0x64>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <osKernelInitialize+0x64>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e002      	b.n	8002ea0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000134 	.word	0x20000134

08002eb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eba:	f3ef 8305 	mrs	r3, IPSR
 8002ebe:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eca:	607b      	str	r3, [r7, #4]
  return(result);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <osKernelStart+0x3a>
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <osKernelStart+0x68>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d103      	bne.n	8002eee <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ee6:	f06f 0305 	mvn.w	r3, #5
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e010      	b.n	8002f10 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <osKernelStart+0x68>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d109      	bne.n	8002f0a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ef6:	f7ff ffa1 	bl	8002e3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <osKernelStart+0x68>)
 8002efc:	2202      	movs	r2, #2
 8002efe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f00:	f001 fb7c 	bl	80045fc <vTaskStartScheduler>
      stat = osOK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e002      	b.n	8002f10 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f10:	68fb      	ldr	r3, [r7, #12]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000134 	.word	0x20000134

08002f20 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f26:	f3ef 8305 	mrs	r3, IPSR
 8002f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f32:	f3ef 8310 	mrs	r3, PRIMASK
 8002f36:	607b      	str	r3, [r7, #4]
  return(result);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8002f42:	603b      	str	r3, [r7, #0]
  return(result);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <osKernelGetTickCount+0x3a>
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <osKernelGetTickCount+0x4c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d103      	bne.n	8002f5a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8002f52:	f001 fca9 	bl	80048a8 <xTaskGetTickCountFromISR>
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	e002      	b.n	8002f60 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8002f5a:	f001 fc95 	bl	8004888 <xTaskGetTickCount>
 8002f5e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000134 	.word	0x20000134

08002f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b090      	sub	sp, #64	; 0x40
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f80:	f3ef 8305 	mrs	r3, IPSR
 8002f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f86:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 808f 	bne.w	80030ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f9e:	617b      	str	r3, [r7, #20]
  return(result);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <osThreadNew+0x3e>
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <osThreadNew+0x148>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d07e      	beq.n	80030ac <osThreadNew+0x13c>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d07b      	beq.n	80030ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002fb8:	2318      	movs	r3, #24
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d045      	beq.n	8003058 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <osThreadNew+0x6a>
        name = attr->name;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <osThreadNew+0x90>
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2b38      	cmp	r3, #56	; 0x38
 8002ff2:	d805      	bhi.n	8003000 <osThreadNew+0x90>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <osThreadNew+0x94>
        return (NULL);
 8003000:	2300      	movs	r3, #0
 8003002:	e054      	b.n	80030ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <osThreadNew+0xca>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b5b      	cmp	r3, #91	; 0x5b
 8003022:	d90a      	bls.n	800303a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <osThreadNew+0xca>
        mem = 1;
 8003034:	2301      	movs	r3, #1
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	e010      	b.n	800305c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <osThreadNew+0xec>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <osThreadNew+0xec>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <osThreadNew+0xec>
          mem = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	e001      	b.n	800305c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d110      	bne.n	8003084 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800306a:	9202      	str	r2, [sp, #8]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f001 f873 	bl	8004164 <xTaskCreateStatic>
 800307e:	4603      	mov	r3, r0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e013      	b.n	80030ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d110      	bne.n	80030ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	b29a      	uxth	r2, r3
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f001 f8bb 	bl	8004218 <xTaskCreate>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d001      	beq.n	80030ac <osThreadNew+0x13c>
          hTask = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030ac:	693b      	ldr	r3, [r7, #16]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000134 	.word	0x20000134

080030bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c4:	f3ef 8305 	mrs	r3, IPSR
 80030c8:	613b      	str	r3, [r7, #16]
  return(result);
 80030ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d0:	f3ef 8310 	mrs	r3, PRIMASK
 80030d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030dc:	f3ef 8311 	mrs	r3, BASEPRI
 80030e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <osDelay+0x3c>
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <osDelay+0x58>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d103      	bne.n	80030f8 <osDelay+0x3c>
    stat = osErrorISR;
 80030f0:	f06f 0305 	mvn.w	r3, #5
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e007      	b.n	8003108 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f001 fa46 	bl	8004594 <vTaskDelay>
    }
  }

  return (stat);
 8003108:	697b      	ldr	r3, [r7, #20]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000134 	.word	0x20000134

08003118 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003120:	f3ef 8305 	mrs	r3, IPSR
 8003124:	617b      	str	r3, [r7, #20]
  return(result);
 8003126:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	613b      	str	r3, [r7, #16]
  return(result);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003138:	f3ef 8311 	mrs	r3, BASEPRI
 800313c:	60fb      	str	r3, [r7, #12]
  return(result);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <osDelayUntil+0x3c>
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <osDelayUntil+0x7c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d103      	bne.n	8003154 <osDelayUntil+0x3c>
    stat = osErrorISR;
 800314c:	f06f 0305 	mvn.w	r3, #5
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e019      	b.n	8003188 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8003158:	f001 fb96 	bl	8004888 <xTaskGetTickCount>
 800315c:	4603      	mov	r3, r0
 800315e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <osDelayUntil+0x6a>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	db06      	blt.n	8003182 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	69b9      	ldr	r1, [r7, #24]
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f990 	bl	80044a0 <vTaskDelayUntil>
 8003180:	e002      	b.n	8003188 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8003182:	f06f 0303 	mvn.w	r3, #3
 8003186:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8003188:	69fb      	ldr	r3, [r7, #28]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000134 	.word	0x20000134

08003198 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b08c      	sub	sp, #48	; 0x30
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a8:	f3ef 8305 	mrs	r3, IPSR
 80031ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80031ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d170      	bne.n	8003296 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b4:	f3ef 8310 	mrs	r3, PRIMASK
 80031b8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031c0:	f3ef 8311 	mrs	r3, BASEPRI
 80031c4:	613b      	str	r3, [r7, #16]
  return(result);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <osMessageQueueNew+0x3c>
 80031cc:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <osMessageQueueNew+0x108>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d060      	beq.n	8003296 <osMessageQueueNew+0xfe>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d05d      	beq.n	8003296 <osMessageQueueNew+0xfe>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05a      	beq.n	8003296 <osMessageQueueNew+0xfe>
    mem = -1;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d029      	beq.n	8003240 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <osMessageQueueNew+0x82>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b4f      	cmp	r3, #79	; 0x4f
 80031fa:	d90e      	bls.n	800321a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <osMessageQueueNew+0x82>
        mem = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	e014      	b.n	8003244 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d110      	bne.n	8003244 <osMessageQueueNew+0xac>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <osMessageQueueNew+0xac>
          mem = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	623b      	str	r3, [r7, #32]
 800323e:	e001      	b.n	8003244 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10c      	bne.n	8003264 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	2300      	movs	r3, #0
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	460b      	mov	r3, r1
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa58 	bl	8003710 <xQueueGenericCreateStatic>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24
 8003262:	e008      	b.n	8003276 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800326a:	2200      	movs	r2, #0
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fac1 	bl	80037f6 <xQueueGenericCreate>
 8003274:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00c      	beq.n	8003296 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <osMessageQueueNew+0xf2>
        name = attr->name;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e001      	b.n	800328e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800328e:	69f9      	ldr	r1, [r7, #28]
 8003290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003292:	f000 ff0b 	bl	80040ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	; 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000134 	.word	0x20000134

080032a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032bc:	f3ef 8305 	mrs	r3, IPSR
 80032c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80032c2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10f      	bne.n	80032e8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c8:	f3ef 8310 	mrs	r3, PRIMASK
 80032cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032d4:	f3ef 8311 	mrs	r3, BASEPRI
 80032d8:	617b      	str	r3, [r7, #20]
  return(result);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02c      	beq.n	800333a <osMessageQueuePut+0x96>
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <osMessageQueuePut+0xe0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d128      	bne.n	800333a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <osMessageQueuePut+0x56>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <osMessageQueuePut+0x56>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80032fa:	f06f 0303 	mvn.w	r3, #3
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003300:	e039      	b.n	8003376 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003306:	f107 0210 	add.w	r2, r7, #16
 800330a:	2300      	movs	r3, #0
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6a38      	ldr	r0, [r7, #32]
 8003310:	f000 fbce 	bl	8003ab0 <xQueueGenericSendFromISR>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d003      	beq.n	8003322 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800331a:	f06f 0302 	mvn.w	r3, #2
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003320:	e029      	b.n	8003376 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d026      	beq.n	8003376 <osMessageQueuePut+0xd2>
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <osMessageQueuePut+0xe4>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003338:	e01d      	b.n	8003376 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <osMessageQueuePut+0xa2>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003346:	f06f 0303 	mvn.w	r3, #3
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e014      	b.n	8003378 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800334e:	2300      	movs	r3, #0
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	6a38      	ldr	r0, [r7, #32]
 8003356:	f000 fab1 	bl	80038bc <xQueueGenericSend>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d00b      	beq.n	8003378 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003366:	f06f 0301 	mvn.w	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	e004      	b.n	8003378 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800336e:	f06f 0302 	mvn.w	r3, #2
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	e000      	b.n	8003378 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003376:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000134 	.word	0x20000134
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a2:	f3ef 8305 	mrs	r3, IPSR
 80033a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80033a8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ba:	f3ef 8311 	mrs	r3, BASEPRI
 80033be:	617b      	str	r3, [r7, #20]
  return(result);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02c      	beq.n	8003420 <osMessageQueueGet+0x94>
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <osMessageQueueGet+0xdc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d128      	bne.n	8003420 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <osMessageQueueGet+0x54>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <osMessageQueueGet+0x54>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80033e0:	f06f 0303 	mvn.w	r3, #3
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80033e6:	e038      	b.n	800345a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	461a      	mov	r2, r3
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	6a38      	ldr	r0, [r7, #32]
 80033f6:	f000 fccb 	bl	8003d90 <xQueueReceiveFromISR>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d003      	beq.n	8003408 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003400:	f06f 0302 	mvn.w	r3, #2
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003406:	e028      	b.n	800345a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d025      	beq.n	800345a <osMessageQueueGet+0xce>
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <osMessageQueueGet+0xe0>)
 8003410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800341e:	e01c      	b.n	800345a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <osMessageQueueGet+0xa0>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800342c:	f06f 0303 	mvn.w	r3, #3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	e013      	b.n	800345c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	6a38      	ldr	r0, [r7, #32]
 800343a:	f000 fbcd 	bl	8003bd8 <xQueueReceive>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00b      	beq.n	800345c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800344a:	f06f 0301 	mvn.w	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e004      	b.n	800345c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003452:	f06f 0302 	mvn.w	r3, #2
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e000      	b.n	800345c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800345a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800345e:	4618      	mov	r0, r3
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000134 	.word	0x20000134
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <vApplicationGetIdleTaskMemory+0x2c>)
 8003480:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4a06      	ldr	r2, [pc, #24]	; (80034a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003486:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000138 	.word	0x20000138
 80034a0:	20000194 	.word	0x20000194

080034a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80034b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <vApplicationGetTimerTaskMemory+0x30>)
 80034ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c2:	601a      	str	r2, [r3, #0]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	20000394 	.word	0x20000394
 80034d4:	200003f0 	.word	0x200003f0

080034d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0208 	add.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f103 0208 	add.w	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e00c      	b.n	80035b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3308      	adds	r3, #8
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e002      	b.n	80035a8 <vListInsert+0x2e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d2f6      	bcs.n	80035a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d103      	bne.n	8003620 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	e7fe      	b.n	8003666 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003668:	f002 fa10 	bl	8005a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	441a      	add	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	3b01      	subs	r3, #1
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22ff      	movs	r2, #255	; 0xff
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d114      	bne.n	80036e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3310      	adds	r3, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fa86 	bl	8004bdc <xTaskRemoveFromEventList>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <xQueueGenericReset+0xcc>)
 80036d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	e009      	b.n	80036fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3310      	adds	r3, #16
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fef3 	bl	80034d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3324      	adds	r3, #36	; 0x24
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff feee 	bl	80034d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036fc:	f002 f9f4 	bl	8005ae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003700:	2301      	movs	r3, #1
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	; 0x38
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <xQueueGenericCreateStatic+0x28>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
 8003736:	e7fe      	b.n	8003736 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <xQueueGenericCreateStatic+0x42>
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
 8003750:	e7fe      	b.n	8003750 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <xQueueGenericCreateStatic+0x4e>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <xQueueGenericCreateStatic+0x52>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <xQueueGenericCreateStatic+0x54>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <xQueueGenericCreateStatic+0x6c>
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	e7fe      	b.n	800377a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <xQueueGenericCreateStatic+0x78>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <xQueueGenericCreateStatic+0x7c>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <xQueueGenericCreateStatic+0x7e>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <xQueueGenericCreateStatic+0x96>
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e7fe      	b.n	80037a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037a6:	2350      	movs	r3, #80	; 0x50
 80037a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d009      	beq.n	80037c4 <xQueueGenericCreateStatic+0xb4>
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e7fe      	b.n	80037c2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f844 	bl	8003874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3730      	adds	r7, #48	; 0x30
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b08a      	sub	sp, #40	; 0x28
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <xQueueGenericCreate+0x28>
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e7fe      	b.n	800381c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	e004      	b.n	8003834 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3350      	adds	r3, #80	; 0x50
 8003838:	4618      	mov	r0, r3
 800383a:	f002 fb25 	bl	8005e88 <pvPortMalloc>
 800383e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d011      	beq.n	800386a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3350      	adds	r3, #80	; 0x50
 800384e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003858:	79fa      	ldrb	r2, [r7, #7]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f805 	bl	8003874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800386a:	69bb      	ldr	r3, [r7, #24]
	}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e002      	b.n	8003896 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038a2:	2101      	movs	r1, #1
 80038a4:	69b8      	ldr	r0, [r7, #24]
 80038a6:	f7ff fecb 	bl	8003640 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08e      	sub	sp, #56	; 0x38
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <xQueueGenericSend+0x30>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ea:	e7fe      	b.n	80038ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <xQueueGenericSend+0x3e>
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <xQueueGenericSend+0x42>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <xQueueGenericSend+0x44>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <xQueueGenericSend+0x5c>
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e7fe      	b.n	8003916 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d103      	bne.n	8003926 <xQueueGenericSend+0x6a>
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <xQueueGenericSend+0x6e>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <xQueueGenericSend+0x70>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <xQueueGenericSend+0x88>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	e7fe      	b.n	8003942 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003944:	f001 fb56 	bl	8004ff4 <xTaskGetSchedulerState>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <xQueueGenericSend+0x98>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <xQueueGenericSend+0x9c>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <xQueueGenericSend+0x9e>
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <xQueueGenericSend+0xb6>
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	e7fe      	b.n	8003970 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003972:	f002 f88b 	bl	8005a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <xQueueGenericSend+0xcc>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d129      	bne.n	80039dc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800398e:	f000 fa7c 	bl	8003e8a <prvCopyDataToQueue>
 8003992:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	3324      	adds	r3, #36	; 0x24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 f91b 	bl	8004bdc <xTaskRemoveFromEventList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039ac:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <xQueueGenericSend+0x1f0>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	e00a      	b.n	80039d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <xQueueGenericSend+0x1f0>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039d4:	f002 f888 	bl	8005ae8 <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e063      	b.n	8003aa4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f002 f881 	bl	8005ae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e05c      	b.n	8003aa4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f955 	bl	8004ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f002 f873 	bl	8005ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fe5f 	bl	80046c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f002 f841 	bl	8005a8c <vPortEnterCritical>
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d103      	bne.n	8003a20 <xQueueGenericSend+0x164>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSend+0x17a>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a36:	f002 f857 	bl	8005ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f944 	bl	8004cd0 <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d124      	bne.n	8003a98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a50:	f000 fb13 	bl	800407a <prvIsQueueFull>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 f86c 	bl	8004b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a6a:	f000 fa9e 	bl	8003faa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fe6f 	bl	8004750 <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af7c 	bne.w	8003972 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <xQueueGenericSend+0x1f0>)
 8003a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	e772      	b.n	8003972 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 fa8c 	bl	8003faa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a92:	f000 fe5d 	bl	8004750 <xTaskResumeAll>
 8003a96:	e76c      	b.n	8003972 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a9a:	f000 fa86 	bl	8003faa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9e:	f000 fe57 	bl	8004750 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3738      	adds	r7, #56	; 0x38
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <xQueueGenericSendFromISR+0x2c>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e7fe      	b.n	8003ada <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSendFromISR+0x3a>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <xQueueGenericSendFromISR+0x3e>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <xQueueGenericSendFromISR+0x40>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGenericSendFromISR+0x58>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	623b      	str	r3, [r7, #32]
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSendFromISR+0x66>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSendFromISR+0x6a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSendFromISR+0x6c>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <xQueueGenericSendFromISR+0x84>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e7fe      	b.n	8003b32 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b34:	f002 f96a 	bl	8005e0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b38:	f3ef 8211 	mrs	r2, BASEPRI
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	61ba      	str	r2, [r7, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b50:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <xQueueGenericSendFromISR+0xb6>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d12c      	bne.n	8003bc0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b76:	f000 f988 	bl	8003e8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b7a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d112      	bne.n	8003baa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d016      	beq.n	8003bba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f823 	bl	8004bdc <xTaskRemoveFromEventList>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00e      	beq.n	8003bba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e007      	b.n	8003bba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003baa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bae:	3301      	adds	r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	b25a      	sxtb	r2, r3
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bbe:	e001      	b.n	8003bc4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3738      	adds	r7, #56	; 0x38
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <xQueueReceive+0x2e>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	e7fe      	b.n	8003c04 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <xQueueReceive+0x3c>
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <xQueueReceive+0x40>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <xQueueReceive+0x42>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <xQueueReceive+0x5a>
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e7fe      	b.n	8003c30 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c32:	f001 f9df 	bl	8004ff4 <xTaskGetSchedulerState>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <xQueueReceive+0x6a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <xQueueReceive+0x6e>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueReceive+0x70>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <xQueueReceive+0x88>
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e7fe      	b.n	8003c5e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c60:	f001 ff14 	bl	8005a8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01f      	beq.n	8003cb0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c74:	f000 f973 	bl	8003f5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1e5a      	subs	r2, r3, #1
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00f      	beq.n	8003ca8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	3310      	adds	r3, #16
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 ffa5 	bl	8004bdc <xTaskRemoveFromEventList>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c98:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <xQueueReceive+0x1b4>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ca8:	f001 ff1e 	bl	8005ae8 <vPortExitCritical>
				return pdPASS;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e069      	b.n	8003d84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cb6:	f001 ff17 	bl	8005ae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e062      	b.n	8003d84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cc4:	f107 0310 	add.w	r3, r7, #16
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 ffeb 	bl	8004ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cd2:	f001 ff09 	bl	8005ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cd6:	f000 fcf5 	bl	80046c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cda:	f001 fed7 	bl	8005a8c <vPortEnterCritical>
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d103      	bne.n	8003cf4 <xQueueReceive+0x11c>
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfa:	b25b      	sxtb	r3, r3
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d103      	bne.n	8003d0a <xQueueReceive+0x132>
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d0a:	f001 feed 	bl	8005ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d0e:	1d3a      	adds	r2, r7, #4
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 ffda 	bl	8004cd0 <xTaskCheckForTimeOut>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d123      	bne.n	8003d6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d24:	f000 f993 	bl	800404e <prvIsQueueEmpty>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	3324      	adds	r3, #36	; 0x24
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 ff02 	bl	8004b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3e:	f000 f934 	bl	8003faa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d42:	f000 fd05 	bl	8004750 <xTaskResumeAll>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d189      	bne.n	8003c60 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <xQueueReceive+0x1b4>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	e780      	b.n	8003c60 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d60:	f000 f923 	bl	8003faa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d64:	f000 fcf4 	bl	8004750 <xTaskResumeAll>
 8003d68:	e77a      	b.n	8003c60 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d6c:	f000 f91d 	bl	8003faa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d70:	f000 fcee 	bl	8004750 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d76:	f000 f96a 	bl	800404e <prvIsQueueEmpty>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f43f af6f 	beq.w	8003c60 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3730      	adds	r7, #48	; 0x30
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <xQueueReceiveFromISR+0x2a>
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	e7fe      	b.n	8003db8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <xQueueReceiveFromISR+0x38>
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <xQueueReceiveFromISR+0x3c>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <xQueueReceiveFromISR+0x3e>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <xQueueReceiveFromISR+0x56>
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e7fe      	b.n	8003de4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003de6:	f002 f811 	bl	8005e0c <vPortValidateInterruptPriority>
	__asm volatile
 8003dea:	f3ef 8211 	mrs	r2, BASEPRI
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	61ba      	str	r2, [r7, #24]
 8003e00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02f      	beq.n	8003e72 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e20:	f000 f89d 	bl	8003f5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d112      	bne.n	8003e5c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	3310      	adds	r3, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 feca 	bl	8004bdc <xTaskRemoveFromEventList>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e007      	b.n	8003e6c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e60:	3301      	adds	r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	b25a      	sxtb	r2, r3
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e70:	e001      	b.n	8003e76 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3738      	adds	r7, #56	; 0x38
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d14d      	bne.n	8003f4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f8bb 	bl	8005030 <xTaskPriorityDisinherit>
 8003eba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	e043      	b.n	8003f4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d119      	bne.n	8003efe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6858      	ldr	r0, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	f002 f9d7 	bl	8006288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d32b      	bcc.n	8003f4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	e026      	b.n	8003f4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68d8      	ldr	r0, [r3, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	461a      	mov	r2, r3
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	f002 f9bd 	bl	8006288 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	425b      	negs	r3, r3
 8003f18:	441a      	add	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d207      	bcs.n	8003f3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	425b      	negs	r3, r3
 8003f34:	441a      	add	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d105      	bne.n	8003f4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f54:	697b      	ldr	r3, [r7, #20]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d018      	beq.n	8003fa2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d303      	bcc.n	8003f92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68d9      	ldr	r1, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6838      	ldr	r0, [r7, #0]
 8003f9e:	f002 f973 	bl	8006288 <memcpy>
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fb2:	f001 fd6b 	bl	8005a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fbe:	e011      	b.n	8003fe4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3324      	adds	r3, #36	; 0x24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fe05 	bl	8004bdc <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fd8:	f000 feda 	bl	8004d90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dce9      	bgt.n	8003fc0 <prvUnlockQueue+0x16>
 8003fec:	e000      	b.n	8003ff0 <prvUnlockQueue+0x46>
					break;
 8003fee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	22ff      	movs	r2, #255	; 0xff
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ff8:	f001 fd76 	bl	8005ae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ffc:	f001 fd46 	bl	8005a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004006:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004008:	e011      	b.n	800402e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3310      	adds	r3, #16
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fde0 	bl	8004bdc <xTaskRemoveFromEventList>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004022:	f000 feb5 	bl	8004d90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004026:	7bbb      	ldrb	r3, [r7, #14]
 8004028:	3b01      	subs	r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800402e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004032:	2b00      	cmp	r3, #0
 8004034:	dce9      	bgt.n	800400a <prvUnlockQueue+0x60>
 8004036:	e000      	b.n	800403a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004038:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004042:	f001 fd51 	bl	8005ae8 <vPortExitCritical>
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004056:	f001 fd19 	bl	8005a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e001      	b.n	800406c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800406c:	f001 fd3c 	bl	8005ae8 <vPortExitCritical>

	return xReturn;
 8004070:	68fb      	ldr	r3, [r7, #12]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004082:	f001 fd03 	bl	8005a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	429a      	cmp	r2, r3
 8004090:	d102      	bne.n	8004098 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004092:	2301      	movs	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e001      	b.n	800409c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800409c:	f001 fd24 	bl	8005ae8 <vPortExitCritical>

	return xReturn;
 80040a0:	68fb      	ldr	r3, [r7, #12]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e014      	b.n	80040e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040bc:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <vQueueAddToRegistry+0x4c>)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040c8:	490b      	ldr	r1, [pc, #44]	; (80040f8 <vQueueAddToRegistry+0x4c>)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <vQueueAddToRegistry+0x4c>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040de:	e005      	b.n	80040ec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b07      	cmp	r3, #7
 80040ea:	d9e7      	bls.n	80040bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20004cc8 	.word	0x20004cc8

080040fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800410c:	f001 fcbe 	bl	8005a8c <vPortEnterCritical>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004116:	b25b      	sxtb	r3, r3
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d103      	bne.n	8004126 <vQueueWaitForMessageRestricted+0x2a>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800412c:	b25b      	sxtb	r3, r3
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d103      	bne.n	800413c <vQueueWaitForMessageRestricted+0x40>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800413c:	f001 fcd4 	bl	8005ae8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3324      	adds	r3, #36	; 0x24
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fd19 	bl	8004b88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	f7ff ff27 	bl	8003faa <prvUnlockQueue>
	}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	; 0x38
 8004168:	af04      	add	r7, sp, #16
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <xTaskCreateStatic+0x28>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	e7fe      	b.n	800418a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <xTaskCreateStatic+0x42>
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e7fe      	b.n	80041a4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041a6:	235c      	movs	r3, #92	; 0x5c
 80041a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b5c      	cmp	r3, #92	; 0x5c
 80041ae:	d009      	beq.n	80041c4 <xTaskCreateStatic+0x60>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e7fe      	b.n	80041c2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01e      	beq.n	800420a <xTaskCreateStatic+0xa6>
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01b      	beq.n	800420a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041e4:	2300      	movs	r3, #0
 80041e6:	9303      	str	r3, [sp, #12]
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	9302      	str	r3, [sp, #8]
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f850 	bl	80042a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004204:	f000 f8dc 	bl	80043c0 <prvAddNewTaskToReadyList>
 8004208:	e001      	b.n	800420e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800420e:	697b      	ldr	r3, [r7, #20]
	}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	; 0x30
 800421c:	af04      	add	r7, sp, #16
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fe2b 	bl	8005e88 <pvPortMalloc>
 8004232:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800423a:	205c      	movs	r0, #92	; 0x5c
 800423c:	f001 fe24 	bl	8005e88 <pvPortMalloc>
 8004240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
 800424e:	e005      	b.n	800425c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f001 fedb 	bl	800600c <vPortFree>
 8004256:	e001      	b.n	800425c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	2300      	movs	r3, #0
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	9302      	str	r3, [sp, #8]
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f80e 	bl	80042a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004286:	69f8      	ldr	r0, [r7, #28]
 8004288:	f000 f89a 	bl	80043c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800428c:	2301      	movs	r3, #1
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e002      	b.n	8004298 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004298:	69bb      	ldr	r3, [r7, #24]
	}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b088      	sub	sp, #32
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	461a      	mov	r2, r3
 80042ba:	21a5      	movs	r1, #165	; 0xa5
 80042bc:	f001 ffef 	bl	800629e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042ca:	3b01      	subs	r3, #1
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f023 0307 	bic.w	r3, r3, #7
 80042d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <prvInitialiseNewTask+0x56>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e7fe      	b.n	80042f6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01f      	beq.n	800433e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e012      	b.n	800432a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	7819      	ldrb	r1, [r3, #0]
 800430c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	3334      	adds	r3, #52	; 0x34
 8004314:	460a      	mov	r2, r1
 8004316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	3301      	adds	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2b0f      	cmp	r3, #15
 800432e:	d9e9      	bls.n	8004304 <prvInitialiseNewTask+0x62>
 8004330:	e000      	b.n	8004334 <prvInitialiseNewTask+0x92>
			{
				break;
 8004332:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800433c:	e003      	b.n	8004346 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	2b37      	cmp	r3, #55	; 0x37
 800434a:	d901      	bls.n	8004350 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800434c:	2337      	movs	r3, #55	; 0x37
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004354:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800435a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2200      	movs	r2, #0
 8004360:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f8d6 	bl	8003518 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	3318      	adds	r3, #24
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f8d1 	bl	8003518 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	2200      	movs	r2, #0
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f001 fa4c 	bl	800583c <pxPortInitialiseStack>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b6:	bf00      	nop
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043c8:	f001 fb60 	bl	8005a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043cc:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <prvAddNewTaskToReadyList+0xc4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <prvAddNewTaskToReadyList+0xc4>)
 80043d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <prvAddNewTaskToReadyList+0xc8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043de:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <prvAddNewTaskToReadyList+0xc8>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <prvAddNewTaskToReadyList+0xc4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d110      	bne.n	800440e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043ec:	f000 fd48 	bl	8004e80 <prvInitialiseTaskLists>
 80043f0:	e00d      	b.n	800440e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043f2:	4b26      	ldr	r3, [pc, #152]	; (800448c <prvAddNewTaskToReadyList+0xcc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <prvAddNewTaskToReadyList+0xc8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d802      	bhi.n	800440e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004408:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <prvAddNewTaskToReadyList+0xc8>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <prvAddNewTaskToReadyList+0xd0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <prvAddNewTaskToReadyList+0xd0>)
 8004416:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <prvAddNewTaskToReadyList+0xd0>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <prvAddNewTaskToReadyList+0xd4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d903      	bls.n	8004434 <prvAddNewTaskToReadyList+0x74>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <prvAddNewTaskToReadyList+0xd4>)
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4a15      	ldr	r2, [pc, #84]	; (8004498 <prvAddNewTaskToReadyList+0xd8>)
 8004442:	441a      	add	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7ff f871 	bl	8003532 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004450:	f001 fb4a 	bl	8005ae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <prvAddNewTaskToReadyList+0xcc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvAddNewTaskToReadyList+0xc8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	429a      	cmp	r2, r3
 8004468:	d207      	bcs.n	800447a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <prvAddNewTaskToReadyList+0xdc>)
 800446c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000cc4 	.word	0x20000cc4
 8004488:	200007f0 	.word	0x200007f0
 800448c:	20000cd0 	.word	0x20000cd0
 8004490:	20000ce0 	.word	0x20000ce0
 8004494:	20000ccc 	.word	0x20000ccc
 8004498:	200007f4 	.word	0x200007f4
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <vTaskDelayUntil+0x28>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e7fe      	b.n	80044c6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <vTaskDelayUntil+0x42>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e7fe      	b.n	80044e0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <vTaskDelayUntil+0xe8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <vTaskDelayUntil+0x5e>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e7fe      	b.n	80044fc <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80044fe:	f000 f8e1 	bl	80046c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004502:	4b22      	ldr	r3, [pc, #136]	; (800458c <vTaskDelayUntil+0xec>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	4413      	add	r3, r2
 8004510:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a3a      	ldr	r2, [r7, #32]
 8004518:	429a      	cmp	r2, r3
 800451a:	d20b      	bcs.n	8004534 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	429a      	cmp	r2, r3
 8004524:	d211      	bcs.n	800454a <vTaskDelayUntil+0xaa>
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	429a      	cmp	r2, r3
 800452c:	d90d      	bls.n	800454a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800452e:	2301      	movs	r3, #1
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e00a      	b.n	800454a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d303      	bcc.n	8004546 <vTaskDelayUntil+0xa6>
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	429a      	cmp	r2, r3
 8004544:	d901      	bls.n	800454a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fdd2 	bl	8005108 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004564:	f000 f8f4 	bl	8004750 <xTaskResumeAll>
 8004568:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <vTaskDelayUntil+0xf0>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004580:	bf00      	nop
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000cec 	.word	0x20000cec
 800458c:	20000cc8 	.word	0x20000cc8
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <vTaskDelay+0x60>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <vTaskDelay+0x2e>
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	e7fe      	b.n	80045c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80045c2:	f000 f87f 	bl	80046c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045c6:	2100      	movs	r1, #0
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fd9d 	bl	8005108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045ce:	f000 f8bf 	bl	8004750 <xTaskResumeAll>
 80045d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <vTaskDelay+0x64>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000cec 	.word	0x20000cec
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800460a:	463a      	mov	r2, r7
 800460c:	1d39      	adds	r1, r7, #4
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe ff2c 	bl	8003470 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	9202      	str	r2, [sp, #8]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2300      	movs	r3, #0
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2300      	movs	r3, #0
 8004628:	460a      	mov	r2, r1
 800462a:	4920      	ldr	r1, [pc, #128]	; (80046ac <vTaskStartScheduler+0xb0>)
 800462c:	4820      	ldr	r0, [pc, #128]	; (80046b0 <vTaskStartScheduler+0xb4>)
 800462e:	f7ff fd99 	bl	8004164 <xTaskCreateStatic>
 8004632:	4602      	mov	r2, r0
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <vTaskStartScheduler+0xb8>)
 8004636:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <vTaskStartScheduler+0xb8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e001      	b.n	800464a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004650:	f000 fdae 	bl	80051b0 <xTimerCreateTimerTask>
 8004654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d115      	bne.n	8004688 <vTaskStartScheduler+0x8c>
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <vTaskStartScheduler+0xbc>)
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <vTaskStartScheduler+0xc0>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <vTaskStartScheduler+0xc4>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004682:	f001 f965 	bl	8005950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004686:	e00d      	b.n	80046a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d109      	bne.n	80046a4 <vTaskStartScheduler+0xa8>
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e7fe      	b.n	80046a2 <vTaskStartScheduler+0xa6>
}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08006b58 	.word	0x08006b58
 80046b0:	08004da9 	.word	0x08004da9
 80046b4:	20000ce8 	.word	0x20000ce8
 80046b8:	20000ce4 	.word	0x20000ce4
 80046bc:	20000cd0 	.word	0x20000cd0
 80046c0:	20000cc8 	.word	0x20000cc8

080046c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <vTaskSuspendAll+0x18>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a03      	ldr	r2, [pc, #12]	; (80046dc <vTaskSuspendAll+0x18>)
 80046d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000cec 	.word	0x20000cec

080046e0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvGetExpectedIdleTime+0x5c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <prvGetExpectedIdleTime+0x60>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	e012      	b.n	800472c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <prvGetExpectedIdleTime+0x64>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d902      	bls.n	8004714 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	e00b      	b.n	800472c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	e005      	b.n	800472c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <prvGetExpectedIdleTime+0x68>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <prvGetExpectedIdleTime+0x6c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800472c:	687b      	ldr	r3, [r7, #4]
	}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000ccc 	.word	0x20000ccc
 8004740:	200007f0 	.word	0x200007f0
 8004744:	200007f4 	.word	0x200007f4
 8004748:	20000ce4 	.word	0x20000ce4
 800474c:	20000cc8 	.word	0x20000cc8

08004750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <xTaskResumeAll+0x114>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <xTaskResumeAll+0x2a>
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	e7fe      	b.n	8004778 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800477a:	f001 f987 	bl	8005a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <xTaskResumeAll+0x114>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	4a37      	ldr	r2, [pc, #220]	; (8004864 <xTaskResumeAll+0x114>)
 8004786:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <xTaskResumeAll+0x114>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d162      	bne.n	8004856 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004790:	4b35      	ldr	r3, [pc, #212]	; (8004868 <xTaskResumeAll+0x118>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05e      	beq.n	8004856 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004798:	e02f      	b.n	80047fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479a:	4b34      	ldr	r3, [pc, #208]	; (800486c <xTaskResumeAll+0x11c>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3318      	adds	r3, #24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe ff20 	bl	80035ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe ff1b 	bl	80035ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <xTaskResumeAll+0x120>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d903      	bls.n	80047ca <xTaskResumeAll+0x7a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <xTaskResumeAll+0x120>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a27      	ldr	r2, [pc, #156]	; (8004874 <xTaskResumeAll+0x124>)
 80047d8:	441a      	add	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7fe fea6 	bl	8003532 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <xTaskResumeAll+0x128>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <xTaskResumeAll+0x12c>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047fa:	4b1c      	ldr	r3, [pc, #112]	; (800486c <xTaskResumeAll+0x11c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1cb      	bne.n	800479a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004808:	f000 fbd4 	bl	8004fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <xTaskResumeAll+0x130>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004818:	f000 f87e 	bl	8004918 <xTaskIncrementTick>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <xTaskResumeAll+0x12c>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3b01      	subs	r3, #1
 800482c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f1      	bne.n	8004818 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <xTaskResumeAll+0x130>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <xTaskResumeAll+0x12c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <xTaskResumeAll+0x134>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004856:	f001 f947 	bl	8005ae8 <vPortExitCritical>

	return xAlreadyYielded;
 800485a:	68bb      	ldr	r3, [r7, #8]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000cec 	.word	0x20000cec
 8004868:	20000cc4 	.word	0x20000cc4
 800486c:	20000c84 	.word	0x20000c84
 8004870:	20000ccc 	.word	0x20000ccc
 8004874:	200007f4 	.word	0x200007f4
 8004878:	200007f0 	.word	0x200007f0
 800487c:	20000cd8 	.word	0x20000cd8
 8004880:	20000cd4 	.word	0x20000cd4
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <xTaskGetTickCount+0x1c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004894:	687b      	ldr	r3, [r7, #4]
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000cc8 	.word	0x20000cc8

080048a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ae:	f001 faad 	bl	8005e0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80048b6:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <xTaskGetTickCountFromISR+0x20>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048bc:	683b      	ldr	r3, [r7, #0]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000cc8 	.word	0x20000cc8

080048cc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <vTaskStepTick+0x44>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	441a      	add	r2, r3
 80048dc:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <vTaskStepTick+0x48>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d909      	bls.n	80048f8 <vTaskStepTick+0x2c>
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e7fe      	b.n	80048f6 <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <vTaskStepTick+0x44>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4413      	add	r3, r2
 8004900:	4a03      	ldr	r2, [pc, #12]	; (8004910 <vTaskStepTick+0x44>)
 8004902:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	20000cc8 	.word	0x20000cc8
 8004914:	20000ce4 	.word	0x20000ce4

08004918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004922:	4b4e      	ldr	r3, [pc, #312]	; (8004a5c <xTaskIncrementTick+0x144>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 8088 	bne.w	8004a3c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800492c:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <xTaskIncrementTick+0x148>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004934:	4a4a      	ldr	r2, [pc, #296]	; (8004a60 <xTaskIncrementTick+0x148>)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11f      	bne.n	8004980 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004940:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <xTaskIncrementTick+0x14c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <xTaskIncrementTick+0x46>
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	e7fe      	b.n	800495c <xTaskIncrementTick+0x44>
 800495e:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <xTaskIncrementTick+0x14c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	4b40      	ldr	r3, [pc, #256]	; (8004a68 <xTaskIncrementTick+0x150>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a3e      	ldr	r2, [pc, #248]	; (8004a64 <xTaskIncrementTick+0x14c>)
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4a3e      	ldr	r2, [pc, #248]	; (8004a68 <xTaskIncrementTick+0x150>)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <xTaskIncrementTick+0x154>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	4a3c      	ldr	r2, [pc, #240]	; (8004a6c <xTaskIncrementTick+0x154>)
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	f000 fb1a 	bl	8004fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004980:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <xTaskIncrementTick+0x158>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d349      	bcc.n	8004a1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <xTaskIncrementTick+0x14c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004994:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <xTaskIncrementTick+0x158>)
 8004996:	f04f 32ff 	mov.w	r2, #4294967295
 800499a:	601a      	str	r2, [r3, #0]
					break;
 800499c:	e03f      	b.n	8004a1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499e:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <xTaskIncrementTick+0x14c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d203      	bcs.n	80049be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049b6:	4a2e      	ldr	r2, [pc, #184]	; (8004a70 <xTaskIncrementTick+0x158>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049bc:	e02f      	b.n	8004a1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fe12 	bl	80035ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3318      	adds	r3, #24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fe09 	bl	80035ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <xTaskIncrementTick+0x15c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d903      	bls.n	80049ee <xTaskIncrementTick+0xd6>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <xTaskIncrementTick+0x15c>)
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <xTaskIncrementTick+0x160>)
 80049fc:	441a      	add	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fe fd94 	bl	8003532 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <xTaskIncrementTick+0x164>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d3b8      	bcc.n	800498a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a1c:	e7b5      	b.n	800498a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <xTaskIncrementTick+0x164>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	4914      	ldr	r1, [pc, #80]	; (8004a78 <xTaskIncrementTick+0x160>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d907      	bls.n	8004a46 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e004      	b.n	8004a46 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <xTaskIncrementTick+0x168>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <xTaskIncrementTick+0x168>)
 8004a44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <xTaskIncrementTick+0x16c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a52:	697b      	ldr	r3, [r7, #20]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000cec 	.word	0x20000cec
 8004a60:	20000cc8 	.word	0x20000cc8
 8004a64:	20000c7c 	.word	0x20000c7c
 8004a68:	20000c80 	.word	0x20000c80
 8004a6c:	20000cdc 	.word	0x20000cdc
 8004a70:	20000ce4 	.word	0x20000ce4
 8004a74:	20000ccc 	.word	0x20000ccc
 8004a78:	200007f4 	.word	0x200007f4
 8004a7c:	200007f0 	.word	0x200007f0
 8004a80:	20000cd4 	.word	0x20000cd4
 8004a84:	20000cd8 	.word	0x20000cd8

08004a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a8e:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <vTaskSwitchContext+0xa4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <vTaskSwitchContext+0xa8>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a9c:	e040      	b.n	8004b20 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <vTaskSwitchContext+0xa8>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <vTaskSwitchContext+0xac>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e00f      	b.n	8004acc <vTaskSwitchContext+0x44>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <vTaskSwitchContext+0x3e>
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e7fe      	b.n	8004ac4 <vTaskSwitchContext+0x3c>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	491a      	ldr	r1, [pc, #104]	; (8004b38 <vTaskSwitchContext+0xb0>)
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0e5      	beq.n	8004aac <vTaskSwitchContext+0x24>
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <vTaskSwitchContext+0xb0>)
 8004aec:	4413      	add	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	3308      	adds	r3, #8
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d104      	bne.n	8004b10 <vTaskSwitchContext+0x88>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <vTaskSwitchContext+0xb4>)
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4a06      	ldr	r2, [pc, #24]	; (8004b34 <vTaskSwitchContext+0xac>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000cec 	.word	0x20000cec
 8004b30:	20000cd8 	.word	0x20000cd8
 8004b34:	20000ccc 	.word	0x20000ccc
 8004b38:	200007f4 	.word	0x200007f4
 8004b3c:	200007f0 	.word	0x200007f0

08004b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <vTaskPlaceOnEventList+0x24>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e7fe      	b.n	8004b62 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <vTaskPlaceOnEventList+0x44>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fe fd04 	bl	800357a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b72:	2101      	movs	r1, #1
 8004b74:	6838      	ldr	r0, [r7, #0]
 8004b76:	f000 fac7 	bl	8005108 <prvAddCurrentTaskToDelayedList>
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200007f0 	.word	0x200007f0

08004b88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <vTaskPlaceOnEventListRestricted+0x26>
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e7fe      	b.n	8004bac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <vTaskPlaceOnEventListRestricted+0x50>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3318      	adds	r3, #24
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7fe fcbb 	bl	8003532 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	68b8      	ldr	r0, [r7, #8]
 8004bcc:	f000 fa9c 	bl	8005108 <prvAddCurrentTaskToDelayedList>
	}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	200007f0 	.word	0x200007f0

08004bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <xTaskRemoveFromEventList+0x2a>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e7fe      	b.n	8004c04 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3318      	adds	r3, #24
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fcee 	bl	80035ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <xTaskRemoveFromEventList+0xb0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11f      	bne.n	8004c58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fce5 	bl	80035ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <xTaskRemoveFromEventList+0xb4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d903      	bls.n	8004c36 <xTaskRemoveFromEventList+0x5a>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <xTaskRemoveFromEventList+0xb4>)
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <xTaskRemoveFromEventList+0xb8>)
 8004c44:	441a      	add	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fe fc70 	bl	8003532 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8004c52:	f000 f9af 	bl	8004fb4 <prvResetNextTaskUnblockTime>
 8004c56:	e005      	b.n	8004c64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3318      	adds	r3, #24
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	480e      	ldr	r0, [pc, #56]	; (8004c98 <xTaskRemoveFromEventList+0xbc>)
 8004c60:	f7fe fc67 	bl	8003532 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <xTaskRemoveFromEventList+0xc0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d905      	bls.n	8004c7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <xTaskRemoveFromEventList+0xc4>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e001      	b.n	8004c82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c82:	697b      	ldr	r3, [r7, #20]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000cec 	.word	0x20000cec
 8004c90:	20000ccc 	.word	0x20000ccc
 8004c94:	200007f4 	.word	0x200007f4
 8004c98:	20000c84 	.word	0x20000c84
 8004c9c:	200007f0 	.word	0x200007f0
 8004ca0:	20000cd8 	.word	0x20000cd8

08004ca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <vTaskInternalSetTimeOutState+0x24>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <vTaskInternalSetTimeOutState+0x28>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	605a      	str	r2, [r3, #4]
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000cdc 	.word	0x20000cdc
 8004ccc:	20000cc8 	.word	0x20000cc8

08004cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <xTaskCheckForTimeOut+0x24>
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	e7fe      	b.n	8004cf2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <xTaskCheckForTimeOut+0x3e>
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e7fe      	b.n	8004d0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d0e:	f000 febd 	bl	8005a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <xTaskCheckForTimeOut+0xb8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d102      	bne.n	8004d32 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e023      	b.n	8004d7a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <xTaskCheckForTimeOut+0xbc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d007      	beq.n	8004d4e <xTaskCheckForTimeOut+0x7e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d302      	bcc.n	8004d4e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e015      	b.n	8004d7a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d20b      	bcs.n	8004d70 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff ff9d 	bl	8004ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e004      	b.n	8004d7a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d7a:	f000 feb5 	bl	8005ae8 <vPortExitCritical>

	return xReturn;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000cc8 	.word	0x20000cc8
 8004d8c:	20000cdc 	.word	0x20000cdc

08004d90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <vTaskMissedYield+0x14>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000cd8 	.word	0x20000cd8

08004da8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004db0:	f000 f8a6 	bl	8004f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004db4:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <prvIdleTask+0x6c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d907      	bls.n	8004dcc <prvIdleTask+0x24>
			{
				taskYIELD();
 8004dbc:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <prvIdleTask+0x70>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8004dcc:	f7ff fc88 	bl	80046e0 <prvGetExpectedIdleTime>
 8004dd0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d9eb      	bls.n	8004db0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8004dd8:	f7ff fc74 	bl	80046c4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <prvIdleTask+0x74>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <prvIdleTask+0x78>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d209      	bcs.n	8004dfc <prvIdleTask+0x54>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	e7fe      	b.n	8004dfa <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8004dfc:	f7ff fc70 	bl	80046e0 <prvGetExpectedIdleTime>
 8004e00:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d902      	bls.n	8004e0e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 feed 	bl	8005be8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8004e0e:	f7ff fc9f 	bl	8004750 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8004e12:	e7cd      	b.n	8004db0 <prvIdleTask+0x8>
 8004e14:	200007f4 	.word	0x200007f4
 8004e18:	e000ed04 	.word	0xe000ed04
 8004e1c:	20000ce4 	.word	0x20000ce4
 8004e20:	20000cc8 	.word	0x20000cc8

08004e24 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <eTaskConfirmSleepModeStatus+0x4c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	71fb      	strb	r3, [r7, #7]
 8004e3e:	e010      	b.n	8004e62 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <eTaskConfirmSleepModeStatus+0x50>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	71fb      	strb	r3, [r7, #7]
 8004e4c:	e009      	b.n	8004e62 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <eTaskConfirmSleepModeStatus+0x54>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <eTaskConfirmSleepModeStatus+0x58>)
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	1acb      	subs	r3, r1, r3
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d101      	bne.n	8004e62 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8004e62:	79fb      	ldrb	r3, [r7, #7]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20000c84 	.word	0x20000c84
 8004e74:	20000cd8 	.word	0x20000cd8
 8004e78:	20000cb0 	.word	0x20000cb0
 8004e7c:	20000cc4 	.word	0x20000cc4

08004e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	e00c      	b.n	8004ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <prvInitialiseTaskLists+0x60>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fb1c 	bl	80034d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b37      	cmp	r3, #55	; 0x37
 8004eaa:	d9ef      	bls.n	8004e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004eae:	f7fe fb13 	bl	80034d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004eb4:	f7fe fb10 	bl	80034d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <prvInitialiseTaskLists+0x6c>)
 8004eba:	f7fe fb0d 	bl	80034d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <prvInitialiseTaskLists+0x70>)
 8004ec0:	f7fe fb0a 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <prvInitialiseTaskLists+0x74>)
 8004ec6:	f7fe fb07 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <prvInitialiseTaskLists+0x78>)
 8004ecc:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvInitialiseTaskLists+0x7c>)
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200007f4 	.word	0x200007f4
 8004ee4:	20000c54 	.word	0x20000c54
 8004ee8:	20000c68 	.word	0x20000c68
 8004eec:	20000c84 	.word	0x20000c84
 8004ef0:	20000c98 	.word	0x20000c98
 8004ef4:	20000cb0 	.word	0x20000cb0
 8004ef8:	20000c7c 	.word	0x20000c7c
 8004efc:	20000c80 	.word	0x20000c80

08004f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f06:	e019      	b.n	8004f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f08:	f000 fdc0 	bl	8005a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <prvCheckTasksWaitingTermination+0x4c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe fb67 	bl	80035ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <prvCheckTasksWaitingTermination+0x50>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <prvCheckTasksWaitingTermination+0x50>)
 8004f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f32:	f000 fdd9 	bl	8005ae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f80e 	bl	8004f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e1      	bne.n	8004f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000c98 	.word	0x20000c98
 8004f50:	20000cc4 	.word	0x20000cc4
 8004f54:	20000cac 	.word	0x20000cac

08004f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f84c 	bl	800600c <vPortFree>
				vPortFree( pxTCB );
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 f849 	bl	800600c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f7a:	e017      	b.n	8004fac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d103      	bne.n	8004f8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 f840 	bl	800600c <vPortFree>
	}
 8004f8c:	e00e      	b.n	8004fac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d009      	beq.n	8004fac <prvDeleteTCB+0x54>
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e7fe      	b.n	8004faa <prvDeleteTCB+0x52>
	}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <prvResetNextTaskUnblockTime+0x38>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fcc:	e008      	b.n	8004fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvResetNextTaskUnblockTime+0x38>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000c7c 	.word	0x20000c7c
 8004ff0:	20000ce4 	.word	0x20000ce4

08004ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <xTaskGetSchedulerState+0x34>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005002:	2301      	movs	r3, #1
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	e008      	b.n	800501a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005008:	4b08      	ldr	r3, [pc, #32]	; (800502c <xTaskGetSchedulerState+0x38>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005010:	2302      	movs	r3, #2
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	e001      	b.n	800501a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005016:	2300      	movs	r3, #0
 8005018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800501a:	687b      	ldr	r3, [r7, #4]
	}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20000cd0 	.word	0x20000cd0
 800502c:	20000cec 	.word	0x20000cec

08005030 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d054      	beq.n	80050f0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <xTaskPriorityDisinherit+0xcc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	429a      	cmp	r2, r3
 800504e:	d009      	beq.n	8005064 <xTaskPriorityDisinherit+0x34>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	e7fe      	b.n	8005062 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <xTaskPriorityDisinherit+0x50>
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	e7fe      	b.n	800507e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	1e5a      	subs	r2, r3, #1
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	429a      	cmp	r2, r3
 8005094:	d02c      	beq.n	80050f0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509a:	2b00      	cmp	r3, #0
 800509c:	d128      	bne.n	80050f0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe faa2 	bl	80035ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <xTaskPriorityDisinherit+0xd0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d903      	bls.n	80050d0 <xTaskPriorityDisinherit+0xa0>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <xTaskPriorityDisinherit+0xd0>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <xTaskPriorityDisinherit+0xd4>)
 80050de:	441a      	add	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe fa23 	bl	8003532 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050f0:	697b      	ldr	r3, [r7, #20]
	}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200007f0 	.word	0x200007f0
 8005100:	20000ccc 	.word	0x20000ccc
 8005104:	200007f4 	.word	0x200007f4

08005108 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <prvAddCurrentTaskToDelayedList+0x90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fa64 	bl	80035ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d10a      	bne.n	8005142 <prvAddCurrentTaskToDelayedList+0x3a>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005132:	4b1a      	ldr	r3, [pc, #104]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4819      	ldr	r0, [pc, #100]	; (80051a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800513c:	f7fe f9f9 	bl	8003532 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005140:	e026      	b.n	8005190 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	429a      	cmp	r2, r3
 8005158:	d209      	bcs.n	800516e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f7fe fa07 	bl	800357a <vListInsert>
}
 800516c:	e010      	b.n	8005190 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3304      	adds	r3, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4610      	mov	r0, r2
 800517c:	f7fe f9fd 	bl	800357a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d202      	bcs.n	8005190 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800518a:	4a08      	ldr	r2, [pc, #32]	; (80051ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000cc8 	.word	0x20000cc8
 800519c:	200007f0 	.word	0x200007f0
 80051a0:	20000cb0 	.word	0x20000cb0
 80051a4:	20000c80 	.word	0x20000c80
 80051a8:	20000c7c 	.word	0x20000c7c
 80051ac:	20000ce4 	.word	0x20000ce4

080051b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051ba:	f000 faff 	bl	80057bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051be:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <xTimerCreateTimerTask+0x80>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d021      	beq.n	800520a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051ce:	1d3a      	adds	r2, r7, #4
 80051d0:	f107 0108 	add.w	r1, r7, #8
 80051d4:	f107 030c 	add.w	r3, r7, #12
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe f963 	bl	80034a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	9202      	str	r2, [sp, #8]
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	2302      	movs	r3, #2
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	460a      	mov	r2, r1
 80051f0:	4910      	ldr	r1, [pc, #64]	; (8005234 <xTimerCreateTimerTask+0x84>)
 80051f2:	4811      	ldr	r0, [pc, #68]	; (8005238 <xTimerCreateTimerTask+0x88>)
 80051f4:	f7fe ffb6 	bl	8004164 <xTaskCreateStatic>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <xTimerCreateTimerTask+0x8c>)
 80051fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <xTimerCreateTimerTask+0x8c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <xTimerCreateTimerTask+0x74>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	e7fe      	b.n	8005222 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005224:	697b      	ldr	r3, [r7, #20]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000d20 	.word	0x20000d20
 8005234:	08006b60 	.word	0x08006b60
 8005238:	08005371 	.word	0x08005371
 800523c:	20000d24 	.word	0x20000d24

08005240 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800524e:	2300      	movs	r3, #0
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <xTimerGenericCommand+0x2c>
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	623b      	str	r3, [r7, #32]
 800526a:	e7fe      	b.n	800526a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <xTimerGenericCommand+0x94>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02a      	beq.n	80052ca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b05      	cmp	r3, #5
 8005284:	dc18      	bgt.n	80052b8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005286:	f7ff feb5 	bl	8004ff4 <xTaskGetSchedulerState>
 800528a:	4603      	mov	r3, r0
 800528c:	2b02      	cmp	r3, #2
 800528e:	d109      	bne.n	80052a4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <xTimerGenericCommand+0x94>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	f107 0110 	add.w	r1, r7, #16
 8005298:	2300      	movs	r3, #0
 800529a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529c:	f7fe fb0e 	bl	80038bc <xQueueGenericSend>
 80052a0:	6278      	str	r0, [r7, #36]	; 0x24
 80052a2:	e012      	b.n	80052ca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <xTimerGenericCommand+0x94>)
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	f107 0110 	add.w	r1, r7, #16
 80052ac:	2300      	movs	r3, #0
 80052ae:	2200      	movs	r2, #0
 80052b0:	f7fe fb04 	bl	80038bc <xQueueGenericSend>
 80052b4:	6278      	str	r0, [r7, #36]	; 0x24
 80052b6:	e008      	b.n	80052ca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <xTimerGenericCommand+0x94>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	f107 0110 	add.w	r1, r7, #16
 80052c0:	2300      	movs	r3, #0
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	f7fe fbf4 	bl	8003ab0 <xQueueGenericSendFromISR>
 80052c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3728      	adds	r7, #40	; 0x28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000d20 	.word	0x20000d20

080052d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af02      	add	r7, sp, #8
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e2:	4b22      	ldr	r3, [pc, #136]	; (800536c <prvProcessExpiredTimer+0x94>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe f97b 	bl	80035ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d021      	beq.n	8005348 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	18d1      	adds	r1, r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f000 f8d1 	bl	80054b8 <prvInsertTimerInActiveList>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800531c:	2300      	movs	r3, #0
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	2300      	movs	r3, #0
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	6978      	ldr	r0, [r7, #20]
 8005328:	f7ff ff8a 	bl	8005240 <xTimerGenericCommand>
 800532c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d112      	bne.n	800535a <prvProcessExpiredTimer+0x82>
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e7fe      	b.n	8005346 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	b2da      	uxtb	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	4798      	blx	r3
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000d18 	.word	0x20000d18

08005370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005378:	f107 0308 	add.w	r3, r7, #8
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f857 	bl	8005430 <prvGetNextExpireTime>
 8005382:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4619      	mov	r1, r3
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f803 	bl	8005394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800538e:	f000 f8d5 	bl	800553c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005392:	e7f1      	b.n	8005378 <prvTimerTask+0x8>

08005394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800539e:	f7ff f991 	bl	80046c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053a2:	f107 0308 	add.w	r3, r7, #8
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f866 	bl	8005478 <prvSampleTimeNow>
 80053ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d130      	bne.n	8005416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <prvProcessTimerOrBlockTask+0x3c>
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d806      	bhi.n	80053d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053c2:	f7ff f9c5 	bl	8004750 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff85 	bl	80052d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053ce:	e024      	b.n	800541a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <prvProcessTimerOrBlockTask+0x90>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <prvProcessTimerOrBlockTask+0x50>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <prvProcessTimerOrBlockTask+0x52>
 80053e4:	2300      	movs	r3, #0
 80053e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <prvProcessTimerOrBlockTask+0x94>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7fe fe81 	bl	80040fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053fa:	f7ff f9a9 	bl	8004750 <xTaskResumeAll>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <prvProcessTimerOrBlockTask+0x98>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
}
 8005414:	e001      	b.n	800541a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005416:	f7ff f99b 	bl	8004750 <xTaskResumeAll>
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000d1c 	.word	0x20000d1c
 8005428:	20000d20 	.word	0x20000d20
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <prvGetNextExpireTime+0x44>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <prvGetNextExpireTime+0x16>
 8005442:	2201      	movs	r2, #1
 8005444:	e000      	b.n	8005448 <prvGetNextExpireTime+0x18>
 8005446:	2200      	movs	r2, #0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <prvGetNextExpireTime+0x44>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e001      	b.n	8005464 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005464:	68fb      	ldr	r3, [r7, #12]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000d18 	.word	0x20000d18

08005478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005480:	f7ff fa02 	bl	8004888 <xTaskGetTickCount>
 8005484:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <prvSampleTimeNow+0x3c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	429a      	cmp	r2, r3
 800548e:	d205      	bcs.n	800549c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005490:	f000 f930 	bl	80056f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e002      	b.n	80054a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054a2:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <prvSampleTimeNow+0x3c>)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054a8:	68fb      	ldr	r3, [r7, #12]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000d28 	.word	0x20000d28

080054b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d812      	bhi.n	8005504 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	1ad2      	subs	r2, r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d302      	bcc.n	80054f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e01b      	b.n	800552a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054f2:	4b10      	ldr	r3, [pc, #64]	; (8005534 <prvInsertTimerInActiveList+0x7c>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f7fe f83c 	bl	800357a <vListInsert>
 8005502:	e012      	b.n	800552a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d206      	bcs.n	800551a <prvInsertTimerInActiveList+0x62>
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e007      	b.n	800552a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <prvInsertTimerInActiveList+0x80>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7fe f828 	bl	800357a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000d1c 	.word	0x20000d1c
 8005538:	20000d18 	.word	0x20000d18

0800553c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08e      	sub	sp, #56	; 0x38
 8005540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005542:	e0c6      	b.n	80056d2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	da17      	bge.n	800557a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800554a:	1d3b      	adds	r3, r7, #4
 800554c:	3304      	adds	r3, #4
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <prvProcessReceivedCommands+0x2e>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	e7fe      	b.n	8005568 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005570:	6850      	ldr	r0, [r2, #4]
 8005572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	4611      	mov	r1, r2
 8005578:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f2c0 80a7 	blt.w	80056d0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe f82a 	bl	80035ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005598:	463b      	mov	r3, r7
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff ff6c 	bl	8005478 <prvSampleTimeNow>
 80055a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	f200 8094 	bhi.w	80056d2 <prvProcessReceivedCommands+0x196>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <prvProcessReceivedCommands+0x74>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055d9 	.word	0x080055d9
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	0800564b 	.word	0x0800564b
 80055c0:	0800565f 	.word	0x0800565f
 80055c4:	080056a7 	.word	0x080056a7
 80055c8:	080055d9 	.word	0x080055d9
 80055cc:	080055d9 	.word	0x080055d9
 80055d0:	0800564b 	.word	0x0800564b
 80055d4:	0800565f 	.word	0x0800565f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	18d1      	adds	r1, r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f8:	f7ff ff5e 	bl	80054b8 <prvInsertTimerInActiveList>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d067      	beq.n	80056d2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05c      	beq.n	80056d2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	441a      	add	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	2100      	movs	r1, #0
 8005628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562a:	f7ff fe09 	bl	8005240 <xTimerGenericCommand>
 800562e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d14d      	bne.n	80056d2 <prvProcessReceivedCommands+0x196>
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e7fe      	b.n	8005648 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800565c:	e039      	b.n	80056d2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <prvProcessReceivedCommands+0x156>
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e7fe      	b.n	8005690 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	18d1      	adds	r1, r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a0:	f7ff ff0a 	bl	80054b8 <prvInsertTimerInActiveList>
					break;
 80056a4:	e015      	b.n	80056d2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80056b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b6:	f000 fca9 	bl	800600c <vPortFree>
 80056ba:	e00a      	b.n	80056d2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056ce:	e000      	b.n	80056d2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <prvProcessReceivedCommands+0x1b4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1d39      	adds	r1, r7, #4
 80056d8:	2200      	movs	r2, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fa7c 	bl	8003bd8 <xQueueReceive>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f47f af2e 	bne.w	8005544 <prvProcessReceivedCommands+0x8>
	}
}
 80056e8:	bf00      	nop
 80056ea:	3730      	adds	r7, #48	; 0x30
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000d20 	.word	0x20000d20

080056f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056fa:	e047      	b.n	800578c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056fc:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <prvSwitchTimerLists+0xc0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005706:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <prvSwitchTimerLists+0xc0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fd ff69 	bl	80035ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02d      	beq.n	800578c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d90e      	bls.n	8005760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800574e:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <prvSwitchTimerLists+0xc0>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fd ff0e 	bl	800357a <vListInsert>
 800575e:	e015      	b.n	800578c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005760:	2300      	movs	r3, #0
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	2100      	movs	r1, #0
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fd68 	bl	8005240 <xTimerGenericCommand>
 8005770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <prvSwitchTimerLists+0x98>
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	e7fe      	b.n	800578a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvSwitchTimerLists+0xc0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1b2      	bne.n	80056fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <prvSwitchTimerLists+0xc0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <prvSwitchTimerLists+0xc0>)
 80057a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6013      	str	r3, [r2, #0]
}
 80057aa:	bf00      	nop
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000d18 	.word	0x20000d18
 80057b8:	20000d1c 	.word	0x20000d1c

080057bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057c2:	f000 f963 	bl	8005a8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d120      	bne.n	8005810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057ce:	4814      	ldr	r0, [pc, #80]	; (8005820 <prvCheckForValidListAndQueue+0x64>)
 80057d0:	f7fd fe82 	bl	80034d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057d4:	4813      	ldr	r0, [pc, #76]	; (8005824 <prvCheckForValidListAndQueue+0x68>)
 80057d6:	f7fd fe7f 	bl	80034d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <prvCheckForValidListAndQueue+0x6c>)
 80057dc:	4a10      	ldr	r2, [pc, #64]	; (8005820 <prvCheckForValidListAndQueue+0x64>)
 80057de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <prvCheckForValidListAndQueue+0x70>)
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <prvCheckForValidListAndQueue+0x68>)
 80057e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057e6:	2300      	movs	r3, #0
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	4b11      	ldr	r3, [pc, #68]	; (8005830 <prvCheckForValidListAndQueue+0x74>)
 80057ec:	4a11      	ldr	r2, [pc, #68]	; (8005834 <prvCheckForValidListAndQueue+0x78>)
 80057ee:	2110      	movs	r1, #16
 80057f0:	200a      	movs	r0, #10
 80057f2:	f7fd ff8d 	bl	8003710 <xQueueGenericCreateStatic>
 80057f6:	4602      	mov	r2, r0
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 80057fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <prvCheckForValidListAndQueue+0x60>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	490b      	ldr	r1, [pc, #44]	; (8005838 <prvCheckForValidListAndQueue+0x7c>)
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fc4e 	bl	80040ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005810:	f000 f96a 	bl	8005ae8 <vPortExitCritical>
}
 8005814:	bf00      	nop
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000d20 	.word	0x20000d20
 8005820:	20000cf0 	.word	0x20000cf0
 8005824:	20000d04 	.word	0x20000d04
 8005828:	20000d18 	.word	0x20000d18
 800582c:	20000d1c 	.word	0x20000d1c
 8005830:	20000dcc 	.word	0x20000dcc
 8005834:	20000d2c 	.word	0x20000d2c
 8005838:	08006b68 	.word	0x08006b68

0800583c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b04      	subs	r3, #4
 800584c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b04      	subs	r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3b04      	subs	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800586c:	4a0c      	ldr	r2, [pc, #48]	; (80058a0 <pxPortInitialiseStack+0x64>)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3b14      	subs	r3, #20
 8005876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3b04      	subs	r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f06f 0202 	mvn.w	r2, #2
 800588a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b20      	subs	r3, #32
 8005890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	080058a5 	.word	0x080058a5

080058a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058ae:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <prvTaskExitError+0x50>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d009      	beq.n	80058cc <prvTaskExitError+0x28>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e7fe      	b.n	80058ca <prvTaskExitError+0x26>
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058de:	bf00      	nop
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0fc      	beq.n	80058e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	200000ac 	.word	0x200000ac
	...

08005900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <pxCurrentTCBConst2>)
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	6808      	ldr	r0, [r1, #0]
 8005906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590a:	f380 8809 	msr	PSP, r0
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8811 	msr	BASEPRI, r0
 800591a:	4770      	bx	lr
 800591c:	f3af 8000 	nop.w

08005920 <pxCurrentTCBConst2>:
 8005920:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005928:	4808      	ldr	r0, [pc, #32]	; (800594c <prvPortStartFirstTask+0x24>)
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	6800      	ldr	r0, [r0, #0]
 800592e:	f380 8808 	msr	MSP, r0
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8814 	msr	CONTROL, r0
 800593a:	b662      	cpsie	i
 800593c:	b661      	cpsie	f
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	df00      	svc	0
 8005948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800594a:	bf00      	nop
 800594c:	e000ed08 	.word	0xe000ed08

08005950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005956:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <xPortStartScheduler+0x118>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a44      	ldr	r2, [pc, #272]	; (8005a6c <xPortStartScheduler+0x11c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d109      	bne.n	8005974 <xPortStartScheduler+0x24>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	e7fe      	b.n	8005972 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005974:	4b3c      	ldr	r3, [pc, #240]	; (8005a68 <xPortStartScheduler+0x118>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3d      	ldr	r2, [pc, #244]	; (8005a70 <xPortStartScheduler+0x120>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d109      	bne.n	8005992 <xPortStartScheduler+0x42>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e7fe      	b.n	8005990 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005992:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <xPortStartScheduler+0x124>)
 8005994:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <xPortStartScheduler+0x128>)
 80059b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059ba:	4b30      	ldr	r3, [pc, #192]	; (8005a7c <xPortStartScheduler+0x12c>)
 80059bc:	2207      	movs	r2, #7
 80059be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059c0:	e009      	b.n	80059d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80059c2:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <xPortStartScheduler+0x12c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <xPortStartScheduler+0x12c>)
 80059ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d0ef      	beq.n	80059c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <xPortStartScheduler+0x12c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1c3 0307 	rsb	r3, r3, #7
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d009      	beq.n	8005a02 <xPortStartScheduler+0xb2>
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	e7fe      	b.n	8005a00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a02:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <xPortStartScheduler+0x12c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <xPortStartScheduler+0x12c>)
 8005a0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <xPortStartScheduler+0x12c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <xPortStartScheduler+0x12c>)
 8005a16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a20:	4b17      	ldr	r3, [pc, #92]	; (8005a80 <xPortStartScheduler+0x130>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <xPortStartScheduler+0x130>)
 8005a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <xPortStartScheduler+0x130>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <xPortStartScheduler+0x130>)
 8005a32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a38:	f000 f9a2 	bl	8005d80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a3c:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <xPortStartScheduler+0x134>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a42:	f000 f9d9 	bl	8005df8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <xPortStartScheduler+0x138>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a0f      	ldr	r2, [pc, #60]	; (8005a88 <xPortStartScheduler+0x138>)
 8005a4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a52:	f7ff ff69 	bl	8005928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a56:	f7ff f817 	bl	8004a88 <vTaskSwitchContext>
	prvTaskExitError();
 8005a5a:	f7ff ff23 	bl	80058a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed00 	.word	0xe000ed00
 8005a6c:	410fc271 	.word	0x410fc271
 8005a70:	410fc270 	.word	0x410fc270
 8005a74:	e000e400 	.word	0xe000e400
 8005a78:	20000e28 	.word	0x20000e28
 8005a7c:	20000e2c 	.word	0x20000e2c
 8005a80:	e000ed20 	.word	0xe000ed20
 8005a84:	200000ac 	.word	0x200000ac
 8005a88:	e000ef34 	.word	0xe000ef34

08005a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <vPortEnterCritical+0x54>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <vPortEnterCritical+0x54>)
 8005aac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <vPortEnterCritical+0x54>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d10e      	bne.n	8005ad4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <vPortEnterCritical+0x58>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <vPortEnterCritical+0x48>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	e7fe      	b.n	8005ad2 <vPortEnterCritical+0x46>
	}
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	200000ac 	.word	0x200000ac
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <vPortExitCritical+0x4c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <vPortExitCritical+0x22>
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	e7fe      	b.n	8005b08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <vPortExitCritical+0x4c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <vPortExitCritical+0x4c>)
 8005b12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <vPortExitCritical+0x4c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <vPortExitCritical+0x3e>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	200000ac 	.word	0x200000ac
	...

08005b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b40:	f3ef 8009 	mrs	r0, PSP
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <pxCurrentTCBConst>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	f01e 0f10 	tst.w	lr, #16
 8005b50:	bf08      	it	eq
 8005b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	6010      	str	r0, [r2, #0]
 8005b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b64:	f380 8811 	msr	BASEPRI, r0
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f7fe ff8a 	bl	8004a88 <vTaskSwitchContext>
 8005b74:	f04f 0000 	mov.w	r0, #0
 8005b78:	f380 8811 	msr	BASEPRI, r0
 8005b7c:	bc09      	pop	{r0, r3}
 8005b7e:	6819      	ldr	r1, [r3, #0]
 8005b80:	6808      	ldr	r0, [r1, #0]
 8005b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b86:	f01e 0f10 	tst.w	lr, #16
 8005b8a:	bf08      	it	eq
 8005b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b90:	f380 8809 	msr	PSP, r0
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	f3af 8000 	nop.w

08005ba0 <pxCurrentTCBConst>:
 8005ba0:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bc0:	f7fe feaa 	bl	8004918 <xTaskIncrementTick>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <xPortSysTickHandler+0x3c>)
 8005bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	4b5d      	ldr	r3, [pc, #372]	; (8005d68 <vPortSuppressTicksAndSleep+0x180>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d902      	bls.n	8005c00 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8005bfa:	4b5b      	ldr	r3, [pc, #364]	; (8005d68 <vPortSuppressTicksAndSleep+0x180>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8005c00:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a59      	ldr	r2, [pc, #356]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8005c0c:	4b58      	ldr	r3, [pc, #352]	; (8005d70 <vPortSuppressTicksAndSleep+0x188>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	4957      	ldr	r1, [pc, #348]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005c16:	6809      	ldr	r1, [r1, #0]
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8005c20:	4b55      	ldr	r3, [pc, #340]	; (8005d78 <vPortSuppressTicksAndSleep+0x190>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d904      	bls.n	8005c34 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8005c2a:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <vPortSuppressTicksAndSleep+0x190>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8005c34:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8005c36:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8005c3a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8005c3e:	f7ff f8f1 	bl	8004e24 <eTaskConfirmSleepModeStatus>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d110      	bne.n	8005c6a <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005c48:	4b49      	ldr	r3, [pc, #292]	; (8005d70 <vPortSuppressTicksAndSleep+0x188>)
 8005c4a:	4a4c      	ldr	r2, [pc, #304]	; (8005d7c <vPortSuppressTicksAndSleep+0x194>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005c50:	4b46      	ldr	r3, [pc, #280]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a45      	ldr	r2, [pc, #276]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8005c5c:	4b45      	ldr	r3, [pc, #276]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a46      	ldr	r2, [pc, #280]	; (8005d7c <vPortSuppressTicksAndSleep+0x194>)
 8005c62:	3b01      	subs	r3, #1
 8005c64:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8005c66:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8005c68:	e07a      	b.n	8005d60 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8005c6a:	4a44      	ldr	r2, [pc, #272]	; (8005d7c <vPortSuppressTicksAndSleep+0x194>)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c70:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <vPortSuppressTicksAndSleep+0x188>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005c76:	4b3d      	ldr	r3, [pc, #244]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fa fd06 	bl	800069c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8005c96:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8005c9a:	bf30      	wfi
				__asm volatile( "isb" );
 8005c9c:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fd04 	bl	80006b0 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8005ca8:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8005caa:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8005cae:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8005cb2:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8005cb4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8005cb8:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005cbe:	2206      	movs	r2, #6
 8005cc0:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8005cc2:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01d      	beq.n	8005d0a <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8005cce:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b27      	ldr	r3, [pc, #156]	; (8005d70 <vPortSuppressTicksAndSleep+0x188>)
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	1acb      	subs	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <vPortSuppressTicksAndSleep+0x190>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d304      	bcc.n	8005cf4 <vPortSuppressTicksAndSleep+0x10c>
 8005cea:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d903      	bls.n	8005cfc <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8005cf4:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <vPortSuppressTicksAndSleep+0x194>)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e018      	b.n	8005d3c <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	fb02 f203 	mul.w	r2, r2, r3
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <vPortSuppressTicksAndSleep+0x188>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8005d1c:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	4a11      	ldr	r2, [pc, #68]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	fb02 f203 	mul.w	r2, r2, r3
 8005d34:	4911      	ldr	r1, [pc, #68]	; (8005d7c <vPortSuppressTicksAndSleep+0x194>)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <vPortSuppressTicksAndSleep+0x188>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <vPortSuppressTicksAndSleep+0x184>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8005d4e:	69b8      	ldr	r0, [r7, #24]
 8005d50:	f7fe fdbc 	bl	80048cc <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <vPortSuppressTicksAndSleep+0x18c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <vPortSuppressTicksAndSleep+0x194>)
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8005d5e:	b662      	cpsie	i
	}
 8005d60:	bf00      	nop
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000e20 	.word	0x20000e20
 8005d6c:	e000e010 	.word	0xe000e010
 8005d70:	e000e018 	.word	0xe000e018
 8005d74:	20000e1c 	.word	0x20000e1c
 8005d78:	20000e24 	.word	0x20000e24
 8005d7c:	e000e014 	.word	0xe000e014

08005d80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <vPortSetupTimerInterrupt+0x58>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <vPortSetupTimerInterrupt+0x5c>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	099b      	lsrs	r3, r3, #6
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <vPortSetupTimerInterrupt+0x60>)
 8005d92:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <vPortSetupTimerInterrupt+0x60>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <vPortSetupTimerInterrupt+0x64>)
 8005da2:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <vPortSetupTimerInterrupt+0x68>)
 8005da6:	222d      	movs	r2, #45	; 0x2d
 8005da8:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <vPortSetupTimerInterrupt+0x6c>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005db0:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <vPortSetupTimerInterrupt+0x70>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005db6:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <vPortSetupTimerInterrupt+0x58>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <vPortSetupTimerInterrupt+0x5c>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <vPortSetupTimerInterrupt+0x74>)
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <vPortSetupTimerInterrupt+0x6c>)
 8005dca:	2207      	movs	r2, #7
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	200000a0 	.word	0x200000a0
 8005ddc:	10624dd3 	.word	0x10624dd3
 8005de0:	20000e1c 	.word	0x20000e1c
 8005de4:	20000e20 	.word	0x20000e20
 8005de8:	20000e24 	.word	0x20000e24
 8005dec:	e000e010 	.word	0xe000e010
 8005df0:	e000e018 	.word	0xe000e018
 8005df4:	e000e014 	.word	0xe000e014

08005df8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005df8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e08 <vPortEnableVFP+0x10>
 8005dfc:	6801      	ldr	r1, [r0, #0]
 8005dfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e02:	6001      	str	r1, [r0, #0]
 8005e04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e06:	bf00      	nop
 8005e08:	e000ed88 	.word	0xe000ed88

08005e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e12:	f3ef 8305 	mrs	r3, IPSR
 8005e16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b0f      	cmp	r3, #15
 8005e1c:	d913      	bls.n	8005e46 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e1e:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <vPortValidateInterruptPriority+0x6c>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e28:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <vPortValidateInterruptPriority+0x70>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	7afa      	ldrb	r2, [r7, #11]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d209      	bcs.n	8005e46 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
 8005e44:	e7fe      	b.n	8005e44 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e46:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <vPortValidateInterruptPriority+0x74>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <vPortValidateInterruptPriority+0x78>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d909      	bls.n	8005e6a <vPortValidateInterruptPriority+0x5e>
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	e7fe      	b.n	8005e68 <vPortValidateInterruptPriority+0x5c>
	}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	e000e3f0 	.word	0xe000e3f0
 8005e7c:	20000e28 	.word	0x20000e28
 8005e80:	e000ed0c 	.word	0xe000ed0c
 8005e84:	20000e2c 	.word	0x20000e2c

08005e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e94:	f7fe fc16 	bl	80046c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e98:	4b57      	ldr	r3, [pc, #348]	; (8005ff8 <pvPortMalloc+0x170>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ea0:	f000 f90c 	bl	80060bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ea4:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <pvPortMalloc+0x174>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f040 808c 	bne.w	8005fca <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01c      	beq.n	8005ef2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005eb8:	2208      	movs	r2, #8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d013      	beq.n	8005ef2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <pvPortMalloc+0x6a>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e7fe      	b.n	8005ef0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d068      	beq.n	8005fca <pvPortMalloc+0x142>
 8005ef8:	4b41      	ldr	r3, [pc, #260]	; (8006000 <pvPortMalloc+0x178>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d863      	bhi.n	8005fca <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f02:	4b40      	ldr	r3, [pc, #256]	; (8006004 <pvPortMalloc+0x17c>)
 8005f04:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f06:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <pvPortMalloc+0x17c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f0c:	e004      	b.n	8005f18 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d903      	bls.n	8005f2a <pvPortMalloc+0xa2>
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f1      	bne.n	8005f0e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f2a:	4b33      	ldr	r3, [pc, #204]	; (8005ff8 <pvPortMalloc+0x170>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d04a      	beq.n	8005fca <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	4413      	add	r3, r2
 8005f3c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	1ad2      	subs	r2, r2, r3
 8005f4e:	2308      	movs	r3, #8
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d91e      	bls.n	8005f94 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <pvPortMalloc+0xf4>
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e7fe      	b.n	8005f7a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f8e:	69b8      	ldr	r0, [r7, #24]
 8005f90:	f000 f8f6 	bl	8006180 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f94:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <pvPortMalloc+0x178>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <pvPortMalloc+0x178>)
 8005fa0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <pvPortMalloc+0x178>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <pvPortMalloc+0x180>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d203      	bcs.n	8005fb6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <pvPortMalloc+0x178>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a15      	ldr	r2, [pc, #84]	; (8006008 <pvPortMalloc+0x180>)
 8005fb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <pvPortMalloc+0x174>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fca:	f7fe fbc1 	bl	8004750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <pvPortMalloc+0x164>
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e7fe      	b.n	8005fea <pvPortMalloc+0x162>
	return pvReturn;
 8005fec:	69fb      	ldr	r3, [r7, #28]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3728      	adds	r7, #40	; 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20004a38 	.word	0x20004a38
 8005ffc:	20004a44 	.word	0x20004a44
 8006000:	20004a3c 	.word	0x20004a3c
 8006004:	20004a30 	.word	0x20004a30
 8006008:	20004a40 	.word	0x20004a40

0800600c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d046      	beq.n	80060ac <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800601e:	2308      	movs	r3, #8
 8006020:	425b      	negs	r3, r3
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4413      	add	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	4b20      	ldr	r3, [pc, #128]	; (80060b4 <vPortFree+0xa8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4013      	ands	r3, r2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <vPortFree+0x42>
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e7fe      	b.n	800604c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <vPortFree+0x5e>
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	e7fe      	b.n	8006068 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <vPortFree+0xa8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d019      	beq.n	80060ac <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d115      	bne.n	80060ac <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <vPortFree+0xa8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006090:	f7fe fb18 	bl	80046c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <vPortFree+0xac>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4413      	add	r3, r2
 800609e:	4a06      	ldr	r2, [pc, #24]	; (80060b8 <vPortFree+0xac>)
 80060a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060a2:	6938      	ldr	r0, [r7, #16]
 80060a4:	f000 f86c 	bl	8006180 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060a8:	f7fe fb52 	bl	8004750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060ac:	bf00      	nop
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20004a44 	.word	0x20004a44
 80060b8:	20004a3c 	.word	0x20004a3c

080060bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060c8:	4b27      	ldr	r3, [pc, #156]	; (8006168 <prvHeapInit+0xac>)
 80060ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3307      	adds	r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <prvHeapInit+0xac>)
 80060ec:	4413      	add	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <prvHeapInit+0xb0>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060fa:	4b1c      	ldr	r3, [pc, #112]	; (800616c <prvHeapInit+0xb0>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4413      	add	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006108:	2208      	movs	r2, #8
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0307 	bic.w	r3, r3, #7
 8006116:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a15      	ldr	r2, [pc, #84]	; (8006170 <prvHeapInit+0xb4>)
 800611c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <prvHeapInit+0xb4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <prvHeapInit+0xb4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	1ad2      	subs	r2, r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <prvHeapInit+0xb4>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <prvHeapInit+0xb8>)
 800614a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4a09      	ldr	r2, [pc, #36]	; (8006178 <prvHeapInit+0xbc>)
 8006152:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <prvHeapInit+0xc0>)
 8006156:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800615a:	601a      	str	r2, [r3, #0]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	20000e30 	.word	0x20000e30
 800616c:	20004a30 	.word	0x20004a30
 8006170:	20004a38 	.word	0x20004a38
 8006174:	20004a40 	.word	0x20004a40
 8006178:	20004a3c 	.word	0x20004a3c
 800617c:	20004a44 	.word	0x20004a44

08006180 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <prvInsertBlockIntoFreeList+0xac>)
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e002      	b.n	8006194 <prvInsertBlockIntoFreeList+0x14>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	429a      	cmp	r2, r3
 800619c:	d8f7      	bhi.n	800618e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4413      	add	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d108      	bne.n	80061c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d118      	bne.n	8006208 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <prvInsertBlockIntoFreeList+0xb0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d00d      	beq.n	80061fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	441a      	add	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e008      	b.n	8006210 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvInsertBlockIntoFreeList+0xb0>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e003      	b.n	8006210 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d002      	beq.n	800621e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20004a30 	.word	0x20004a30
 8006230:	20004a38 	.word	0x20004a38

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	; (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	200000b0 	.word	0x200000b0

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4e0d      	ldr	r6, [pc, #52]	; (8006278 <__libc_init_array+0x38>)
 8006244:	4c0d      	ldr	r4, [pc, #52]	; (800627c <__libc_init_array+0x3c>)
 8006246:	1ba4      	subs	r4, r4, r6
 8006248:	10a4      	asrs	r4, r4, #2
 800624a:	2500      	movs	r5, #0
 800624c:	42a5      	cmp	r5, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	4e0b      	ldr	r6, [pc, #44]	; (8006280 <__libc_init_array+0x40>)
 8006252:	4c0c      	ldr	r4, [pc, #48]	; (8006284 <__libc_init_array+0x44>)
 8006254:	f000 fc28 	bl	8006aa8 <_init>
 8006258:	1ba4      	subs	r4, r4, r6
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	2500      	movs	r5, #0
 800625e:	42a5      	cmp	r5, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006268:	4798      	blx	r3
 800626a:	3501      	adds	r5, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006272:	4798      	blx	r3
 8006274:	3501      	adds	r5, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	08006c94 	.word	0x08006c94
 800627c:	08006c94 	.word	0x08006c94
 8006280:	08006c94 	.word	0x08006c94
 8006284:	08006c98 	.word	0x08006c98

08006288 <memcpy>:
 8006288:	b510      	push	{r4, lr}
 800628a:	1e43      	subs	r3, r0, #1
 800628c:	440a      	add	r2, r1
 800628e:	4291      	cmp	r1, r2
 8006290:	d100      	bne.n	8006294 <memcpy+0xc>
 8006292:	bd10      	pop	{r4, pc}
 8006294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800629c:	e7f7      	b.n	800628e <memcpy+0x6>

0800629e <memset>:
 800629e:	4402      	add	r2, r0
 80062a0:	4603      	mov	r3, r0
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d100      	bne.n	80062a8 <memset+0xa>
 80062a6:	4770      	bx	lr
 80062a8:	f803 1b01 	strb.w	r1, [r3], #1
 80062ac:	e7f9      	b.n	80062a2 <memset+0x4>
	...

080062b0 <_free_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4605      	mov	r5, r0
 80062b4:	2900      	cmp	r1, #0
 80062b6:	d045      	beq.n	8006344 <_free_r+0x94>
 80062b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062bc:	1f0c      	subs	r4, r1, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfb8      	it	lt
 80062c2:	18e4      	addlt	r4, r4, r3
 80062c4:	f000 f8cc 	bl	8006460 <__malloc_lock>
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <_free_r+0x98>)
 80062ca:	6813      	ldr	r3, [r2, #0]
 80062cc:	4610      	mov	r0, r2
 80062ce:	b933      	cbnz	r3, 80062de <_free_r+0x2e>
 80062d0:	6063      	str	r3, [r4, #4]
 80062d2:	6014      	str	r4, [r2, #0]
 80062d4:	4628      	mov	r0, r5
 80062d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062da:	f000 b8c2 	b.w	8006462 <__malloc_unlock>
 80062de:	42a3      	cmp	r3, r4
 80062e0:	d90c      	bls.n	80062fc <_free_r+0x4c>
 80062e2:	6821      	ldr	r1, [r4, #0]
 80062e4:	1862      	adds	r2, r4, r1
 80062e6:	4293      	cmp	r3, r2
 80062e8:	bf04      	itt	eq
 80062ea:	681a      	ldreq	r2, [r3, #0]
 80062ec:	685b      	ldreq	r3, [r3, #4]
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	bf04      	itt	eq
 80062f2:	1852      	addeq	r2, r2, r1
 80062f4:	6022      	streq	r2, [r4, #0]
 80062f6:	6004      	str	r4, [r0, #0]
 80062f8:	e7ec      	b.n	80062d4 <_free_r+0x24>
 80062fa:	4613      	mov	r3, r2
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	b10a      	cbz	r2, 8006304 <_free_r+0x54>
 8006300:	42a2      	cmp	r2, r4
 8006302:	d9fa      	bls.n	80062fa <_free_r+0x4a>
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	1858      	adds	r0, r3, r1
 8006308:	42a0      	cmp	r0, r4
 800630a:	d10b      	bne.n	8006324 <_free_r+0x74>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	4401      	add	r1, r0
 8006310:	1858      	adds	r0, r3, r1
 8006312:	4282      	cmp	r2, r0
 8006314:	6019      	str	r1, [r3, #0]
 8006316:	d1dd      	bne.n	80062d4 <_free_r+0x24>
 8006318:	6810      	ldr	r0, [r2, #0]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	4401      	add	r1, r0
 8006320:	6019      	str	r1, [r3, #0]
 8006322:	e7d7      	b.n	80062d4 <_free_r+0x24>
 8006324:	d902      	bls.n	800632c <_free_r+0x7c>
 8006326:	230c      	movs	r3, #12
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	e7d3      	b.n	80062d4 <_free_r+0x24>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	1821      	adds	r1, r4, r0
 8006330:	428a      	cmp	r2, r1
 8006332:	bf04      	itt	eq
 8006334:	6811      	ldreq	r1, [r2, #0]
 8006336:	6852      	ldreq	r2, [r2, #4]
 8006338:	6062      	str	r2, [r4, #4]
 800633a:	bf04      	itt	eq
 800633c:	1809      	addeq	r1, r1, r0
 800633e:	6021      	streq	r1, [r4, #0]
 8006340:	605c      	str	r4, [r3, #4]
 8006342:	e7c7      	b.n	80062d4 <_free_r+0x24>
 8006344:	bd38      	pop	{r3, r4, r5, pc}
 8006346:	bf00      	nop
 8006348:	20004a48 	.word	0x20004a48

0800634c <_malloc_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	1ccd      	adds	r5, r1, #3
 8006350:	f025 0503 	bic.w	r5, r5, #3
 8006354:	3508      	adds	r5, #8
 8006356:	2d0c      	cmp	r5, #12
 8006358:	bf38      	it	cc
 800635a:	250c      	movcc	r5, #12
 800635c:	2d00      	cmp	r5, #0
 800635e:	4606      	mov	r6, r0
 8006360:	db01      	blt.n	8006366 <_malloc_r+0x1a>
 8006362:	42a9      	cmp	r1, r5
 8006364:	d903      	bls.n	800636e <_malloc_r+0x22>
 8006366:	230c      	movs	r3, #12
 8006368:	6033      	str	r3, [r6, #0]
 800636a:	2000      	movs	r0, #0
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	f000 f877 	bl	8006460 <__malloc_lock>
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <_malloc_r+0xac>)
 8006374:	6814      	ldr	r4, [r2, #0]
 8006376:	4621      	mov	r1, r4
 8006378:	b991      	cbnz	r1, 80063a0 <_malloc_r+0x54>
 800637a:	4c20      	ldr	r4, [pc, #128]	; (80063fc <_malloc_r+0xb0>)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	b91b      	cbnz	r3, 8006388 <_malloc_r+0x3c>
 8006380:	4630      	mov	r0, r6
 8006382:	f000 f83d 	bl	8006400 <_sbrk_r>
 8006386:	6020      	str	r0, [r4, #0]
 8006388:	4629      	mov	r1, r5
 800638a:	4630      	mov	r0, r6
 800638c:	f000 f838 	bl	8006400 <_sbrk_r>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d124      	bne.n	80063de <_malloc_r+0x92>
 8006394:	230c      	movs	r3, #12
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	4630      	mov	r0, r6
 800639a:	f000 f862 	bl	8006462 <__malloc_unlock>
 800639e:	e7e4      	b.n	800636a <_malloc_r+0x1e>
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	1b5b      	subs	r3, r3, r5
 80063a4:	d418      	bmi.n	80063d8 <_malloc_r+0x8c>
 80063a6:	2b0b      	cmp	r3, #11
 80063a8:	d90f      	bls.n	80063ca <_malloc_r+0x7e>
 80063aa:	600b      	str	r3, [r1, #0]
 80063ac:	50cd      	str	r5, [r1, r3]
 80063ae:	18cc      	adds	r4, r1, r3
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f856 	bl	8006462 <__malloc_unlock>
 80063b6:	f104 000b 	add.w	r0, r4, #11
 80063ba:	1d23      	adds	r3, r4, #4
 80063bc:	f020 0007 	bic.w	r0, r0, #7
 80063c0:	1ac3      	subs	r3, r0, r3
 80063c2:	d0d3      	beq.n	800636c <_malloc_r+0x20>
 80063c4:	425a      	negs	r2, r3
 80063c6:	50e2      	str	r2, [r4, r3]
 80063c8:	e7d0      	b.n	800636c <_malloc_r+0x20>
 80063ca:	428c      	cmp	r4, r1
 80063cc:	684b      	ldr	r3, [r1, #4]
 80063ce:	bf16      	itet	ne
 80063d0:	6063      	strne	r3, [r4, #4]
 80063d2:	6013      	streq	r3, [r2, #0]
 80063d4:	460c      	movne	r4, r1
 80063d6:	e7eb      	b.n	80063b0 <_malloc_r+0x64>
 80063d8:	460c      	mov	r4, r1
 80063da:	6849      	ldr	r1, [r1, #4]
 80063dc:	e7cc      	b.n	8006378 <_malloc_r+0x2c>
 80063de:	1cc4      	adds	r4, r0, #3
 80063e0:	f024 0403 	bic.w	r4, r4, #3
 80063e4:	42a0      	cmp	r0, r4
 80063e6:	d005      	beq.n	80063f4 <_malloc_r+0xa8>
 80063e8:	1a21      	subs	r1, r4, r0
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 f808 	bl	8006400 <_sbrk_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d0cf      	beq.n	8006394 <_malloc_r+0x48>
 80063f4:	6025      	str	r5, [r4, #0]
 80063f6:	e7db      	b.n	80063b0 <_malloc_r+0x64>
 80063f8:	20004a48 	.word	0x20004a48
 80063fc:	20004a4c 	.word	0x20004a4c

08006400 <_sbrk_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4c06      	ldr	r4, [pc, #24]	; (800641c <_sbrk_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4605      	mov	r5, r0
 8006408:	4608      	mov	r0, r1
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	f7fb f9a4 	bl	8001758 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_sbrk_r+0x1a>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	b103      	cbz	r3, 800641a <_sbrk_r+0x1a>
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20004d08 	.word	0x20004d08

08006420 <siprintf>:
 8006420:	b40e      	push	{r1, r2, r3}
 8006422:	b500      	push	{lr}
 8006424:	b09c      	sub	sp, #112	; 0x70
 8006426:	ab1d      	add	r3, sp, #116	; 0x74
 8006428:	9002      	str	r0, [sp, #8]
 800642a:	9006      	str	r0, [sp, #24]
 800642c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006430:	4809      	ldr	r0, [pc, #36]	; (8006458 <siprintf+0x38>)
 8006432:	9107      	str	r1, [sp, #28]
 8006434:	9104      	str	r1, [sp, #16]
 8006436:	4909      	ldr	r1, [pc, #36]	; (800645c <siprintf+0x3c>)
 8006438:	f853 2b04 	ldr.w	r2, [r3], #4
 800643c:	9105      	str	r1, [sp, #20]
 800643e:	6800      	ldr	r0, [r0, #0]
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	a902      	add	r1, sp, #8
 8006444:	f000 f868 	bl	8006518 <_svfiprintf_r>
 8006448:	9b02      	ldr	r3, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	b01c      	add	sp, #112	; 0x70
 8006450:	f85d eb04 	ldr.w	lr, [sp], #4
 8006454:	b003      	add	sp, #12
 8006456:	4770      	bx	lr
 8006458:	200000b0 	.word	0x200000b0
 800645c:	ffff0208 	.word	0xffff0208

08006460 <__malloc_lock>:
 8006460:	4770      	bx	lr

08006462 <__malloc_unlock>:
 8006462:	4770      	bx	lr

08006464 <__ssputs_r>:
 8006464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	688e      	ldr	r6, [r1, #8]
 800646a:	429e      	cmp	r6, r3
 800646c:	4682      	mov	sl, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4690      	mov	r8, r2
 8006472:	4699      	mov	r9, r3
 8006474:	d837      	bhi.n	80064e6 <__ssputs_r+0x82>
 8006476:	898a      	ldrh	r2, [r1, #12]
 8006478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800647c:	d031      	beq.n	80064e2 <__ssputs_r+0x7e>
 800647e:	6825      	ldr	r5, [r4, #0]
 8006480:	6909      	ldr	r1, [r1, #16]
 8006482:	1a6f      	subs	r7, r5, r1
 8006484:	6965      	ldr	r5, [r4, #20]
 8006486:	2302      	movs	r3, #2
 8006488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800648c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006490:	f109 0301 	add.w	r3, r9, #1
 8006494:	443b      	add	r3, r7
 8006496:	429d      	cmp	r5, r3
 8006498:	bf38      	it	cc
 800649a:	461d      	movcc	r5, r3
 800649c:	0553      	lsls	r3, r2, #21
 800649e:	d530      	bpl.n	8006502 <__ssputs_r+0x9e>
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7ff ff53 	bl	800634c <_malloc_r>
 80064a6:	4606      	mov	r6, r0
 80064a8:	b950      	cbnz	r0, 80064c0 <__ssputs_r+0x5c>
 80064aa:	230c      	movs	r3, #12
 80064ac:	f8ca 3000 	str.w	r3, [sl]
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c0:	463a      	mov	r2, r7
 80064c2:	6921      	ldr	r1, [r4, #16]
 80064c4:	f7ff fee0 	bl	8006288 <memcpy>
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	6126      	str	r6, [r4, #16]
 80064d6:	6165      	str	r5, [r4, #20]
 80064d8:	443e      	add	r6, r7
 80064da:	1bed      	subs	r5, r5, r7
 80064dc:	6026      	str	r6, [r4, #0]
 80064de:	60a5      	str	r5, [r4, #8]
 80064e0:	464e      	mov	r6, r9
 80064e2:	454e      	cmp	r6, r9
 80064e4:	d900      	bls.n	80064e8 <__ssputs_r+0x84>
 80064e6:	464e      	mov	r6, r9
 80064e8:	4632      	mov	r2, r6
 80064ea:	4641      	mov	r1, r8
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	f000 fa93 	bl	8006a18 <memmove>
 80064f2:	68a3      	ldr	r3, [r4, #8]
 80064f4:	1b9b      	subs	r3, r3, r6
 80064f6:	60a3      	str	r3, [r4, #8]
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	441e      	add	r6, r3
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	2000      	movs	r0, #0
 8006500:	e7dc      	b.n	80064bc <__ssputs_r+0x58>
 8006502:	462a      	mov	r2, r5
 8006504:	f000 faa1 	bl	8006a4a <_realloc_r>
 8006508:	4606      	mov	r6, r0
 800650a:	2800      	cmp	r0, #0
 800650c:	d1e2      	bne.n	80064d4 <__ssputs_r+0x70>
 800650e:	6921      	ldr	r1, [r4, #16]
 8006510:	4650      	mov	r0, sl
 8006512:	f7ff fecd 	bl	80062b0 <_free_r>
 8006516:	e7c8      	b.n	80064aa <__ssputs_r+0x46>

08006518 <_svfiprintf_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	461d      	mov	r5, r3
 800651e:	898b      	ldrh	r3, [r1, #12]
 8006520:	061f      	lsls	r7, r3, #24
 8006522:	b09d      	sub	sp, #116	; 0x74
 8006524:	4680      	mov	r8, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4616      	mov	r6, r2
 800652a:	d50f      	bpl.n	800654c <_svfiprintf_r+0x34>
 800652c:	690b      	ldr	r3, [r1, #16]
 800652e:	b96b      	cbnz	r3, 800654c <_svfiprintf_r+0x34>
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	f7ff ff0b 	bl	800634c <_malloc_r>
 8006536:	6020      	str	r0, [r4, #0]
 8006538:	6120      	str	r0, [r4, #16]
 800653a:	b928      	cbnz	r0, 8006548 <_svfiprintf_r+0x30>
 800653c:	230c      	movs	r3, #12
 800653e:	f8c8 3000 	str.w	r3, [r8]
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	e0c8      	b.n	80066da <_svfiprintf_r+0x1c2>
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	6163      	str	r3, [r4, #20]
 800654c:	2300      	movs	r3, #0
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	2320      	movs	r3, #32
 8006552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006556:	2330      	movs	r3, #48	; 0x30
 8006558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800655c:	9503      	str	r5, [sp, #12]
 800655e:	f04f 0b01 	mov.w	fp, #1
 8006562:	4637      	mov	r7, r6
 8006564:	463d      	mov	r5, r7
 8006566:	f815 3b01 	ldrb.w	r3, [r5], #1
 800656a:	b10b      	cbz	r3, 8006570 <_svfiprintf_r+0x58>
 800656c:	2b25      	cmp	r3, #37	; 0x25
 800656e:	d13e      	bne.n	80065ee <_svfiprintf_r+0xd6>
 8006570:	ebb7 0a06 	subs.w	sl, r7, r6
 8006574:	d00b      	beq.n	800658e <_svfiprintf_r+0x76>
 8006576:	4653      	mov	r3, sl
 8006578:	4632      	mov	r2, r6
 800657a:	4621      	mov	r1, r4
 800657c:	4640      	mov	r0, r8
 800657e:	f7ff ff71 	bl	8006464 <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80a4 	beq.w	80066d0 <_svfiprintf_r+0x1b8>
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	4453      	add	r3, sl
 800658c:	9309      	str	r3, [sp, #36]	; 0x24
 800658e:	783b      	ldrb	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 809d 	beq.w	80066d0 <_svfiprintf_r+0x1b8>
 8006596:	2300      	movs	r3, #0
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065a8:	931a      	str	r3, [sp, #104]	; 0x68
 80065aa:	462f      	mov	r7, r5
 80065ac:	2205      	movs	r2, #5
 80065ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065b2:	4850      	ldr	r0, [pc, #320]	; (80066f4 <_svfiprintf_r+0x1dc>)
 80065b4:	f7f9 fe0c 	bl	80001d0 <memchr>
 80065b8:	9b04      	ldr	r3, [sp, #16]
 80065ba:	b9d0      	cbnz	r0, 80065f2 <_svfiprintf_r+0xda>
 80065bc:	06d9      	lsls	r1, r3, #27
 80065be:	bf44      	itt	mi
 80065c0:	2220      	movmi	r2, #32
 80065c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065c6:	071a      	lsls	r2, r3, #28
 80065c8:	bf44      	itt	mi
 80065ca:	222b      	movmi	r2, #43	; 0x2b
 80065cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065d0:	782a      	ldrb	r2, [r5, #0]
 80065d2:	2a2a      	cmp	r2, #42	; 0x2a
 80065d4:	d015      	beq.n	8006602 <_svfiprintf_r+0xea>
 80065d6:	9a07      	ldr	r2, [sp, #28]
 80065d8:	462f      	mov	r7, r5
 80065da:	2000      	movs	r0, #0
 80065dc:	250a      	movs	r5, #10
 80065de:	4639      	mov	r1, r7
 80065e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e4:	3b30      	subs	r3, #48	; 0x30
 80065e6:	2b09      	cmp	r3, #9
 80065e8:	d94d      	bls.n	8006686 <_svfiprintf_r+0x16e>
 80065ea:	b1b8      	cbz	r0, 800661c <_svfiprintf_r+0x104>
 80065ec:	e00f      	b.n	800660e <_svfiprintf_r+0xf6>
 80065ee:	462f      	mov	r7, r5
 80065f0:	e7b8      	b.n	8006564 <_svfiprintf_r+0x4c>
 80065f2:	4a40      	ldr	r2, [pc, #256]	; (80066f4 <_svfiprintf_r+0x1dc>)
 80065f4:	1a80      	subs	r0, r0, r2
 80065f6:	fa0b f000 	lsl.w	r0, fp, r0
 80065fa:	4318      	orrs	r0, r3
 80065fc:	9004      	str	r0, [sp, #16]
 80065fe:	463d      	mov	r5, r7
 8006600:	e7d3      	b.n	80065aa <_svfiprintf_r+0x92>
 8006602:	9a03      	ldr	r2, [sp, #12]
 8006604:	1d11      	adds	r1, r2, #4
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	9103      	str	r1, [sp, #12]
 800660a:	2a00      	cmp	r2, #0
 800660c:	db01      	blt.n	8006612 <_svfiprintf_r+0xfa>
 800660e:	9207      	str	r2, [sp, #28]
 8006610:	e004      	b.n	800661c <_svfiprintf_r+0x104>
 8006612:	4252      	negs	r2, r2
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	9207      	str	r2, [sp, #28]
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	783b      	ldrb	r3, [r7, #0]
 800661e:	2b2e      	cmp	r3, #46	; 0x2e
 8006620:	d10c      	bne.n	800663c <_svfiprintf_r+0x124>
 8006622:	787b      	ldrb	r3, [r7, #1]
 8006624:	2b2a      	cmp	r3, #42	; 0x2a
 8006626:	d133      	bne.n	8006690 <_svfiprintf_r+0x178>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	1d1a      	adds	r2, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	9203      	str	r2, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bfb8      	it	lt
 8006634:	f04f 33ff 	movlt.w	r3, #4294967295
 8006638:	3702      	adds	r7, #2
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	4d2e      	ldr	r5, [pc, #184]	; (80066f8 <_svfiprintf_r+0x1e0>)
 800663e:	7839      	ldrb	r1, [r7, #0]
 8006640:	2203      	movs	r2, #3
 8006642:	4628      	mov	r0, r5
 8006644:	f7f9 fdc4 	bl	80001d0 <memchr>
 8006648:	b138      	cbz	r0, 800665a <_svfiprintf_r+0x142>
 800664a:	2340      	movs	r3, #64	; 0x40
 800664c:	1b40      	subs	r0, r0, r5
 800664e:	fa03 f000 	lsl.w	r0, r3, r0
 8006652:	9b04      	ldr	r3, [sp, #16]
 8006654:	4303      	orrs	r3, r0
 8006656:	3701      	adds	r7, #1
 8006658:	9304      	str	r3, [sp, #16]
 800665a:	7839      	ldrb	r1, [r7, #0]
 800665c:	4827      	ldr	r0, [pc, #156]	; (80066fc <_svfiprintf_r+0x1e4>)
 800665e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006662:	2206      	movs	r2, #6
 8006664:	1c7e      	adds	r6, r7, #1
 8006666:	f7f9 fdb3 	bl	80001d0 <memchr>
 800666a:	2800      	cmp	r0, #0
 800666c:	d038      	beq.n	80066e0 <_svfiprintf_r+0x1c8>
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <_svfiprintf_r+0x1e8>)
 8006670:	bb13      	cbnz	r3, 80066b8 <_svfiprintf_r+0x1a0>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	3307      	adds	r3, #7
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	3308      	adds	r3, #8
 800667c:	9303      	str	r3, [sp, #12]
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	444b      	add	r3, r9
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	e76d      	b.n	8006562 <_svfiprintf_r+0x4a>
 8006686:	fb05 3202 	mla	r2, r5, r2, r3
 800668a:	2001      	movs	r0, #1
 800668c:	460f      	mov	r7, r1
 800668e:	e7a6      	b.n	80065de <_svfiprintf_r+0xc6>
 8006690:	2300      	movs	r3, #0
 8006692:	3701      	adds	r7, #1
 8006694:	9305      	str	r3, [sp, #20]
 8006696:	4619      	mov	r1, r3
 8006698:	250a      	movs	r5, #10
 800669a:	4638      	mov	r0, r7
 800669c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a0:	3a30      	subs	r2, #48	; 0x30
 80066a2:	2a09      	cmp	r2, #9
 80066a4:	d903      	bls.n	80066ae <_svfiprintf_r+0x196>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0c8      	beq.n	800663c <_svfiprintf_r+0x124>
 80066aa:	9105      	str	r1, [sp, #20]
 80066ac:	e7c6      	b.n	800663c <_svfiprintf_r+0x124>
 80066ae:	fb05 2101 	mla	r1, r5, r1, r2
 80066b2:	2301      	movs	r3, #1
 80066b4:	4607      	mov	r7, r0
 80066b6:	e7f0      	b.n	800669a <_svfiprintf_r+0x182>
 80066b8:	ab03      	add	r3, sp, #12
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4622      	mov	r2, r4
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <_svfiprintf_r+0x1ec>)
 80066c0:	a904      	add	r1, sp, #16
 80066c2:	4640      	mov	r0, r8
 80066c4:	f3af 8000 	nop.w
 80066c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066cc:	4681      	mov	r9, r0
 80066ce:	d1d6      	bne.n	800667e <_svfiprintf_r+0x166>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	065b      	lsls	r3, r3, #25
 80066d4:	f53f af35 	bmi.w	8006542 <_svfiprintf_r+0x2a>
 80066d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066da:	b01d      	add	sp, #116	; 0x74
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	ab03      	add	r3, sp, #12
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4622      	mov	r2, r4
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <_svfiprintf_r+0x1ec>)
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	4640      	mov	r0, r8
 80066ec:	f000 f882 	bl	80067f4 <_printf_i>
 80066f0:	e7ea      	b.n	80066c8 <_svfiprintf_r+0x1b0>
 80066f2:	bf00      	nop
 80066f4:	08006c58 	.word	0x08006c58
 80066f8:	08006c5e 	.word	0x08006c5e
 80066fc:	08006c62 	.word	0x08006c62
 8006700:	00000000 	.word	0x00000000
 8006704:	08006465 	.word	0x08006465

08006708 <_printf_common>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	4691      	mov	r9, r2
 800670e:	461f      	mov	r7, r3
 8006710:	688a      	ldr	r2, [r1, #8]
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006718:	4293      	cmp	r3, r2
 800671a:	bfb8      	it	lt
 800671c:	4613      	movlt	r3, r2
 800671e:	f8c9 3000 	str.w	r3, [r9]
 8006722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006726:	4606      	mov	r6, r0
 8006728:	460c      	mov	r4, r1
 800672a:	b112      	cbz	r2, 8006732 <_printf_common+0x2a>
 800672c:	3301      	adds	r3, #1
 800672e:	f8c9 3000 	str.w	r3, [r9]
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	0699      	lsls	r1, r3, #26
 8006736:	bf42      	ittt	mi
 8006738:	f8d9 3000 	ldrmi.w	r3, [r9]
 800673c:	3302      	addmi	r3, #2
 800673e:	f8c9 3000 	strmi.w	r3, [r9]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d107      	bne.n	800675a <_printf_common+0x52>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	f8d9 2000 	ldr.w	r2, [r9]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	42ab      	cmp	r3, r5
 8006758:	dc28      	bgt.n	80067ac <_printf_common+0xa4>
 800675a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	3300      	adds	r3, #0
 8006762:	bf18      	it	ne
 8006764:	2301      	movne	r3, #1
 8006766:	0692      	lsls	r2, r2, #26
 8006768:	d42d      	bmi.n	80067c6 <_printf_common+0xbe>
 800676a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800676e:	4639      	mov	r1, r7
 8006770:	4630      	mov	r0, r6
 8006772:	47c0      	blx	r8
 8006774:	3001      	adds	r0, #1
 8006776:	d020      	beq.n	80067ba <_printf_common+0xb2>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	68e5      	ldr	r5, [r4, #12]
 800677c:	f8d9 2000 	ldr.w	r2, [r9]
 8006780:	f003 0306 	and.w	r3, r3, #6
 8006784:	2b04      	cmp	r3, #4
 8006786:	bf08      	it	eq
 8006788:	1aad      	subeq	r5, r5, r2
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	6922      	ldr	r2, [r4, #16]
 800678e:	bf0c      	ite	eq
 8006790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006794:	2500      	movne	r5, #0
 8006796:	4293      	cmp	r3, r2
 8006798:	bfc4      	itt	gt
 800679a:	1a9b      	subgt	r3, r3, r2
 800679c:	18ed      	addgt	r5, r5, r3
 800679e:	f04f 0900 	mov.w	r9, #0
 80067a2:	341a      	adds	r4, #26
 80067a4:	454d      	cmp	r5, r9
 80067a6:	d11a      	bne.n	80067de <_printf_common+0xd6>
 80067a8:	2000      	movs	r0, #0
 80067aa:	e008      	b.n	80067be <_printf_common+0xb6>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4652      	mov	r2, sl
 80067b0:	4639      	mov	r1, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	47c0      	blx	r8
 80067b6:	3001      	adds	r0, #1
 80067b8:	d103      	bne.n	80067c2 <_printf_common+0xba>
 80067ba:	f04f 30ff 	mov.w	r0, #4294967295
 80067be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c2:	3501      	adds	r5, #1
 80067c4:	e7c3      	b.n	800674e <_printf_common+0x46>
 80067c6:	18e1      	adds	r1, r4, r3
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	2030      	movs	r0, #48	; 0x30
 80067cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d0:	4422      	add	r2, r4
 80067d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067da:	3302      	adds	r3, #2
 80067dc:	e7c5      	b.n	800676a <_printf_common+0x62>
 80067de:	2301      	movs	r3, #1
 80067e0:	4622      	mov	r2, r4
 80067e2:	4639      	mov	r1, r7
 80067e4:	4630      	mov	r0, r6
 80067e6:	47c0      	blx	r8
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0e6      	beq.n	80067ba <_printf_common+0xb2>
 80067ec:	f109 0901 	add.w	r9, r9, #1
 80067f0:	e7d8      	b.n	80067a4 <_printf_common+0x9c>
	...

080067f4 <_printf_i>:
 80067f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067fc:	460c      	mov	r4, r1
 80067fe:	7e09      	ldrb	r1, [r1, #24]
 8006800:	b085      	sub	sp, #20
 8006802:	296e      	cmp	r1, #110	; 0x6e
 8006804:	4617      	mov	r7, r2
 8006806:	4606      	mov	r6, r0
 8006808:	4698      	mov	r8, r3
 800680a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800680c:	f000 80b3 	beq.w	8006976 <_printf_i+0x182>
 8006810:	d822      	bhi.n	8006858 <_printf_i+0x64>
 8006812:	2963      	cmp	r1, #99	; 0x63
 8006814:	d036      	beq.n	8006884 <_printf_i+0x90>
 8006816:	d80a      	bhi.n	800682e <_printf_i+0x3a>
 8006818:	2900      	cmp	r1, #0
 800681a:	f000 80b9 	beq.w	8006990 <_printf_i+0x19c>
 800681e:	2958      	cmp	r1, #88	; 0x58
 8006820:	f000 8083 	beq.w	800692a <_printf_i+0x136>
 8006824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006828:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800682c:	e032      	b.n	8006894 <_printf_i+0xa0>
 800682e:	2964      	cmp	r1, #100	; 0x64
 8006830:	d001      	beq.n	8006836 <_printf_i+0x42>
 8006832:	2969      	cmp	r1, #105	; 0x69
 8006834:	d1f6      	bne.n	8006824 <_printf_i+0x30>
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	6813      	ldr	r3, [r2, #0]
 800683a:	0605      	lsls	r5, r0, #24
 800683c:	f103 0104 	add.w	r1, r3, #4
 8006840:	d52a      	bpl.n	8006898 <_printf_i+0xa4>
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da03      	bge.n	8006852 <_printf_i+0x5e>
 800684a:	222d      	movs	r2, #45	; 0x2d
 800684c:	425b      	negs	r3, r3
 800684e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006852:	486f      	ldr	r0, [pc, #444]	; (8006a10 <_printf_i+0x21c>)
 8006854:	220a      	movs	r2, #10
 8006856:	e039      	b.n	80068cc <_printf_i+0xd8>
 8006858:	2973      	cmp	r1, #115	; 0x73
 800685a:	f000 809d 	beq.w	8006998 <_printf_i+0x1a4>
 800685e:	d808      	bhi.n	8006872 <_printf_i+0x7e>
 8006860:	296f      	cmp	r1, #111	; 0x6f
 8006862:	d020      	beq.n	80068a6 <_printf_i+0xb2>
 8006864:	2970      	cmp	r1, #112	; 0x70
 8006866:	d1dd      	bne.n	8006824 <_printf_i+0x30>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	f043 0320 	orr.w	r3, r3, #32
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	e003      	b.n	800687a <_printf_i+0x86>
 8006872:	2975      	cmp	r1, #117	; 0x75
 8006874:	d017      	beq.n	80068a6 <_printf_i+0xb2>
 8006876:	2978      	cmp	r1, #120	; 0x78
 8006878:	d1d4      	bne.n	8006824 <_printf_i+0x30>
 800687a:	2378      	movs	r3, #120	; 0x78
 800687c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006880:	4864      	ldr	r0, [pc, #400]	; (8006a14 <_printf_i+0x220>)
 8006882:	e055      	b.n	8006930 <_printf_i+0x13c>
 8006884:	6813      	ldr	r3, [r2, #0]
 8006886:	1d19      	adds	r1, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6011      	str	r1, [r2, #0]
 800688c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e08c      	b.n	80069b2 <_printf_i+0x1be>
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6011      	str	r1, [r2, #0]
 800689c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068a0:	bf18      	it	ne
 80068a2:	b21b      	sxthne	r3, r3
 80068a4:	e7cf      	b.n	8006846 <_printf_i+0x52>
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	6825      	ldr	r5, [r4, #0]
 80068aa:	1d18      	adds	r0, r3, #4
 80068ac:	6010      	str	r0, [r2, #0]
 80068ae:	0628      	lsls	r0, r5, #24
 80068b0:	d501      	bpl.n	80068b6 <_printf_i+0xc2>
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	e002      	b.n	80068bc <_printf_i+0xc8>
 80068b6:	0668      	lsls	r0, r5, #25
 80068b8:	d5fb      	bpl.n	80068b2 <_printf_i+0xbe>
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	4854      	ldr	r0, [pc, #336]	; (8006a10 <_printf_i+0x21c>)
 80068be:	296f      	cmp	r1, #111	; 0x6f
 80068c0:	bf14      	ite	ne
 80068c2:	220a      	movne	r2, #10
 80068c4:	2208      	moveq	r2, #8
 80068c6:	2100      	movs	r1, #0
 80068c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068cc:	6865      	ldr	r5, [r4, #4]
 80068ce:	60a5      	str	r5, [r4, #8]
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	f2c0 8095 	blt.w	8006a00 <_printf_i+0x20c>
 80068d6:	6821      	ldr	r1, [r4, #0]
 80068d8:	f021 0104 	bic.w	r1, r1, #4
 80068dc:	6021      	str	r1, [r4, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d13d      	bne.n	800695e <_printf_i+0x16a>
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	f040 808e 	bne.w	8006a04 <_printf_i+0x210>
 80068e8:	4665      	mov	r5, ip
 80068ea:	2a08      	cmp	r2, #8
 80068ec:	d10b      	bne.n	8006906 <_printf_i+0x112>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	07db      	lsls	r3, r3, #31
 80068f2:	d508      	bpl.n	8006906 <_printf_i+0x112>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bfde      	ittt	le
 80068fc:	2330      	movle	r3, #48	; 0x30
 80068fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006906:	ebac 0305 	sub.w	r3, ip, r5
 800690a:	6123      	str	r3, [r4, #16]
 800690c:	f8cd 8000 	str.w	r8, [sp]
 8006910:	463b      	mov	r3, r7
 8006912:	aa03      	add	r2, sp, #12
 8006914:	4621      	mov	r1, r4
 8006916:	4630      	mov	r0, r6
 8006918:	f7ff fef6 	bl	8006708 <_printf_common>
 800691c:	3001      	adds	r0, #1
 800691e:	d14d      	bne.n	80069bc <_printf_i+0x1c8>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	b005      	add	sp, #20
 8006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692a:	4839      	ldr	r0, [pc, #228]	; (8006a10 <_printf_i+0x21c>)
 800692c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006930:	6813      	ldr	r3, [r2, #0]
 8006932:	6821      	ldr	r1, [r4, #0]
 8006934:	1d1d      	adds	r5, r3, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6015      	str	r5, [r2, #0]
 800693a:	060a      	lsls	r2, r1, #24
 800693c:	d50b      	bpl.n	8006956 <_printf_i+0x162>
 800693e:	07ca      	lsls	r2, r1, #31
 8006940:	bf44      	itt	mi
 8006942:	f041 0120 	orrmi.w	r1, r1, #32
 8006946:	6021      	strmi	r1, [r4, #0]
 8006948:	b91b      	cbnz	r3, 8006952 <_printf_i+0x15e>
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	f022 0220 	bic.w	r2, r2, #32
 8006950:	6022      	str	r2, [r4, #0]
 8006952:	2210      	movs	r2, #16
 8006954:	e7b7      	b.n	80068c6 <_printf_i+0xd2>
 8006956:	064d      	lsls	r5, r1, #25
 8006958:	bf48      	it	mi
 800695a:	b29b      	uxthmi	r3, r3
 800695c:	e7ef      	b.n	800693e <_printf_i+0x14a>
 800695e:	4665      	mov	r5, ip
 8006960:	fbb3 f1f2 	udiv	r1, r3, r2
 8006964:	fb02 3311 	mls	r3, r2, r1, r3
 8006968:	5cc3      	ldrb	r3, [r0, r3]
 800696a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800696e:	460b      	mov	r3, r1
 8006970:	2900      	cmp	r1, #0
 8006972:	d1f5      	bne.n	8006960 <_printf_i+0x16c>
 8006974:	e7b9      	b.n	80068ea <_printf_i+0xf6>
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	6825      	ldr	r5, [r4, #0]
 800697a:	6961      	ldr	r1, [r4, #20]
 800697c:	1d18      	adds	r0, r3, #4
 800697e:	6010      	str	r0, [r2, #0]
 8006980:	0628      	lsls	r0, r5, #24
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	d501      	bpl.n	800698a <_printf_i+0x196>
 8006986:	6019      	str	r1, [r3, #0]
 8006988:	e002      	b.n	8006990 <_printf_i+0x19c>
 800698a:	066a      	lsls	r2, r5, #25
 800698c:	d5fb      	bpl.n	8006986 <_printf_i+0x192>
 800698e:	8019      	strh	r1, [r3, #0]
 8006990:	2300      	movs	r3, #0
 8006992:	6123      	str	r3, [r4, #16]
 8006994:	4665      	mov	r5, ip
 8006996:	e7b9      	b.n	800690c <_printf_i+0x118>
 8006998:	6813      	ldr	r3, [r2, #0]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	6011      	str	r1, [r2, #0]
 800699e:	681d      	ldr	r5, [r3, #0]
 80069a0:	6862      	ldr	r2, [r4, #4]
 80069a2:	2100      	movs	r1, #0
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7f9 fc13 	bl	80001d0 <memchr>
 80069aa:	b108      	cbz	r0, 80069b0 <_printf_i+0x1bc>
 80069ac:	1b40      	subs	r0, r0, r5
 80069ae:	6060      	str	r0, [r4, #4]
 80069b0:	6863      	ldr	r3, [r4, #4]
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	2300      	movs	r3, #0
 80069b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ba:	e7a7      	b.n	800690c <_printf_i+0x118>
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	462a      	mov	r2, r5
 80069c0:	4639      	mov	r1, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	47c0      	blx	r8
 80069c6:	3001      	adds	r0, #1
 80069c8:	d0aa      	beq.n	8006920 <_printf_i+0x12c>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	079b      	lsls	r3, r3, #30
 80069ce:	d413      	bmi.n	80069f8 <_printf_i+0x204>
 80069d0:	68e0      	ldr	r0, [r4, #12]
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	4298      	cmp	r0, r3
 80069d6:	bfb8      	it	lt
 80069d8:	4618      	movlt	r0, r3
 80069da:	e7a3      	b.n	8006924 <_printf_i+0x130>
 80069dc:	2301      	movs	r3, #1
 80069de:	464a      	mov	r2, r9
 80069e0:	4639      	mov	r1, r7
 80069e2:	4630      	mov	r0, r6
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d09a      	beq.n	8006920 <_printf_i+0x12c>
 80069ea:	3501      	adds	r5, #1
 80069ec:	68e3      	ldr	r3, [r4, #12]
 80069ee:	9a03      	ldr	r2, [sp, #12]
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	42ab      	cmp	r3, r5
 80069f4:	dcf2      	bgt.n	80069dc <_printf_i+0x1e8>
 80069f6:	e7eb      	b.n	80069d0 <_printf_i+0x1dc>
 80069f8:	2500      	movs	r5, #0
 80069fa:	f104 0919 	add.w	r9, r4, #25
 80069fe:	e7f5      	b.n	80069ec <_printf_i+0x1f8>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ac      	bne.n	800695e <_printf_i+0x16a>
 8006a04:	7803      	ldrb	r3, [r0, #0]
 8006a06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a0e:	e76c      	b.n	80068ea <_printf_i+0xf6>
 8006a10:	08006c69 	.word	0x08006c69
 8006a14:	08006c7a 	.word	0x08006c7a

08006a18 <memmove>:
 8006a18:	4288      	cmp	r0, r1
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	eb01 0302 	add.w	r3, r1, r2
 8006a20:	d807      	bhi.n	8006a32 <memmove+0x1a>
 8006a22:	1e42      	subs	r2, r0, #1
 8006a24:	4299      	cmp	r1, r3
 8006a26:	d00a      	beq.n	8006a3e <memmove+0x26>
 8006a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a30:	e7f8      	b.n	8006a24 <memmove+0xc>
 8006a32:	4283      	cmp	r3, r0
 8006a34:	d9f5      	bls.n	8006a22 <memmove+0xa>
 8006a36:	1881      	adds	r1, r0, r2
 8006a38:	1ad2      	subs	r2, r2, r3
 8006a3a:	42d3      	cmn	r3, r2
 8006a3c:	d100      	bne.n	8006a40 <memmove+0x28>
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a48:	e7f7      	b.n	8006a3a <memmove+0x22>

08006a4a <_realloc_r>:
 8006a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	4614      	mov	r4, r2
 8006a50:	460e      	mov	r6, r1
 8006a52:	b921      	cbnz	r1, 8006a5e <_realloc_r+0x14>
 8006a54:	4611      	mov	r1, r2
 8006a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a5a:	f7ff bc77 	b.w	800634c <_malloc_r>
 8006a5e:	b922      	cbnz	r2, 8006a6a <_realloc_r+0x20>
 8006a60:	f7ff fc26 	bl	80062b0 <_free_r>
 8006a64:	4625      	mov	r5, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6a:	f000 f814 	bl	8006a96 <_malloc_usable_size_r>
 8006a6e:	42a0      	cmp	r0, r4
 8006a70:	d20f      	bcs.n	8006a92 <_realloc_r+0x48>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4638      	mov	r0, r7
 8006a76:	f7ff fc69 	bl	800634c <_malloc_r>
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d0f2      	beq.n	8006a66 <_realloc_r+0x1c>
 8006a80:	4631      	mov	r1, r6
 8006a82:	4622      	mov	r2, r4
 8006a84:	f7ff fc00 	bl	8006288 <memcpy>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f7ff fc10 	bl	80062b0 <_free_r>
 8006a90:	e7e9      	b.n	8006a66 <_realloc_r+0x1c>
 8006a92:	4635      	mov	r5, r6
 8006a94:	e7e7      	b.n	8006a66 <_realloc_r+0x1c>

08006a96 <_malloc_usable_size_r>:
 8006a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9a:	1f18      	subs	r0, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bfbc      	itt	lt
 8006aa0:	580b      	ldrlt	r3, [r1, r0]
 8006aa2:	18c0      	addlt	r0, r0, r3
 8006aa4:	4770      	bx	lr
	...

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
