
LSEL_LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c9c  08008c9c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca4  08008ca4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  200001e4  08008e90  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  08008e90  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001734a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003597  00000000  00000000  0003755e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  0003aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  0003b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f85  00000000  00000000  0003c730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f602  00000000  00000000  000566b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a0c7  00000000  00000000  00065cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efd7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004440  00000000  00000000  000efdfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ae0 	.word	0x08008ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008ae0 	.word	0x08008ae0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000598:	2101      	movs	r1, #1
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f000 f80d 	bl	80005ba <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6858      	ldr	r0, [r3, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	f001 fb35 	bl	8001c1c <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6958      	ldr	r0, [r3, #20]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	b299      	uxth	r1, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	bf0c      	ite	eq
 80005d4:	2301      	moveq	r3, #1
 80005d6:	2300      	movne	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	f001 fb1e 	bl	8001c1c <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005f0:	2101      	movs	r1, #1
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ffe1 	bl	80005ba <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6858      	ldr	r0, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f001 fb09 	bl	8001c1c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f000 f855 	bl	80006ba <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	f001 fafd 	bl	8001c1c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 f849 	bl	80006ba <SX1278_hw_DelayMs>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800063c:	2100      	movs	r1, #0
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ffbb 	bl	80005ba <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6998      	ldr	r0, [r3, #24]
 8000648:	1cf9      	adds	r1, r7, #3
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	2201      	movs	r2, #1
 8000650:	f003 f93a 	bl	80038c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000654:	bf00      	nop
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fc0a 	bl	8003e74 <HAL_SPI_GetState>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d1f7      	bne.n	8000656 <SX1278_hw_SPICommand+0x26>
		;
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af02      	add	r7, sp, #8
 8000674:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800067e:	2100      	movs	r1, #0
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff9a 	bl	80005ba <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6998      	ldr	r0, [r3, #24]
 800068a:	f107 020e 	add.w	r2, r7, #14
 800068e:	f107 010f 	add.w	r1, r7, #15
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	f003 fa49 	bl	8003b30 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800069e:	bf00      	nop
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fbe5 	bl	8003e74 <HAL_SPI_GetState>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d1f7      	bne.n	80006a0 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 ffdc 	bl	8001680 <HAL_Delay>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	4610      	mov	r0, r2
 80006e6:	f001 fa81 	bl	8001bec <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff8c 	bl	8000630 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffa6 	bl	800066e <SX1278_hw_SPIReadByte>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff44 	bl	80005ba <SX1278_hw_SetNSS>
	return tmp;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
 8000748:	4613      	mov	r3, r2
 800074a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff31 	bl	80005ba <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	4610      	mov	r0, r2
 8000768:	f7ff ff62 	bl	8000630 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	78ba      	ldrb	r2, [r7, #2]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff5b 	bl	8000630 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff1a 	bl	80005ba <SX1278_hw_SetNSS>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 800078e:	b590      	push	{r4, r7, lr}
 8000790:	b087      	sub	sp, #28
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	461a      	mov	r2, r3
 800079a:	460b      	mov	r3, r1
 800079c:	72fb      	strb	r3, [r7, #11]
 800079e:	4613      	mov	r3, r2
 80007a0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80007a2:	7abb      	ldrb	r3, [r7, #10]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d927      	bls.n	80007f8 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff03 	bl	80005ba <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7afa      	ldrb	r2, [r7, #11]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff37 	bl	8000630 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	75fb      	strb	r3, [r7, #23]
 80007c6:	e00c      	b.n	80007e2 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	18d4      	adds	r4, r2, r3
 80007d2:	4608      	mov	r0, r1
 80007d4:	f7ff ff4b 	bl	800066e <SX1278_hw_SPIReadByte>
 80007d8:	4603      	mov	r3, r0
 80007da:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80007dc:	7dfb      	ldrb	r3, [r7, #23]
 80007de:	3301      	adds	r3, #1
 80007e0:	75fb      	strb	r3, [r7, #23]
 80007e2:	7dfa      	ldrb	r2, [r7, #23]
 80007e4:	7abb      	ldrb	r3, [r7, #10]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3ee      	bcc.n	80007c8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fee2 	bl	80005ba <SX1278_hw_SetNSS>
 80007f6:	e000      	b.n	80007fa <SX1278_SPIBurstRead+0x6c>
		return;
 80007f8:	bf00      	nop
	}
}
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	461a      	mov	r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	72fb      	strb	r3, [r7, #11]
 8000810:	4613      	mov	r3, r2
 8000812:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000814:	7abb      	ldrb	r3, [r7, #10]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d929      	bls.n	800086e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff feca 	bl	80005ba <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4619      	mov	r1, r3
 8000834:	4610      	mov	r0, r2
 8000836:	f7ff fefb 	bl	8000630 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]
 800083e:	e00b      	b.n	8000858 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff feef 	bl	8000630 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	3301      	adds	r3, #1
 8000856:	75fb      	strb	r3, [r7, #23]
 8000858:	7dfa      	ldrb	r2, [r7, #23]
 800085a:	7abb      	ldrb	r3, [r7, #10]
 800085c:	429a      	cmp	r2, r3
 800085e:	d3ef      	bcc.n	8000840 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fea7 	bl	80005ba <SX1278_hw_SetNSS>
 800086c:	e000      	b.n	8000870 <SX1278_SPIBurstWrite+0x70>
		return;
 800086e:	bf00      	nop
	}
}
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af02      	add	r7, sp, #8
 800087c:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7919      	ldrb	r1, [r3, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	795a      	ldrb	r2, [r3, #5]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7998      	ldrb	r0, [r3, #6]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	79db      	ldrb	r3, [r3, #7]
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4603      	mov	r3, r0
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f804 	bl	80008a0 <SX1278_config>
			module->LoRa_BW);
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4603      	mov	r3, r0
 80008b0:	70fb      	strb	r3, [r7, #3]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70bb      	strb	r3, [r7, #2]
 80008b6:	4613      	mov	r3, r2
 80008b8:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f8aa 	bl	8000a14 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80008c0:	200f      	movs	r0, #15
 80008c2:	f7ff fefa 	bl	80006ba <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f8b4 	bl	8000a34 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <SX1278_config+0x144>)
 80008d6:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80008d8:	2303      	movs	r3, #3
 80008da:	2106      	movs	r1, #6
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff8f 	bl	8000800 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80008e2:	78bb      	ldrb	r3, [r7, #2]
 80008e4:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <SX1278_config+0x148>)
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	461a      	mov	r2, r3
 80008ea:	2109      	movs	r1, #9
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff25 	bl	800073c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80008f2:	220b      	movs	r2, #11
 80008f4:	210b      	movs	r1, #11
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff20 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80008fc:	2223      	movs	r2, #35	; 0x23
 80008fe:	210c      	movs	r1, #12
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff1b 	bl	800073c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8000906:	787b      	ldrb	r3, [r7, #1]
 8000908:	4a38      	ldr	r2, [pc, #224]	; (80009ec <SX1278_config+0x14c>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	2b06      	cmp	r3, #6
 800090e:	d131      	bne.n	8000974 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000910:	7e3b      	ldrb	r3, [r7, #24]
 8000912:	4a37      	ldr	r2, [pc, #220]	; (80009f0 <SX1278_config+0x150>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800091a:	3303      	adds	r3, #3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	211d      	movs	r1, #29
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff0a 	bl	800073c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000928:	787b      	ldrb	r3, [r7, #1]
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <SX1278_config+0x14c>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000932:	3307      	adds	r3, #7
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	211e      	movs	r1, #30
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fefe 	bl	800073c <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000940:	2131      	movs	r1, #49	; 0x31
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fedb 	bl	80006fe <SX1278_SPIRead>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	f023 0307 	bic.w	r3, r3, #7
 8000952:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f043 0305 	orr.w	r3, r3, #5
 800095a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	461a      	mov	r2, r3
 8000960:	2131      	movs	r1, #49	; 0x31
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff feea 	bl	800073c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000968:	220c      	movs	r2, #12
 800096a:	2137      	movs	r1, #55	; 0x37
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fee5 	bl	800073c <SX1278_SPIWrite>
 8000972:	e017      	b.n	80009a4 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000974:	7e3b      	ldrb	r3, [r7, #24]
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <SX1278_config+0x150>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800097e:	3302      	adds	r3, #2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	211d      	movs	r1, #29
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fed8 	bl	800073c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800098c:	787b      	ldrb	r3, [r7, #1]
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <SX1278_config+0x14c>)
 8000990:	5cd3      	ldrb	r3, [r2, r3]
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000996:	3307      	adds	r3, #7
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	211e      	movs	r1, #30
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fecc 	bl	800073c <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80009a4:	22ff      	movs	r2, #255	; 0xff
 80009a6:	211f      	movs	r1, #31
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fec7 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fec2 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80009b8:	220c      	movs	r2, #12
 80009ba:	2121      	movs	r1, #33	; 0x21
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff febd 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80009c2:	2201      	movs	r2, #1
 80009c4:	2141      	movs	r1, #65	; 0x41
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff feb8 	bl	800073c <SX1278_SPIWrite>
	module->readBytes = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f80d 	bl	80009f4 <SX1278_standby>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08008bd8 	.word	0x08008bd8
 80009e8:	08008bdc 	.word	0x08008bdc
 80009ec:	08008be0 	.word	0x08008be0
 80009f0:	08008be8 	.word	0x08008be8

080009f4 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80009fc:	2209      	movs	r2, #9
 80009fe:	2101      	movs	r1, #1
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fe9b 	bl	800073c <SX1278_SPIWrite>
	module->status = STANDBY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	725a      	strb	r2, [r3, #9]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	2101      	movs	r1, #1
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fe8b 	bl	800073c <SX1278_SPIWrite>
	module->status = SLEEP;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	725a      	strb	r2, [r3, #9]
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000a3c:	2288      	movs	r2, #136	; 0x88
 8000a3e:	2101      	movs	r1, #1
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fe7b 	bl	800073c <SX1278_SPIWrite>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	2112      	movs	r1, #18
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fe6e 	bl	800073c <SX1278_SPIWrite>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	460b      	mov	r3, r1
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	7afa      	ldrb	r2, [r7, #11]
 8000a7a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fefa 	bl	8000876 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000a82:	2284      	movs	r2, #132	; 0x84
 8000a84:	214d      	movs	r1, #77	; 0x4d
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fe58 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000a8c:	22ff      	movs	r2, #255	; 0xff
 8000a8e:	2124      	movs	r1, #36	; 0x24
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff fe53 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000a96:	2201      	movs	r2, #1
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff fe4e 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000aa0:	223f      	movs	r2, #63	; 0x3f
 8000aa2:	2111      	movs	r1, #17
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff fe49 	bl	800073c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff ffcf 	bl	8000a4e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2122      	movs	r1, #34	; 0x22
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fe40 	bl	800073c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000abc:	210f      	movs	r1, #15
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe1d 	bl	80006fe <SX1278_SPIRead>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000ac8:	7dfb      	ldrb	r3, [r7, #23]
 8000aca:	461a      	mov	r2, r3
 8000acc:	210d      	movs	r1, #13
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff fe34 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ad4:	228d      	movs	r2, #141	; 0x8d
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe2f 	bl	800073c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ae6:	2118      	movs	r1, #24
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff fe08 	bl	80006fe <SX1278_SPIRead>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d104      	bne.n	8000b02 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2203      	movs	r2, #3
 8000afc:	725a      	strb	r2, [r3, #9]
			return 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e013      	b.n	8000b2a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d109      	bne.n	8000b22 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd68 	bl	80005e8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff feac 	bl	8000876 <SX1278_defaultConfig>
			return 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e003      	b.n	8000b2a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fdc9 	bl	80006ba <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b28:	e7dd      	b.n	8000ae6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fdc6 	bl	80006d0 <SX1278_hw_GetDIO0>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d030      	beq.n	8000bac <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	330a      	adds	r3, #10
 8000b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f006 feb8 	bl	80078ca <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fdce 	bl	80006fe <SX1278_SPIRead>
 8000b62:	4603      	mov	r3, r0
 8000b64:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fde5 	bl	800073c <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	799b      	ldrb	r3, [r3, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d103      	bne.n	8000b82 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7a1b      	ldrb	r3, [r3, #8]
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e005      	b.n	8000b8e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000b82:	2113      	movs	r1, #19
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fdba 	bl	80006fe <SX1278_SPIRead>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f103 020a 	add.w	r2, r3, #10
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2100      	movs	r1, #0
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fdf8 	bl	800078e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7bfa      	ldrb	r2, [r7, #15]
 8000ba2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff51 	bl	8000a4e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	7afa      	ldrb	r2, [r7, #11]
 8000bcc:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff fe51 	bl	8000876 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000bd4:	2287      	movs	r2, #135	; 0x87
 8000bd6:	214d      	movs	r1, #77	; 0x4d
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff fdaf 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000bde:	2200      	movs	r2, #0
 8000be0:	2124      	movs	r1, #36	; 0x24
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fdaa 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000be8:	2241      	movs	r2, #65	; 0x41
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fda5 	bl	800073c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f7ff ff2b 	bl	8000a4e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000bf8:	22f7      	movs	r2, #247	; 0xf7
 8000bfa:	2111      	movs	r1, #17
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff fd9d 	bl	800073c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000c02:	7afb      	ldrb	r3, [r7, #11]
 8000c04:	461a      	mov	r2, r3
 8000c06:	2122      	movs	r1, #34	; 0x22
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fd97 	bl	800073c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000c0e:	210e      	movs	r1, #14
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fd74 	bl	80006fe <SX1278_SPIRead>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	210d      	movs	r1, #13
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff fd8b 	bl	800073c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000c26:	2122      	movs	r1, #34	; 0x22
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fd68 	bl	80006fe <SX1278_SPIRead>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000c32:	7dba      	ldrb	r2, [r7, #22]
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d104      	bne.n	8000c44 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	725a      	strb	r2, [r3, #9]
			return 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e00e      	b.n	8000c62 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1ea      	bne.n	8000c26 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fcc7 	bl	80005e8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fe0b 	bl	8000876 <SX1278_defaultConfig>
			return 0;
 8000c60:	2300      	movs	r3, #0
		}
	}
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4613      	mov	r3, r2
 8000c78:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fdbd 	bl	8000800 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000c86:	228b      	movs	r2, #139	; 0x8b
 8000c88:	2101      	movs	r1, #1
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff fd56 	bl	800073c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd1b 	bl	80006d0 <SX1278_hw_GetDIO0>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00b      	beq.n	8000cb8 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000ca0:	2112      	movs	r1, #18
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fd2b 	bl	80006fe <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fed0 	bl	8000a4e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff fea0 	bl	80009f4 <SX1278_standby>
			return 1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e013      	b.n	8000ce0 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc8d 	bl	80005e8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff fdd1 	bl	8000876 <SX1278_defaultConfig>
			return 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e003      	b.n	8000ce0 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fcee 	bl	80006ba <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000cde:	e7d7      	b.n	8000c90 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	70fb      	strb	r3, [r7, #3]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70bb      	strb	r3, [r7, #2]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fc42 	bl	8000590 <SX1278_hw_init>
	module->frequency = frequency;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	78ba      	ldrb	r2, [r7, #2]
 8000d16:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	787a      	ldrb	r2, [r7, #1]
 8000d1c:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7c3a      	ldrb	r2, [r7, #16]
 8000d22:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7d3a      	ldrb	r2, [r7, #20]
 8000d28:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fda3 	bl	8000876 <SX1278_defaultConfig>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4613      	mov	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d003      	beq.n	8000d5a <SX1278_read+0x22>
		length = module->readBytes;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d58:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	330a      	adds	r3, #10
 8000d5e:	79fa      	ldrb	r2, [r7, #7]
 8000d60:	4619      	mov	r1, r3
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f006 fda6 	bl	80078b4 <memcpy>
	rxBuf[length] = '\0';
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3f      	ldr	r2, [pc, #252]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a38      	ldr	r2, [pc, #224]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a2a      	ldr	r2, [pc, #168]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4825      	ldr	r0, [pc, #148]	; (8000ea4 <MX_GPIO_Init+0x120>)
 8000e10:	f000 ff04 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2102      	movs	r1, #2
 8000e18:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <MX_GPIO_Init+0x124>)
 8000e1a:	f000 feff 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e24:	4821      	ldr	r0, [pc, #132]	; (8000eac <MX_GPIO_Init+0x128>)
 8000e26:	f000 fef9 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <MX_GPIO_Init+0x120>)
 8000e42:	f000 fd51 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8000e46:	2305      	movs	r3, #5
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <MX_GPIO_Init+0x124>)
 8000e5a:	f000 fd45 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <MX_GPIO_Init+0x124>)
 8000e76:	f000 fd37 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_GPIO_Init+0x128>)
 8000e94:	f000 fd28 	bl	80018e8 <HAL_GPIO_Init>

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ebc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ecc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ed0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00b      	beq.n	8000ef0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	e000      	b.n	8000edc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f9      	beq.n	8000eda <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buffer[] = "Hello world!\r\n";
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <main+0xa4>)
 8000f08:	f107 0410 	add.w	r4, r7, #16
 8000f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0e:	c407      	stmia	r4!, {r0, r1, r2}
 8000f10:	8023      	strh	r3, [r4, #0]
 8000f12:	3402      	adds	r4, #2
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	7023      	strb	r3, [r4, #0]
	uint8_t len = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fb3e 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f844 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff ff2e 	bl	8000d84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f28:	f000 f99c 	bl	8001264 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000f2c:	f005 ff7c 	bl	8006e28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  len = strlen((char*) buffer);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f953 	bl	80001e0 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	77fb      	strb	r3, [r7, #31]

  Lora_inicio(master);  //0 es esclavo, 1 es maestro
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <main+0xa8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f8b6 	bl	80010b4 <Lora_inicio>

  prueba.ID = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	80bb      	strh	r3, [r7, #4]
  prueba.measure = 100;
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	80fb      	strh	r3, [r7, #6]
  prueba.alarm = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	723b      	strb	r3, [r7, #8]
  prueba.error = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	727b      	strb	r3, [r7, #9]
  prueba.threshold_L = 80;
 8000f58:	2350      	movs	r3, #80	; 0x50
 8000f5a:	817b      	strh	r3, [r7, #10]
  prueba.threshold_H = 120;
 8000f5c:	2378      	movs	r3, #120	; 0x78
 8000f5e:	81bb      	strh	r3, [r7, #12]

  HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f64:	f000 fb8c 	bl	8001680 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (master == 1) {
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <main+0xa8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d109      	bne.n	8000f84 <main+0x84>
		Lora_envia(prueba);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f76:	f000 f927 	bl	80011c8 <Lora_envia>
		HAL_Delay(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	f000 fb7f 	bl	8001680 <HAL_Delay>
 8000f82:	e001      	b.n	8000f88 <main+0x88>
	} else {
		Lora_recibe();
 8000f84:	f000 f8f8 	bl	8001178 <Lora_recibe>
	}
	  CDC_Transmit_FS(buffer, len);
 8000f88:	7ffb      	ldrb	r3, [r7, #31]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 f806 	bl	8006fa4 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f000 fb70 	bl	8001680 <HAL_Delay>
	if (master == 1) {
 8000fa0:	e7e2      	b.n	8000f68 <main+0x68>
 8000fa2:	bf00      	nop
 8000fa4:	08008af8 	.word	0x08008af8
 8000fa8:	20000200 	.word	0x20000200

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 fc85 	bl	80078ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <SystemClock_Config+0xc8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <SystemClock_Config+0xc8>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <SystemClock_Config+0xc8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <SystemClock_Config+0xcc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <SystemClock_Config+0xcc>)
 8000ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <SystemClock_Config+0xcc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001020:	2348      	movs	r3, #72	; 0x48
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001028:	2303      	movs	r3, #3
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f001 ffab 	bl	8002f8c <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800103c:	f000 f90a 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fa05 	bl	800346c <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001068:	f000 f8f4 	bl	8001254 <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e009      	b.n	80010a2 <_write+0x26>
		ITM_SendChar(*ptr++);
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff0a 	bl	8000eb0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf1      	blt.n	800108e <_write+0x12>
	}
	return len;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Lora_inicio>:

void Lora_inicio(int init){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <Lora_inicio+0xa4>)
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <Lora_inicio+0xa8>)
 80010c0:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <Lora_inicio+0xa4>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <Lora_inicio+0xa4>)
 80010ca:	4a25      	ldr	r2, [pc, #148]	; (8001160 <Lora_inicio+0xac>)
 80010cc:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <Lora_inicio+0xa4>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <Lora_inicio+0xa4>)
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <Lora_inicio+0xa8>)
 80010d8:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <Lora_inicio+0xa4>)
 80010dc:	2202      	movs	r2, #2
 80010de:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <Lora_inicio+0xa4>)
 80010e2:	4a20      	ldr	r2, [pc, #128]	; (8001164 <Lora_inicio+0xb0>)
 80010e4:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <Lora_inicio+0xb4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <Lora_inicio+0xb4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <Lora_inicio+0xb4>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <Lora_inicio+0xa4>)
 80010f8:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 80010fa:	481c      	ldr	r0, [pc, #112]	; (800116c <Lora_inicio+0xb8>)
 80010fc:	f006 fd0a 	bl	8007b14 <puts>
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8001100:	230a      	movs	r3, #10
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2303      	movs	r3, #3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	2201      	movs	r2, #1
 800110c:	2100      	movs	r1, #0
 800110e:	4816      	ldr	r0, [pc, #88]	; (8001168 <Lora_inicio+0xb4>)
 8001110:	f7ff fdea 	bl	8000ce8 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	printf("Done configuring LoRaModule\r\n");
 8001114:	4816      	ldr	r0, [pc, #88]	; (8001170 <Lora_inicio+0xbc>)
 8001116:	f006 fcfd 	bl	8007b14 <puts>
	while (ret!=1){
 800111a:	e015      	b.n	8001148 <Lora_inicio+0x94>
		if (init == 1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d107      	bne.n	8001132 <Lora_inicio+0x7e>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001122:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001126:	2110      	movs	r1, #16
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <Lora_inicio+0xb4>)
 800112a:	f7ff fd46 	bl	8000bba <SX1278_LoRaEntryTx>
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	e006      	b.n	8001140 <Lora_inicio+0x8c>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 8001132:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001136:	2110      	movs	r1, #16
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <Lora_inicio+0xb4>)
 800113a:	f7ff fc95 	bl	8000a68 <SX1278_LoRaEntryRx>
 800113e:	60f8      	str	r0, [r7, #12]
		}
		printf("ret: %d\n", ret);
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <Lora_inicio+0xc0>)
 8001144:	f006 fc72 	bl	8007a2c <iprintf>
	while (ret!=1){
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d1e6      	bne.n	800111c <Lora_inicio+0x68>
	}
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000320 	.word	0x20000320
 800115c:	40020400 	.word	0x40020400
 8001160:	40020000 	.word	0x40020000
 8001164:	2000033c 	.word	0x2000033c
 8001168:	20000214 	.word	0x20000214
 800116c:	08008b08 	.word	0x08008b08
 8001170:	08008b24 	.word	0x08008b24
 8001174:	08008b44 	.word	0x08008b44

08001178 <Lora_recibe>:
void Lora_recibe(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b092      	sub	sp, #72	; 0x48
 800117c:	af00      	add	r7, sp, #0
	int ret;
	char buffer[64];
	ret = SX1278_LoRaRxPacket(&SX1278);
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <Lora_recibe+0x44>)
 8001180:	f7ff fcd7 	bl	8000b32 <SX1278_LoRaRxPacket>
 8001184:	4603      	mov	r3, r0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
	if (ret > 0) {
 8001188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800118a:	2b00      	cmp	r3, #0
 800118c:	dd11      	ble.n	80011b2 <Lora_recibe+0x3a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <Lora_recibe+0x48>)
 8001194:	f000 fd5b 	bl	8001c4e <HAL_GPIO_TogglePin>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8001198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119a:	b2da      	uxtb	r2, r3
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <Lora_recibe+0x44>)
 80011a2:	f7ff fdc9 	bl	8000d38 <SX1278_read>
		printf("Content (%d): %s\r\n", ret, buffer);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	461a      	mov	r2, r3
 80011aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <Lora_recibe+0x4c>)
 80011ae:	f006 fc3d 	bl	8007a2c <iprintf>
	}
}
 80011b2:	bf00      	nop
 80011b4:	3748      	adds	r7, #72	; 0x48
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000214 	.word	0x20000214
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	08008b50 	.word	0x08008b50

080011c8 <Lora_envia>:
void Lora_envia(sensor_buf_t prueba){
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b09b      	sub	sp, #108	; 0x6c
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int ret;
	char buffer[64];
	int message_length;
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <Lora_envia+0x7c>)
 80011da:	f000 fd38 	bl	8001c4e <HAL_GPIO_TogglePin>
	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d", prueba.ID, prueba.measure, prueba.alarm, prueba.error, prueba.threshold_L, prueba.threshold_H);
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	461d      	mov	r5, r3
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	461e      	mov	r6, r3
 80011e6:	7a3b      	ldrb	r3, [r7, #8]
 80011e8:	7a7a      	ldrb	r2, [r7, #9]
 80011ea:	8979      	ldrh	r1, [r7, #10]
 80011ec:	89b8      	ldrh	r0, [r7, #12]
 80011ee:	4604      	mov	r4, r0
 80011f0:	f107 0010 	add.w	r0, r7, #16
 80011f4:	9403      	str	r4, [sp, #12]
 80011f6:	9102      	str	r1, [sp, #8]
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4633      	mov	r3, r6
 80011fe:	462a      	mov	r2, r5
 8001200:	4911      	ldr	r1, [pc, #68]	; (8001248 <Lora_envia+0x80>)
 8001202:	f006 fc9f 	bl	8007b44 <siprintf>
 8001206:	6578      	str	r0, [r7, #84]	; 0x54
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001210:	4619      	mov	r1, r3
 8001212:	480e      	ldr	r0, [pc, #56]	; (800124c <Lora_envia+0x84>)
 8001214:	f7ff fcd1 	bl	8000bba <SX1278_LoRaEntryTx>
 8001218:	6538      	str	r0, [r7, #80]	; 0x50
	printf("Sending %s\r\n", buffer);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4619      	mov	r1, r3
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <Lora_envia+0x88>)
 8001222:	f006 fc03 	bl	8007a2c <iprintf>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 8001226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001228:	b2da      	uxtb	r2, r3
 800122a:	f107 0110 	add.w	r1, r7, #16
 800122e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <Lora_envia+0x84>)
 8001234:	f7ff fd19 	bl	8000c6a <SX1278_LoRaTxPacket>
 8001238:	6538      	str	r0, [r7, #80]	; 0x50
}
 800123a:	bf00      	nop
 800123c:	375c      	adds	r7, #92	; 0x5c
 800123e:	46bd      	mov	sp, r7
 8001240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001242:	bf00      	nop
 8001244:	40020c00 	.word	0x40020c00
 8001248:	08008b64 	.word	0x08008b64
 800124c:	20000214 	.word	0x20000214
 8001250:	08008b80 	.word	0x08008b80

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_SPI1_Init+0x64>)
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <MX_SPI1_Init+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001294:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001298:	2208      	movs	r2, #8
 800129a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012b0:	220a      	movs	r2, #10
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012b6:	f002 faa3 	bl	8003800 <HAL_SPI_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c0:	f7ff ffc8 	bl	8001254 <Error_Handler>
  }

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000033c 	.word	0x2000033c
 80012cc:	40013000 	.word	0x40013000

080012d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_SPI_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12b      	bne.n	800134a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_SPI_MspInit+0x88>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_SPI_MspInit+0x88>)
 80012fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_SPI_MspInit+0x88>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_SPI_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_SPI_MspInit+0x88>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_SPI_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800132a:	23e0      	movs	r3, #224	; 0xe0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800133a:	2305      	movs	r3, #5
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_SPI_MspInit+0x8c>)
 8001346:	f000 facf 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40013000 	.word	0x40013000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_MspInit+0x4c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x4c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800139e:	2007      	movs	r0, #7
 80013a0:	f000 fa60 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f91c 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <OTG_FS_IRQHandler+0x10>)
 8001412:	f000 fd87 	bl	8001f24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200008e8 	.word	0x200008e8

08001420 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e00a      	b.n	8001448 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001432:	f3af 8000 	nop.w
 8001436:	4601      	mov	r1, r0
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	60ba      	str	r2, [r7, #8]
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf0      	blt.n	8001432 <_read+0x12>
	}

return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:
	}
	return len;
}

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001482:	605a      	str	r2, [r3, #4]
	return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_isatty>:

int _isatty(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
	return 1;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x50>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x16>
		heap_end = &end;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <_sbrk+0x50>)
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <_sbrk+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <_sbrk+0x50>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <_sbrk+0x50>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	466a      	mov	r2, sp
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d907      	bls.n	80014fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ee:	f006 f9a7 	bl	8007840 <__errno>
 80014f2:	4602      	mov	r2, r0
 80014f4:	230c      	movs	r3, #12
 80014f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e006      	b.n	800150c <_sbrk+0x48>
	}

	heap_end += incr;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <_sbrk+0x50>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a03      	ldr	r2, [pc, #12]	; (8001514 <_sbrk+0x50>)
 8001508:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000204 	.word	0x20000204
 8001518:	20000cf8 	.word	0x20000cf8

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <SystemInit+0x28>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <SystemInit+0x28>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SystemInit+0x28>)
 8001532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001536:	609a      	str	r2, [r3, #8]
#endif
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800154c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800154e:	e003      	b.n	8001558 <LoopCopyDataInit>

08001550 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001552:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001554:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001556:	3104      	adds	r1, #4

08001558 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800155c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800155e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001560:	d3f6      	bcc.n	8001550 <CopyDataInit>
  ldr  r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001564:	e002      	b.n	800156c <LoopFillZerobss>

08001566 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001566:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001568:	f842 3b04 	str.w	r3, [r2], #4

0800156c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800156e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001570:	d3f9      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001572:	f7ff ffd3 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f006 f969 	bl	800784c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff fcc1 	bl	8000f00 <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001580:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001584:	08008cac 	.word	0x08008cac
  ldr  r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800158c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001590:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001594:	20000cf4 	.word	0x20000cf4

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f94d 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fec6 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f965 	bl	80018ce <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f92d 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000
 8001638:	20000008 	.word	0x20000008
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008
 8001664:	20000394 	.word	0x20000394

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000394 	.word	0x20000394

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_Delay+0x40>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000008 	.word	0x20000008

080016c4 <__NVIC_SetPriorityGrouping>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e159      	b.n	8001bb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8148 	bne.w	8001bb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d00b      	beq.n	8001942 <HAL_GPIO_Init+0x5a>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001936:	2b11      	cmp	r3, #17
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b12      	cmp	r3, #18
 8001940:	d130      	bne.n	80019a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0201 	and.w	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0xfc>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a2 	beq.w	8001bb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a55      	ldr	r2, [pc, #340]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x202>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x1fe>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x1f6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a44      	ldr	r2, [pc, #272]	; (8001be4 <HAL_GPIO_Init+0x2fc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x1f2>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ada:	2307      	movs	r3, #7
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4934      	ldr	r1, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2e:	4a2e      	ldr	r2, [pc, #184]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b58:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f aea2 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e001      	b.n	8001c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	401a      	ands	r2, r3
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d104      	bne.n	8001c72 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b08f      	sub	sp, #60	; 0x3c
 8001c88:	af0a      	add	r7, sp, #40	; 0x28
 8001c8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e10f      	b.n	8001eb6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 fac5 	bl	8007240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fa9c 	bl	8004212 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	687e      	ldr	r6, [r7, #4]
 8001ce2:	466d      	mov	r5, sp
 8001ce4:	f106 0410 	add.w	r4, r6, #16
 8001ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf8:	1d33      	adds	r3, r6, #4
 8001cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f002 f973 	bl	8003fe8 <USB_CoreInit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fa8a 	bl	8004234 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e04a      	b.n	8001dbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	333d      	adds	r3, #61	; 0x3d
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	333c      	adds	r3, #60	; 0x3c
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	b298      	uxth	r0, r3
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	4602      	mov	r2, r0
 8001d64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	333f      	adds	r3, #63	; 0x3f
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3344      	adds	r3, #68	; 0x44
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3348      	adds	r3, #72	; 0x48
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3350      	adds	r3, #80	; 0x50
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	3301      	adds	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3af      	bcc.n	8001d26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e044      	b.n	8001e56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	3301      	adds	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3b5      	bcc.n	8001dcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	687e      	ldr	r6, [r7, #4]
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 0410 	add.w	r4, r6, #16
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f002 fa00 	bl	8004288 <USB_DevInit>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00d      	b.n	8001eb6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fa3f 	bl	8005332 <USB_DevDisconnect>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ebe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_Start+0x1c>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e020      	b.n	8001f1c <HAL_PCD_Start+0x5e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d109      	bne.n	8001efe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 f9fd 	bl	8005302 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 f96f 	bl	80041f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b08d      	sub	sp, #52	; 0x34
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 faa4 	bl	8005488 <USB_GetMode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 839d 	bne.w	8002682 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fa08 	bl	8005362 <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8393 	beq.w	8002680 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 f9ff 	bl	8005362 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 0202 	and.w	r2, r2, #2
 8001f7c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 f9ed 	bl	8005362 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d161      	bne.n	8002056 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0210 	bic.w	r2, r2, #16
 8001fa0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	0c5b      	lsrs	r3, r3, #17
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d124      	bne.n	8002018 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d035      	beq.n	8002046 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a38      	ldr	r0, [r7, #32]
 8001fee:	f003 f865 	bl	80050bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffe:	441a      	add	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002010:	441a      	add	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	e016      	b.n	8002046 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	0c5b      	lsrs	r3, r3, #17
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b06      	cmp	r3, #6
 8002022:	d110      	bne.n	8002046 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800202a:	2208      	movs	r2, #8
 800202c:	4619      	mov	r1, r3
 800202e:	6a38      	ldr	r0, [r7, #32]
 8002030:	f003 f844 	bl	80050bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002040:	441a      	add	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0210 	orr.w	r2, r2, #16
 8002054:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 f981 	bl	8005362 <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800206a:	d16e      	bne.n	800214a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f003 f987 	bl	8005388 <USB_ReadDevAllOutEpInterrupt>
 800207a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800207c:	e062      	b.n	8002144 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d057      	beq.n	8002138 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 f9ac 	bl	80053f0 <USB_ReadDevOutEPInterrupt>
 8002098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fdb1 	bl	8002c20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	2308      	movs	r3, #8
 80020d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 feab 	bl	8002e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2310      	movs	r3, #16
 80020fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	2320      	movs	r3, #32
 8002118:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	3301      	adds	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d199      	bne.n	800207e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f907 	bl	8005362 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800215e:	f040 80c0 	bne.w	80022e2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 f928 	bl	80053bc <USB_ReadDevAllInEpInterrupt>
 800216c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002172:	e0b2      	b.n	80022da <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a7 	beq.w	80022ce <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f003 f94e 	bl	800542c <USB_ReadDevInEPInterrupt>
 8002190:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d057      	beq.n	800224c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	2201      	movs	r2, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69f9      	ldr	r1, [r7, #28]
 80021b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021bc:	4013      	ands	r3, r2
 80021be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021cc:	461a      	mov	r2, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d132      	bne.n	8002240 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3348      	adds	r3, #72	; 0x48
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	3344      	adds	r3, #68	; 0x44
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4419      	add	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4403      	add	r3, r0
 800220e:	3348      	adds	r3, #72	; 0x48
 8002210:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d113      	bne.n	8002240 <HAL_PCD_IRQHandler+0x31c>
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002238:	461a      	mov	r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	f003 f956 	bl	80054ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f005 f889 	bl	800735e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002262:	461a      	mov	r2, r3
 8002264:	2308      	movs	r3, #8
 8002266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227e:	461a      	mov	r2, r3
 8002280:	2310      	movs	r3, #16
 8002282:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	461a      	mov	r2, r3
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	461a      	mov	r2, r3
 80022b8:	2302      	movs	r3, #2
 80022ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fc1b 	bl	8002b04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	3301      	adds	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af49 	bne.w	8002174 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f83b 	bl	8005362 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f6:	d122      	bne.n	800233e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fe27 	bl	8002f74 <HAL_PCDEx_LPM_Callback>
 8002326:	e002      	b.n	800232e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f005 f885 	bl	8007438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800233c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 f80d 	bl	8005362 <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002352:	d112      	bne.n	800237a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f005 f841 	bl	80073ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002378:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 ffef 	bl	8005362 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	f040 80c7 	bne.w	8002520 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2110      	movs	r1, #16
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 f8cf 	bl	8004550 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b6:	e056      	b.n	8002466 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c4:	461a      	mov	r2, r3
 80023c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023dc:	0151      	lsls	r1, r2, #5
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	440a      	add	r2, r1
 80023e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fc:	0151      	lsls	r1, r2, #5
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	440a      	add	r2, r1
 8002402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800240a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800241e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	440a      	add	r2, r1
 8002436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800243a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800243e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002450:	0151      	lsls	r1, r2, #5
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	440a      	add	r2, r1
 8002456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800245a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800245e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	3301      	adds	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246c:	429a      	cmp	r2, r3
 800246e:	d3a3      	bcc.n	80023b8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002482:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	2b00      	cmp	r3, #0
 800248a:	d016      	beq.n	80024ba <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249c:	f043 030b 	orr.w	r3, r3, #11
 80024a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b2:	f043 030b 	orr.w	r3, r3, #11
 80024b6:	6453      	str	r3, [r2, #68]	; 0x44
 80024b8:	e015      	b.n	80024e6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e0:	f043 030b 	orr.w	r3, r3, #11
 80024e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800250a:	461a      	mov	r2, r3
 800250c:	f002 ffee 	bl	80054ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800251e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f002 ff1c 	bl	8005362 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d124      	bne.n	8002580 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 ffb2 	bl	80054a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 f864 	bl	8004612 <USB_GetDevSpeed>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681c      	ldr	r4, [r3, #0]
 8002556:	f001 f947 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 800255a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	4620      	mov	r0, r4
 8002566:	f001 fda1 	bl	80040ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f004 ff1f 	bl	80073ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800257e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f002 feec 	bl	8005362 <USB_ReadInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d10a      	bne.n	80025aa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f004 fefc 	bl	8007392 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 0208 	and.w	r2, r2, #8
 80025a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fed7 	bl	8005362 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025be:	d10f      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f004 ff54 	bl	8007478 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 febc 	bl	8005362 <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f4:	d10f      	bne.n	8002616 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f004 ff27 	bl	8007454 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f002 fea1 	bl	8005362 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d10a      	bne.n	8002642 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f004 ff35 	bl	800749c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fe8b 	bl	8005362 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b04      	cmp	r3, #4
 8002654:	d115      	bne.n	8002682 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f004 ff25 	bl	80074b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e000      	b.n	8002682 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002680:	bf00      	nop
    }
  }
}
 8002682:	3734      	adds	r7, #52	; 0x34
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_PCD_SetAddress+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e013      	b.n	80026ca <HAL_PCD_SetAddress+0x42>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fdfb 	bl	80052b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	4608      	mov	r0, r1
 80026dc:	4611      	mov	r1, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	460b      	mov	r3, r1
 80026e6:	803b      	strh	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da0f      	bge.n	8002718 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 020f 	and.w	r2, r3, #15
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3338      	adds	r3, #56	; 0x38
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	705a      	strb	r2, [r3, #1]
 8002716:	e00f      	b.n	8002738 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 020f 	and.w	r2, r3, #15
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002744:	883a      	ldrh	r2, [r7, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	78ba      	ldrb	r2, [r7, #2]
 800274e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002762:	78bb      	ldrb	r3, [r7, #2]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d102      	bne.n	800276e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_PCD_EP_Open+0xaa>
 8002778:	2302      	movs	r3, #2
 800277a:	e00e      	b.n	800279a <HAL_PCD_EP_Open+0xc8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f001 ff66 	bl	800465c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002798:	7afb      	ldrb	r3, [r7, #11]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da0f      	bge.n	80027d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	3338      	adds	r3, #56	; 0x38
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	705a      	strb	r2, [r3, #1]
 80027d4:	e00f      	b.n	80027f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	3304      	adds	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_PCD_EP_Close+0x6e>
 800280c:	2302      	movs	r3, #2
 800280e:	e00e      	b.n	800282e <HAL_PCD_EP_Close+0x8c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	4618      	mov	r0, r3
 8002820:	f001 ffa4 	bl	800476c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	460b      	mov	r3, r1
 8002844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	f003 020f 	and.w	r2, r3, #15
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	b2da      	uxtb	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	f002 fa7f 	bl	8004dac <USB_EP0StartXfer>
 80028ae:	e008      	b.n	80028c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6979      	ldr	r1, [r7, #20]
 80028be:	f002 f831 	bl	8004924 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	3338      	adds	r3, #56	; 0x38
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	b2da      	uxtb	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	f002 fa1d 	bl	8004dac <USB_EP0StartXfer>
 8002972:	e008      	b.n	8002986 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	6979      	ldr	r1, [r7, #20]
 8002982:	f001 ffcf 	bl	8004924 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d901      	bls.n	80029ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e050      	b.n	8002a50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0f      	bge.n	80029d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	705a      	strb	r2, [r3, #1]
 80029d4:	e00d      	b.n	80029f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_EP_SetStall+0x82>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e01e      	b.n	8002a50 <HAL_PCD_EP_SetStall+0xc0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fb74 	bl	800510e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	b2d9      	uxtb	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a40:	461a      	mov	r2, r3
 8002a42:	f002 fd53 	bl	80054ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d901      	bls.n	8002a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e042      	b.n	8002afc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_PCD_EP_ClrStall+0x86>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e00e      	b.n	8002afc <HAL_PCD_EP_ClrStall+0xa4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 fb7c 	bl	80051ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3338      	adds	r3, #56	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d901      	bls.n	8002b3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e06c      	b.n	8002c16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d902      	bls.n	8002b58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3303      	adds	r3, #3
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b60:	e02b      	b.n	8002bba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d902      	bls.n	8002b7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3303      	adds	r3, #3
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68d9      	ldr	r1, [r3, #12]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f002 fa58 	bl	8005052 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	441a      	add	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d809      	bhi.n	8002be4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d203      	bcs.n	8002be4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1be      	bne.n	8002b62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d811      	bhi.n	8002c14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c10:	4013      	ands	r3, r2
 8002c12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	333c      	adds	r3, #60	; 0x3c
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f040 80a0 	bne.w	8002d98 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d015      	beq.n	8002c8e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a72      	ldr	r2, [pc, #456]	; (8002e30 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f240 80dd 	bls.w	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80d7 	beq.w	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c84:	461a      	mov	r2, r3
 8002c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	e0cb      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	e0bc      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80b7 	bne.w	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <PCD_EP_OutXfrComplete_int+0x210>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d90f      	bls.n	8002ce0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cdc:	6093      	str	r3, [r2, #8]
 8002cde:	e0a2      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cf2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	0159      	lsls	r1, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d06:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4403      	add	r3, r0
 8002d16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d1a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4403      	add	r3, r0
 8002d3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4419      	add	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4403      	add	r3, r0
 8002d54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d58:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d114      	bne.n	8002d8a <PCD_EP_OutXfrComplete_int+0x16a>
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d82:	461a      	mov	r2, r3
 8002d84:	2101      	movs	r1, #1
 8002d86:	f002 fbb1 	bl	80054ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f004 fac9 	bl	8007328 <HAL_PCD_DataOutStageCallback>
 8002d96:	e046      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d124      	bne.n	8002dea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e032      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2320      	movs	r3, #32
 8002dda:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f004 faa0 	bl	8007328 <HAL_PCD_DataOutStageCallback>
 8002de8:	e01d      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d114      	bne.n	8002e1a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e12:	461a      	mov	r2, r3
 8002e14:	2100      	movs	r1, #0
 8002e16:	f002 fb69 	bl	80054ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f004 fa81 	bl	8007328 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	4f54300a 	.word	0x4f54300a
 8002e34:	4f54310a 	.word	0x4f54310a

08002e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d90e      	bls.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f004 fa39 	bl	8007304 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d90c      	bls.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eac:	461a      	mov	r2, r3
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f002 fb1c 	bl	80054ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	4f54300a 	.word	0x4f54300a

08002ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	0419      	lsls	r1, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef0:	e028      	b.n	8002f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e00d      	b.n	8002f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3340      	adds	r3, #64	; 0x40
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3ec      	bcc.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f2c:	883b      	ldrh	r3, [r7, #0]
 8002f2e:	0418      	lsls	r0, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	4302      	orrs	r2, r0
 8002f3c:	3340      	adds	r3, #64	; 0x40
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e25b      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	4ba3      	ldr	r3, [pc, #652]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e236      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a90      	ldr	r2, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a8a      	ldr	r2, [pc, #552]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a83      	ldr	r2, [pc, #524]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fb10 	bl	8001668 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fb0c 	bl	8001668 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1fb      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe fafc 	bl	8001668 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe faf8 	bl	8001668 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1e7      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1bb      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4952      	ldr	r1, [pc, #328]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fab1 	bl	8001668 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe faad 	bl	8001668 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e19c      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4940      	ldr	r1, [pc, #256]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fa90 	bl	8001668 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fa8c 	bl	8001668 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e17b      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d030      	beq.n	80031d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fa70 	bl	8001668 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe fa6c 	bl	8001668 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e15b      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
 80031aa:	e015      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fa59 	bl	8001668 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe fa55 	bl	8001668 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e144      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a0 	beq.w	8003326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d121      	bne.n	8003266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe fa1b 	bl	8001668 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e011      	b.n	800325a <HAL_RCC_OscConfig+0x2ce>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
 8003244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe fa0e 	bl	8001668 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0fd      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x2f0>
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e01c      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x312>
 8003284:	4b77      	ldr	r3, [pc, #476]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a76      	ldr	r2, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b74      	ldr	r3, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a73      	ldr	r2, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800329e:	4b71      	ldr	r3, [pc, #452]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a70      	ldr	r2, [pc, #448]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a6d      	ldr	r2, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe f9d3 	bl	8001668 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe f9cf 	bl	8001668 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0bc      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCC_OscConfig+0x33a>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe f9bd 	bl	8001668 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe f9b9 	bl	8001668 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0a6      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8092 	beq.w	8003454 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d05c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d141      	bne.n	80033c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b48      	ldr	r3, [pc, #288]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe f98d 	bl	8001668 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe f989 	bl	8001668 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e078      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	019b      	lsls	r3, r3, #6
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4933      	ldr	r1, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe f962 	bl	8001668 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe f95e 	bl	8001668 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e04d      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x41c>
 80033c6:	e045      	b.n	8003454 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe f94b 	bl	8001668 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe f947 	bl	8001668 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e036      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x44a>
 80033f4:	e02e      	b.n	8003454 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e029      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	429a      	cmp	r2, r3
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d115      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003430:	4293      	cmp	r3, r2
 8003432:	d10d      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40007000 	.word	0x40007000
 8003464:	40023800 	.word	0x40023800
 8003468:	42470060 	.word	0x42470060

0800346c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0cc      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b68      	ldr	r3, [pc, #416]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d90c      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b63      	ldr	r3, [pc, #396]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0b8      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c0:	4b59      	ldr	r3, [pc, #356]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a58      	ldr	r2, [pc, #352]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b50      	ldr	r3, [pc, #320]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	494d      	ldr	r1, [pc, #308]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d044      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d119      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e067      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4934      	ldr	r1, [pc, #208]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fe f884 	bl	8001668 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe f880 	bl	8001668 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e04f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d20c      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e032      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4916      	ldr	r1, [pc, #88]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	490e      	ldr	r1, [pc, #56]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035f2:	f000 f821 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035f6:	4601      	mov	r1, r0
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	fa21 f303 	lsr.w	r3, r1, r3
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd ffe4 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00
 8003628:	40023800 	.word	0x40023800
 800362c:	08008bf4 	.word	0x08008bf4
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	2300      	movs	r3, #0
 8003648:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d007      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x32>
 800365a:	2b08      	cmp	r3, #8
 800365c:	d008      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x38>
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 80b4 	bne.w	80037cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003666:	60bb      	str	r3, [r7, #8]
       break;
 8003668:	e0b3      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800366c:	60bb      	str	r3, [r7, #8]
      break;
 800366e:	e0b0      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003678:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367a:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04a      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	f04f 0400 	mov.w	r4, #0
 8003690:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	ea03 0501 	and.w	r5, r3, r1
 800369c:	ea04 0602 	and.w	r6, r4, r2
 80036a0:	4629      	mov	r1, r5
 80036a2:	4632      	mov	r2, r6
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	0154      	lsls	r4, r2, #5
 80036ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036b2:	014b      	lsls	r3, r1, #5
 80036b4:	4619      	mov	r1, r3
 80036b6:	4622      	mov	r2, r4
 80036b8:	1b49      	subs	r1, r1, r5
 80036ba:	eb62 0206 	sbc.w	r2, r2, r6
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	f04f 0400 	mov.w	r4, #0
 80036c6:	0194      	lsls	r4, r2, #6
 80036c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036cc:	018b      	lsls	r3, r1, #6
 80036ce:	1a5b      	subs	r3, r3, r1
 80036d0:	eb64 0402 	sbc.w	r4, r4, r2
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	00e2      	lsls	r2, r4, #3
 80036de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036e2:	00d9      	lsls	r1, r3, #3
 80036e4:	460b      	mov	r3, r1
 80036e6:	4614      	mov	r4, r2
 80036e8:	195b      	adds	r3, r3, r5
 80036ea:	eb44 0406 	adc.w	r4, r4, r6
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	0262      	lsls	r2, r4, #9
 80036f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036fc:	0259      	lsls	r1, r3, #9
 80036fe:	460b      	mov	r3, r1
 8003700:	4614      	mov	r4, r2
 8003702:	4618      	mov	r0, r3
 8003704:	4621      	mov	r1, r4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	461a      	mov	r2, r3
 800370e:	4623      	mov	r3, r4
 8003710:	f7fc fdbe 	bl	8000290 <__aeabi_uldivmod>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e049      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	f240 11ff 	movw	r1, #511	; 0x1ff
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	ea03 0501 	and.w	r5, r3, r1
 8003732:	ea04 0602 	and.w	r6, r4, r2
 8003736:	4629      	mov	r1, r5
 8003738:	4632      	mov	r2, r6
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	0154      	lsls	r4, r2, #5
 8003744:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003748:	014b      	lsls	r3, r1, #5
 800374a:	4619      	mov	r1, r3
 800374c:	4622      	mov	r2, r4
 800374e:	1b49      	subs	r1, r1, r5
 8003750:	eb62 0206 	sbc.w	r2, r2, r6
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	0194      	lsls	r4, r2, #6
 800375e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003762:	018b      	lsls	r3, r1, #6
 8003764:	1a5b      	subs	r3, r3, r1
 8003766:	eb64 0402 	sbc.w	r4, r4, r2
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003778:	00d9      	lsls	r1, r3, #3
 800377a:	460b      	mov	r3, r1
 800377c:	4614      	mov	r4, r2
 800377e:	195b      	adds	r3, r3, r5
 8003780:	eb44 0406 	adc.w	r4, r4, r6
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	02a2      	lsls	r2, r4, #10
 800378e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003792:	0299      	lsls	r1, r3, #10
 8003794:	460b      	mov	r3, r1
 8003796:	4614      	mov	r4, r2
 8003798:	4618      	mov	r0, r3
 800379a:	4621      	mov	r1, r4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	461a      	mov	r2, r3
 80037a4:	4623      	mov	r3, r4
 80037a6:	f7fc fd73 	bl	8000290 <__aeabi_uldivmod>
 80037aa:	4603      	mov	r3, r0
 80037ac:	460c      	mov	r4, r1
 80037ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	60bb      	str	r3, [r7, #8]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037ce:	60bb      	str	r3, [r7, #8]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	68bb      	ldr	r3, [r7, #8]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200

080037e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e056      	b.n	80038c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fd fd4f 	bl	80012d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003848:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	ea42 0103 	orr.w	r1, r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f003 0104 	and.w	r1, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_SPI_Transmit+0x22>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e11e      	b.n	8003b28 <HAL_SPI_Transmit+0x260>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038f2:	f7fd feb9 	bl	8001668 <HAL_GetTick>
 80038f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003908:	2302      	movs	r3, #2
 800390a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800390c:	e103      	b.n	8003b16 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_SPI_Transmit+0x52>
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800391e:	e0fa      	b.n	8003b16 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2203      	movs	r2, #3
 8003924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003966:	d107      	bne.n	8003978 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003976:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d007      	beq.n	8003996 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d14b      	bne.n	8003a38 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_SPI_Transmit+0xe6>
 80039a8:	8afb      	ldrh	r3, [r7, #22]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d13e      	bne.n	8003a2c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039d2:	e02b      	b.n	8003a2c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d112      	bne.n	8003a08 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	881a      	ldrh	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a06:	e011      	b.n	8003a2c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a08:	f7fd fe2e 	bl	8001668 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d803      	bhi.n	8003a20 <HAL_SPI_Transmit+0x158>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Transmit+0x15e>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a2a:	e074      	b.n	8003b16 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ce      	bne.n	80039d4 <HAL_SPI_Transmit+0x10c>
 8003a36:	e04c      	b.n	8003ad2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Transmit+0x17e>
 8003a40:	8afb      	ldrh	r3, [r7, #22]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d140      	bne.n	8003ac8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a6c:	e02c      	b.n	8003ac8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d113      	bne.n	8003aa4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	7812      	ldrb	r2, [r2, #0]
 8003a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aa2:	e011      	b.n	8003ac8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa4:	f7fd fde0 	bl	8001668 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d803      	bhi.n	8003abc <HAL_SPI_Transmit+0x1f4>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d102      	bne.n	8003ac2 <HAL_SPI_Transmit+0x1fa>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac6:	e026      	b.n	8003b16 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1cd      	bne.n	8003a6e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa44 	bl	8003f64 <SPI_EndRxTxTransaction>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e000      	b.n	8003b16 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003b14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	; 0x30
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x26>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e18a      	b.n	8003e6c <HAL_SPI_TransmitReceive+0x33c>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5e:	f7fd fd83 	bl	8001668 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d00f      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x70>
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b86:	d107      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x68>
 8003b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d003      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b9e:	e15b      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x82>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x82>
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bb8:	e14e      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d003      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2205      	movs	r2, #5
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d007      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d178      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0x10a>
 8003c34:	8b7b      	ldrh	r3, [r7, #26]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d166      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	1c9a      	adds	r2, r3, #2
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5e:	e053      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d11b      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x176>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d016      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x176>
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d113      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d119      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x1b8>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d014      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ce8:	f7fd fcbe 	bl	8001668 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d807      	bhi.n	8003d08 <HAL_SPI_TransmitReceive+0x1d8>
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d003      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d06:	e0a7      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1a6      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x130>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1a1      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x130>
 8003d1c:	e07c      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x1fc>
 8003d26:	8b7b      	ldrh	r3, [r7, #26]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d16b      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d52:	e057      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d11c      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x26c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x26c>
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d114      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d119      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x2ae>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d014      	beq.n	8003dde <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dde:	f7fd fc43 	bl	8001668 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d803      	bhi.n	8003df6 <HAL_SPI_TransmitReceive+0x2c6>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d102      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x2cc>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e02:	e029      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1a2      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x224>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d19d      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f8a1 	bl	8003f64 <SPI_EndRxTxTransaction>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e34:	e010      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	e000      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	; 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e82:	b2db      	uxtb	r3, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ea0:	e04c      	b.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d048      	beq.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003eaa:	f7fd fbdd 	bl	8001668 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d902      	bls.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d13d      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ece:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed8:	d111      	bne.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee2:	d004      	beq.n	8003eee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d107      	bne.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f06:	d10f      	bne.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e00f      	b.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d1a3      	bne.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <SPI_EndRxTxTransaction+0x7c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <SPI_EndRxTxTransaction+0x80>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0d5b      	lsrs	r3, r3, #21
 8003f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d112      	bne.n	8003fb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ff78 	bl	8003e90 <SPI_WaitFlagStateUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00f      	b.n	8003fd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d0f2      	beq.n	8003fb6 <SPI_EndRxTxTransaction+0x52>
 8003fd0:	e000      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fd2:	bf00      	nop
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	165e9f81 	.word	0x165e9f81

08003fe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fe8:	b084      	sub	sp, #16
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	f107 001c 	add.w	r0, r7, #28
 8003ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d122      	bne.n	8004046 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d105      	bne.n	800403a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f001 fab4 	bl	80055a8 <USB_CoreReset>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e01a      	b.n	800407c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f001 faa8 	bl	80055a8 <USB_CoreReset>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800405c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
 800406e:	e005      	b.n	800407c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10b      	bne.n	800409a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f043 0206 	orr.w	r2, r3, #6
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a6:	b004      	add	sp, #16
 80040a8:	4770      	bx	lr
	...

080040ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d165      	bne.n	800418c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4a41      	ldr	r2, [pc, #260]	; (80041c8 <USB_SetTurnaroundTime+0x11c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d906      	bls.n	80040d6 <USB_SetTurnaroundTime+0x2a>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a40      	ldr	r2, [pc, #256]	; (80041cc <USB_SetTurnaroundTime+0x120>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d802      	bhi.n	80040d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040d0:	230f      	movs	r3, #15
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e062      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4a3c      	ldr	r2, [pc, #240]	; (80041cc <USB_SetTurnaroundTime+0x120>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d906      	bls.n	80040ec <USB_SetTurnaroundTime+0x40>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a3b      	ldr	r2, [pc, #236]	; (80041d0 <USB_SetTurnaroundTime+0x124>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d802      	bhi.n	80040ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040e6:	230e      	movs	r3, #14
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e057      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4a38      	ldr	r2, [pc, #224]	; (80041d0 <USB_SetTurnaroundTime+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d906      	bls.n	8004102 <USB_SetTurnaroundTime+0x56>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a37      	ldr	r2, [pc, #220]	; (80041d4 <USB_SetTurnaroundTime+0x128>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d802      	bhi.n	8004102 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040fc:	230d      	movs	r3, #13
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e04c      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4a33      	ldr	r2, [pc, #204]	; (80041d4 <USB_SetTurnaroundTime+0x128>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d906      	bls.n	8004118 <USB_SetTurnaroundTime+0x6c>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a32      	ldr	r2, [pc, #200]	; (80041d8 <USB_SetTurnaroundTime+0x12c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d802      	bhi.n	8004118 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004112:	230c      	movs	r3, #12
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e041      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <USB_SetTurnaroundTime+0x12c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d906      	bls.n	800412e <USB_SetTurnaroundTime+0x82>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <USB_SetTurnaroundTime+0x130>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d802      	bhi.n	800412e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004128:	230b      	movs	r3, #11
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e036      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <USB_SetTurnaroundTime+0x130>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d906      	bls.n	8004144 <USB_SetTurnaroundTime+0x98>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <USB_SetTurnaroundTime+0x134>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d802      	bhi.n	8004144 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800413e:	230a      	movs	r3, #10
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e02b      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <USB_SetTurnaroundTime+0x134>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d906      	bls.n	800415a <USB_SetTurnaroundTime+0xae>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <USB_SetTurnaroundTime+0x138>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d802      	bhi.n	800415a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004154:	2309      	movs	r3, #9
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e020      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <USB_SetTurnaroundTime+0x138>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d906      	bls.n	8004170 <USB_SetTurnaroundTime+0xc4>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <USB_SetTurnaroundTime+0x13c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800416a:	2308      	movs	r3, #8
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e015      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <USB_SetTurnaroundTime+0x13c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d906      	bls.n	8004186 <USB_SetTurnaroundTime+0xda>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <USB_SetTurnaroundTime+0x140>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d802      	bhi.n	8004186 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004180:	2307      	movs	r3, #7
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e00a      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004186:	2306      	movs	r3, #6
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e007      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004192:	2309      	movs	r3, #9
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e001      	b.n	800419c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004198:	2309      	movs	r3, #9
 800419a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	029b      	lsls	r3, r3, #10
 80041b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	00d8acbf 	.word	0x00d8acbf
 80041cc:	00e4e1bf 	.word	0x00e4e1bf
 80041d0:	00f423ff 	.word	0x00f423ff
 80041d4:	0106737f 	.word	0x0106737f
 80041d8:	011a499f 	.word	0x011a499f
 80041dc:	01312cff 	.word	0x01312cff
 80041e0:	014ca43f 	.word	0x014ca43f
 80041e4:	016e35ff 	.word	0x016e35ff
 80041e8:	01a6ab1f 	.word	0x01a6ab1f
 80041ec:	01e847ff 	.word	0x01e847ff

080041f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d106      	bne.n	8004260 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	e00b      	b.n	8004278 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	e001      	b.n	8004278 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e003      	b.n	8004280 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004278:	2032      	movs	r0, #50	; 0x32
 800427a:	f7fd fa01 	bl	8001680 <HAL_Delay>

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004288:	b084      	sub	sp, #16
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e009      	b.n	80042bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3340      	adds	r3, #64	; 0x40
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	3301      	adds	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b0e      	cmp	r3, #14
 80042c0:	d9f2      	bls.n	80042a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11c      	bne.n	8004302 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d6:	f043 0302 	orr.w	r3, r3, #2
 80042da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004300:	e00b      	b.n	800431a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	4619      	mov	r1, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	461a      	mov	r2, r3
 8004336:	680b      	ldr	r3, [r1, #0]
 8004338:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10c      	bne.n	800435a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004346:	2100      	movs	r1, #0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f949 	bl	80045e0 <USB_SetDevSpeed>
 800434e:	e008      	b.n	8004362 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004350:	2101      	movs	r1, #1
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f944 	bl	80045e0 <USB_SetDevSpeed>
 8004358:	e003      	b.n	8004362 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800435a:	2103      	movs	r1, #3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f93f 	bl	80045e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004362:	2110      	movs	r1, #16
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f8f3 	bl	8004550 <USB_FlushTxFifo>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f911 	bl	800459c <USB_FlushRxFifo>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	461a      	mov	r2, r3
 800438c:	2300      	movs	r3, #0
 800438e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e043      	b.n	8004436 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c4:	d118      	bne.n	80043f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	461a      	mov	r2, r3
 80043da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e013      	b.n	800440a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	461a      	mov	r2, r3
 80043f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e008      	b.n	800440a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	461a      	mov	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	461a      	mov	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	461a      	mov	r2, r3
 800442a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800442e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	3301      	adds	r3, #1
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3b7      	bcc.n	80043ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e043      	b.n	80044cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445a:	d118      	bne.n	800448e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	461a      	mov	r2, r3
 8004470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e013      	b.n	80044a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	461a      	mov	r2, r3
 8004486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e008      	b.n	80044a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	461a      	mov	r2, r3
 800449c:	2300      	movs	r3, #0
 800449e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	461a      	mov	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	461a      	mov	r2, r3
 80044c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3301      	adds	r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3b7      	bcc.n	8004444 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f043 0210 	orr.w	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <USB_DevInit+0x2c4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f043 0208 	orr.w	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004548:	b004      	add	sp, #16
 800454a:	4770      	bx	lr
 800454c:	803c3800 	.word	0x803c3800

08004550 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <USB_FlushTxFifo+0x48>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e006      	b.n	800458a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	d0f0      	beq.n	800456a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	00030d40 	.word	0x00030d40

0800459c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2210      	movs	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <USB_FlushRxFifo+0x40>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e006      	b.n	80045ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d0f0      	beq.n	80045ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	00030d40 	.word	0x00030d40

080045e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b480      	push	{r7}
 8004614:	b087      	sub	sp, #28
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
 8004636:	e00a      	b.n	800464e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d002      	beq.n	8004644 <USB_GetDevSpeed+0x32>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d102      	bne.n	800464a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004644:	2302      	movs	r3, #2
 8004646:	75fb      	strb	r3, [r7, #23]
 8004648:	e001      	b.n	800464e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800464a:	230f      	movs	r3, #15
 800464c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d13a      	bne.n	80046ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004696:	4313      	orrs	r3, r2
 8004698:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d155      	bne.n	800475c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	78db      	ldrb	r3, [r3, #3]
 80046ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	059b      	lsls	r3, r3, #22
 80046d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d4:	4313      	orrs	r3, r2
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e036      	b.n	800475c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	2101      	movs	r1, #1
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800470c:	4313      	orrs	r3, r2
 800470e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11a      	bne.n	800475c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004742:	430b      	orrs	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d161      	bne.n	800484c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800479a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800479e:	d11f      	bne.n	80047e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004800:	4013      	ands	r3, r2
 8004802:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004824:	4013      	ands	r3, r2
 8004826:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0159      	lsls	r1, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	440b      	add	r3, r1
 800483e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004842:	4619      	mov	r1, r3
 8004844:	4b35      	ldr	r3, [pc, #212]	; (800491c <USB_DeactivateEndpoint+0x1b0>)
 8004846:	4013      	ands	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
 800484a:	e060      	b.n	800490e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004862:	d11f      	bne.n	80048a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004882:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	2101      	movs	r1, #1
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	43db      	mvns	r3, r3
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c4:	4013      	ands	r3, r2
 80048c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	43db      	mvns	r3, r3
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e8:	4013      	ands	r3, r2
 80048ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0159      	lsls	r1, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	440b      	add	r3, r1
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	4619      	mov	r1, r3
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <USB_DeactivateEndpoint+0x1b4>)
 800490a:	4013      	ands	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	ec337800 	.word	0xec337800
 8004920:	eff37800 	.word	0xeff37800

08004924 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b01      	cmp	r3, #1
 8004942:	f040 815c 	bne.w	8004bfe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d132      	bne.n	80049b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800496c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ac:	0cdb      	lsrs	r3, r3, #19
 80049ae:	04db      	lsls	r3, r3, #19
 80049b0:	6113      	str	r3, [r2, #16]
 80049b2:	e074      	b.n	8004a9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ce:	0cdb      	lsrs	r3, r3, #19
 80049d0:	04db      	lsls	r3, r3, #19
 80049d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	6959      	ldr	r1, [r3, #20]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	440b      	add	r3, r1
 8004a10:	1e59      	subs	r1, r3, #1
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a1a:	04d9      	lsls	r1, r3, #19
 8004a1c:	4b9d      	ldr	r3, [pc, #628]	; (8004c94 <USB_EPStartXfer+0x370>)
 8004a1e:	400b      	ands	r3, r1
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	0148      	lsls	r0, r1, #5
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	4401      	add	r1, r0
 8004a28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	0148      	lsls	r0, r1, #5
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	4401      	add	r1, r0
 8004a4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a52:	4313      	orrs	r3, r2
 8004a54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	78db      	ldrb	r3, [r3, #3]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d11f      	bne.n	8004a9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d14b      	bne.n	8004b3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d009      	beq.n	8004ac0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d128      	bne.n	8004b1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d110      	bne.n	8004afa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e00f      	b.n	8004b1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e12f      	b.n	8004d9c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	78db      	ldrb	r3, [r3, #3]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d015      	beq.n	8004b90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8117 	beq.w	8004d9c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	69f9      	ldr	r1, [r7, #28]
 8004b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	634b      	str	r3, [r1, #52]	; 0x34
 8004b8e:	e105      	b.n	8004d9c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d110      	bne.n	8004bc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e00f      	b.n	8004be2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	68d9      	ldr	r1, [r3, #12]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	b298      	uxth	r0, r3
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fa2b 	bl	8005052 <USB_WritePacket>
 8004bfc:	e0ce      	b.n	8004d9c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c18:	0cdb      	lsrs	r3, r3, #19
 8004c1a:	04db      	lsls	r3, r3, #19
 8004c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d126      	bne.n	8004c98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	0148      	lsls	r0, r1, #5
 8004c64:	69f9      	ldr	r1, [r7, #28]
 8004c66:	4401      	add	r1, r0
 8004c68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c8e:	6113      	str	r3, [r2, #16]
 8004c90:	e036      	b.n	8004d00 <USB_EPStartXfer+0x3dc>
 8004c92:	bf00      	nop
 8004c94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	1e5a      	subs	r2, r3, #1
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	8afb      	ldrh	r3, [r7, #22]
 8004cbe:	04d9      	lsls	r1, r3, #19
 8004cc0:	4b39      	ldr	r3, [pc, #228]	; (8004da8 <USB_EPStartXfer+0x484>)
 8004cc2:	400b      	ands	r3, r1
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	0148      	lsls	r0, r1, #5
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	4401      	add	r1, r0
 8004ccc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	8af9      	ldrh	r1, [r7, #22]
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	0148      	lsls	r0, r1, #5
 8004cf4:	69f9      	ldr	r1, [r7, #28]
 8004cf6:	4401      	add	r1, r0
 8004cf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10d      	bne.n	8004d22 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	68d9      	ldr	r1, [r3, #12]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1e:	460a      	mov	r2, r1
 8004d20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	78db      	ldrb	r3, [r3, #3]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d128      	bne.n	8004d7c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d110      	bne.n	8004d5c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00f      	b.n	8004d7c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	1ff80000 	.word	0x1ff80000

08004dac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 80cd 	bne.w	8004f68 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d132      	bne.n	8004e3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	0cdb      	lsrs	r3, r3, #19
 8004e36:	04db      	lsls	r3, r3, #19
 8004e38:	6113      	str	r3, [r2, #16]
 8004e3a:	e04e      	b.n	8004eda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e56:	0cdb      	lsrs	r3, r3, #19
 8004e58:	04db      	lsls	r3, r3, #19
 8004e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d903      	bls.n	8004e94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eca:	6939      	ldr	r1, [r7, #16]
 8004ecc:	0148      	lsls	r0, r1, #5
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	4401      	add	r1, r0
 8004ed2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d11e      	bne.n	8004f1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	e092      	b.n	8005044 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d07e      	beq.n	8005044 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	2101      	movs	r1, #1
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f62:	4313      	orrs	r3, r2
 8004f64:	634b      	str	r3, [r1, #52]	; 0x34
 8004f66:	e06d      	b.n	8005044 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f82:	0cdb      	lsrs	r3, r3, #19
 8004f84:	04db      	lsls	r3, r3, #19
 8004f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004faa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	0148      	lsls	r0, r1, #5
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	4401      	add	r1, r0
 8004ffa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ffe:	4313      	orrs	r3, r2
 8005000:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10d      	bne.n	8005024 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	68d9      	ldr	r1, [r3, #12]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	460a      	mov	r2, r1
 8005022:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005052:	b480      	push	{r7}
 8005054:	b089      	sub	sp, #36	; 0x24
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	4611      	mov	r1, r2
 800505e:	461a      	mov	r2, r3
 8005060:	460b      	mov	r3, r1
 8005062:	71fb      	strb	r3, [r7, #7]
 8005064:	4613      	mov	r3, r2
 8005066:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11a      	bne.n	80050ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005078:	88bb      	ldrh	r3, [r7, #4]
 800507a:	3303      	adds	r3, #3
 800507c:	089b      	lsrs	r3, r3, #2
 800507e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e00f      	b.n	80050a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	031a      	lsls	r2, r3, #12
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005092:	461a      	mov	r2, r3
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6013      	str	r3, [r2, #0]
      pSrc++;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3304      	adds	r3, #4
 800509e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3eb      	bcc.n	8005086 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3724      	adds	r7, #36	; 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	3303      	adds	r3, #3
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e00b      	b.n	80050f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	3304      	adds	r3, #4
 80050f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d3ef      	bcc.n	80050e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005100:	69fb      	ldr	r3, [r7, #28]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d12c      	bne.n	8005184 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db12      	blt.n	8005162 <USB_EPSetStall+0x54>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00f      	beq.n	8005162 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005160:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e02b      	b.n	80051dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	db12      	blt.n	80051bc <USB_EPSetStall+0xae>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00f      	beq.n	80051bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d128      	bne.n	8005258 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005220:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005224:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	78db      	ldrb	r3, [r3, #3]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d003      	beq.n	8005236 <USB_EPClearStall+0x4c>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	78db      	ldrb	r3, [r3, #3]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d138      	bne.n	80052a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e027      	b.n	80052a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005276:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	78db      	ldrb	r3, [r3, #3]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d003      	beq.n	8005288 <USB_EPClearStall+0x9e>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d10f      	bne.n	80052a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f0:	4313      	orrs	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531c:	f023 0302 	bic.w	r3, r3, #2
 8005320:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005322:	2003      	movs	r0, #3
 8005324:	f7fc f9ac 	bl	8001680 <HAL_Delay>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005352:	2003      	movs	r0, #3
 8005354:	f7fc f994 	bl	8001680 <HAL_Delay>

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	0c1b      	lsrs	r3, r3, #16
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	b29b      	uxth	r3, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800541e:	68bb      	ldr	r3, [r7, #8]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	b2db      	uxtb	r3, r3
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4013      	ands	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800547a:	68bb      	ldr	r3, [r7, #8]
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0301 	and.w	r3, r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	460b      	mov	r3, r1
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	333c      	adds	r3, #60	; 0x3c
 8005502:	3304      	adds	r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <USB_EP0_OutStart+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d90a      	bls.n	8005526 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005520:	d101      	bne.n	8005526 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e037      	b.n	8005596 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f043 0318 	orr.w	r3, r3, #24
 8005558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005568:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800556c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10f      	bne.n	8005594 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	4f54300a 	.word	0x4f54300a

080055a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <USB_CoreReset+0x64>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e01b      	b.n	80055fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	daf2      	bge.n	80055b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <USB_CoreReset+0x64>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d0f0      	beq.n	80055de <USB_CoreReset+0x36>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	00030d40 	.word	0x00030d40

08005610 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800561c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005620:	f002 f938 	bl	8007894 <malloc>
 8005624:	4603      	mov	r3, r0
 8005626:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005636:	2302      	movs	r3, #2
 8005638:	e066      	b.n	8005708 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	7c1b      	ldrb	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d119      	bne.n	800567e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800564a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800564e:	2202      	movs	r2, #2
 8005650:	2181      	movs	r1, #129	; 0x81
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 ffa5 	bl	80075a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800565e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005662:	2202      	movs	r2, #2
 8005664:	2101      	movs	r1, #1
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 ff9b 	bl	80075a2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2210      	movs	r2, #16
 8005678:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800567c:	e016      	b.n	80056ac <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	2202      	movs	r2, #2
 8005682:	2181      	movs	r1, #129	; 0x81
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 ff8c 	bl	80075a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	2202      	movs	r2, #2
 8005694:	2101      	movs	r1, #1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 ff83 	bl	80075a2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2210      	movs	r2, #16
 80056a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056ac:	2308      	movs	r3, #8
 80056ae:	2203      	movs	r2, #3
 80056b0:	2182      	movs	r1, #130	; 0x82
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 ff75 	bl	80075a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7c1b      	ldrb	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ec:	2101      	movs	r1, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f002 f846 	bl	8007780 <USBD_LL_PrepareReceive>
 80056f4:	e007      	b.n	8005706 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	2101      	movs	r1, #1
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f002 f83d 	bl	8007780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005720:	2181      	movs	r1, #129	; 0x81
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 ff63 	bl	80075ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800572e:	2101      	movs	r1, #1
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 ff5c 	bl	80075ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800573e:	2182      	movs	r1, #130	; 0x82
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 ff54 	bl	80075ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005770:	4618      	mov	r0, r3
 8005772:	f002 f897 	bl	80078a4 <free>
    pdev->pClassData = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005798:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d03a      	beq.n	8005828 <USBD_CDC_Setup+0xa0>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 8097 	bne.w	80058e6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	88db      	ldrh	r3, [r3, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d029      	beq.n	8005814 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da11      	bge.n	80057ee <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80057d6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	88d2      	ldrh	r2, [r2, #6]
 80057dc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	88db      	ldrh	r3, [r3, #6]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fa9d 	bl	8006d26 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80057ec:	e082      	b.n	80058f4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	785a      	ldrb	r2, [r3, #1]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	88db      	ldrh	r3, [r3, #6]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005804:	6939      	ldr	r1, [r7, #16]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	88db      	ldrh	r3, [r3, #6]
 800580a:	461a      	mov	r2, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fab6 	bl	8006d7e <USBD_CtlPrepareRx>
    break;
 8005812:	e06f      	b.n	80058f4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	7850      	ldrb	r0, [r2, #1]
 8005820:	2200      	movs	r2, #0
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	4798      	blx	r3
    break;
 8005826:	e065      	b.n	80058f4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b0b      	cmp	r3, #11
 800582e:	d84f      	bhi.n	80058d0 <USBD_CDC_Setup+0x148>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <USBD_CDC_Setup+0xb0>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005869 	.word	0x08005869
 800583c:	080058df 	.word	0x080058df
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058d1 	.word	0x080058d1
 8005854:	080058d1 	.word	0x080058d1
 8005858:	080058d1 	.word	0x080058d1
 800585c:	080058d1 	.word	0x080058d1
 8005860:	08005891 	.word	0x08005891
 8005864:	080058b9 	.word	0x080058b9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586e:	2b03      	cmp	r3, #3
 8005870:	d107      	bne.n	8005882 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005872:	f107 030c 	add.w	r3, r7, #12
 8005876:	2202      	movs	r2, #2
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fa53 	bl	8006d26 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005880:	e030      	b.n	80058e4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f9dd 	bl	8006c44 <USBD_CtlError>
        ret = USBD_FAIL;
 800588a:	2303      	movs	r3, #3
 800588c:	75fb      	strb	r3, [r7, #23]
      break;
 800588e:	e029      	b.n	80058e4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005896:	2b03      	cmp	r3, #3
 8005898:	d107      	bne.n	80058aa <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800589a:	f107 030f 	add.w	r3, r7, #15
 800589e:	2201      	movs	r2, #1
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fa3f 	bl	8006d26 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80058a8:	e01c      	b.n	80058e4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 f9c9 	bl	8006c44 <USBD_CtlError>
        ret = USBD_FAIL;
 80058b2:	2303      	movs	r3, #3
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	e015      	b.n	80058e4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d00f      	beq.n	80058e2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f9bd 	bl	8006c44 <USBD_CtlError>
        ret = USBD_FAIL;
 80058ca:	2303      	movs	r3, #3
 80058cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80058ce:	e008      	b.n	80058e2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 f9b6 	bl	8006c44 <USBD_CtlError>
      ret = USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	e002      	b.n	80058e4 <USBD_CDC_Setup+0x15c>
      break;
 80058de:	bf00      	nop
 80058e0:	e008      	b.n	80058f4 <USBD_CDC_Setup+0x16c>
      break;
 80058e2:	bf00      	nop
    }
    break;
 80058e4:	e006      	b.n	80058f4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f9ab 	bl	8006c44 <USBD_CtlError>
    ret = USBD_FAIL;
 80058ee:	2303      	movs	r3, #3
 80058f0:	75fb      	strb	r3, [r7, #23]
    break;
 80058f2:	bf00      	nop
  }

  return (uint8_t)ret;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005912:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	e049      	b.n	80059b6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005928:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3318      	adds	r3, #24
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d029      	beq.n	8005994 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	3318      	adds	r3, #24
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	78f9      	ldrb	r1, [r7, #3]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	460b      	mov	r3, r1
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4403      	add	r3, r0
 8005960:	3344      	adds	r3, #68	; 0x44
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	fbb2 f1f3 	udiv	r1, r2, r3
 8005968:	fb03 f301 	mul.w	r3, r3, r1
 800596c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800596e:	2b00      	cmp	r3, #0
 8005970:	d110      	bne.n	8005994 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3318      	adds	r3, #24
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005986:	78f9      	ldrb	r1, [r7, #3]
 8005988:	2300      	movs	r3, #0
 800598a:	2200      	movs	r2, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fed6 	bl	800773e <USBD_LL_Transmit>
 8005992:	e00f      	b.n	80059b4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059dc:	2303      	movs	r3, #3
 80059de:	e015      	b.n	8005a0c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 feec 	bl	80077c2 <USBD_LL_GetRxDataSize>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a06:	4611      	mov	r1, r2
 8005a08:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a22:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <USBD_CDC_EP0_RxReady+0x46>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a34:	2bff      	cmp	r3, #255	; 0xff
 8005a36:	d010      	beq.n	8005a5a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a4e:	b292      	uxth	r2, r2
 8005a50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2243      	movs	r2, #67	; 0x43
 8005a70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a72:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000094 	.word	0x20000094

08005a84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2243      	movs	r2, #67	; 0x43
 8005a90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005a92:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000050 	.word	0x20000050

08005aa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2243      	movs	r2, #67	; 0x43
 8005ab0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ab2:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	200000d8 	.word	0x200000d8

08005ac4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	220a      	movs	r2, #10
 8005ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ad2:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	2000000c 	.word	0x2000000c

08005ae4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e004      	b.n	8005b02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b50:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e01a      	b.n	8005bc0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d114      	bne.n	8005bbe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bb2:	2181      	movs	r1, #129	; 0x81
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fdc2 	bl	800773e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e016      	b.n	8005c14 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7c1b      	ldrb	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fdc0 	bl	8007780 <USBD_LL_PrepareReceive>
 8005c00:	e007      	b.n	8005c12 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fdb7 	bl	8007780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e025      	b.n	8005c80 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	79fa      	ldrb	r2, [r7, #7]
 8005c72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 fc2d 	bl	80074d4 <USBD_LL_Init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e010      	b.n	8005cc2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	f107 020e 	add.w	r2, r7, #14
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	4602      	mov	r2, r0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fc4a 	bl	800756c <USBD_LL_Start>
 8005cd8:	4603      	mov	r3, r0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	4611      	mov	r1, r2
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
  }

  return USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 ff2c 	bl	8006bd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d00e      	beq.n	8005dba <USBD_LL_SetupStage+0x5a>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d302      	bcc.n	8005da6 <USBD_LL_SetupStage+0x46>
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d014      	beq.n	8005dce <USBD_LL_SetupStage+0x6e>
 8005da4:	e01d      	b.n	8005de2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa18 	bl	80061e4 <USBD_StdDevReq>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e020      	b.n	8005dfc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa7c 	bl	80062c0 <USBD_StdItfReq>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]
      break;
 8005dcc:	e016      	b.n	8005dfc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fab8 	bl	800634c <USBD_StdEPReq>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e00c      	b.n	8005dfc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fc1b 	bl	800762c <USBD_LL_StallEP>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfa:	bf00      	nop
  }

  return ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d137      	bne.n	8005e8a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d14a      	bne.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d913      	bls.n	8005e60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	1ad2      	subs	r2, r2, r3
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bf28      	it	cs
 8005e52:	4613      	movcs	r3, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 ffad 	bl	8006db8 <USBD_CtlContinueRx>
 8005e5e:	e030      	b.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d105      	bne.n	8005e82 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 ffa9 	bl	8006dda <USBD_CtlSendStatus>
 8005e88:	e01b      	b.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d10e      	bne.n	8005ebe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	7afa      	ldrb	r2, [r7, #11]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	e002      	b.n	8005ec4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e000      	b.n	8005ec4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d16a      	bne.n	8005fb6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d155      	bne.n	8005f9c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d914      	bls.n	8005f26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 ff22 	bl	8006d5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f001 fc2e 	bl	8007780 <USBD_LL_PrepareReceive>
 8005f24:	e03a      	b.n	8005f9c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d11c      	bne.n	8005f6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d316      	bcc.n	8005f6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d20f      	bcs.n	8005f6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2100      	movs	r1, #0
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 ff03 	bl	8006d5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2200      	movs	r2, #0
 8005f62:	2100      	movs	r1, #0
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f001 fc0b 	bl	8007780 <USBD_LL_PrepareReceive>
 8005f6a:	e017      	b.n	8005f9c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d105      	bne.n	8005f8e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f001 fb4b 	bl	800762c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 ff32 	bl	8006e00 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d123      	bne.n	8005fee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fe9b 	bl	8005ce2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb4:	e01b      	b.n	8005fee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d10e      	bne.n	8005fea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	7afa      	ldrb	r2, [r7, #11]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	e002      	b.n	8005ff0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e000      	b.n	8005ff0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6852      	ldr	r2, [r2, #4]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	4611      	mov	r1, r2
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 faad 	bl	80075a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	2200      	movs	r2, #0
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fa9f 	bl	80075a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2240      	movs	r2, #64	; 0x40
 800606e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2204      	movs	r2, #4
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d105      	bne.n	80060e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d10b      	bne.n	800611a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6852      	ldr	r2, [r2, #4]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	4611      	mov	r1, r2
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
  }

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	3301      	adds	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061c4:	8a3b      	ldrh	r3, [r7, #16]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	b21a      	sxth	r2, r3
 80061ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061d4:	89fb      	ldrh	r3, [r7, #14]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d004      	beq.n	8006208 <USBD_StdDevReq+0x24>
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d002      	beq.n	8006208 <USBD_StdDevReq+0x24>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <USBD_StdDevReq+0x38>
 8006206:	e050      	b.n	80062aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
    break;
 800621a:	e04b      	b.n	80062b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b09      	cmp	r3, #9
 8006222:	d83c      	bhi.n	800629e <USBD_StdDevReq+0xba>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <USBD_StdDevReq+0x48>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006281 	.word	0x08006281
 8006230:	08006295 	.word	0x08006295
 8006234:	0800629f 	.word	0x0800629f
 8006238:	0800628b 	.word	0x0800628b
 800623c:	0800629f 	.word	0x0800629f
 8006240:	0800625f 	.word	0x0800625f
 8006244:	08006255 	.word	0x08006255
 8006248:	0800629f 	.word	0x0800629f
 800624c:	08006277 	.word	0x08006277
 8006250:	08006269 	.word	0x08006269
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9ce 	bl	80065f8 <USBD_GetDescriptor>
      break;
 800625c:	e024      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb33 	bl	80068cc <USBD_SetAddress>
      break;
 8006266:	e01f      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb70 	bl	8006950 <USBD_SetConfig>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e018      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc0d 	bl	8006a98 <USBD_GetConfig>
      break;
 800627e:	e013      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc3c 	bl	8006b00 <USBD_GetStatus>
      break;
 8006288:	e00e      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fc6a 	bl	8006b66 <USBD_SetFeature>
      break;
 8006292:	e009      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fc79 	bl	8006b8e <USBD_ClrFeature>
      break;
 800629c:	e004      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fccf 	bl	8006c44 <USBD_CtlError>
      break;
 80062a6:	bf00      	nop
    }
    break;
 80062a8:	e004      	b.n	80062b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fcc9 	bl	8006c44 <USBD_CtlError>
    break;
 80062b2:	bf00      	nop
  }

  return ret;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop

080062c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d003      	beq.n	80062e2 <USBD_StdItfReq+0x22>
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d001      	beq.n	80062e2 <USBD_StdItfReq+0x22>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d12a      	bne.n	8006338 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	3b01      	subs	r3, #1
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d81d      	bhi.n	800632a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	889b      	ldrh	r3, [r3, #4]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d813      	bhi.n	8006320 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	88db      	ldrh	r3, [r3, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d110      	bne.n	8006334 <USBD_StdItfReq+0x74>
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10d      	bne.n	8006334 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fd5e 	bl	8006dda <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800631e:	e009      	b.n	8006334 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fc8e 	bl	8006c44 <USBD_CtlError>
      break;
 8006328:	e004      	b.n	8006334 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fc89 	bl	8006c44 <USBD_CtlError>
      break;
 8006332:	e000      	b.n	8006336 <USBD_StdItfReq+0x76>
      break;
 8006334:	bf00      	nop
    }
    break;
 8006336:	e004      	b.n	8006342 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fc82 	bl	8006c44 <USBD_CtlError>
    break;
 8006340:	bf00      	nop
  }

  return ret;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006368:	2b20      	cmp	r3, #32
 800636a:	d004      	beq.n	8006376 <USBD_StdEPReq+0x2a>
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d002      	beq.n	8006376 <USBD_StdEPReq+0x2a>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <USBD_StdEPReq+0x3e>
 8006374:	e135      	b.n	80065e2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
    break;
 8006388:	e130      	b.n	80065ec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d03e      	beq.n	8006410 <USBD_StdEPReq+0xc4>
 8006392:	2b03      	cmp	r3, #3
 8006394:	d002      	beq.n	800639c <USBD_StdEPReq+0x50>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d077      	beq.n	800648a <USBD_StdEPReq+0x13e>
 800639a:	e11c      	b.n	80065d6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d002      	beq.n	80063ac <USBD_StdEPReq+0x60>
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d015      	beq.n	80063d6 <USBD_StdEPReq+0x8a>
 80063aa:	e02b      	b.n	8006404 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00c      	beq.n	80063cc <USBD_StdEPReq+0x80>
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b80      	cmp	r3, #128	; 0x80
 80063b6:	d009      	beq.n	80063cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 f935 	bl	800762c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063c2:	2180      	movs	r1, #128	; 0x80
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 f931 	bl	800762c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063ca:	e020      	b.n	800640e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc38 	bl	8006c44 <USBD_CtlError>
        break;
 80063d4:	e01b      	b.n	800640e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	885b      	ldrh	r3, [r3, #2]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10e      	bne.n	80063fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_StdEPReq+0xb0>
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b80      	cmp	r3, #128	; 0x80
 80063e8:	d008      	beq.n	80063fc <USBD_StdEPReq+0xb0>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	88db      	ldrh	r3, [r3, #6]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 f918 	bl	800762c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fcec 	bl	8006dda <USBD_CtlSendStatus>

        break;
 8006402:	e004      	b.n	800640e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fc1c 	bl	8006c44 <USBD_CtlError>
        break;
 800640c:	bf00      	nop
      }
      break;
 800640e:	e0e7      	b.n	80065e0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006416:	2b02      	cmp	r3, #2
 8006418:	d002      	beq.n	8006420 <USBD_StdEPReq+0xd4>
 800641a:	2b03      	cmp	r3, #3
 800641c:	d015      	beq.n	800644a <USBD_StdEPReq+0xfe>
 800641e:	e02d      	b.n	800647c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <USBD_StdEPReq+0xf4>
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d009      	beq.n	8006440 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f8fb 	bl	800762c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006436:	2180      	movs	r1, #128	; 0x80
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f8f7 	bl	800762c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800643e:	e023      	b.n	8006488 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fbfe 	bl	8006c44 <USBD_CtlError>
        break;
 8006448:	e01e      	b.n	8006488 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	885b      	ldrh	r3, [r3, #2]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d119      	bne.n	8006486 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f902 	bl	800766a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fcb7 	bl	8006dda <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
        }
        break;
 800647a:	e004      	b.n	8006486 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fbe0 	bl	8006c44 <USBD_CtlError>
        break;
 8006484:	e000      	b.n	8006488 <USBD_StdEPReq+0x13c>
        break;
 8006486:	bf00      	nop
      }
      break;
 8006488:	e0aa      	b.n	80065e0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006490:	2b02      	cmp	r3, #2
 8006492:	d002      	beq.n	800649a <USBD_StdEPReq+0x14e>
 8006494:	2b03      	cmp	r3, #3
 8006496:	d032      	beq.n	80064fe <USBD_StdEPReq+0x1b2>
 8006498:	e097      	b.n	80065ca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <USBD_StdEPReq+0x164>
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d004      	beq.n	80064b0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fbcb 	bl	8006c44 <USBD_CtlError>
          break;
 80064ae:	e091      	b.n	80065d4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da0b      	bge.n	80064d0 <USBD_StdEPReq+0x184>
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	3310      	adds	r3, #16
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	3304      	adds	r3, #4
 80064ce:	e00b      	b.n	80064e8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	3304      	adds	r3, #4
 80064e8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2202      	movs	r2, #2
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fc15 	bl	8006d26 <USBD_CtlSendData>
        break;
 80064fc:	e06a      	b.n	80065d4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80064fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da11      	bge.n	800652a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	f003 020f 	and.w	r2, r3, #15
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	3324      	adds	r3, #36	; 0x24
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d117      	bne.n	8006550 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fb8e 	bl	8006c44 <USBD_CtlError>
            break;
 8006528:	e054      	b.n	80065d4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb7b 	bl	8006c44 <USBD_CtlError>
            break;
 800654e:	e041      	b.n	80065d4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006554:	2b00      	cmp	r3, #0
 8006556:	da0b      	bge.n	8006570 <USBD_StdEPReq+0x224>
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	3310      	adds	r3, #16
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	e00b      	b.n	8006588 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	3304      	adds	r3, #4
 8006588:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <USBD_StdEPReq+0x24a>
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d103      	bne.n	800659e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e00e      	b.n	80065bc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 f880 	bl	80076a8 <USBD_LL_IsStallEP>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e002      	b.n	80065bc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2202      	movs	r2, #2
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fbaf 	bl	8006d26 <USBD_CtlSendData>
          break;
 80065c8:	e004      	b.n	80065d4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb39 	bl	8006c44 <USBD_CtlError>
        break;
 80065d2:	bf00      	nop
      }
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb33 	bl	8006c44 <USBD_CtlError>
      break;
 80065de:	bf00      	nop
    }
    break;
 80065e0:	e004      	b.n	80065ec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb2d 	bl	8006c44 <USBD_CtlError>
    break;
 80065ea:	bf00      	nop
  }

  return ret;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	885b      	ldrh	r3, [r3, #2]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	2b06      	cmp	r3, #6
 800661a:	f200 8128 	bhi.w	800686e <USBD_GetDescriptor+0x276>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <USBD_GetDescriptor+0x2c>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006641 	.word	0x08006641
 8006628:	08006659 	.word	0x08006659
 800662c:	08006699 	.word	0x08006699
 8006630:	0800686f 	.word	0x0800686f
 8006634:	0800686f 	.word	0x0800686f
 8006638:	0800680f 	.word	0x0800680f
 800663c:	0800683b 	.word	0x0800683b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	7c12      	ldrb	r2, [r2, #16]
 800664c:	f107 0108 	add.w	r1, r7, #8
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	60f8      	str	r0, [r7, #12]
    break;
 8006656:	e112      	b.n	800687e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7c1b      	ldrb	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10d      	bne.n	800667c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f107 0208 	add.w	r2, r7, #8
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
 8006670:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3301      	adds	r3, #1
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800667a:	e100      	b.n	800687e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f107 0208 	add.w	r2, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	2202      	movs	r2, #2
 8006694:	701a      	strb	r2, [r3, #0]
    break;
 8006696:	e0f2      	b.n	800687e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	885b      	ldrh	r3, [r3, #2]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b05      	cmp	r3, #5
 80066a0:	f200 80ac 	bhi.w	80067fc <USBD_GetDescriptor+0x204>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <USBD_GetDescriptor+0xb4>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066f9 	.word	0x080066f9
 80066b4:	0800672d 	.word	0x0800672d
 80066b8:	08006761 	.word	0x08006761
 80066bc:	08006795 	.word	0x08006795
 80066c0:	080067c9 	.word	0x080067c9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066e6:	e091      	b.n	800680c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 faaa 	bl	8006c44 <USBD_CtlError>
        err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
      break;
 80066f6:	e089      	b.n	800680c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800671a:	e077      	b.n	800680c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa90 	bl	8006c44 <USBD_CtlError>
        err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
      break;
 800672a:	e06f      	b.n	800680c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 0108 	add.w	r1, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800674e:	e05d      	b.n	800680c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa76 	bl	8006c44 <USBD_CtlError>
        err++;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3301      	adds	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]
      break;
 800675e:	e055      	b.n	800680c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7c12      	ldrb	r2, [r2, #16]
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006782:	e043      	b.n	800680c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa5c 	bl	8006c44 <USBD_CtlError>
        err++;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	3301      	adds	r3, #1
 8006790:	72fb      	strb	r3, [r7, #11]
      break;
 8006792:	e03b      	b.n	800680c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067b6:	e029      	b.n	800680c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa42 	bl	8006c44 <USBD_CtlError>
        err++;
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	3301      	adds	r3, #1
 80067c4:	72fb      	strb	r3, [r7, #11]
      break;
 80067c6:	e021      	b.n	800680c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	7c12      	ldrb	r2, [r2, #16]
 80067e0:	f107 0108 	add.w	r1, r7, #8
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ea:	e00f      	b.n	800680c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa28 	bl	8006c44 <USBD_CtlError>
        err++;
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	3301      	adds	r3, #1
 80067f8:	72fb      	strb	r3, [r7, #11]
      break;
 80067fa:	e007      	b.n	800680c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa20 	bl	8006c44 <USBD_CtlError>
      err++;
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	3301      	adds	r3, #1
 8006808:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800680a:	bf00      	nop
    }
    break;
 800680c:	e037      	b.n	800687e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	7c1b      	ldrb	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681e:	f107 0208 	add.w	r2, r7, #8
 8006822:	4610      	mov	r0, r2
 8006824:	4798      	blx	r3
 8006826:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006828:	e029      	b.n	800687e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fa09 	bl	8006c44 <USBD_CtlError>
      err++;
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	3301      	adds	r3, #1
 8006836:	72fb      	strb	r3, [r7, #11]
    break;
 8006838:	e021      	b.n	800687e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7c1b      	ldrb	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10d      	bne.n	800685e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f107 0208 	add.w	r2, r7, #8
 800684e:	4610      	mov	r0, r2
 8006850:	4798      	blx	r3
 8006852:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	2207      	movs	r2, #7
 800685a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800685c:	e00f      	b.n	800687e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f9ef 	bl	8006c44 <USBD_CtlError>
      err++;
 8006866:	7afb      	ldrb	r3, [r7, #11]
 8006868:	3301      	adds	r3, #1
 800686a:	72fb      	strb	r3, [r7, #11]
    break;
 800686c:	e007      	b.n	800687e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f9e7 	bl	8006c44 <USBD_CtlError>
    err++;
 8006876:	7afb      	ldrb	r3, [r7, #11]
 8006878:	3301      	adds	r3, #1
 800687a:	72fb      	strb	r3, [r7, #11]
    break;
 800687c:	bf00      	nop
  }

  if (err != 0U)
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11e      	bne.n	80068c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	88db      	ldrh	r3, [r3, #6]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d016      	beq.n	80068ba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800688c:	893b      	ldrh	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	88da      	ldrh	r2, [r3, #6]
 8006896:	893b      	ldrh	r3, [r7, #8]
 8006898:	4293      	cmp	r3, r2
 800689a:	bf28      	it	cs
 800689c:	4613      	movcs	r3, r2
 800689e:	b29b      	uxth	r3, r3
 80068a0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80068a2:	893b      	ldrh	r3, [r7, #8]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa3c 	bl	8006d26 <USBD_CtlSendData>
 80068ae:	e009      	b.n	80068c4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9c6 	bl	8006c44 <USBD_CtlError>
 80068b8:	e004      	b.n	80068c4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa8d 	bl	8006dda <USBD_CtlSendStatus>
 80068c0:	e000      	b.n	80068c4 <USBD_GetDescriptor+0x2cc>
    return;
 80068c2:	bf00      	nop
    }
  }
}
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	889b      	ldrh	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d130      	bne.n	8006940 <USBD_SetAddress+0x74>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d12c      	bne.n	8006940 <USBD_SetAddress+0x74>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	885b      	ldrh	r3, [r3, #2]
 80068ea:	2b7f      	cmp	r3, #127	; 0x7f
 80068ec:	d828      	bhi.n	8006940 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	885b      	ldrh	r3, [r3, #2]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006900:	2b03      	cmp	r3, #3
 8006902:	d104      	bne.n	800690e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f99c 	bl	8006c44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690c:	e01c      	b.n	8006948 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7bfa      	ldrb	r2, [r7, #15]
 8006912:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fef0 	bl	8007700 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa5a 	bl	8006dda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006934:	e008      	b.n	8006948 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693e:	e003      	b.n	8006948 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f97e 	bl	8006c44 <USBD_CtlError>
  }
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	885b      	ldrh	r3, [r3, #2]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	4b4b      	ldr	r3, [pc, #300]	; (8006a94 <USBD_SetConfig+0x144>)
 8006966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006968:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <USBD_SetConfig+0x144>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d905      	bls.n	800697c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f966 	bl	8006c44 <USBD_CtlError>
    return USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	e087      	b.n	8006a8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	2b02      	cmp	r3, #2
 8006984:	d002      	beq.n	800698c <USBD_SetConfig+0x3c>
 8006986:	2b03      	cmp	r3, #3
 8006988:	d025      	beq.n	80069d6 <USBD_SetConfig+0x86>
 800698a:	e071      	b.n	8006a70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800698c:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <USBD_SetConfig+0x144>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01c      	beq.n	80069ce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006994:	4b3f      	ldr	r3, [pc, #252]	; (8006a94 <USBD_SetConfig+0x144>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800699e:	4b3d      	ldr	r3, [pc, #244]	; (8006a94 <USBD_SetConfig+0x144>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff f9a7 	bl	8005cf8 <USBD_SetClassConfig>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f944 	bl	8006c44 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80069bc:	e065      	b.n	8006a8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa0b 	bl	8006dda <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80069cc:	e05d      	b.n	8006a8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa03 	bl	8006dda <USBD_CtlSendStatus>
    break;
 80069d4:	e059      	b.n	8006a8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80069d6:	4b2f      	ldr	r3, [pc, #188]	; (8006a94 <USBD_SetConfig+0x144>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d112      	bne.n	8006a04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80069e6:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <USBD_SetConfig+0x144>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069f0:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <USBD_SetConfig+0x144>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff f99a 	bl	8005d30 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f9ec 	bl	8006dda <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006a02:	e042      	b.n	8006a8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006a04:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <USBD_SetConfig+0x144>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d02a      	beq.n	8006a68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff f988 	bl	8005d30 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <USBD_SetConfig+0x144>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a2a:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <USBD_SetConfig+0x144>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff f961 	bl	8005cf8 <USBD_SetClassConfig>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00f      	beq.n	8006a60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f8fe 	bl	8006c44 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff f96d 	bl	8005d30 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a5e:	e014      	b.n	8006a8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9ba 	bl	8006dda <USBD_CtlSendStatus>
    break;
 8006a66:	e010      	b.n	8006a8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9b6 	bl	8006dda <USBD_CtlSendStatus>
    break;
 8006a6e:	e00c      	b.n	8006a8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8e6 	bl	8006c44 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <USBD_SetConfig+0x144>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff f956 	bl	8005d30 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006a84:	2303      	movs	r3, #3
 8006a86:	73fb      	strb	r3, [r7, #15]
    break;
 8006a88:	bf00      	nop
  }

  return ret;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000208 	.word	0x20000208

08006a98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	88db      	ldrh	r3, [r3, #6]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d004      	beq.n	8006ab4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8c9 	bl	8006c44 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006ab2:	e021      	b.n	8006af8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	db17      	blt.n	8006aee <USBD_GetConfig+0x56>
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	dd02      	ble.n	8006ac8 <USBD_GetConfig+0x30>
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d00b      	beq.n	8006ade <USBD_GetConfig+0x46>
 8006ac6:	e012      	b.n	8006aee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f925 	bl	8006d26 <USBD_CtlSendData>
      break;
 8006adc:	e00c      	b.n	8006af8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f91d 	bl	8006d26 <USBD_CtlSendData>
      break;
 8006aec:	e004      	b.n	8006af8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f8a7 	bl	8006c44 <USBD_CtlError>
      break;
 8006af6:	bf00      	nop
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b10:	3b01      	subs	r3, #1
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d81e      	bhi.n	8006b54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	88db      	ldrh	r3, [r3, #6]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d004      	beq.n	8006b28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f88f 	bl	8006c44 <USBD_CtlError>
      break;
 8006b26:	e01a      	b.n	8006b5e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f043 0202 	orr.w	r2, r3, #2
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	330c      	adds	r3, #12
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f8ea 	bl	8006d26 <USBD_CtlSendData>
    break;
 8006b52:	e004      	b.n	8006b5e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f874 	bl	8006c44 <USBD_CtlError>
    break;
 8006b5c:	bf00      	nop
  }
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d106      	bne.n	8006b86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f92a 	bl	8006dda <USBD_CtlSendStatus>
  }
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d80b      	bhi.n	8006bbc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	885b      	ldrh	r3, [r3, #2]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d10c      	bne.n	8006bc6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f910 	bl	8006dda <USBD_CtlSendStatus>
      }
      break;
 8006bba:	e004      	b.n	8006bc6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f840 	bl	8006c44 <USBD_CtlError>
      break;
 8006bc4:	e000      	b.n	8006bc8 <USBD_ClrFeature+0x3a>
      break;
 8006bc6:	bf00      	nop
  }
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fad3 	bl	80061a6 <SWAPBYTE>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fac6 	bl	80061a6 <SWAPBYTE>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fab9 	bl	80061a6 <SWAPBYTE>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	80da      	strh	r2, [r3, #6]
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4e:	2180      	movs	r1, #128	; 0x80
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fceb 	bl	800762c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c56:	2100      	movs	r1, #0
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fce7 	bl	800762c <USBD_LL_StallEP>
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d036      	beq.n	8006cea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c80:	6938      	ldr	r0, [r7, #16]
 8006c82:	f000 f836 	bl	8006cf2 <USBD_GetLen>
 8006c86:	4603      	mov	r3, r0
 8006c88:	3301      	adds	r3, #1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	4413      	add	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	4413      	add	r3, r2
 8006cac:	2203      	movs	r2, #3
 8006cae:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cb6:	e013      	b.n	8006ce0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	613b      	str	r3, [r7, #16]
    idx++;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e7      	bne.n	8006cb8 <USBD_GetString+0x52>
 8006ce8:	e000      	b.n	8006cec <USBD_GetString+0x86>
    return;
 8006cea:	bf00      	nop
  }
}
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d02:	e005      	b.n	8006d10 <USBD_GetLen+0x1e>
  {
    len++;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	3301      	adds	r3, #1
 8006d08:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f5      	bne.n	8006d04 <USBD_GetLen+0x12>
  }

  return len;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fcf6 	bl	800773e <USBD_LL_Transmit>

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fce5 	bl	800773e <USBD_LL_Transmit>

  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	2100      	movs	r1, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fce9 	bl	8007780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fcd8 	bl	8007780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2204      	movs	r2, #4
 8006de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dea:	2300      	movs	r3, #0
 8006dec:	2200      	movs	r2, #0
 8006dee:	2100      	movs	r1, #0
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fca4 	bl	800773e <USBD_LL_Transmit>

  return USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2205      	movs	r2, #5
 8006e0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e10:	2300      	movs	r3, #0
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fcb2 	bl	8007780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4912      	ldr	r1, [pc, #72]	; (8006e78 <MX_USB_DEVICE_Init+0x50>)
 8006e30:	4812      	ldr	r0, [pc, #72]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e32:	f7fe fef3 	bl	8005c1c <USBD_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e3c:	f7fa fa0a 	bl	8001254 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e40:	490f      	ldr	r1, [pc, #60]	; (8006e80 <MX_USB_DEVICE_Init+0x58>)
 8006e42:	480e      	ldr	r0, [pc, #56]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e44:	f7fe ff20 	bl	8005c88 <USBD_RegisterClass>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e4e:	f7fa fa01 	bl	8001254 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e52:	490c      	ldr	r1, [pc, #48]	; (8006e84 <MX_USB_DEVICE_Init+0x5c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e56:	f7fe fe45 	bl	8005ae4 <USBD_CDC_RegisterInterface>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e60:	f7fa f9f8 	bl	8001254 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e66:	f7fe ff30 	bl	8005cca <USBD_Start>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e70:	f7fa f9f0 	bl	8001254 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000130 	.word	0x20000130
 8006e7c:	20000398 	.word	0x20000398
 8006e80:	20000018 	.word	0x20000018
 8006e84:	2000011c 	.word	0x2000011c

08006e88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4905      	ldr	r1, [pc, #20]	; (8006ea4 <CDC_Init_FS+0x1c>)
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <CDC_Init_FS+0x20>)
 8006e92:	f7fe fe3c 	bl	8005b0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e96:	4905      	ldr	r1, [pc, #20]	; (8006eac <CDC_Init_FS+0x24>)
 8006e98:	4803      	ldr	r0, [pc, #12]	; (8006ea8 <CDC_Init_FS+0x20>)
 8006e9a:	f7fe fe51 	bl	8005b40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	200006a8 	.word	0x200006a8
 8006ea8:	20000398 	.word	0x20000398
 8006eac:	20000668 	.word	0x20000668

08006eb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006eb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b23      	cmp	r3, #35	; 0x23
 8006ed4:	d84a      	bhi.n	8006f6c <CDC_Control_FS+0xac>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <CDC_Control_FS+0x1c>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f6d 	.word	0x08006f6d
 8006ee0:	08006f6d 	.word	0x08006f6d
 8006ee4:	08006f6d 	.word	0x08006f6d
 8006ee8:	08006f6d 	.word	0x08006f6d
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f6d 	.word	0x08006f6d
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f6d 	.word	0x08006f6d
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006f6d 	.word	0x08006f6d
 8006f20:	08006f6d 	.word	0x08006f6d
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f6d 	.word	0x08006f6d
 8006f30:	08006f6d 	.word	0x08006f6d
 8006f34:	08006f6d 	.word	0x08006f6d
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f6d 	.word	0x08006f6d
 8006f64:	08006f6d 	.word	0x08006f6d
 8006f68:	08006f6d 	.word	0x08006f6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f6c:	bf00      	nop
  }

  return (USBD_OK);
 8006f6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <CDC_Receive_FS+0x24>)
 8006f8a:	f7fe fdd9 	bl	8005b40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f8e:	4804      	ldr	r0, [pc, #16]	; (8006fa0 <CDC_Receive_FS+0x24>)
 8006f90:	f7fe fe1a 	bl	8005bc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000398 	.word	0x20000398

08006fa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  memcpy(UserTxBufferFS, Buf, sizeof(char)*Len);
 8006fb4:	887b      	ldrh	r3, [r7, #2]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	480f      	ldr	r0, [pc, #60]	; (8006ff8 <CDC_Transmit_FS+0x54>)
 8006fbc:	f000 fc7a 	bl	80078b4 <memcpy>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <CDC_Transmit_FS+0x58>)
 8006fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <CDC_Transmit_FS+0x32>
    return USBD_BUSY;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e00b      	b.n	8006fee <CDC_Transmit_FS+0x4a>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fd6:	887b      	ldrh	r3, [r7, #2]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4807      	ldr	r0, [pc, #28]	; (8006ffc <CDC_Transmit_FS+0x58>)
 8006fde:	f7fe fd96 	bl	8005b0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fe2:	4806      	ldr	r0, [pc, #24]	; (8006ffc <CDC_Transmit_FS+0x58>)
 8006fe4:	f7fe fdc0 	bl	8005b68 <USBD_CDC_TransmitPacket>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200006a8 	.word	0x200006a8
 8006ffc:	20000398 	.word	0x20000398

08007000 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2212      	movs	r2, #18
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	2000014c 	.word	0x2000014c

08007048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2204      	movs	r2, #4
 8007058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000160 	.word	0x20000160

0800706c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4907      	ldr	r1, [pc, #28]	; (80070a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007082:	4808      	ldr	r0, [pc, #32]	; (80070a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007084:	f7ff fdef 	bl	8006c66 <USBD_GetString>
 8007088:	e004      	b.n	8007094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4904      	ldr	r1, [pc, #16]	; (80070a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800708e:	4805      	ldr	r0, [pc, #20]	; (80070a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007090:	f7ff fde9 	bl	8006c66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007094:	4b02      	ldr	r3, [pc, #8]	; (80070a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200006e8 	.word	0x200006e8
 80070a4:	08008b90 	.word	0x08008b90

080070a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	4904      	ldr	r1, [pc, #16]	; (80070c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070b8:	4804      	ldr	r0, [pc, #16]	; (80070cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070ba:	f7ff fdd4 	bl	8006c66 <USBD_GetString>
  return USBD_StrDesc;
 80070be:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200006e8 	.word	0x200006e8
 80070cc:	08008ba8 	.word	0x08008ba8

080070d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	221a      	movs	r2, #26
 80070e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070e2:	f000 f843 	bl	800716c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070e6:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000164 	.word	0x20000164

080070f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4907      	ldr	r1, [pc, #28]	; (8007128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800710a:	4808      	ldr	r0, [pc, #32]	; (800712c <USBD_FS_ConfigStrDescriptor+0x38>)
 800710c:	f7ff fdab 	bl	8006c66 <USBD_GetString>
 8007110:	e004      	b.n	800711c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007116:	4805      	ldr	r0, [pc, #20]	; (800712c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007118:	f7ff fda5 	bl	8006c66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200006e8 	.word	0x200006e8
 800712c:	08008bbc 	.word	0x08008bbc

08007130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4907      	ldr	r1, [pc, #28]	; (8007164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007146:	4808      	ldr	r0, [pc, #32]	; (8007168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007148:	f7ff fd8d 	bl	8006c66 <USBD_GetString>
 800714c:	e004      	b.n	8007158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007152:	4805      	ldr	r0, [pc, #20]	; (8007168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007154:	f7ff fd87 	bl	8006c66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200006e8 	.word	0x200006e8
 8007168:	08008bc8 	.word	0x08008bc8

0800716c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <Get_SerialNum+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <Get_SerialNum+0x48>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800717e:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <Get_SerialNum+0x4c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007192:	2208      	movs	r2, #8
 8007194:	4909      	ldr	r1, [pc, #36]	; (80071bc <Get_SerialNum+0x50>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f814 	bl	80071c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800719c:	2204      	movs	r2, #4
 800719e:	4908      	ldr	r1, [pc, #32]	; (80071c0 <Get_SerialNum+0x54>)
 80071a0:	68b8      	ldr	r0, [r7, #8]
 80071a2:	f000 f80f 	bl	80071c4 <IntToUnicode>
  }
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	1fff7a10 	.word	0x1fff7a10
 80071b4:	1fff7a14 	.word	0x1fff7a14
 80071b8:	1fff7a18 	.word	0x1fff7a18
 80071bc:	20000166 	.word	0x20000166
 80071c0:	20000176 	.word	0x20000176

080071c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	75fb      	strb	r3, [r7, #23]
 80071da:	e027      	b.n	800722c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	0f1b      	lsrs	r3, r3, #28
 80071e0:	2b09      	cmp	r3, #9
 80071e2:	d80b      	bhi.n	80071fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	0f1b      	lsrs	r3, r3, #28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4619      	mov	r1, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	440b      	add	r3, r1
 80071f4:	3230      	adds	r2, #48	; 0x30
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e00a      	b.n	8007212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	0f1b      	lsrs	r3, r3, #28
 8007200:	b2da      	uxtb	r2, r3
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4619      	mov	r1, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	440b      	add	r3, r1
 800720c:	3237      	adds	r2, #55	; 0x37
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	3301      	adds	r3, #1
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	3301      	adds	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
 800722c:	7dfa      	ldrb	r2, [r7, #23]
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	429a      	cmp	r2, r3
 8007232:	d3d3      	bcc.n	80071dc <IntToUnicode+0x18>
  }
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007260:	d147      	bne.n	80072f2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
 8007266:	4b25      	ldr	r3, [pc, #148]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	4a24      	ldr	r2, [pc, #144]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	6313      	str	r3, [r2, #48]	; 0x30
 8007272:	4b22      	ldr	r3, [pc, #136]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800727e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4619      	mov	r1, r3
 8007292:	481b      	ldr	r0, [pc, #108]	; (8007300 <HAL_PCD_MspInit+0xc0>)
 8007294:	f7fa fb28 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007298:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800729c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729e:	2302      	movs	r3, #2
 80072a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a6:	2303      	movs	r3, #3
 80072a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072aa:	230a      	movs	r3, #10
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ae:	f107 0314 	add.w	r3, r7, #20
 80072b2:	4619      	mov	r1, r3
 80072b4:	4812      	ldr	r0, [pc, #72]	; (8007300 <HAL_PCD_MspInit+0xc0>)
 80072b6:	f7fa fb17 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 80072c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c4:	6353      	str	r3, [r2, #52]	; 0x34
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 80072d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072d4:	6453      	str	r3, [r2, #68]	; 0x44
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <HAL_PCD_MspInit+0xbc>)
 80072d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	2043      	movs	r0, #67	; 0x43
 80072e8:	f7fa fac7 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072ec:	2043      	movs	r0, #67	; 0x43
 80072ee:	f7fa fae0 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072f2:	bf00      	nop
 80072f4:	3728      	adds	r7, #40	; 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800
 8007300:	40020000 	.word	0x40020000

08007304 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f7fe fd20 	bl	8005d60 <USBD_LL_SetupStage>
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	4619      	mov	r1, r3
 8007352:	f7fe fd58 	bl	8005e06 <USBD_LL_DataOutStage>
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	3348      	adds	r3, #72	; 0x48
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	4619      	mov	r1, r3
 8007386:	f7fe fda1 	bl	8005ecc <USBD_LL_DataInStage>
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fea5 	bl	80060f0 <USBD_LL_SOF>
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073b6:	2301      	movs	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d001      	beq.n	80073c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80073c2:	f7f9 ff47 	bl	8001254 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073cc:	7bfa      	ldrb	r2, [r7, #15]
 80073ce:	4611      	mov	r1, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe fe52 	bl	800607a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fe0b 	bl	8005ff8 <USBD_LL_Reset>
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fe4d 	bl	800609a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <HAL_PCD_SuspendCallback+0x48>)
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	4a03      	ldr	r2, [pc, #12]	; (8007434 <HAL_PCD_SuspendCallback+0x48>)
 8007426:	f043 0306 	orr.w	r3, r3, #6
 800742a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	e000ed00 	.word	0xe000ed00

08007438 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fe3c 	bl	80060c4 <USBD_LL_Resume>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fe67 	bl	800613e <USBD_LL_IsoOUTIncomplete>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800748a:	78fa      	ldrb	r2, [r7, #3]
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fe48 	bl	8006124 <USBD_LL_IsoINIncomplete>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fe54 	bl	8006158 <USBD_LL_DevConnected>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fe51 	bl	800616e <USBD_LL_DevDisconnected>
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d13c      	bne.n	800755e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074e4:	4a20      	ldr	r2, [pc, #128]	; (8007568 <USBD_LL_Init+0x94>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <USBD_LL_Init+0x94>)
 80074f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074f4:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <USBD_LL_Init+0x94>)
 80074f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074fc:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <USBD_LL_Init+0x94>)
 80074fe:	2204      	movs	r2, #4
 8007500:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007502:	4b19      	ldr	r3, [pc, #100]	; (8007568 <USBD_LL_Init+0x94>)
 8007504:	2202      	movs	r2, #2
 8007506:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007508:	4b17      	ldr	r3, [pc, #92]	; (8007568 <USBD_LL_Init+0x94>)
 800750a:	2200      	movs	r2, #0
 800750c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800750e:	4b16      	ldr	r3, [pc, #88]	; (8007568 <USBD_LL_Init+0x94>)
 8007510:	2202      	movs	r2, #2
 8007512:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007514:	4b14      	ldr	r3, [pc, #80]	; (8007568 <USBD_LL_Init+0x94>)
 8007516:	2200      	movs	r2, #0
 8007518:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800751a:	4b13      	ldr	r3, [pc, #76]	; (8007568 <USBD_LL_Init+0x94>)
 800751c:	2200      	movs	r2, #0
 800751e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <USBD_LL_Init+0x94>)
 8007522:	2200      	movs	r2, #0
 8007524:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007526:	4b10      	ldr	r3, [pc, #64]	; (8007568 <USBD_LL_Init+0x94>)
 8007528:	2201      	movs	r2, #1
 800752a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <USBD_LL_Init+0x94>)
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007532:	480d      	ldr	r0, [pc, #52]	; (8007568 <USBD_LL_Init+0x94>)
 8007534:	f7fa fba6 	bl	8001c84 <HAL_PCD_Init>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800753e:	f7f9 fe89 	bl	8001254 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	4808      	ldr	r0, [pc, #32]	; (8007568 <USBD_LL_Init+0x94>)
 8007546:	f7fb fd04 	bl	8002f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800754a:	2240      	movs	r2, #64	; 0x40
 800754c:	2100      	movs	r1, #0
 800754e:	4806      	ldr	r0, [pc, #24]	; (8007568 <USBD_LL_Init+0x94>)
 8007550:	f7fb fcb8 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007554:	2280      	movs	r2, #128	; 0x80
 8007556:	2101      	movs	r1, #1
 8007558:	4803      	ldr	r0, [pc, #12]	; (8007568 <USBD_LL_Init+0x94>)
 800755a:	f7fb fcb3 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200008e8 	.word	0x200008e8

0800756c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007582:	4618      	mov	r0, r3
 8007584:	f7fa fc9b 	bl	8001ebe <HAL_PCD_Start>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f92a 	bl	80077e8 <USBD_Get_USB_Status>
 8007594:	4603      	mov	r3, r0
 8007596:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007598:	7bbb      	ldrb	r3, [r7, #14]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	461a      	mov	r2, r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	70fb      	strb	r3, [r7, #3]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70bb      	strb	r3, [r7, #2]
 80075b8:	4613      	mov	r3, r2
 80075ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075ca:	78bb      	ldrb	r3, [r7, #2]
 80075cc:	883a      	ldrh	r2, [r7, #0]
 80075ce:	78f9      	ldrb	r1, [r7, #3]
 80075d0:	f7fb f87f 	bl	80026d2 <HAL_PCD_EP_Open>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f904 	bl	80077e8 <USBD_Get_USB_Status>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	4611      	mov	r1, r2
 800760c:	4618      	mov	r0, r3
 800760e:	f7fb f8c8 	bl	80027a2 <HAL_PCD_EP_Close>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f8e5 	bl	80077e8 <USBD_Get_USB_Status>
 800761e:	4603      	mov	r3, r0
 8007620:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007622:	7bbb      	ldrb	r3, [r7, #14]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7fb f9a0 	bl	8002990 <HAL_PCD_EP_SetStall>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f8c6 	bl	80077e8 <USBD_Get_USB_Status>
 800765c:	4603      	mov	r3, r0
 800765e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007660:	7bbb      	ldrb	r3, [r7, #14]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	4611      	mov	r1, r2
 8007688:	4618      	mov	r0, r3
 800768a:	f7fb f9e5 	bl	8002a58 <HAL_PCD_EP_ClrStall>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 f8a7 	bl	80077e8 <USBD_Get_USB_Status>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800769e:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076ba:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80076bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da0b      	bge.n	80076dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	333e      	adds	r3, #62	; 0x3e
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	e00b      	b.n	80076f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	4613      	mov	r3, r2
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa ffb2 	bl	8002688 <HAL_PCD_SetAddress>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f85c 	bl	80077e8 <USBD_Get_USB_Status>
 8007730:	4603      	mov	r3, r0
 8007732:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007734:	7bbb      	ldrb	r3, [r7, #14]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	460b      	mov	r3, r1
 800774c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800775c:	7af9      	ldrb	r1, [r7, #11]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	f7fb f8cb 	bl	80028fc <HAL_PCD_EP_Transmit>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 f83b 	bl	80077e8 <USBD_Get_USB_Status>
 8007772:	4603      	mov	r3, r0
 8007774:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007776:	7dbb      	ldrb	r3, [r7, #22]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	460b      	mov	r3, r1
 800778e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800779e:	7af9      	ldrb	r1, [r7, #11]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	f7fb f847 	bl	8002836 <HAL_PCD_EP_Receive>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f81a 	bl	80077e8 <USBD_Get_USB_Status>
 80077b4:	4603      	mov	r3, r0
 80077b6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80077b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fb f877 	bl	80028cc <HAL_PCD_EP_GetRxCount>
 80077de:	4603      	mov	r3, r0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d817      	bhi.n	800782c <USBD_Get_USB_Status+0x44>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <USBD_Get_USB_Status+0x1c>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007815 	.word	0x08007815
 8007808:	0800781b 	.word	0x0800781b
 800780c:	08007821 	.word	0x08007821
 8007810:	08007827 	.word	0x08007827
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
    break;
 8007818:	e00b      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800781a:	2303      	movs	r3, #3
 800781c:	73fb      	strb	r3, [r7, #15]
    break;
 800781e:	e008      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	e005      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e002      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	bf00      	nop
  }
  return usb_status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <__errno>:
 8007840:	4b01      	ldr	r3, [pc, #4]	; (8007848 <__errno+0x8>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000180 	.word	0x20000180

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4e0d      	ldr	r6, [pc, #52]	; (8007884 <__libc_init_array+0x38>)
 8007850:	4c0d      	ldr	r4, [pc, #52]	; (8007888 <__libc_init_array+0x3c>)
 8007852:	1ba4      	subs	r4, r4, r6
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	2500      	movs	r5, #0
 8007858:	42a5      	cmp	r5, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	4e0b      	ldr	r6, [pc, #44]	; (800788c <__libc_init_array+0x40>)
 800785e:	4c0c      	ldr	r4, [pc, #48]	; (8007890 <__libc_init_array+0x44>)
 8007860:	f001 f93e 	bl	8008ae0 <_init>
 8007864:	1ba4      	subs	r4, r4, r6
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	2500      	movs	r5, #0
 800786a:	42a5      	cmp	r5, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007874:	4798      	blx	r3
 8007876:	3501      	adds	r5, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800787e:	4798      	blx	r3
 8007880:	3501      	adds	r5, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	08008ca4 	.word	0x08008ca4
 8007888:	08008ca4 	.word	0x08008ca4
 800788c:	08008ca4 	.word	0x08008ca4
 8007890:	08008ca8 	.word	0x08008ca8

08007894 <malloc>:
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <malloc+0xc>)
 8007896:	4601      	mov	r1, r0
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f000 b86d 	b.w	8007978 <_malloc_r>
 800789e:	bf00      	nop
 80078a0:	20000180 	.word	0x20000180

080078a4 <free>:
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <free+0xc>)
 80078a6:	4601      	mov	r1, r0
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f000 b817 	b.w	80078dc <_free_r>
 80078ae:	bf00      	nop
 80078b0:	20000180 	.word	0x20000180

080078b4 <memcpy>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	1e43      	subs	r3, r0, #1
 80078b8:	440a      	add	r2, r1
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d100      	bne.n	80078c0 <memcpy+0xc>
 80078be:	bd10      	pop	{r4, pc}
 80078c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c8:	e7f7      	b.n	80078ba <memcpy+0x6>

080078ca <memset>:
 80078ca:	4402      	add	r2, r0
 80078cc:	4603      	mov	r3, r0
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d100      	bne.n	80078d4 <memset+0xa>
 80078d2:	4770      	bx	lr
 80078d4:	f803 1b01 	strb.w	r1, [r3], #1
 80078d8:	e7f9      	b.n	80078ce <memset+0x4>
	...

080078dc <_free_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4605      	mov	r5, r0
 80078e0:	2900      	cmp	r1, #0
 80078e2:	d045      	beq.n	8007970 <_free_r+0x94>
 80078e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e8:	1f0c      	subs	r4, r1, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfb8      	it	lt
 80078ee:	18e4      	addlt	r4, r4, r3
 80078f0:	f000 fbe6 	bl	80080c0 <__malloc_lock>
 80078f4:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <_free_r+0x98>)
 80078f6:	6813      	ldr	r3, [r2, #0]
 80078f8:	4610      	mov	r0, r2
 80078fa:	b933      	cbnz	r3, 800790a <_free_r+0x2e>
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	6014      	str	r4, [r2, #0]
 8007900:	4628      	mov	r0, r5
 8007902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007906:	f000 bbdc 	b.w	80080c2 <__malloc_unlock>
 800790a:	42a3      	cmp	r3, r4
 800790c:	d90c      	bls.n	8007928 <_free_r+0x4c>
 800790e:	6821      	ldr	r1, [r4, #0]
 8007910:	1862      	adds	r2, r4, r1
 8007912:	4293      	cmp	r3, r2
 8007914:	bf04      	itt	eq
 8007916:	681a      	ldreq	r2, [r3, #0]
 8007918:	685b      	ldreq	r3, [r3, #4]
 800791a:	6063      	str	r3, [r4, #4]
 800791c:	bf04      	itt	eq
 800791e:	1852      	addeq	r2, r2, r1
 8007920:	6022      	streq	r2, [r4, #0]
 8007922:	6004      	str	r4, [r0, #0]
 8007924:	e7ec      	b.n	8007900 <_free_r+0x24>
 8007926:	4613      	mov	r3, r2
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	b10a      	cbz	r2, 8007930 <_free_r+0x54>
 800792c:	42a2      	cmp	r2, r4
 800792e:	d9fa      	bls.n	8007926 <_free_r+0x4a>
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	1858      	adds	r0, r3, r1
 8007934:	42a0      	cmp	r0, r4
 8007936:	d10b      	bne.n	8007950 <_free_r+0x74>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	4401      	add	r1, r0
 800793c:	1858      	adds	r0, r3, r1
 800793e:	4282      	cmp	r2, r0
 8007940:	6019      	str	r1, [r3, #0]
 8007942:	d1dd      	bne.n	8007900 <_free_r+0x24>
 8007944:	6810      	ldr	r0, [r2, #0]
 8007946:	6852      	ldr	r2, [r2, #4]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	4401      	add	r1, r0
 800794c:	6019      	str	r1, [r3, #0]
 800794e:	e7d7      	b.n	8007900 <_free_r+0x24>
 8007950:	d902      	bls.n	8007958 <_free_r+0x7c>
 8007952:	230c      	movs	r3, #12
 8007954:	602b      	str	r3, [r5, #0]
 8007956:	e7d3      	b.n	8007900 <_free_r+0x24>
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	1821      	adds	r1, r4, r0
 800795c:	428a      	cmp	r2, r1
 800795e:	bf04      	itt	eq
 8007960:	6811      	ldreq	r1, [r2, #0]
 8007962:	6852      	ldreq	r2, [r2, #4]
 8007964:	6062      	str	r2, [r4, #4]
 8007966:	bf04      	itt	eq
 8007968:	1809      	addeq	r1, r1, r0
 800796a:	6021      	streq	r1, [r4, #0]
 800796c:	605c      	str	r4, [r3, #4]
 800796e:	e7c7      	b.n	8007900 <_free_r+0x24>
 8007970:	bd38      	pop	{r3, r4, r5, pc}
 8007972:	bf00      	nop
 8007974:	2000020c 	.word	0x2000020c

08007978 <_malloc_r>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	1ccd      	adds	r5, r1, #3
 800797c:	f025 0503 	bic.w	r5, r5, #3
 8007980:	3508      	adds	r5, #8
 8007982:	2d0c      	cmp	r5, #12
 8007984:	bf38      	it	cc
 8007986:	250c      	movcc	r5, #12
 8007988:	2d00      	cmp	r5, #0
 800798a:	4606      	mov	r6, r0
 800798c:	db01      	blt.n	8007992 <_malloc_r+0x1a>
 800798e:	42a9      	cmp	r1, r5
 8007990:	d903      	bls.n	800799a <_malloc_r+0x22>
 8007992:	230c      	movs	r3, #12
 8007994:	6033      	str	r3, [r6, #0]
 8007996:	2000      	movs	r0, #0
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	f000 fb91 	bl	80080c0 <__malloc_lock>
 800799e:	4a21      	ldr	r2, [pc, #132]	; (8007a24 <_malloc_r+0xac>)
 80079a0:	6814      	ldr	r4, [r2, #0]
 80079a2:	4621      	mov	r1, r4
 80079a4:	b991      	cbnz	r1, 80079cc <_malloc_r+0x54>
 80079a6:	4c20      	ldr	r4, [pc, #128]	; (8007a28 <_malloc_r+0xb0>)
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	b91b      	cbnz	r3, 80079b4 <_malloc_r+0x3c>
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 f8b9 	bl	8007b24 <_sbrk_r>
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	4629      	mov	r1, r5
 80079b6:	4630      	mov	r0, r6
 80079b8:	f000 f8b4 	bl	8007b24 <_sbrk_r>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d124      	bne.n	8007a0a <_malloc_r+0x92>
 80079c0:	230c      	movs	r3, #12
 80079c2:	6033      	str	r3, [r6, #0]
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 fb7c 	bl	80080c2 <__malloc_unlock>
 80079ca:	e7e4      	b.n	8007996 <_malloc_r+0x1e>
 80079cc:	680b      	ldr	r3, [r1, #0]
 80079ce:	1b5b      	subs	r3, r3, r5
 80079d0:	d418      	bmi.n	8007a04 <_malloc_r+0x8c>
 80079d2:	2b0b      	cmp	r3, #11
 80079d4:	d90f      	bls.n	80079f6 <_malloc_r+0x7e>
 80079d6:	600b      	str	r3, [r1, #0]
 80079d8:	50cd      	str	r5, [r1, r3]
 80079da:	18cc      	adds	r4, r1, r3
 80079dc:	4630      	mov	r0, r6
 80079de:	f000 fb70 	bl	80080c2 <__malloc_unlock>
 80079e2:	f104 000b 	add.w	r0, r4, #11
 80079e6:	1d23      	adds	r3, r4, #4
 80079e8:	f020 0007 	bic.w	r0, r0, #7
 80079ec:	1ac3      	subs	r3, r0, r3
 80079ee:	d0d3      	beq.n	8007998 <_malloc_r+0x20>
 80079f0:	425a      	negs	r2, r3
 80079f2:	50e2      	str	r2, [r4, r3]
 80079f4:	e7d0      	b.n	8007998 <_malloc_r+0x20>
 80079f6:	428c      	cmp	r4, r1
 80079f8:	684b      	ldr	r3, [r1, #4]
 80079fa:	bf16      	itet	ne
 80079fc:	6063      	strne	r3, [r4, #4]
 80079fe:	6013      	streq	r3, [r2, #0]
 8007a00:	460c      	movne	r4, r1
 8007a02:	e7eb      	b.n	80079dc <_malloc_r+0x64>
 8007a04:	460c      	mov	r4, r1
 8007a06:	6849      	ldr	r1, [r1, #4]
 8007a08:	e7cc      	b.n	80079a4 <_malloc_r+0x2c>
 8007a0a:	1cc4      	adds	r4, r0, #3
 8007a0c:	f024 0403 	bic.w	r4, r4, #3
 8007a10:	42a0      	cmp	r0, r4
 8007a12:	d005      	beq.n	8007a20 <_malloc_r+0xa8>
 8007a14:	1a21      	subs	r1, r4, r0
 8007a16:	4630      	mov	r0, r6
 8007a18:	f000 f884 	bl	8007b24 <_sbrk_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d0cf      	beq.n	80079c0 <_malloc_r+0x48>
 8007a20:	6025      	str	r5, [r4, #0]
 8007a22:	e7db      	b.n	80079dc <_malloc_r+0x64>
 8007a24:	2000020c 	.word	0x2000020c
 8007a28:	20000210 	.word	0x20000210

08007a2c <iprintf>:
 8007a2c:	b40f      	push	{r0, r1, r2, r3}
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <iprintf+0x2c>)
 8007a30:	b513      	push	{r0, r1, r4, lr}
 8007a32:	681c      	ldr	r4, [r3, #0]
 8007a34:	b124      	cbz	r4, 8007a40 <iprintf+0x14>
 8007a36:	69a3      	ldr	r3, [r4, #24]
 8007a38:	b913      	cbnz	r3, 8007a40 <iprintf+0x14>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fa52 	bl	8007ee4 <__sinit>
 8007a40:	ab05      	add	r3, sp, #20
 8007a42:	9a04      	ldr	r2, [sp, #16]
 8007a44:	68a1      	ldr	r1, [r4, #8]
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fcb7 	bl	80083bc <_vfiprintf_r>
 8007a4e:	b002      	add	sp, #8
 8007a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a54:	b004      	add	sp, #16
 8007a56:	4770      	bx	lr
 8007a58:	20000180 	.word	0x20000180

08007a5c <_puts_r>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	460e      	mov	r6, r1
 8007a60:	4605      	mov	r5, r0
 8007a62:	b118      	cbz	r0, 8007a6c <_puts_r+0x10>
 8007a64:	6983      	ldr	r3, [r0, #24]
 8007a66:	b90b      	cbnz	r3, 8007a6c <_puts_r+0x10>
 8007a68:	f000 fa3c 	bl	8007ee4 <__sinit>
 8007a6c:	69ab      	ldr	r3, [r5, #24]
 8007a6e:	68ac      	ldr	r4, [r5, #8]
 8007a70:	b913      	cbnz	r3, 8007a78 <_puts_r+0x1c>
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 fa36 	bl	8007ee4 <__sinit>
 8007a78:	4b23      	ldr	r3, [pc, #140]	; (8007b08 <_puts_r+0xac>)
 8007a7a:	429c      	cmp	r4, r3
 8007a7c:	d117      	bne.n	8007aae <_puts_r+0x52>
 8007a7e:	686c      	ldr	r4, [r5, #4]
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	071b      	lsls	r3, r3, #28
 8007a84:	d51d      	bpl.n	8007ac2 <_puts_r+0x66>
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	b1db      	cbz	r3, 8007ac2 <_puts_r+0x66>
 8007a8a:	3e01      	subs	r6, #1
 8007a8c:	68a3      	ldr	r3, [r4, #8]
 8007a8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a92:	3b01      	subs	r3, #1
 8007a94:	60a3      	str	r3, [r4, #8]
 8007a96:	b9e9      	cbnz	r1, 8007ad4 <_puts_r+0x78>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	da2e      	bge.n	8007afa <_puts_r+0x9e>
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	210a      	movs	r1, #10
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f86f 	bl	8007b84 <__swbuf_r>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d011      	beq.n	8007ace <_puts_r+0x72>
 8007aaa:	200a      	movs	r0, #10
 8007aac:	e011      	b.n	8007ad2 <_puts_r+0x76>
 8007aae:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <_puts_r+0xb0>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	d101      	bne.n	8007ab8 <_puts_r+0x5c>
 8007ab4:	68ac      	ldr	r4, [r5, #8]
 8007ab6:	e7e3      	b.n	8007a80 <_puts_r+0x24>
 8007ab8:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <_puts_r+0xb4>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	bf08      	it	eq
 8007abe:	68ec      	ldreq	r4, [r5, #12]
 8007ac0:	e7de      	b.n	8007a80 <_puts_r+0x24>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f8af 	bl	8007c28 <__swsetup_r>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0dd      	beq.n	8007a8a <_puts_r+0x2e>
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da04      	bge.n	8007ae2 <_puts_r+0x86>
 8007ad8:	69a2      	ldr	r2, [r4, #24]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	dc06      	bgt.n	8007aec <_puts_r+0x90>
 8007ade:	290a      	cmp	r1, #10
 8007ae0:	d004      	beq.n	8007aec <_puts_r+0x90>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	6022      	str	r2, [r4, #0]
 8007ae8:	7019      	strb	r1, [r3, #0]
 8007aea:	e7cf      	b.n	8007a8c <_puts_r+0x30>
 8007aec:	4622      	mov	r2, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 f848 	bl	8007b84 <__swbuf_r>
 8007af4:	3001      	adds	r0, #1
 8007af6:	d1c9      	bne.n	8007a8c <_puts_r+0x30>
 8007af8:	e7e9      	b.n	8007ace <_puts_r+0x72>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	200a      	movs	r0, #10
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	7018      	strb	r0, [r3, #0]
 8007b04:	e7e5      	b.n	8007ad2 <_puts_r+0x76>
 8007b06:	bf00      	nop
 8007b08:	08008c28 	.word	0x08008c28
 8007b0c:	08008c48 	.word	0x08008c48
 8007b10:	08008c08 	.word	0x08008c08

08007b14 <puts>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <puts+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f7ff bf9f 	b.w	8007a5c <_puts_r>
 8007b1e:	bf00      	nop
 8007b20:	20000180 	.word	0x20000180

08007b24 <_sbrk_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4c06      	ldr	r4, [pc, #24]	; (8007b40 <_sbrk_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	f7f9 fcc8 	bl	80014c4 <_sbrk>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_sbrk_r+0x1a>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_sbrk_r+0x1a>
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20000cf0 	.word	0x20000cf0

08007b44 <siprintf>:
 8007b44:	b40e      	push	{r1, r2, r3}
 8007b46:	b500      	push	{lr}
 8007b48:	b09c      	sub	sp, #112	; 0x70
 8007b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b4c:	9002      	str	r0, [sp, #8]
 8007b4e:	9006      	str	r0, [sp, #24]
 8007b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b54:	4809      	ldr	r0, [pc, #36]	; (8007b7c <siprintf+0x38>)
 8007b56:	9107      	str	r1, [sp, #28]
 8007b58:	9104      	str	r1, [sp, #16]
 8007b5a:	4909      	ldr	r1, [pc, #36]	; (8007b80 <siprintf+0x3c>)
 8007b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b60:	9105      	str	r1, [sp, #20]
 8007b62:	6800      	ldr	r0, [r0, #0]
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	a902      	add	r1, sp, #8
 8007b68:	f000 fb06 	bl	8008178 <_svfiprintf_r>
 8007b6c:	9b02      	ldr	r3, [sp, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	b01c      	add	sp, #112	; 0x70
 8007b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b78:	b003      	add	sp, #12
 8007b7a:	4770      	bx	lr
 8007b7c:	20000180 	.word	0x20000180
 8007b80:	ffff0208 	.word	0xffff0208

08007b84 <__swbuf_r>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	460e      	mov	r6, r1
 8007b88:	4614      	mov	r4, r2
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	b118      	cbz	r0, 8007b96 <__swbuf_r+0x12>
 8007b8e:	6983      	ldr	r3, [r0, #24]
 8007b90:	b90b      	cbnz	r3, 8007b96 <__swbuf_r+0x12>
 8007b92:	f000 f9a7 	bl	8007ee4 <__sinit>
 8007b96:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <__swbuf_r+0x98>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d12a      	bne.n	8007bf2 <__swbuf_r+0x6e>
 8007b9c:	686c      	ldr	r4, [r5, #4]
 8007b9e:	69a3      	ldr	r3, [r4, #24]
 8007ba0:	60a3      	str	r3, [r4, #8]
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	071a      	lsls	r2, r3, #28
 8007ba6:	d52e      	bpl.n	8007c06 <__swbuf_r+0x82>
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	b363      	cbz	r3, 8007c06 <__swbuf_r+0x82>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	1ac0      	subs	r0, r0, r3
 8007bb2:	6963      	ldr	r3, [r4, #20]
 8007bb4:	b2f6      	uxtb	r6, r6
 8007bb6:	4283      	cmp	r3, r0
 8007bb8:	4637      	mov	r7, r6
 8007bba:	dc04      	bgt.n	8007bc6 <__swbuf_r+0x42>
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 f926 	bl	8007e10 <_fflush_r>
 8007bc4:	bb28      	cbnz	r0, 8007c12 <__swbuf_r+0x8e>
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	60a3      	str	r3, [r4, #8]
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	701e      	strb	r6, [r3, #0]
 8007bd4:	6963      	ldr	r3, [r4, #20]
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	4283      	cmp	r3, r0
 8007bda:	d004      	beq.n	8007be6 <__swbuf_r+0x62>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	07db      	lsls	r3, r3, #31
 8007be0:	d519      	bpl.n	8007c16 <__swbuf_r+0x92>
 8007be2:	2e0a      	cmp	r6, #10
 8007be4:	d117      	bne.n	8007c16 <__swbuf_r+0x92>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 f911 	bl	8007e10 <_fflush_r>
 8007bee:	b190      	cbz	r0, 8007c16 <__swbuf_r+0x92>
 8007bf0:	e00f      	b.n	8007c12 <__swbuf_r+0x8e>
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <__swbuf_r+0x9c>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	d101      	bne.n	8007bfc <__swbuf_r+0x78>
 8007bf8:	68ac      	ldr	r4, [r5, #8]
 8007bfa:	e7d0      	b.n	8007b9e <__swbuf_r+0x1a>
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <__swbuf_r+0xa0>)
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	bf08      	it	eq
 8007c02:	68ec      	ldreq	r4, [r5, #12]
 8007c04:	e7cb      	b.n	8007b9e <__swbuf_r+0x1a>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f80d 	bl	8007c28 <__swsetup_r>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d0cc      	beq.n	8007bac <__swbuf_r+0x28>
 8007c12:	f04f 37ff 	mov.w	r7, #4294967295
 8007c16:	4638      	mov	r0, r7
 8007c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08008c28 	.word	0x08008c28
 8007c20:	08008c48 	.word	0x08008c48
 8007c24:	08008c08 	.word	0x08008c08

08007c28 <__swsetup_r>:
 8007c28:	4b32      	ldr	r3, [pc, #200]	; (8007cf4 <__swsetup_r+0xcc>)
 8007c2a:	b570      	push	{r4, r5, r6, lr}
 8007c2c:	681d      	ldr	r5, [r3, #0]
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	b125      	cbz	r5, 8007c3e <__swsetup_r+0x16>
 8007c34:	69ab      	ldr	r3, [r5, #24]
 8007c36:	b913      	cbnz	r3, 8007c3e <__swsetup_r+0x16>
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 f953 	bl	8007ee4 <__sinit>
 8007c3e:	4b2e      	ldr	r3, [pc, #184]	; (8007cf8 <__swsetup_r+0xd0>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d10f      	bne.n	8007c64 <__swsetup_r+0x3c>
 8007c44:	686c      	ldr	r4, [r5, #4]
 8007c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	0715      	lsls	r5, r2, #28
 8007c4e:	d42c      	bmi.n	8007caa <__swsetup_r+0x82>
 8007c50:	06d0      	lsls	r0, r2, #27
 8007c52:	d411      	bmi.n	8007c78 <__swsetup_r+0x50>
 8007c54:	2209      	movs	r2, #9
 8007c56:	6032      	str	r2, [r6, #0]
 8007c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c62:	e03e      	b.n	8007ce2 <__swsetup_r+0xba>
 8007c64:	4b25      	ldr	r3, [pc, #148]	; (8007cfc <__swsetup_r+0xd4>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	d101      	bne.n	8007c6e <__swsetup_r+0x46>
 8007c6a:	68ac      	ldr	r4, [r5, #8]
 8007c6c:	e7eb      	b.n	8007c46 <__swsetup_r+0x1e>
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <__swsetup_r+0xd8>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	bf08      	it	eq
 8007c74:	68ec      	ldreq	r4, [r5, #12]
 8007c76:	e7e6      	b.n	8007c46 <__swsetup_r+0x1e>
 8007c78:	0751      	lsls	r1, r2, #29
 8007c7a:	d512      	bpl.n	8007ca2 <__swsetup_r+0x7a>
 8007c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c7e:	b141      	cbz	r1, 8007c92 <__swsetup_r+0x6a>
 8007c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c84:	4299      	cmp	r1, r3
 8007c86:	d002      	beq.n	8007c8e <__swsetup_r+0x66>
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff fe27 	bl	80078dc <_free_r>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6363      	str	r3, [r4, #52]	; 0x34
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f043 0308 	orr.w	r3, r3, #8
 8007ca8:	81a3      	strh	r3, [r4, #12]
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	b94b      	cbnz	r3, 8007cc2 <__swsetup_r+0x9a>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb8:	d003      	beq.n	8007cc2 <__swsetup_r+0x9a>
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 f9bf 	bl	8008040 <__smakebuf_r>
 8007cc2:	89a2      	ldrh	r2, [r4, #12]
 8007cc4:	f012 0301 	ands.w	r3, r2, #1
 8007cc8:	d00c      	beq.n	8007ce4 <__swsetup_r+0xbc>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	6963      	ldr	r3, [r4, #20]
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	61a3      	str	r3, [r4, #24]
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	b953      	cbnz	r3, 8007cee <__swsetup_r+0xc6>
 8007cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cdc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ce0:	d1ba      	bne.n	8007c58 <__swsetup_r+0x30>
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	0792      	lsls	r2, r2, #30
 8007ce6:	bf58      	it	pl
 8007ce8:	6963      	ldrpl	r3, [r4, #20]
 8007cea:	60a3      	str	r3, [r4, #8]
 8007cec:	e7f2      	b.n	8007cd4 <__swsetup_r+0xac>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e7f7      	b.n	8007ce2 <__swsetup_r+0xba>
 8007cf2:	bf00      	nop
 8007cf4:	20000180 	.word	0x20000180
 8007cf8:	08008c28 	.word	0x08008c28
 8007cfc:	08008c48 	.word	0x08008c48
 8007d00:	08008c08 	.word	0x08008c08

08007d04 <__sflush_r>:
 8007d04:	898a      	ldrh	r2, [r1, #12]
 8007d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	0710      	lsls	r0, r2, #28
 8007d0e:	460c      	mov	r4, r1
 8007d10:	d458      	bmi.n	8007dc4 <__sflush_r+0xc0>
 8007d12:	684b      	ldr	r3, [r1, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dc05      	bgt.n	8007d24 <__sflush_r+0x20>
 8007d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dc02      	bgt.n	8007d24 <__sflush_r+0x20>
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	d0f9      	beq.n	8007d1e <__sflush_r+0x1a>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d30:	682f      	ldr	r7, [r5, #0]
 8007d32:	6a21      	ldr	r1, [r4, #32]
 8007d34:	602b      	str	r3, [r5, #0]
 8007d36:	d032      	beq.n	8007d9e <__sflush_r+0x9a>
 8007d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	075a      	lsls	r2, r3, #29
 8007d3e:	d505      	bpl.n	8007d4c <__sflush_r+0x48>
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	1ac0      	subs	r0, r0, r3
 8007d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d46:	b10b      	cbz	r3, 8007d4c <__sflush_r+0x48>
 8007d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d4a:	1ac0      	subs	r0, r0, r3
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d52:	6a21      	ldr	r1, [r4, #32]
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b0      	blx	r6
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	d106      	bne.n	8007d6c <__sflush_r+0x68>
 8007d5e:	6829      	ldr	r1, [r5, #0]
 8007d60:	291d      	cmp	r1, #29
 8007d62:	d848      	bhi.n	8007df6 <__sflush_r+0xf2>
 8007d64:	4a29      	ldr	r2, [pc, #164]	; (8007e0c <__sflush_r+0x108>)
 8007d66:	40ca      	lsrs	r2, r1
 8007d68:	07d6      	lsls	r6, r2, #31
 8007d6a:	d544      	bpl.n	8007df6 <__sflush_r+0xf2>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	6062      	str	r2, [r4, #4]
 8007d70:	04d9      	lsls	r1, r3, #19
 8007d72:	6922      	ldr	r2, [r4, #16]
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	d504      	bpl.n	8007d82 <__sflush_r+0x7e>
 8007d78:	1c42      	adds	r2, r0, #1
 8007d7a:	d101      	bne.n	8007d80 <__sflush_r+0x7c>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b903      	cbnz	r3, 8007d82 <__sflush_r+0x7e>
 8007d80:	6560      	str	r0, [r4, #84]	; 0x54
 8007d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d84:	602f      	str	r7, [r5, #0]
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d0c9      	beq.n	8007d1e <__sflush_r+0x1a>
 8007d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	d002      	beq.n	8007d98 <__sflush_r+0x94>
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7ff fda2 	bl	80078dc <_free_r>
 8007d98:	2000      	movs	r0, #0
 8007d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8007d9c:	e7c0      	b.n	8007d20 <__sflush_r+0x1c>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b0      	blx	r6
 8007da4:	1c41      	adds	r1, r0, #1
 8007da6:	d1c8      	bne.n	8007d3a <__sflush_r+0x36>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0c5      	beq.n	8007d3a <__sflush_r+0x36>
 8007dae:	2b1d      	cmp	r3, #29
 8007db0:	d001      	beq.n	8007db6 <__sflush_r+0xb2>
 8007db2:	2b16      	cmp	r3, #22
 8007db4:	d101      	bne.n	8007dba <__sflush_r+0xb6>
 8007db6:	602f      	str	r7, [r5, #0]
 8007db8:	e7b1      	b.n	8007d1e <__sflush_r+0x1a>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	e7ad      	b.n	8007d20 <__sflush_r+0x1c>
 8007dc4:	690f      	ldr	r7, [r1, #16]
 8007dc6:	2f00      	cmp	r7, #0
 8007dc8:	d0a9      	beq.n	8007d1e <__sflush_r+0x1a>
 8007dca:	0793      	lsls	r3, r2, #30
 8007dcc:	680e      	ldr	r6, [r1, #0]
 8007dce:	bf08      	it	eq
 8007dd0:	694b      	ldreq	r3, [r1, #20]
 8007dd2:	600f      	str	r7, [r1, #0]
 8007dd4:	bf18      	it	ne
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	eba6 0807 	sub.w	r8, r6, r7
 8007ddc:	608b      	str	r3, [r1, #8]
 8007dde:	f1b8 0f00 	cmp.w	r8, #0
 8007de2:	dd9c      	ble.n	8007d1e <__sflush_r+0x1a>
 8007de4:	4643      	mov	r3, r8
 8007de6:	463a      	mov	r2, r7
 8007de8:	6a21      	ldr	r1, [r4, #32]
 8007dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b0      	blx	r6
 8007df0:	2800      	cmp	r0, #0
 8007df2:	dc06      	bgt.n	8007e02 <__sflush_r+0xfe>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfa:	81a3      	strh	r3, [r4, #12]
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	e78e      	b.n	8007d20 <__sflush_r+0x1c>
 8007e02:	4407      	add	r7, r0
 8007e04:	eba8 0800 	sub.w	r8, r8, r0
 8007e08:	e7e9      	b.n	8007dde <__sflush_r+0xda>
 8007e0a:	bf00      	nop
 8007e0c:	20400001 	.word	0x20400001

08007e10 <_fflush_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	690b      	ldr	r3, [r1, #16]
 8007e14:	4605      	mov	r5, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	b1db      	cbz	r3, 8007e52 <_fflush_r+0x42>
 8007e1a:	b118      	cbz	r0, 8007e24 <_fflush_r+0x14>
 8007e1c:	6983      	ldr	r3, [r0, #24]
 8007e1e:	b90b      	cbnz	r3, 8007e24 <_fflush_r+0x14>
 8007e20:	f000 f860 	bl	8007ee4 <__sinit>
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <_fflush_r+0x48>)
 8007e26:	429c      	cmp	r4, r3
 8007e28:	d109      	bne.n	8007e3e <_fflush_r+0x2e>
 8007e2a:	686c      	ldr	r4, [r5, #4]
 8007e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e30:	b17b      	cbz	r3, 8007e52 <_fflush_r+0x42>
 8007e32:	4621      	mov	r1, r4
 8007e34:	4628      	mov	r0, r5
 8007e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3a:	f7ff bf63 	b.w	8007d04 <__sflush_r>
 8007e3e:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <_fflush_r+0x4c>)
 8007e40:	429c      	cmp	r4, r3
 8007e42:	d101      	bne.n	8007e48 <_fflush_r+0x38>
 8007e44:	68ac      	ldr	r4, [r5, #8]
 8007e46:	e7f1      	b.n	8007e2c <_fflush_r+0x1c>
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <_fflush_r+0x50>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	bf08      	it	eq
 8007e4e:	68ec      	ldreq	r4, [r5, #12]
 8007e50:	e7ec      	b.n	8007e2c <_fflush_r+0x1c>
 8007e52:	2000      	movs	r0, #0
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	bf00      	nop
 8007e58:	08008c28 	.word	0x08008c28
 8007e5c:	08008c48 	.word	0x08008c48
 8007e60:	08008c08 	.word	0x08008c08

08007e64 <std>:
 8007e64:	2300      	movs	r3, #0
 8007e66:	b510      	push	{r4, lr}
 8007e68:	4604      	mov	r4, r0
 8007e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e6e:	6083      	str	r3, [r0, #8]
 8007e70:	8181      	strh	r1, [r0, #12]
 8007e72:	6643      	str	r3, [r0, #100]	; 0x64
 8007e74:	81c2      	strh	r2, [r0, #14]
 8007e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7a:	6183      	str	r3, [r0, #24]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	2208      	movs	r2, #8
 8007e80:	305c      	adds	r0, #92	; 0x5c
 8007e82:	f7ff fd22 	bl	80078ca <memset>
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <std+0x38>)
 8007e88:	6263      	str	r3, [r4, #36]	; 0x24
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <std+0x3c>)
 8007e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <std+0x40>)
 8007e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <std+0x44>)
 8007e94:	6224      	str	r4, [r4, #32]
 8007e96:	6323      	str	r3, [r4, #48]	; 0x30
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	bf00      	nop
 8007e9c:	080088f9 	.word	0x080088f9
 8007ea0:	0800891b 	.word	0x0800891b
 8007ea4:	08008953 	.word	0x08008953
 8007ea8:	08008977 	.word	0x08008977

08007eac <_cleanup_r>:
 8007eac:	4901      	ldr	r1, [pc, #4]	; (8007eb4 <_cleanup_r+0x8>)
 8007eae:	f000 b885 	b.w	8007fbc <_fwalk_reent>
 8007eb2:	bf00      	nop
 8007eb4:	08007e11 	.word	0x08007e11

08007eb8 <__sfmoreglue>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	1e4a      	subs	r2, r1, #1
 8007ebc:	2568      	movs	r5, #104	; 0x68
 8007ebe:	4355      	muls	r5, r2
 8007ec0:	460e      	mov	r6, r1
 8007ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ec6:	f7ff fd57 	bl	8007978 <_malloc_r>
 8007eca:	4604      	mov	r4, r0
 8007ecc:	b140      	cbz	r0, 8007ee0 <__sfmoreglue+0x28>
 8007ece:	2100      	movs	r1, #0
 8007ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ed4:	300c      	adds	r0, #12
 8007ed6:	60a0      	str	r0, [r4, #8]
 8007ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007edc:	f7ff fcf5 	bl	80078ca <memset>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}

08007ee4 <__sinit>:
 8007ee4:	6983      	ldr	r3, [r0, #24]
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	4604      	mov	r4, r0
 8007eea:	bb33      	cbnz	r3, 8007f3a <__sinit+0x56>
 8007eec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007ef0:	6503      	str	r3, [r0, #80]	; 0x50
 8007ef2:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <__sinit+0x58>)
 8007ef4:	4a12      	ldr	r2, [pc, #72]	; (8007f40 <__sinit+0x5c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6282      	str	r2, [r0, #40]	; 0x28
 8007efa:	4298      	cmp	r0, r3
 8007efc:	bf04      	itt	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	6183      	streq	r3, [r0, #24]
 8007f02:	f000 f81f 	bl	8007f44 <__sfp>
 8007f06:	6060      	str	r0, [r4, #4]
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 f81b 	bl	8007f44 <__sfp>
 8007f0e:	60a0      	str	r0, [r4, #8]
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 f817 	bl	8007f44 <__sfp>
 8007f16:	2200      	movs	r2, #0
 8007f18:	60e0      	str	r0, [r4, #12]
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	6860      	ldr	r0, [r4, #4]
 8007f1e:	f7ff ffa1 	bl	8007e64 <std>
 8007f22:	2201      	movs	r2, #1
 8007f24:	2109      	movs	r1, #9
 8007f26:	68a0      	ldr	r0, [r4, #8]
 8007f28:	f7ff ff9c 	bl	8007e64 <std>
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	2112      	movs	r1, #18
 8007f30:	68e0      	ldr	r0, [r4, #12]
 8007f32:	f7ff ff97 	bl	8007e64 <std>
 8007f36:	2301      	movs	r3, #1
 8007f38:	61a3      	str	r3, [r4, #24]
 8007f3a:	bd10      	pop	{r4, pc}
 8007f3c:	08008c04 	.word	0x08008c04
 8007f40:	08007ead 	.word	0x08007ead

08007f44 <__sfp>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	4b1b      	ldr	r3, [pc, #108]	; (8007fb4 <__sfp+0x70>)
 8007f48:	681e      	ldr	r6, [r3, #0]
 8007f4a:	69b3      	ldr	r3, [r6, #24]
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	b913      	cbnz	r3, 8007f56 <__sfp+0x12>
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7ff ffc7 	bl	8007ee4 <__sinit>
 8007f56:	3648      	adds	r6, #72	; 0x48
 8007f58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	d503      	bpl.n	8007f68 <__sfp+0x24>
 8007f60:	6833      	ldr	r3, [r6, #0]
 8007f62:	b133      	cbz	r3, 8007f72 <__sfp+0x2e>
 8007f64:	6836      	ldr	r6, [r6, #0]
 8007f66:	e7f7      	b.n	8007f58 <__sfp+0x14>
 8007f68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f6c:	b16d      	cbz	r5, 8007f8a <__sfp+0x46>
 8007f6e:	3468      	adds	r4, #104	; 0x68
 8007f70:	e7f4      	b.n	8007f5c <__sfp+0x18>
 8007f72:	2104      	movs	r1, #4
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff ff9f 	bl	8007eb8 <__sfmoreglue>
 8007f7a:	6030      	str	r0, [r6, #0]
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1f1      	bne.n	8007f64 <__sfp+0x20>
 8007f80:	230c      	movs	r3, #12
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	4604      	mov	r4, r0
 8007f86:	4620      	mov	r0, r4
 8007f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <__sfp+0x74>)
 8007f8c:	6665      	str	r5, [r4, #100]	; 0x64
 8007f8e:	e9c4 5500 	strd	r5, r5, [r4]
 8007f92:	60a5      	str	r5, [r4, #8]
 8007f94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007f98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fa4:	f7ff fc91 	bl	80078ca <memset>
 8007fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fb0:	e7e9      	b.n	8007f86 <__sfp+0x42>
 8007fb2:	bf00      	nop
 8007fb4:	08008c04 	.word	0x08008c04
 8007fb8:	ffff0001 	.word	0xffff0001

08007fbc <_fwalk_reent>:
 8007fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	4689      	mov	r9, r1
 8007fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fc8:	2600      	movs	r6, #0
 8007fca:	b914      	cbnz	r4, 8007fd2 <_fwalk_reent+0x16>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007fd6:	3f01      	subs	r7, #1
 8007fd8:	d501      	bpl.n	8007fde <_fwalk_reent+0x22>
 8007fda:	6824      	ldr	r4, [r4, #0]
 8007fdc:	e7f5      	b.n	8007fca <_fwalk_reent+0xe>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d907      	bls.n	8007ff4 <_fwalk_reent+0x38>
 8007fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	d003      	beq.n	8007ff4 <_fwalk_reent+0x38>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4640      	mov	r0, r8
 8007ff0:	47c8      	blx	r9
 8007ff2:	4306      	orrs	r6, r0
 8007ff4:	3568      	adds	r5, #104	; 0x68
 8007ff6:	e7ee      	b.n	8007fd6 <_fwalk_reent+0x1a>

08007ff8 <__swhatbuf_r>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	460e      	mov	r6, r1
 8007ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008000:	2900      	cmp	r1, #0
 8008002:	b096      	sub	sp, #88	; 0x58
 8008004:	4614      	mov	r4, r2
 8008006:	461d      	mov	r5, r3
 8008008:	da07      	bge.n	800801a <__swhatbuf_r+0x22>
 800800a:	2300      	movs	r3, #0
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	89b3      	ldrh	r3, [r6, #12]
 8008010:	061a      	lsls	r2, r3, #24
 8008012:	d410      	bmi.n	8008036 <__swhatbuf_r+0x3e>
 8008014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008018:	e00e      	b.n	8008038 <__swhatbuf_r+0x40>
 800801a:	466a      	mov	r2, sp
 800801c:	f000 fcd2 	bl	80089c4 <_fstat_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	dbf2      	blt.n	800800a <__swhatbuf_r+0x12>
 8008024:	9a01      	ldr	r2, [sp, #4]
 8008026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800802a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800802e:	425a      	negs	r2, r3
 8008030:	415a      	adcs	r2, r3
 8008032:	602a      	str	r2, [r5, #0]
 8008034:	e7ee      	b.n	8008014 <__swhatbuf_r+0x1c>
 8008036:	2340      	movs	r3, #64	; 0x40
 8008038:	2000      	movs	r0, #0
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	b016      	add	sp, #88	; 0x58
 800803e:	bd70      	pop	{r4, r5, r6, pc}

08008040 <__smakebuf_r>:
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008044:	079d      	lsls	r5, r3, #30
 8008046:	4606      	mov	r6, r0
 8008048:	460c      	mov	r4, r1
 800804a:	d507      	bpl.n	800805c <__smakebuf_r+0x1c>
 800804c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	2301      	movs	r3, #1
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	b002      	add	sp, #8
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	ab01      	add	r3, sp, #4
 800805e:	466a      	mov	r2, sp
 8008060:	f7ff ffca 	bl	8007ff8 <__swhatbuf_r>
 8008064:	9900      	ldr	r1, [sp, #0]
 8008066:	4605      	mov	r5, r0
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff fc85 	bl	8007978 <_malloc_r>
 800806e:	b948      	cbnz	r0, 8008084 <__smakebuf_r+0x44>
 8008070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008074:	059a      	lsls	r2, r3, #22
 8008076:	d4ef      	bmi.n	8008058 <__smakebuf_r+0x18>
 8008078:	f023 0303 	bic.w	r3, r3, #3
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	e7e3      	b.n	800804c <__smakebuf_r+0xc>
 8008084:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <__smakebuf_r+0x7c>)
 8008086:	62b3      	str	r3, [r6, #40]	; 0x28
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	6020      	str	r0, [r4, #0]
 800808c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	6163      	str	r3, [r4, #20]
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	6120      	str	r0, [r4, #16]
 800809a:	b15b      	cbz	r3, 80080b4 <__smakebuf_r+0x74>
 800809c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 fca1 	bl	80089e8 <_isatty_r>
 80080a6:	b128      	cbz	r0, 80080b4 <__smakebuf_r+0x74>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	431d      	orrs	r5, r3
 80080b8:	81a5      	strh	r5, [r4, #12]
 80080ba:	e7cd      	b.n	8008058 <__smakebuf_r+0x18>
 80080bc:	08007ead 	.word	0x08007ead

080080c0 <__malloc_lock>:
 80080c0:	4770      	bx	lr

080080c2 <__malloc_unlock>:
 80080c2:	4770      	bx	lr

080080c4 <__ssputs_r>:
 80080c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	688e      	ldr	r6, [r1, #8]
 80080ca:	429e      	cmp	r6, r3
 80080cc:	4682      	mov	sl, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	4690      	mov	r8, r2
 80080d2:	4699      	mov	r9, r3
 80080d4:	d837      	bhi.n	8008146 <__ssputs_r+0x82>
 80080d6:	898a      	ldrh	r2, [r1, #12]
 80080d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080dc:	d031      	beq.n	8008142 <__ssputs_r+0x7e>
 80080de:	6825      	ldr	r5, [r4, #0]
 80080e0:	6909      	ldr	r1, [r1, #16]
 80080e2:	1a6f      	subs	r7, r5, r1
 80080e4:	6965      	ldr	r5, [r4, #20]
 80080e6:	2302      	movs	r3, #2
 80080e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80080f0:	f109 0301 	add.w	r3, r9, #1
 80080f4:	443b      	add	r3, r7
 80080f6:	429d      	cmp	r5, r3
 80080f8:	bf38      	it	cc
 80080fa:	461d      	movcc	r5, r3
 80080fc:	0553      	lsls	r3, r2, #21
 80080fe:	d530      	bpl.n	8008162 <__ssputs_r+0x9e>
 8008100:	4629      	mov	r1, r5
 8008102:	f7ff fc39 	bl	8007978 <_malloc_r>
 8008106:	4606      	mov	r6, r0
 8008108:	b950      	cbnz	r0, 8008120 <__ssputs_r+0x5c>
 800810a:	230c      	movs	r3, #12
 800810c:	f8ca 3000 	str.w	r3, [sl]
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	463a      	mov	r2, r7
 8008122:	6921      	ldr	r1, [r4, #16]
 8008124:	f7ff fbc6 	bl	80078b4 <memcpy>
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800812e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	6126      	str	r6, [r4, #16]
 8008136:	6165      	str	r5, [r4, #20]
 8008138:	443e      	add	r6, r7
 800813a:	1bed      	subs	r5, r5, r7
 800813c:	6026      	str	r6, [r4, #0]
 800813e:	60a5      	str	r5, [r4, #8]
 8008140:	464e      	mov	r6, r9
 8008142:	454e      	cmp	r6, r9
 8008144:	d900      	bls.n	8008148 <__ssputs_r+0x84>
 8008146:	464e      	mov	r6, r9
 8008148:	4632      	mov	r2, r6
 800814a:	4641      	mov	r1, r8
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	f000 fc6d 	bl	8008a2c <memmove>
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	1b9b      	subs	r3, r3, r6
 8008156:	60a3      	str	r3, [r4, #8]
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	441e      	add	r6, r3
 800815c:	6026      	str	r6, [r4, #0]
 800815e:	2000      	movs	r0, #0
 8008160:	e7dc      	b.n	800811c <__ssputs_r+0x58>
 8008162:	462a      	mov	r2, r5
 8008164:	f000 fc7b 	bl	8008a5e <_realloc_r>
 8008168:	4606      	mov	r6, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	d1e2      	bne.n	8008134 <__ssputs_r+0x70>
 800816e:	6921      	ldr	r1, [r4, #16]
 8008170:	4650      	mov	r0, sl
 8008172:	f7ff fbb3 	bl	80078dc <_free_r>
 8008176:	e7c8      	b.n	800810a <__ssputs_r+0x46>

08008178 <_svfiprintf_r>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	461d      	mov	r5, r3
 800817e:	898b      	ldrh	r3, [r1, #12]
 8008180:	061f      	lsls	r7, r3, #24
 8008182:	b09d      	sub	sp, #116	; 0x74
 8008184:	4680      	mov	r8, r0
 8008186:	460c      	mov	r4, r1
 8008188:	4616      	mov	r6, r2
 800818a:	d50f      	bpl.n	80081ac <_svfiprintf_r+0x34>
 800818c:	690b      	ldr	r3, [r1, #16]
 800818e:	b96b      	cbnz	r3, 80081ac <_svfiprintf_r+0x34>
 8008190:	2140      	movs	r1, #64	; 0x40
 8008192:	f7ff fbf1 	bl	8007978 <_malloc_r>
 8008196:	6020      	str	r0, [r4, #0]
 8008198:	6120      	str	r0, [r4, #16]
 800819a:	b928      	cbnz	r0, 80081a8 <_svfiprintf_r+0x30>
 800819c:	230c      	movs	r3, #12
 800819e:	f8c8 3000 	str.w	r3, [r8]
 80081a2:	f04f 30ff 	mov.w	r0, #4294967295
 80081a6:	e0c8      	b.n	800833a <_svfiprintf_r+0x1c2>
 80081a8:	2340      	movs	r3, #64	; 0x40
 80081aa:	6163      	str	r3, [r4, #20]
 80081ac:	2300      	movs	r3, #0
 80081ae:	9309      	str	r3, [sp, #36]	; 0x24
 80081b0:	2320      	movs	r3, #32
 80081b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081b6:	2330      	movs	r3, #48	; 0x30
 80081b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081bc:	9503      	str	r5, [sp, #12]
 80081be:	f04f 0b01 	mov.w	fp, #1
 80081c2:	4637      	mov	r7, r6
 80081c4:	463d      	mov	r5, r7
 80081c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081ca:	b10b      	cbz	r3, 80081d0 <_svfiprintf_r+0x58>
 80081cc:	2b25      	cmp	r3, #37	; 0x25
 80081ce:	d13e      	bne.n	800824e <_svfiprintf_r+0xd6>
 80081d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80081d4:	d00b      	beq.n	80081ee <_svfiprintf_r+0x76>
 80081d6:	4653      	mov	r3, sl
 80081d8:	4632      	mov	r2, r6
 80081da:	4621      	mov	r1, r4
 80081dc:	4640      	mov	r0, r8
 80081de:	f7ff ff71 	bl	80080c4 <__ssputs_r>
 80081e2:	3001      	adds	r0, #1
 80081e4:	f000 80a4 	beq.w	8008330 <_svfiprintf_r+0x1b8>
 80081e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ea:	4453      	add	r3, sl
 80081ec:	9309      	str	r3, [sp, #36]	; 0x24
 80081ee:	783b      	ldrb	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 809d 	beq.w	8008330 <_svfiprintf_r+0x1b8>
 80081f6:	2300      	movs	r3, #0
 80081f8:	f04f 32ff 	mov.w	r2, #4294967295
 80081fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	9307      	str	r3, [sp, #28]
 8008204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008208:	931a      	str	r3, [sp, #104]	; 0x68
 800820a:	462f      	mov	r7, r5
 800820c:	2205      	movs	r2, #5
 800820e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008212:	4850      	ldr	r0, [pc, #320]	; (8008354 <_svfiprintf_r+0x1dc>)
 8008214:	f7f7 ffec 	bl	80001f0 <memchr>
 8008218:	9b04      	ldr	r3, [sp, #16]
 800821a:	b9d0      	cbnz	r0, 8008252 <_svfiprintf_r+0xda>
 800821c:	06d9      	lsls	r1, r3, #27
 800821e:	bf44      	itt	mi
 8008220:	2220      	movmi	r2, #32
 8008222:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008226:	071a      	lsls	r2, r3, #28
 8008228:	bf44      	itt	mi
 800822a:	222b      	movmi	r2, #43	; 0x2b
 800822c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008230:	782a      	ldrb	r2, [r5, #0]
 8008232:	2a2a      	cmp	r2, #42	; 0x2a
 8008234:	d015      	beq.n	8008262 <_svfiprintf_r+0xea>
 8008236:	9a07      	ldr	r2, [sp, #28]
 8008238:	462f      	mov	r7, r5
 800823a:	2000      	movs	r0, #0
 800823c:	250a      	movs	r5, #10
 800823e:	4639      	mov	r1, r7
 8008240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008244:	3b30      	subs	r3, #48	; 0x30
 8008246:	2b09      	cmp	r3, #9
 8008248:	d94d      	bls.n	80082e6 <_svfiprintf_r+0x16e>
 800824a:	b1b8      	cbz	r0, 800827c <_svfiprintf_r+0x104>
 800824c:	e00f      	b.n	800826e <_svfiprintf_r+0xf6>
 800824e:	462f      	mov	r7, r5
 8008250:	e7b8      	b.n	80081c4 <_svfiprintf_r+0x4c>
 8008252:	4a40      	ldr	r2, [pc, #256]	; (8008354 <_svfiprintf_r+0x1dc>)
 8008254:	1a80      	subs	r0, r0, r2
 8008256:	fa0b f000 	lsl.w	r0, fp, r0
 800825a:	4318      	orrs	r0, r3
 800825c:	9004      	str	r0, [sp, #16]
 800825e:	463d      	mov	r5, r7
 8008260:	e7d3      	b.n	800820a <_svfiprintf_r+0x92>
 8008262:	9a03      	ldr	r2, [sp, #12]
 8008264:	1d11      	adds	r1, r2, #4
 8008266:	6812      	ldr	r2, [r2, #0]
 8008268:	9103      	str	r1, [sp, #12]
 800826a:	2a00      	cmp	r2, #0
 800826c:	db01      	blt.n	8008272 <_svfiprintf_r+0xfa>
 800826e:	9207      	str	r2, [sp, #28]
 8008270:	e004      	b.n	800827c <_svfiprintf_r+0x104>
 8008272:	4252      	negs	r2, r2
 8008274:	f043 0302 	orr.w	r3, r3, #2
 8008278:	9207      	str	r2, [sp, #28]
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	783b      	ldrb	r3, [r7, #0]
 800827e:	2b2e      	cmp	r3, #46	; 0x2e
 8008280:	d10c      	bne.n	800829c <_svfiprintf_r+0x124>
 8008282:	787b      	ldrb	r3, [r7, #1]
 8008284:	2b2a      	cmp	r3, #42	; 0x2a
 8008286:	d133      	bne.n	80082f0 <_svfiprintf_r+0x178>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	1d1a      	adds	r2, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	9203      	str	r2, [sp, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfb8      	it	lt
 8008294:	f04f 33ff 	movlt.w	r3, #4294967295
 8008298:	3702      	adds	r7, #2
 800829a:	9305      	str	r3, [sp, #20]
 800829c:	4d2e      	ldr	r5, [pc, #184]	; (8008358 <_svfiprintf_r+0x1e0>)
 800829e:	7839      	ldrb	r1, [r7, #0]
 80082a0:	2203      	movs	r2, #3
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7f7 ffa4 	bl	80001f0 <memchr>
 80082a8:	b138      	cbz	r0, 80082ba <_svfiprintf_r+0x142>
 80082aa:	2340      	movs	r3, #64	; 0x40
 80082ac:	1b40      	subs	r0, r0, r5
 80082ae:	fa03 f000 	lsl.w	r0, r3, r0
 80082b2:	9b04      	ldr	r3, [sp, #16]
 80082b4:	4303      	orrs	r3, r0
 80082b6:	3701      	adds	r7, #1
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	7839      	ldrb	r1, [r7, #0]
 80082bc:	4827      	ldr	r0, [pc, #156]	; (800835c <_svfiprintf_r+0x1e4>)
 80082be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082c2:	2206      	movs	r2, #6
 80082c4:	1c7e      	adds	r6, r7, #1
 80082c6:	f7f7 ff93 	bl	80001f0 <memchr>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d038      	beq.n	8008340 <_svfiprintf_r+0x1c8>
 80082ce:	4b24      	ldr	r3, [pc, #144]	; (8008360 <_svfiprintf_r+0x1e8>)
 80082d0:	bb13      	cbnz	r3, 8008318 <_svfiprintf_r+0x1a0>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	3307      	adds	r3, #7
 80082d6:	f023 0307 	bic.w	r3, r3, #7
 80082da:	3308      	adds	r3, #8
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e0:	444b      	add	r3, r9
 80082e2:	9309      	str	r3, [sp, #36]	; 0x24
 80082e4:	e76d      	b.n	80081c2 <_svfiprintf_r+0x4a>
 80082e6:	fb05 3202 	mla	r2, r5, r2, r3
 80082ea:	2001      	movs	r0, #1
 80082ec:	460f      	mov	r7, r1
 80082ee:	e7a6      	b.n	800823e <_svfiprintf_r+0xc6>
 80082f0:	2300      	movs	r3, #0
 80082f2:	3701      	adds	r7, #1
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	4619      	mov	r1, r3
 80082f8:	250a      	movs	r5, #10
 80082fa:	4638      	mov	r0, r7
 80082fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008300:	3a30      	subs	r2, #48	; 0x30
 8008302:	2a09      	cmp	r2, #9
 8008304:	d903      	bls.n	800830e <_svfiprintf_r+0x196>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0c8      	beq.n	800829c <_svfiprintf_r+0x124>
 800830a:	9105      	str	r1, [sp, #20]
 800830c:	e7c6      	b.n	800829c <_svfiprintf_r+0x124>
 800830e:	fb05 2101 	mla	r1, r5, r1, r2
 8008312:	2301      	movs	r3, #1
 8008314:	4607      	mov	r7, r0
 8008316:	e7f0      	b.n	80082fa <_svfiprintf_r+0x182>
 8008318:	ab03      	add	r3, sp, #12
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	4622      	mov	r2, r4
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <_svfiprintf_r+0x1ec>)
 8008320:	a904      	add	r1, sp, #16
 8008322:	4640      	mov	r0, r8
 8008324:	f3af 8000 	nop.w
 8008328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800832c:	4681      	mov	r9, r0
 800832e:	d1d6      	bne.n	80082de <_svfiprintf_r+0x166>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	065b      	lsls	r3, r3, #25
 8008334:	f53f af35 	bmi.w	80081a2 <_svfiprintf_r+0x2a>
 8008338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800833a:	b01d      	add	sp, #116	; 0x74
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	ab03      	add	r3, sp, #12
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	4622      	mov	r2, r4
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <_svfiprintf_r+0x1ec>)
 8008348:	a904      	add	r1, sp, #16
 800834a:	4640      	mov	r0, r8
 800834c:	f000 f9c2 	bl	80086d4 <_printf_i>
 8008350:	e7ea      	b.n	8008328 <_svfiprintf_r+0x1b0>
 8008352:	bf00      	nop
 8008354:	08008c68 	.word	0x08008c68
 8008358:	08008c6e 	.word	0x08008c6e
 800835c:	08008c72 	.word	0x08008c72
 8008360:	00000000 	.word	0x00000000
 8008364:	080080c5 	.word	0x080080c5

08008368 <__sfputc_r>:
 8008368:	6893      	ldr	r3, [r2, #8]
 800836a:	3b01      	subs	r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	b410      	push	{r4}
 8008370:	6093      	str	r3, [r2, #8]
 8008372:	da08      	bge.n	8008386 <__sfputc_r+0x1e>
 8008374:	6994      	ldr	r4, [r2, #24]
 8008376:	42a3      	cmp	r3, r4
 8008378:	db01      	blt.n	800837e <__sfputc_r+0x16>
 800837a:	290a      	cmp	r1, #10
 800837c:	d103      	bne.n	8008386 <__sfputc_r+0x1e>
 800837e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008382:	f7ff bbff 	b.w	8007b84 <__swbuf_r>
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	1c58      	adds	r0, r3, #1
 800838a:	6010      	str	r0, [r2, #0]
 800838c:	7019      	strb	r1, [r3, #0]
 800838e:	4608      	mov	r0, r1
 8008390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008394:	4770      	bx	lr

08008396 <__sfputs_r>:
 8008396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008398:	4606      	mov	r6, r0
 800839a:	460f      	mov	r7, r1
 800839c:	4614      	mov	r4, r2
 800839e:	18d5      	adds	r5, r2, r3
 80083a0:	42ac      	cmp	r4, r5
 80083a2:	d101      	bne.n	80083a8 <__sfputs_r+0x12>
 80083a4:	2000      	movs	r0, #0
 80083a6:	e007      	b.n	80083b8 <__sfputs_r+0x22>
 80083a8:	463a      	mov	r2, r7
 80083aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ffda 	bl	8008368 <__sfputc_r>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d1f3      	bne.n	80083a0 <__sfputs_r+0xa>
 80083b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083bc <_vfiprintf_r>:
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	b09d      	sub	sp, #116	; 0x74
 80083c4:	4617      	mov	r7, r2
 80083c6:	461d      	mov	r5, r3
 80083c8:	4606      	mov	r6, r0
 80083ca:	b118      	cbz	r0, 80083d4 <_vfiprintf_r+0x18>
 80083cc:	6983      	ldr	r3, [r0, #24]
 80083ce:	b90b      	cbnz	r3, 80083d4 <_vfiprintf_r+0x18>
 80083d0:	f7ff fd88 	bl	8007ee4 <__sinit>
 80083d4:	4b7c      	ldr	r3, [pc, #496]	; (80085c8 <_vfiprintf_r+0x20c>)
 80083d6:	429c      	cmp	r4, r3
 80083d8:	d158      	bne.n	800848c <_vfiprintf_r+0xd0>
 80083da:	6874      	ldr	r4, [r6, #4]
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	0718      	lsls	r0, r3, #28
 80083e0:	d55e      	bpl.n	80084a0 <_vfiprintf_r+0xe4>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d05b      	beq.n	80084a0 <_vfiprintf_r+0xe4>
 80083e8:	2300      	movs	r3, #0
 80083ea:	9309      	str	r3, [sp, #36]	; 0x24
 80083ec:	2320      	movs	r3, #32
 80083ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083f2:	2330      	movs	r3, #48	; 0x30
 80083f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083f8:	9503      	str	r5, [sp, #12]
 80083fa:	f04f 0b01 	mov.w	fp, #1
 80083fe:	46b8      	mov	r8, r7
 8008400:	4645      	mov	r5, r8
 8008402:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008406:	b10b      	cbz	r3, 800840c <_vfiprintf_r+0x50>
 8008408:	2b25      	cmp	r3, #37	; 0x25
 800840a:	d154      	bne.n	80084b6 <_vfiprintf_r+0xfa>
 800840c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008410:	d00b      	beq.n	800842a <_vfiprintf_r+0x6e>
 8008412:	4653      	mov	r3, sl
 8008414:	463a      	mov	r2, r7
 8008416:	4621      	mov	r1, r4
 8008418:	4630      	mov	r0, r6
 800841a:	f7ff ffbc 	bl	8008396 <__sfputs_r>
 800841e:	3001      	adds	r0, #1
 8008420:	f000 80c2 	beq.w	80085a8 <_vfiprintf_r+0x1ec>
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	4453      	add	r3, sl
 8008428:	9309      	str	r3, [sp, #36]	; 0x24
 800842a:	f898 3000 	ldrb.w	r3, [r8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80ba 	beq.w	80085a8 <_vfiprintf_r+0x1ec>
 8008434:	2300      	movs	r3, #0
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	9307      	str	r3, [sp, #28]
 8008442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008446:	931a      	str	r3, [sp, #104]	; 0x68
 8008448:	46a8      	mov	r8, r5
 800844a:	2205      	movs	r2, #5
 800844c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008450:	485e      	ldr	r0, [pc, #376]	; (80085cc <_vfiprintf_r+0x210>)
 8008452:	f7f7 fecd 	bl	80001f0 <memchr>
 8008456:	9b04      	ldr	r3, [sp, #16]
 8008458:	bb78      	cbnz	r0, 80084ba <_vfiprintf_r+0xfe>
 800845a:	06d9      	lsls	r1, r3, #27
 800845c:	bf44      	itt	mi
 800845e:	2220      	movmi	r2, #32
 8008460:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008464:	071a      	lsls	r2, r3, #28
 8008466:	bf44      	itt	mi
 8008468:	222b      	movmi	r2, #43	; 0x2b
 800846a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800846e:	782a      	ldrb	r2, [r5, #0]
 8008470:	2a2a      	cmp	r2, #42	; 0x2a
 8008472:	d02a      	beq.n	80084ca <_vfiprintf_r+0x10e>
 8008474:	9a07      	ldr	r2, [sp, #28]
 8008476:	46a8      	mov	r8, r5
 8008478:	2000      	movs	r0, #0
 800847a:	250a      	movs	r5, #10
 800847c:	4641      	mov	r1, r8
 800847e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008482:	3b30      	subs	r3, #48	; 0x30
 8008484:	2b09      	cmp	r3, #9
 8008486:	d969      	bls.n	800855c <_vfiprintf_r+0x1a0>
 8008488:	b360      	cbz	r0, 80084e4 <_vfiprintf_r+0x128>
 800848a:	e024      	b.n	80084d6 <_vfiprintf_r+0x11a>
 800848c:	4b50      	ldr	r3, [pc, #320]	; (80085d0 <_vfiprintf_r+0x214>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <_vfiprintf_r+0xda>
 8008492:	68b4      	ldr	r4, [r6, #8]
 8008494:	e7a2      	b.n	80083dc <_vfiprintf_r+0x20>
 8008496:	4b4f      	ldr	r3, [pc, #316]	; (80085d4 <_vfiprintf_r+0x218>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68f4      	ldreq	r4, [r6, #12]
 800849e:	e79d      	b.n	80083dc <_vfiprintf_r+0x20>
 80084a0:	4621      	mov	r1, r4
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7ff fbc0 	bl	8007c28 <__swsetup_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d09d      	beq.n	80083e8 <_vfiprintf_r+0x2c>
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	b01d      	add	sp, #116	; 0x74
 80084b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b6:	46a8      	mov	r8, r5
 80084b8:	e7a2      	b.n	8008400 <_vfiprintf_r+0x44>
 80084ba:	4a44      	ldr	r2, [pc, #272]	; (80085cc <_vfiprintf_r+0x210>)
 80084bc:	1a80      	subs	r0, r0, r2
 80084be:	fa0b f000 	lsl.w	r0, fp, r0
 80084c2:	4318      	orrs	r0, r3
 80084c4:	9004      	str	r0, [sp, #16]
 80084c6:	4645      	mov	r5, r8
 80084c8:	e7be      	b.n	8008448 <_vfiprintf_r+0x8c>
 80084ca:	9a03      	ldr	r2, [sp, #12]
 80084cc:	1d11      	adds	r1, r2, #4
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	9103      	str	r1, [sp, #12]
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	db01      	blt.n	80084da <_vfiprintf_r+0x11e>
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	e004      	b.n	80084e4 <_vfiprintf_r+0x128>
 80084da:	4252      	negs	r2, r2
 80084dc:	f043 0302 	orr.w	r3, r3, #2
 80084e0:	9207      	str	r2, [sp, #28]
 80084e2:	9304      	str	r3, [sp, #16]
 80084e4:	f898 3000 	ldrb.w	r3, [r8]
 80084e8:	2b2e      	cmp	r3, #46	; 0x2e
 80084ea:	d10e      	bne.n	800850a <_vfiprintf_r+0x14e>
 80084ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80084f0:	2b2a      	cmp	r3, #42	; 0x2a
 80084f2:	d138      	bne.n	8008566 <_vfiprintf_r+0x1aa>
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	1d1a      	adds	r2, r3, #4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	9203      	str	r2, [sp, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfb8      	it	lt
 8008500:	f04f 33ff 	movlt.w	r3, #4294967295
 8008504:	f108 0802 	add.w	r8, r8, #2
 8008508:	9305      	str	r3, [sp, #20]
 800850a:	4d33      	ldr	r5, [pc, #204]	; (80085d8 <_vfiprintf_r+0x21c>)
 800850c:	f898 1000 	ldrb.w	r1, [r8]
 8008510:	2203      	movs	r2, #3
 8008512:	4628      	mov	r0, r5
 8008514:	f7f7 fe6c 	bl	80001f0 <memchr>
 8008518:	b140      	cbz	r0, 800852c <_vfiprintf_r+0x170>
 800851a:	2340      	movs	r3, #64	; 0x40
 800851c:	1b40      	subs	r0, r0, r5
 800851e:	fa03 f000 	lsl.w	r0, r3, r0
 8008522:	9b04      	ldr	r3, [sp, #16]
 8008524:	4303      	orrs	r3, r0
 8008526:	f108 0801 	add.w	r8, r8, #1
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	f898 1000 	ldrb.w	r1, [r8]
 8008530:	482a      	ldr	r0, [pc, #168]	; (80085dc <_vfiprintf_r+0x220>)
 8008532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008536:	2206      	movs	r2, #6
 8008538:	f108 0701 	add.w	r7, r8, #1
 800853c:	f7f7 fe58 	bl	80001f0 <memchr>
 8008540:	2800      	cmp	r0, #0
 8008542:	d037      	beq.n	80085b4 <_vfiprintf_r+0x1f8>
 8008544:	4b26      	ldr	r3, [pc, #152]	; (80085e0 <_vfiprintf_r+0x224>)
 8008546:	bb1b      	cbnz	r3, 8008590 <_vfiprintf_r+0x1d4>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	3307      	adds	r3, #7
 800854c:	f023 0307 	bic.w	r3, r3, #7
 8008550:	3308      	adds	r3, #8
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008556:	444b      	add	r3, r9
 8008558:	9309      	str	r3, [sp, #36]	; 0x24
 800855a:	e750      	b.n	80083fe <_vfiprintf_r+0x42>
 800855c:	fb05 3202 	mla	r2, r5, r2, r3
 8008560:	2001      	movs	r0, #1
 8008562:	4688      	mov	r8, r1
 8008564:	e78a      	b.n	800847c <_vfiprintf_r+0xc0>
 8008566:	2300      	movs	r3, #0
 8008568:	f108 0801 	add.w	r8, r8, #1
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	4619      	mov	r1, r3
 8008570:	250a      	movs	r5, #10
 8008572:	4640      	mov	r0, r8
 8008574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008578:	3a30      	subs	r2, #48	; 0x30
 800857a:	2a09      	cmp	r2, #9
 800857c:	d903      	bls.n	8008586 <_vfiprintf_r+0x1ca>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0c3      	beq.n	800850a <_vfiprintf_r+0x14e>
 8008582:	9105      	str	r1, [sp, #20]
 8008584:	e7c1      	b.n	800850a <_vfiprintf_r+0x14e>
 8008586:	fb05 2101 	mla	r1, r5, r1, r2
 800858a:	2301      	movs	r3, #1
 800858c:	4680      	mov	r8, r0
 800858e:	e7f0      	b.n	8008572 <_vfiprintf_r+0x1b6>
 8008590:	ab03      	add	r3, sp, #12
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4622      	mov	r2, r4
 8008596:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <_vfiprintf_r+0x228>)
 8008598:	a904      	add	r1, sp, #16
 800859a:	4630      	mov	r0, r6
 800859c:	f3af 8000 	nop.w
 80085a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085a4:	4681      	mov	r9, r0
 80085a6:	d1d5      	bne.n	8008554 <_vfiprintf_r+0x198>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	065b      	lsls	r3, r3, #25
 80085ac:	f53f af7e 	bmi.w	80084ac <_vfiprintf_r+0xf0>
 80085b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b2:	e77d      	b.n	80084b0 <_vfiprintf_r+0xf4>
 80085b4:	ab03      	add	r3, sp, #12
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	4622      	mov	r2, r4
 80085ba:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <_vfiprintf_r+0x228>)
 80085bc:	a904      	add	r1, sp, #16
 80085be:	4630      	mov	r0, r6
 80085c0:	f000 f888 	bl	80086d4 <_printf_i>
 80085c4:	e7ec      	b.n	80085a0 <_vfiprintf_r+0x1e4>
 80085c6:	bf00      	nop
 80085c8:	08008c28 	.word	0x08008c28
 80085cc:	08008c68 	.word	0x08008c68
 80085d0:	08008c48 	.word	0x08008c48
 80085d4:	08008c08 	.word	0x08008c08
 80085d8:	08008c6e 	.word	0x08008c6e
 80085dc:	08008c72 	.word	0x08008c72
 80085e0:	00000000 	.word	0x00000000
 80085e4:	08008397 	.word	0x08008397

080085e8 <_printf_common>:
 80085e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	4691      	mov	r9, r2
 80085ee:	461f      	mov	r7, r3
 80085f0:	688a      	ldr	r2, [r1, #8]
 80085f2:	690b      	ldr	r3, [r1, #16]
 80085f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	bfb8      	it	lt
 80085fc:	4613      	movlt	r3, r2
 80085fe:	f8c9 3000 	str.w	r3, [r9]
 8008602:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008606:	4606      	mov	r6, r0
 8008608:	460c      	mov	r4, r1
 800860a:	b112      	cbz	r2, 8008612 <_printf_common+0x2a>
 800860c:	3301      	adds	r3, #1
 800860e:	f8c9 3000 	str.w	r3, [r9]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	0699      	lsls	r1, r3, #26
 8008616:	bf42      	ittt	mi
 8008618:	f8d9 3000 	ldrmi.w	r3, [r9]
 800861c:	3302      	addmi	r3, #2
 800861e:	f8c9 3000 	strmi.w	r3, [r9]
 8008622:	6825      	ldr	r5, [r4, #0]
 8008624:	f015 0506 	ands.w	r5, r5, #6
 8008628:	d107      	bne.n	800863a <_printf_common+0x52>
 800862a:	f104 0a19 	add.w	sl, r4, #25
 800862e:	68e3      	ldr	r3, [r4, #12]
 8008630:	f8d9 2000 	ldr.w	r2, [r9]
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	42ab      	cmp	r3, r5
 8008638:	dc28      	bgt.n	800868c <_printf_common+0xa4>
 800863a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	3300      	adds	r3, #0
 8008642:	bf18      	it	ne
 8008644:	2301      	movne	r3, #1
 8008646:	0692      	lsls	r2, r2, #26
 8008648:	d42d      	bmi.n	80086a6 <_printf_common+0xbe>
 800864a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800864e:	4639      	mov	r1, r7
 8008650:	4630      	mov	r0, r6
 8008652:	47c0      	blx	r8
 8008654:	3001      	adds	r0, #1
 8008656:	d020      	beq.n	800869a <_printf_common+0xb2>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	68e5      	ldr	r5, [r4, #12]
 800865c:	f8d9 2000 	ldr.w	r2, [r9]
 8008660:	f003 0306 	and.w	r3, r3, #6
 8008664:	2b04      	cmp	r3, #4
 8008666:	bf08      	it	eq
 8008668:	1aad      	subeq	r5, r5, r2
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	6922      	ldr	r2, [r4, #16]
 800866e:	bf0c      	ite	eq
 8008670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008674:	2500      	movne	r5, #0
 8008676:	4293      	cmp	r3, r2
 8008678:	bfc4      	itt	gt
 800867a:	1a9b      	subgt	r3, r3, r2
 800867c:	18ed      	addgt	r5, r5, r3
 800867e:	f04f 0900 	mov.w	r9, #0
 8008682:	341a      	adds	r4, #26
 8008684:	454d      	cmp	r5, r9
 8008686:	d11a      	bne.n	80086be <_printf_common+0xd6>
 8008688:	2000      	movs	r0, #0
 800868a:	e008      	b.n	800869e <_printf_common+0xb6>
 800868c:	2301      	movs	r3, #1
 800868e:	4652      	mov	r2, sl
 8008690:	4639      	mov	r1, r7
 8008692:	4630      	mov	r0, r6
 8008694:	47c0      	blx	r8
 8008696:	3001      	adds	r0, #1
 8008698:	d103      	bne.n	80086a2 <_printf_common+0xba>
 800869a:	f04f 30ff 	mov.w	r0, #4294967295
 800869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a2:	3501      	adds	r5, #1
 80086a4:	e7c3      	b.n	800862e <_printf_common+0x46>
 80086a6:	18e1      	adds	r1, r4, r3
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	2030      	movs	r0, #48	; 0x30
 80086ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086b0:	4422      	add	r2, r4
 80086b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086ba:	3302      	adds	r3, #2
 80086bc:	e7c5      	b.n	800864a <_printf_common+0x62>
 80086be:	2301      	movs	r3, #1
 80086c0:	4622      	mov	r2, r4
 80086c2:	4639      	mov	r1, r7
 80086c4:	4630      	mov	r0, r6
 80086c6:	47c0      	blx	r8
 80086c8:	3001      	adds	r0, #1
 80086ca:	d0e6      	beq.n	800869a <_printf_common+0xb2>
 80086cc:	f109 0901 	add.w	r9, r9, #1
 80086d0:	e7d8      	b.n	8008684 <_printf_common+0x9c>
	...

080086d4 <_printf_i>:
 80086d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80086dc:	460c      	mov	r4, r1
 80086de:	7e09      	ldrb	r1, [r1, #24]
 80086e0:	b085      	sub	sp, #20
 80086e2:	296e      	cmp	r1, #110	; 0x6e
 80086e4:	4617      	mov	r7, r2
 80086e6:	4606      	mov	r6, r0
 80086e8:	4698      	mov	r8, r3
 80086ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ec:	f000 80b3 	beq.w	8008856 <_printf_i+0x182>
 80086f0:	d822      	bhi.n	8008738 <_printf_i+0x64>
 80086f2:	2963      	cmp	r1, #99	; 0x63
 80086f4:	d036      	beq.n	8008764 <_printf_i+0x90>
 80086f6:	d80a      	bhi.n	800870e <_printf_i+0x3a>
 80086f8:	2900      	cmp	r1, #0
 80086fa:	f000 80b9 	beq.w	8008870 <_printf_i+0x19c>
 80086fe:	2958      	cmp	r1, #88	; 0x58
 8008700:	f000 8083 	beq.w	800880a <_printf_i+0x136>
 8008704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008708:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800870c:	e032      	b.n	8008774 <_printf_i+0xa0>
 800870e:	2964      	cmp	r1, #100	; 0x64
 8008710:	d001      	beq.n	8008716 <_printf_i+0x42>
 8008712:	2969      	cmp	r1, #105	; 0x69
 8008714:	d1f6      	bne.n	8008704 <_printf_i+0x30>
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	0605      	lsls	r5, r0, #24
 800871c:	f103 0104 	add.w	r1, r3, #4
 8008720:	d52a      	bpl.n	8008778 <_printf_i+0xa4>
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6011      	str	r1, [r2, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	da03      	bge.n	8008732 <_printf_i+0x5e>
 800872a:	222d      	movs	r2, #45	; 0x2d
 800872c:	425b      	negs	r3, r3
 800872e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008732:	486f      	ldr	r0, [pc, #444]	; (80088f0 <_printf_i+0x21c>)
 8008734:	220a      	movs	r2, #10
 8008736:	e039      	b.n	80087ac <_printf_i+0xd8>
 8008738:	2973      	cmp	r1, #115	; 0x73
 800873a:	f000 809d 	beq.w	8008878 <_printf_i+0x1a4>
 800873e:	d808      	bhi.n	8008752 <_printf_i+0x7e>
 8008740:	296f      	cmp	r1, #111	; 0x6f
 8008742:	d020      	beq.n	8008786 <_printf_i+0xb2>
 8008744:	2970      	cmp	r1, #112	; 0x70
 8008746:	d1dd      	bne.n	8008704 <_printf_i+0x30>
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	f043 0320 	orr.w	r3, r3, #32
 800874e:	6023      	str	r3, [r4, #0]
 8008750:	e003      	b.n	800875a <_printf_i+0x86>
 8008752:	2975      	cmp	r1, #117	; 0x75
 8008754:	d017      	beq.n	8008786 <_printf_i+0xb2>
 8008756:	2978      	cmp	r1, #120	; 0x78
 8008758:	d1d4      	bne.n	8008704 <_printf_i+0x30>
 800875a:	2378      	movs	r3, #120	; 0x78
 800875c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008760:	4864      	ldr	r0, [pc, #400]	; (80088f4 <_printf_i+0x220>)
 8008762:	e055      	b.n	8008810 <_printf_i+0x13c>
 8008764:	6813      	ldr	r3, [r2, #0]
 8008766:	1d19      	adds	r1, r3, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6011      	str	r1, [r2, #0]
 800876c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008774:	2301      	movs	r3, #1
 8008776:	e08c      	b.n	8008892 <_printf_i+0x1be>
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6011      	str	r1, [r2, #0]
 800877c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008780:	bf18      	it	ne
 8008782:	b21b      	sxthne	r3, r3
 8008784:	e7cf      	b.n	8008726 <_printf_i+0x52>
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	6825      	ldr	r5, [r4, #0]
 800878a:	1d18      	adds	r0, r3, #4
 800878c:	6010      	str	r0, [r2, #0]
 800878e:	0628      	lsls	r0, r5, #24
 8008790:	d501      	bpl.n	8008796 <_printf_i+0xc2>
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	e002      	b.n	800879c <_printf_i+0xc8>
 8008796:	0668      	lsls	r0, r5, #25
 8008798:	d5fb      	bpl.n	8008792 <_printf_i+0xbe>
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	4854      	ldr	r0, [pc, #336]	; (80088f0 <_printf_i+0x21c>)
 800879e:	296f      	cmp	r1, #111	; 0x6f
 80087a0:	bf14      	ite	ne
 80087a2:	220a      	movne	r2, #10
 80087a4:	2208      	moveq	r2, #8
 80087a6:	2100      	movs	r1, #0
 80087a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ac:	6865      	ldr	r5, [r4, #4]
 80087ae:	60a5      	str	r5, [r4, #8]
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	f2c0 8095 	blt.w	80088e0 <_printf_i+0x20c>
 80087b6:	6821      	ldr	r1, [r4, #0]
 80087b8:	f021 0104 	bic.w	r1, r1, #4
 80087bc:	6021      	str	r1, [r4, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d13d      	bne.n	800883e <_printf_i+0x16a>
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	f040 808e 	bne.w	80088e4 <_printf_i+0x210>
 80087c8:	4665      	mov	r5, ip
 80087ca:	2a08      	cmp	r2, #8
 80087cc:	d10b      	bne.n	80087e6 <_printf_i+0x112>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	07db      	lsls	r3, r3, #31
 80087d2:	d508      	bpl.n	80087e6 <_printf_i+0x112>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	6862      	ldr	r2, [r4, #4]
 80087d8:	429a      	cmp	r2, r3
 80087da:	bfde      	ittt	le
 80087dc:	2330      	movle	r3, #48	; 0x30
 80087de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087e6:	ebac 0305 	sub.w	r3, ip, r5
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	f8cd 8000 	str.w	r8, [sp]
 80087f0:	463b      	mov	r3, r7
 80087f2:	aa03      	add	r2, sp, #12
 80087f4:	4621      	mov	r1, r4
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7ff fef6 	bl	80085e8 <_printf_common>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d14d      	bne.n	800889c <_printf_i+0x1c8>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	b005      	add	sp, #20
 8008806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880a:	4839      	ldr	r0, [pc, #228]	; (80088f0 <_printf_i+0x21c>)
 800880c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008810:	6813      	ldr	r3, [r2, #0]
 8008812:	6821      	ldr	r1, [r4, #0]
 8008814:	1d1d      	adds	r5, r3, #4
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6015      	str	r5, [r2, #0]
 800881a:	060a      	lsls	r2, r1, #24
 800881c:	d50b      	bpl.n	8008836 <_printf_i+0x162>
 800881e:	07ca      	lsls	r2, r1, #31
 8008820:	bf44      	itt	mi
 8008822:	f041 0120 	orrmi.w	r1, r1, #32
 8008826:	6021      	strmi	r1, [r4, #0]
 8008828:	b91b      	cbnz	r3, 8008832 <_printf_i+0x15e>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	f022 0220 	bic.w	r2, r2, #32
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	2210      	movs	r2, #16
 8008834:	e7b7      	b.n	80087a6 <_printf_i+0xd2>
 8008836:	064d      	lsls	r5, r1, #25
 8008838:	bf48      	it	mi
 800883a:	b29b      	uxthmi	r3, r3
 800883c:	e7ef      	b.n	800881e <_printf_i+0x14a>
 800883e:	4665      	mov	r5, ip
 8008840:	fbb3 f1f2 	udiv	r1, r3, r2
 8008844:	fb02 3311 	mls	r3, r2, r1, r3
 8008848:	5cc3      	ldrb	r3, [r0, r3]
 800884a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800884e:	460b      	mov	r3, r1
 8008850:	2900      	cmp	r1, #0
 8008852:	d1f5      	bne.n	8008840 <_printf_i+0x16c>
 8008854:	e7b9      	b.n	80087ca <_printf_i+0xf6>
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	6825      	ldr	r5, [r4, #0]
 800885a:	6961      	ldr	r1, [r4, #20]
 800885c:	1d18      	adds	r0, r3, #4
 800885e:	6010      	str	r0, [r2, #0]
 8008860:	0628      	lsls	r0, r5, #24
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	d501      	bpl.n	800886a <_printf_i+0x196>
 8008866:	6019      	str	r1, [r3, #0]
 8008868:	e002      	b.n	8008870 <_printf_i+0x19c>
 800886a:	066a      	lsls	r2, r5, #25
 800886c:	d5fb      	bpl.n	8008866 <_printf_i+0x192>
 800886e:	8019      	strh	r1, [r3, #0]
 8008870:	2300      	movs	r3, #0
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	4665      	mov	r5, ip
 8008876:	e7b9      	b.n	80087ec <_printf_i+0x118>
 8008878:	6813      	ldr	r3, [r2, #0]
 800887a:	1d19      	adds	r1, r3, #4
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	681d      	ldr	r5, [r3, #0]
 8008880:	6862      	ldr	r2, [r4, #4]
 8008882:	2100      	movs	r1, #0
 8008884:	4628      	mov	r0, r5
 8008886:	f7f7 fcb3 	bl	80001f0 <memchr>
 800888a:	b108      	cbz	r0, 8008890 <_printf_i+0x1bc>
 800888c:	1b40      	subs	r0, r0, r5
 800888e:	6060      	str	r0, [r4, #4]
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	6123      	str	r3, [r4, #16]
 8008894:	2300      	movs	r3, #0
 8008896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889a:	e7a7      	b.n	80087ec <_printf_i+0x118>
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	462a      	mov	r2, r5
 80088a0:	4639      	mov	r1, r7
 80088a2:	4630      	mov	r0, r6
 80088a4:	47c0      	blx	r8
 80088a6:	3001      	adds	r0, #1
 80088a8:	d0aa      	beq.n	8008800 <_printf_i+0x12c>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	079b      	lsls	r3, r3, #30
 80088ae:	d413      	bmi.n	80088d8 <_printf_i+0x204>
 80088b0:	68e0      	ldr	r0, [r4, #12]
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	4298      	cmp	r0, r3
 80088b6:	bfb8      	it	lt
 80088b8:	4618      	movlt	r0, r3
 80088ba:	e7a3      	b.n	8008804 <_printf_i+0x130>
 80088bc:	2301      	movs	r3, #1
 80088be:	464a      	mov	r2, r9
 80088c0:	4639      	mov	r1, r7
 80088c2:	4630      	mov	r0, r6
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d09a      	beq.n	8008800 <_printf_i+0x12c>
 80088ca:	3501      	adds	r5, #1
 80088cc:	68e3      	ldr	r3, [r4, #12]
 80088ce:	9a03      	ldr	r2, [sp, #12]
 80088d0:	1a9b      	subs	r3, r3, r2
 80088d2:	42ab      	cmp	r3, r5
 80088d4:	dcf2      	bgt.n	80088bc <_printf_i+0x1e8>
 80088d6:	e7eb      	b.n	80088b0 <_printf_i+0x1dc>
 80088d8:	2500      	movs	r5, #0
 80088da:	f104 0919 	add.w	r9, r4, #25
 80088de:	e7f5      	b.n	80088cc <_printf_i+0x1f8>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ac      	bne.n	800883e <_printf_i+0x16a>
 80088e4:	7803      	ldrb	r3, [r0, #0]
 80088e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088ee:	e76c      	b.n	80087ca <_printf_i+0xf6>
 80088f0:	08008c79 	.word	0x08008c79
 80088f4:	08008c8a 	.word	0x08008c8a

080088f8 <__sread>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	460c      	mov	r4, r1
 80088fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008900:	f000 f8d4 	bl	8008aac <_read_r>
 8008904:	2800      	cmp	r0, #0
 8008906:	bfab      	itete	ge
 8008908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800890a:	89a3      	ldrhlt	r3, [r4, #12]
 800890c:	181b      	addge	r3, r3, r0
 800890e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008912:	bfac      	ite	ge
 8008914:	6563      	strge	r3, [r4, #84]	; 0x54
 8008916:	81a3      	strhlt	r3, [r4, #12]
 8008918:	bd10      	pop	{r4, pc}

0800891a <__swrite>:
 800891a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	461f      	mov	r7, r3
 8008920:	898b      	ldrh	r3, [r1, #12]
 8008922:	05db      	lsls	r3, r3, #23
 8008924:	4605      	mov	r5, r0
 8008926:	460c      	mov	r4, r1
 8008928:	4616      	mov	r6, r2
 800892a:	d505      	bpl.n	8008938 <__swrite+0x1e>
 800892c:	2302      	movs	r3, #2
 800892e:	2200      	movs	r2, #0
 8008930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008934:	f000 f868 	bl	8008a08 <_lseek_r>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800893e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	4628      	mov	r0, r5
 800894a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	f000 b817 	b.w	8008980 <_write_r>

08008952 <__sseek>:
 8008952:	b510      	push	{r4, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895a:	f000 f855 	bl	8008a08 <_lseek_r>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	bf15      	itete	ne
 8008964:	6560      	strne	r0, [r4, #84]	; 0x54
 8008966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800896a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800896e:	81a3      	strheq	r3, [r4, #12]
 8008970:	bf18      	it	ne
 8008972:	81a3      	strhne	r3, [r4, #12]
 8008974:	bd10      	pop	{r4, pc}

08008976 <__sclose>:
 8008976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897a:	f000 b813 	b.w	80089a4 <_close_r>
	...

08008980 <_write_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4c07      	ldr	r4, [pc, #28]	; (80089a0 <_write_r+0x20>)
 8008984:	4605      	mov	r5, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	6022      	str	r2, [r4, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 fb74 	bl	800107c <_write>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_write_r+0x1e>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	b103      	cbz	r3, 800899e <_write_r+0x1e>
 800899c:	602b      	str	r3, [r5, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20000cf0 	.word	0x20000cf0

080089a4 <_close_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4c06      	ldr	r4, [pc, #24]	; (80089c0 <_close_r+0x1c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4605      	mov	r5, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	f7f8 fd53 	bl	800145a <_close>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_close_r+0x1a>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	b103      	cbz	r3, 80089be <_close_r+0x1a>
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	20000cf0 	.word	0x20000cf0

080089c4 <_fstat_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4c07      	ldr	r4, [pc, #28]	; (80089e4 <_fstat_r+0x20>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4605      	mov	r5, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	f7f8 fd4e 	bl	8001472 <_fstat>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d102      	bne.n	80089e0 <_fstat_r+0x1c>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	b103      	cbz	r3, 80089e0 <_fstat_r+0x1c>
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	bd38      	pop	{r3, r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	20000cf0 	.word	0x20000cf0

080089e8 <_isatty_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4c06      	ldr	r4, [pc, #24]	; (8008a04 <_isatty_r+0x1c>)
 80089ec:	2300      	movs	r3, #0
 80089ee:	4605      	mov	r5, r0
 80089f0:	4608      	mov	r0, r1
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	f7f8 fd4d 	bl	8001492 <_isatty>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_isatty_r+0x1a>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_isatty_r+0x1a>
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20000cf0 	.word	0x20000cf0

08008a08 <_lseek_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4c07      	ldr	r4, [pc, #28]	; (8008a28 <_lseek_r+0x20>)
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	4608      	mov	r0, r1
 8008a10:	4611      	mov	r1, r2
 8008a12:	2200      	movs	r2, #0
 8008a14:	6022      	str	r2, [r4, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f7f8 fd46 	bl	80014a8 <_lseek>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_lseek_r+0x1e>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_lseek_r+0x1e>
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	20000cf0 	.word	0x20000cf0

08008a2c <memmove>:
 8008a2c:	4288      	cmp	r0, r1
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	eb01 0302 	add.w	r3, r1, r2
 8008a34:	d807      	bhi.n	8008a46 <memmove+0x1a>
 8008a36:	1e42      	subs	r2, r0, #1
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d00a      	beq.n	8008a52 <memmove+0x26>
 8008a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a44:	e7f8      	b.n	8008a38 <memmove+0xc>
 8008a46:	4283      	cmp	r3, r0
 8008a48:	d9f5      	bls.n	8008a36 <memmove+0xa>
 8008a4a:	1881      	adds	r1, r0, r2
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	42d3      	cmn	r3, r2
 8008a50:	d100      	bne.n	8008a54 <memmove+0x28>
 8008a52:	bd10      	pop	{r4, pc}
 8008a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a5c:	e7f7      	b.n	8008a4e <memmove+0x22>

08008a5e <_realloc_r>:
 8008a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a60:	4607      	mov	r7, r0
 8008a62:	4614      	mov	r4, r2
 8008a64:	460e      	mov	r6, r1
 8008a66:	b921      	cbnz	r1, 8008a72 <_realloc_r+0x14>
 8008a68:	4611      	mov	r1, r2
 8008a6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a6e:	f7fe bf83 	b.w	8007978 <_malloc_r>
 8008a72:	b922      	cbnz	r2, 8008a7e <_realloc_r+0x20>
 8008a74:	f7fe ff32 	bl	80078dc <_free_r>
 8008a78:	4625      	mov	r5, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7e:	f000 f827 	bl	8008ad0 <_malloc_usable_size_r>
 8008a82:	42a0      	cmp	r0, r4
 8008a84:	d20f      	bcs.n	8008aa6 <_realloc_r+0x48>
 8008a86:	4621      	mov	r1, r4
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7fe ff75 	bl	8007978 <_malloc_r>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0f2      	beq.n	8008a7a <_realloc_r+0x1c>
 8008a94:	4631      	mov	r1, r6
 8008a96:	4622      	mov	r2, r4
 8008a98:	f7fe ff0c 	bl	80078b4 <memcpy>
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7fe ff1c 	bl	80078dc <_free_r>
 8008aa4:	e7e9      	b.n	8008a7a <_realloc_r+0x1c>
 8008aa6:	4635      	mov	r5, r6
 8008aa8:	e7e7      	b.n	8008a7a <_realloc_r+0x1c>
	...

08008aac <_read_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4c07      	ldr	r4, [pc, #28]	; (8008acc <_read_r+0x20>)
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	6022      	str	r2, [r4, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f7f8 fcb0 	bl	8001420 <_read>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_read_r+0x1e>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_read_r+0x1e>
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20000cf0 	.word	0x20000cf0

08008ad0 <_malloc_usable_size_r>:
 8008ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad4:	1f18      	subs	r0, r3, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfbc      	itt	lt
 8008ada:	580b      	ldrlt	r3, [r1, r0]
 8008adc:	18c0      	addlt	r0, r0, r3
 8008ade:	4770      	bx	lr

08008ae0 <_init>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr

08008aec <_fini>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr
