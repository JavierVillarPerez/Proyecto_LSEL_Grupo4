
LSEL_LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  08004084  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004084  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f38  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aba  00000000  00000000  00029fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  0002c288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ded  00000000  00000000  0002c990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076c5  00000000  00000000  0004377d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008631d  00000000  00000000  0004ae42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d115f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000d11dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ea0 	.word	0x08003ea0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003ea0 	.word	0x08003ea0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000588:	2101      	movs	r1, #1
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f80d 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6858      	ldr	r0, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	f001 fae9 	bl	8001b74 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6958      	ldr	r0, [r3, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	b299      	uxth	r1, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	f001 fad2 	bl	8001b74 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005e0:	2101      	movs	r1, #1
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffe1 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	f001 fabd 	bl	8001b74 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f855 	bl	80006aa <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6858      	ldr	r0, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	2201      	movs	r2, #1
 800060c:	4619      	mov	r1, r3
 800060e:	f001 fab1 	bl	8001b74 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 f849 	bl	80006aa <SX1278_hw_DelayMs>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800062c:	2100      	movs	r1, #0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ffbb 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6998      	ldr	r0, [r3, #24]
 8000638:	1cf9      	adds	r1, r7, #3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	2201      	movs	r2, #1
 8000640:	f001 ff5e 	bl	8002500 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000644:	bf00      	nop
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fa2e 	bl	8002aac <HAL_SPI_GetState>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1f7      	bne.n	8000646 <SX1278_hw_SPICommand+0x26>
		;
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af02      	add	r7, sp, #8
 8000664:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800066e:	2100      	movs	r1, #0
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff9a 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6998      	ldr	r0, [r3, #24]
 800067a:	f107 020e 	add.w	r2, r7, #14
 800067e:	f107 010f 	add.w	r1, r7, #15
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	f002 f86d 	bl	8002768 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800068e:	bf00      	nop
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa09 	bl	8002aac <HAL_SPI_GetState>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1f7      	bne.n	8000690 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 ffbc 	bl	8001630 <HAL_Delay>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	4610      	mov	r0, r2
 80006d6:	f001 fa35 	bl	8001b44 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff8c 	bl	8000620 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffa6 	bl	800065e <SX1278_hw_SPIReadByte>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff44 	bl	80005aa <SX1278_hw_SetNSS>
	return tmp;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
 8000738:	4613      	mov	r3, r2
 800073a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff31 	bl	80005aa <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff ff62 	bl	8000620 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	78ba      	ldrb	r2, [r7, #2]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5b 	bl	8000620 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff1a 	bl	80005aa <SX1278_hw_SetNSS>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 800077e:	b590      	push	{r4, r7, lr}
 8000780:	b087      	sub	sp, #28
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	461a      	mov	r2, r3
 800078a:	460b      	mov	r3, r1
 800078c:	72fb      	strb	r3, [r7, #11]
 800078e:	4613      	mov	r3, r2
 8000790:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000792:	7abb      	ldrb	r3, [r7, #10]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d927      	bls.n	80007e8 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff03 	bl	80005aa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7afa      	ldrb	r2, [r7, #11]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff37 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e00c      	b.n	80007d2 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6819      	ldr	r1, [r3, #0]
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	18d4      	adds	r4, r2, r3
 80007c2:	4608      	mov	r0, r1
 80007c4:	f7ff ff4b 	bl	800065e <SX1278_hw_SPIReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
 80007d2:	7dfa      	ldrb	r2, [r7, #23]
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3ee      	bcc.n	80007b8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fee2 	bl	80005aa <SX1278_hw_SetNSS>
 80007e6:	e000      	b.n	80007ea <SX1278_SPIBurstRead+0x6c>
		return;
 80007e8:	bf00      	nop
	}
}
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	72fb      	strb	r3, [r7, #11]
 8000800:	4613      	mov	r3, r2
 8000802:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000804:	7abb      	ldrb	r3, [r7, #10]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d929      	bls.n	800085e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feca 	bl	80005aa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	4610      	mov	r0, r2
 8000826:	f7ff fefb 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	75fb      	strb	r3, [r7, #23]
 800082e:	e00b      	b.n	8000848 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f7ff feef 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	3301      	adds	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	7abb      	ldrb	r3, [r7, #10]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3ef      	bcc.n	8000830 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fea7 	bl	80005aa <SX1278_hw_SetNSS>
 800085c:	e000      	b.n	8000860 <SX1278_SPIBurstWrite+0x70>
		return;
 800085e:	bf00      	nop
	}
}
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af02      	add	r7, sp, #8
 800086c:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7919      	ldrb	r1, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795a      	ldrb	r2, [r3, #5]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7998      	ldrb	r0, [r3, #6]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	79db      	ldrb	r3, [r3, #7]
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4603      	mov	r3, r0
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f804 	bl	8000890 <SX1278_config>
			module->LoRa_BW);
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f8aa 	bl	8000a04 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80008b0:	200f      	movs	r0, #15
 80008b2:	f7ff fefa 	bl	80006aa <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f8b4 	bl	8000a24 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80008bc:	78fa      	ldrb	r2, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <SX1278_config+0x144>)
 80008c6:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80008c8:	2303      	movs	r3, #3
 80008ca:	2106      	movs	r1, #6
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff8f 	bl	80007f0 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80008d2:	78bb      	ldrb	r3, [r7, #2]
 80008d4:	4a40      	ldr	r2, [pc, #256]	; (80009d8 <SX1278_config+0x148>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	461a      	mov	r2, r3
 80008da:	2109      	movs	r1, #9
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff25 	bl	800072c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80008e2:	220b      	movs	r2, #11
 80008e4:	210b      	movs	r1, #11
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff20 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80008ec:	2223      	movs	r2, #35	; 0x23
 80008ee:	210c      	movs	r1, #12
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff1b 	bl	800072c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	4a38      	ldr	r2, [pc, #224]	; (80009dc <SX1278_config+0x14c>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	2b06      	cmp	r3, #6
 80008fe:	d131      	bne.n	8000964 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000900:	7e3b      	ldrb	r3, [r7, #24]
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <SX1278_config+0x150>)
 8000904:	5cd3      	ldrb	r3, [r2, r3]
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800090a:	3303      	adds	r3, #3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	211d      	movs	r1, #29
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff0a 	bl	800072c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000918:	787b      	ldrb	r3, [r7, #1]
 800091a:	4a30      	ldr	r2, [pc, #192]	; (80009dc <SX1278_config+0x14c>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000922:	3307      	adds	r3, #7
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	211e      	movs	r1, #30
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fefe 	bl	800072c <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000930:	2131      	movs	r1, #49	; 0x31
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fedb 	bl	80006ee <SX1278_SPIRead>
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0305 	orr.w	r3, r3, #5
 800094a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	461a      	mov	r2, r3
 8000950:	2131      	movs	r1, #49	; 0x31
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff feea 	bl	800072c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000958:	220c      	movs	r2, #12
 800095a:	2137      	movs	r1, #55	; 0x37
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fee5 	bl	800072c <SX1278_SPIWrite>
 8000962:	e017      	b.n	8000994 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000964:	7e3b      	ldrb	r3, [r7, #24]
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <SX1278_config+0x150>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800096e:	3302      	adds	r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	211d      	movs	r1, #29
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fed8 	bl	800072c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800097c:	787b      	ldrb	r3, [r7, #1]
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <SX1278_config+0x14c>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000986:	3307      	adds	r3, #7
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	211e      	movs	r1, #30
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fecc 	bl	800072c <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000994:	22ff      	movs	r2, #255	; 0xff
 8000996:	211f      	movs	r1, #31
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fec7 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fec2 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80009a8:	220c      	movs	r2, #12
 80009aa:	2121      	movs	r1, #33	; 0x21
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff febd 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80009b2:	2201      	movs	r2, #1
 80009b4:	2141      	movs	r1, #65	; 0x41
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff feb8 	bl	800072c <SX1278_SPIWrite>
	module->readBytes = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f80d 	bl	80009e4 <SX1278_standby>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08003f40 	.word	0x08003f40
 80009d8:	08003f44 	.word	0x08003f44
 80009dc:	08003f48 	.word	0x08003f48
 80009e0:	08003f50 	.word	0x08003f50

080009e4 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80009ec:	2209      	movs	r2, #9
 80009ee:	2101      	movs	r1, #1
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fe9b 	bl	800072c <SX1278_SPIWrite>
	module->status = STANDBY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	725a      	strb	r2, [r3, #9]
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	2101      	movs	r1, #1
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fe8b 	bl	800072c <SX1278_SPIWrite>
	module->status = SLEEP;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	725a      	strb	r2, [r3, #9]
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000a2c:	2288      	movs	r2, #136	; 0x88
 8000a2e:	2101      	movs	r1, #1
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fe7b 	bl	800072c <SX1278_SPIWrite>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	2112      	movs	r1, #18
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe6e 	bl	800072c <SX1278_SPIWrite>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	460b      	mov	r3, r1
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	7afa      	ldrb	r2, [r7, #11]
 8000a6a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fefa 	bl	8000866 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000a72:	2284      	movs	r2, #132	; 0x84
 8000a74:	214d      	movs	r1, #77	; 0x4d
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fe58 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	2124      	movs	r1, #36	; 0x24
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fe53 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f7ff fe4e 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a90:	223f      	movs	r2, #63	; 0x3f
 8000a92:	2111      	movs	r1, #17
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe49 	bl	800072c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff ffcf 	bl	8000a3e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2122      	movs	r1, #34	; 0x22
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fe40 	bl	800072c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000aac:	210f      	movs	r1, #15
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fe1d 	bl	80006ee <SX1278_SPIRead>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	461a      	mov	r2, r3
 8000abc:	210d      	movs	r1, #13
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe34 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ac4:	228d      	movs	r2, #141	; 0x8d
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fe2f 	bl	800072c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ad6:	2118      	movs	r1, #24
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe08 	bl	80006ee <SX1278_SPIRead>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d104      	bne.n	8000af2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2203      	movs	r2, #3
 8000aec:	725a      	strb	r2, [r3, #9]
			return 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e013      	b.n	8000b1a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d109      	bne.n	8000b12 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd68 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff feac 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e003      	b.n	8000b1a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fdc9 	bl	80006aa <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b18:	e7dd      	b.n	8000ad6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fdc6 	bl	80006c0 <SX1278_hw_GetDIO0>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d030      	beq.n	8000b9c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	330a      	adds	r3, #10
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 f8a0 	bl	8002c8a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdce 	bl	80006ee <SX1278_SPIRead>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	210d      	movs	r1, #13
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fde5 	bl	800072c <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	799b      	ldrb	r3, [r3, #6]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7a1b      	ldrb	r3, [r3, #8]
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e005      	b.n	8000b7e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000b72:	2113      	movs	r1, #19
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fdba 	bl	80006ee <SX1278_SPIRead>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f103 020a 	add.w	r2, r3, #10
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2100      	movs	r1, #0
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fdf8 	bl	800077e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7bfa      	ldrb	r2, [r7, #15]
 8000b92:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff51 	bl	8000a3e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fe51 	bl	8000866 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000bc4:	2287      	movs	r2, #135	; 0x87
 8000bc6:	214d      	movs	r1, #77	; 0x4d
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fdaf 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2124      	movs	r1, #36	; 0x24
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fdaa 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000bd8:	2241      	movs	r2, #65	; 0x41
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fda5 	bl	800072c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff2b 	bl	8000a3e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000be8:	22f7      	movs	r2, #247	; 0xf7
 8000bea:	2111      	movs	r1, #17
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fd9d 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2122      	movs	r1, #34	; 0x22
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fd97 	bl	800072c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000bfe:	210e      	movs	r1, #14
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff fd74 	bl	80006ee <SX1278_SPIRead>
 8000c06:	4603      	mov	r3, r0
 8000c08:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	210d      	movs	r1, #13
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fd8b 	bl	800072c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000c16:	2122      	movs	r1, #34	; 0x22
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fd68 	bl	80006ee <SX1278_SPIRead>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000c22:	7dba      	ldrb	r2, [r7, #22]
 8000c24:	7afb      	ldrb	r3, [r7, #11]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d104      	bne.n	8000c34 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	725a      	strb	r2, [r3, #9]
			return 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e00e      	b.n	8000c52 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1ea      	bne.n	8000c16 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcc7 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fe0b 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000c50:	2300      	movs	r3, #0
		}
	}
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fdbd 	bl	80007f0 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000c76:	228b      	movs	r2, #139	; 0x8b
 8000c78:	2101      	movs	r1, #1
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fd56 	bl	800072c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd1b 	bl	80006c0 <SX1278_hw_GetDIO0>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00b      	beq.n	8000ca8 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000c90:	2112      	movs	r1, #18
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fd2b 	bl	80006ee <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fed0 	bl	8000a3e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fea0 	bl	80009e4 <SX1278_standby>
			return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e013      	b.n	8000cd0 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc8d 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fdd1 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e003      	b.n	8000cd0 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fcee 	bl	80006aa <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000cce:	e7d7      	b.n	8000c80 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	70fb      	strb	r3, [r7, #3]
 8000cea:	460b      	mov	r3, r1
 8000cec:	70bb      	strb	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc42 	bl	8000580 <SX1278_hw_init>
	module->frequency = frequency;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	78ba      	ldrb	r2, [r7, #2]
 8000d06:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	787a      	ldrb	r2, [r7, #1]
 8000d0c:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7c3a      	ldrb	r2, [r7, #16]
 8000d12:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fda3 	bl	8000866 <SX1278_defaultConfig>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d003      	beq.n	8000d4a <SX1278_read+0x22>
		length = module->readBytes;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d48:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	330a      	adds	r3, #10
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f001 ff8e 	bl	8002c74 <memcpy>
	rxBuf[length] = '\0';
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a3f      	ldr	r2, [pc, #252]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a2a      	ldr	r2, [pc, #168]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4825      	ldr	r0, [pc, #148]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000e00:	f000 feb8 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4823      	ldr	r0, [pc, #140]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e0a:	f000 feb3 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e14:	4821      	ldr	r0, [pc, #132]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000e16:	f000 fead 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4818      	ldr	r0, [pc, #96]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000e32:	f000 fd05 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8000e36:	2305      	movs	r3, #5
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e4a:	f000 fcf9 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e66:	f000 fceb 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000e84:	f000 fcdc 	bl	8001840 <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ea8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000eb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ebc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ec0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec8:	e000      	b.n	8000ecc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f9      	beq.n	8000eca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ed6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_write>:
#include "spi.h"
#include "gpio.h"
#include "stdio.h"
#include "SX1278.h"

int _write(int file, char *ptr, int len) {
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e009      	b.n	8000f14 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ffc9 	bl	8000ea0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf1      	blt.n	8000f00 <_write+0x12>
	}
	return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <main>:

//Struct creado en main.h
sensor_buf_t prueba;

int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f2c:	f000 fb0e 	bl	800154c <HAL_Init>
	SystemClock_Config();
 8000f30:	f000 f83a 	bl	8000fa8 <SystemClock_Config>
	MX_GPIO_Init();
 8000f34:	f7ff ff1e 	bl	8000d74 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000f38:	f000 f976 	bl	8001228 <MX_SPI1_Init>
	Lora_inicio(master);  //0 es esclavo, 1 es maestro
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <main+0x78>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f899 	bl	8001078 <Lora_inicio>

	prueba.ID = 1;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <main+0x7c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	801a      	strh	r2, [r3, #0]
	prueba.measure = 100;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <main+0x7c>)
 8000f4e:	2264      	movs	r2, #100	; 0x64
 8000f50:	805a      	strh	r2, [r3, #2]
	prueba.alarm = 0;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <main+0x7c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	711a      	strb	r2, [r3, #4]
	prueba.error = 0;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <main+0x7c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	715a      	strb	r2, [r3, #5]
	prueba.threshold_L = 80;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <main+0x7c>)
 8000f60:	2250      	movs	r2, #80	; 0x50
 8000f62:	80da      	strh	r2, [r3, #6]
	prueba.threshold_H = 120;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <main+0x7c>)
 8000f66:	2278      	movs	r2, #120	; 0x78
 8000f68:	811a      	strh	r2, [r3, #8]

	  while (1)
	  {
			if (master == 1) {
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <main+0x78>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d112      	bne.n	8000f98 <main+0x70>
				Lora_envia(prueba);
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <main+0x7c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2000      	movs	r0, #0
 8000f78:	4610      	mov	r0, r2
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4611      	mov	r1, r2
 8000f80:	891a      	ldrh	r2, [r3, #8]
 8000f82:	2300      	movs	r3, #0
 8000f84:	f362 030f 	bfi	r3, r2, #0, #16
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f000 f8ff 	bl	800118c <Lora_envia>
				HAL_Delay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f92:	f000 fb4d 	bl	8001630 <HAL_Delay>
 8000f96:	e7e8      	b.n	8000f6a <main+0x42>
			} else {
				Lora_recibe();
 8000f98:	f000 f8d0 	bl	800113c <Lora_recibe>
			if (master == 1) {
 8000f9c:	e7e5      	b.n	8000f6a <main+0x42>
 8000f9e:	bf00      	nop
 8000fa0:	2000008c 	.word	0x2000008c
 8000fa4:	2000009c 	.word	0x2000009c

08000fa8 <SystemClock_Config>:
			}
	  }
}

void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fe67 	bl	8002c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <SystemClock_Config+0xc8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <SystemClock_Config+0xc8>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <SystemClock_Config+0xc8>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <SystemClock_Config+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a20      	ldr	r2, [pc, #128]	; (8001074 <SystemClock_Config+0xcc>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001018:	2308      	movs	r3, #8
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800101c:	2390      	movs	r3, #144	; 0x90
 800101e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001024:	2308      	movs	r3, #8
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fdd5 	bl	8001bdc <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f000 f8ee 	bl	8001218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2102      	movs	r1, #2
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f82f 	bl	80020bc <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001064:	f000 f8d8 	bl	8001218 <Error_Handler>
  }
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	; 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <Lora_inicio>:

/* USER CODE BEGIN 4 */
void Lora_inicio(int init){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <Lora_inicio+0xa4>)
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <Lora_inicio+0xa8>)
 8001084:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <Lora_inicio+0xa4>)
 8001088:	2201      	movs	r2, #1
 800108a:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <Lora_inicio+0xa4>)
 800108e:	4a25      	ldr	r2, [pc, #148]	; (8001124 <Lora_inicio+0xac>)
 8001090:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <Lora_inicio+0xa4>)
 8001094:	2210      	movs	r2, #16
 8001096:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <Lora_inicio+0xa4>)
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <Lora_inicio+0xa8>)
 800109c:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <Lora_inicio+0xa4>)
 80010a0:	2202      	movs	r2, #2
 80010a2:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <Lora_inicio+0xa4>)
 80010a6:	4a20      	ldr	r2, [pc, #128]	; (8001128 <Lora_inicio+0xb0>)
 80010a8:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <Lora_inicio+0xb4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <Lora_inicio+0xb4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <Lora_inicio+0xb4>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <Lora_inicio+0xa4>)
 80010bc:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <Lora_inicio+0xb8>)
 80010c0:	f001 fe60 	bl	8002d84 <puts>
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 80010c4:	230a      	movs	r3, #10
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2303      	movs	r3, #3
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2302      	movs	r3, #2
 80010ce:	2201      	movs	r2, #1
 80010d0:	2100      	movs	r1, #0
 80010d2:	4816      	ldr	r0, [pc, #88]	; (800112c <Lora_inicio+0xb4>)
 80010d4:	f7ff fe00 	bl	8000cd8 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	printf("Done configuring LoRaModule\r\n");
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <Lora_inicio+0xbc>)
 80010da:	f001 fe53 	bl	8002d84 <puts>
	while (ret!=1){
 80010de:	e015      	b.n	800110c <Lora_inicio+0x94>
		if (init == 1) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <Lora_inicio+0x7e>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80010e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010ea:	2110      	movs	r1, #16
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <Lora_inicio+0xb4>)
 80010ee:	f7ff fd5c 	bl	8000baa <SX1278_LoRaEntryTx>
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	e006      	b.n	8001104 <Lora_inicio+0x8c>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 80010f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010fa:	2110      	movs	r1, #16
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <Lora_inicio+0xb4>)
 80010fe:	f7ff fcab 	bl	8000a58 <SX1278_LoRaEntryRx>
 8001102:	60f8      	str	r0, [r7, #12]
		}
		printf("ret: %d\n", ret);
 8001104:	68f9      	ldr	r1, [r7, #12]
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <Lora_inicio+0xc0>)
 8001108:	f001 fdc8 	bl	8002c9c <iprintf>
	while (ret!=1){
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d1e6      	bne.n	80010e0 <Lora_inicio+0x68>
	}
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001b4 	.word	0x200001b4
 8001120:	40020400 	.word	0x40020400
 8001124:	40020000 	.word	0x40020000
 8001128:	200001d0 	.word	0x200001d0
 800112c:	200000a8 	.word	0x200000a8
 8001130:	08003eb8 	.word	0x08003eb8
 8001134:	08003ed4 	.word	0x08003ed4
 8001138:	08003ef4 	.word	0x08003ef4

0800113c <Lora_recibe>:
void Lora_recibe(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b092      	sub	sp, #72	; 0x48
 8001140:	af00      	add	r7, sp, #0
	int ret;
	char buffer[64];
	ret = SX1278_LoRaRxPacket(&SX1278);
 8001142:	480f      	ldr	r0, [pc, #60]	; (8001180 <Lora_recibe+0x44>)
 8001144:	f7ff fced 	bl	8000b22 <SX1278_LoRaRxPacket>
 8001148:	4603      	mov	r3, r0
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
	if (ret > 0) {
 800114c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd11      	ble.n	8001176 <Lora_recibe+0x3a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <Lora_recibe+0x48>)
 8001158:	f000 fd25 	bl	8001ba6 <HAL_GPIO_TogglePin>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 800115c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115e:	b2da      	uxtb	r2, r3
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <Lora_recibe+0x44>)
 8001166:	f7ff fddf 	bl	8000d28 <SX1278_read>
		printf("Content (%d): %s\r\n", ret, buffer);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	461a      	mov	r2, r3
 800116e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <Lora_recibe+0x4c>)
 8001172:	f001 fd93 	bl	8002c9c <iprintf>
	}
}
 8001176:	bf00      	nop
 8001178:	3748      	adds	r7, #72	; 0x48
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000a8 	.word	0x200000a8
 8001184:	40020c00 	.word	0x40020c00
 8001188:	08003f00 	.word	0x08003f00

0800118c <Lora_envia>:
void Lora_envia(sensor_buf_t prueba){
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b09b      	sub	sp, #108	; 0x6c
 8001190:	af04      	add	r7, sp, #16
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int ret;
	char buffer[64];
	int message_length;
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <Lora_envia+0x7c>)
 800119e:	f000 fd02 	bl	8001ba6 <HAL_GPIO_TogglePin>
	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d", prueba.ID, prueba.measure, prueba.alarm, prueba.error, prueba.threshold_L, prueba.threshold_H);
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	461d      	mov	r5, r3
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	461e      	mov	r6, r3
 80011aa:	7a3b      	ldrb	r3, [r7, #8]
 80011ac:	7a7a      	ldrb	r2, [r7, #9]
 80011ae:	8979      	ldrh	r1, [r7, #10]
 80011b0:	89b8      	ldrh	r0, [r7, #12]
 80011b2:	4604      	mov	r4, r0
 80011b4:	f107 0010 	add.w	r0, r7, #16
 80011b8:	9403      	str	r4, [sp, #12]
 80011ba:	9102      	str	r1, [sp, #8]
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4633      	mov	r3, r6
 80011c2:	462a      	mov	r2, r5
 80011c4:	4911      	ldr	r1, [pc, #68]	; (800120c <Lora_envia+0x80>)
 80011c6:	f001 fde5 	bl	8002d94 <siprintf>
 80011ca:	6578      	str	r0, [r7, #84]	; 0x54
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 80011cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011d4:	4619      	mov	r1, r3
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <Lora_envia+0x84>)
 80011d8:	f7ff fce7 	bl	8000baa <SX1278_LoRaEntryTx>
 80011dc:	6538      	str	r0, [r7, #80]	; 0x50
	printf("Sending %s\r\n", buffer);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <Lora_envia+0x88>)
 80011e6:	f001 fd59 	bl	8002c9c <iprintf>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 80011ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	f107 0110 	add.w	r1, r7, #16
 80011f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <Lora_envia+0x84>)
 80011f8:	f7ff fd2f 	bl	8000c5a <SX1278_LoRaTxPacket>
 80011fc:	6538      	str	r0, [r7, #80]	; 0x50
}
 80011fe:	bf00      	nop
 8001200:	375c      	adds	r7, #92	; 0x5c
 8001202:	46bd      	mov	sp, r7
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	bf00      	nop
 8001208:	40020c00 	.word	0x40020c00
 800120c:	08003f14 	.word	0x08003f14
 8001210:	200000a8 	.word	0x200000a8
 8001214:	08003f30 	.word	0x08003f30

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_SPI1_Init+0x64>)
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <MX_SPI1_Init+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_SPI1_Init+0x64>)
 8001234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_SPI1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_SPI1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_SPI1_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_SPI1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_SPI1_Init+0x64>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_SPI1_Init+0x64>)
 800125c:	2218      	movs	r2, #24
 800125e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_SPI1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_SPI1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_SPI1_Init+0x64>)
 8001274:	220a      	movs	r2, #10
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_SPI1_Init+0x64>)
 800127a:	f001 f8dd 	bl	8002438 <HAL_SPI_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001284:	f7ff ffc8 	bl	8001218 <Error_Handler>
  }

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001d0 	.word	0x200001d0
 8001290:	40013000 	.word	0x40013000

08001294 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_SPI_MspInit+0x84>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12b      	bne.n	800130e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_SPI_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ee:	23e0      	movs	r3, #224	; 0xe0
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fe:	2305      	movs	r3, #5
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_SPI_MspInit+0x8c>)
 800130a:	f000 fa99 	bl	8001840 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40013000 	.word	0x40013000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_MspInit+0x4c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001362:	2007      	movs	r0, #7
 8001364:	f000 fa38 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler+0x4>

0800138e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <UsageFault_Handler+0x4>

0800139a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c8:	f000 f912 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
	}

return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_close>:
	}
	return len;
}

int _close(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	605a      	str	r2, [r3, #4]
	return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_isatty>:

int _isatty(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x16>
		heap_end = &end;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <_sbrk+0x50>)
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <_sbrk+0x54>)
 8001488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_sbrk+0x50>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <_sbrk+0x50>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	466a      	mov	r2, sp
 800149a:	4293      	cmp	r3, r2
 800149c:	d907      	bls.n	80014ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800149e:	f001 fbbf 	bl	8002c20 <__errno>
 80014a2:	4602      	mov	r2, r0
 80014a4:	230c      	movs	r3, #12
 80014a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e006      	b.n	80014bc <_sbrk+0x48>
	}

	heap_end += incr;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_sbrk+0x50>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <_sbrk+0x50>)
 80014b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000090 	.word	0x20000090
 80014c8:	20000230 	.word	0x20000230

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <SystemInit+0x28>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <SystemInit+0x28>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SystemInit+0x28>)
 80014e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e6:	609a      	str	r2, [r3, #8]
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
  ldr  r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001516:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001522:	f7ff ffd3 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f001 fb81 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff fcfd 	bl	8000f28 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001534:	08004014 	.word	0x08004014
  ldr  r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800153c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001540:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001544:	20000230 	.word	0x20000230

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f92f 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fed0 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f939 	bl	8001826 <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f90f 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	20000228 	.word	0x20000228

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000228 	.word	0x20000228

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_SetPriority>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff47 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff5c 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffb0 	bl	8001794 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e159      	b.n	8001b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8148 	bne.w	8001b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d00b      	beq.n	800189a <HAL_GPIO_Init+0x5a>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800188e:	2b11      	cmp	r3, #17
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b12      	cmp	r3, #18
 8001898:	d130      	bne.n	80018fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0xfc>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b12      	cmp	r3, #18
 800193a:	d123      	bne.n	8001984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0203 	and.w	r2, r3, #3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a2 	beq.w	8001b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e2:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a48      	ldr	r2, [pc, #288]	; (8001b2c <HAL_GPIO_Init+0x2ec>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x202>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x1fe>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_GPIO_Init+0x2f4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a45      	ldr	r2, [pc, #276]	; (8001b38 <HAL_GPIO_Init+0x2f8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x1f6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a44      	ldr	r2, [pc, #272]	; (8001b3c <HAL_GPIO_Init+0x2fc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x1f2>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	4934      	ldr	r1, [pc, #208]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a86:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f aea2 	bls.w	800185c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3724      	adds	r7, #36	; 0x24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	401a      	ands	r2, r3
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d104      	bne.n	8001bca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e25b      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfa:	4ba3      	ldr	r3, [pc, #652]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d00c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d157      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e236      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x74>
 8001c42:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a90      	ldr	r2, [pc, #576]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8a      	ldr	r2, [pc, #552]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a87      	ldr	r2, [pc, #540]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c74:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a83      	ldr	r2, [pc, #524]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b81      	ldr	r3, [pc, #516]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fcc0 	bl	8001618 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fcbc 	bl	8001618 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1fb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fcac 	bl	8001618 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fca8 	bl	8001618 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1e7      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1bb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4952      	ldr	r1, [pc, #328]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <HAL_RCC_OscConfig+0x2b0>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fc61 	bl	8001618 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fc5d 	bl	8001618 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e19c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4940      	ldr	r1, [pc, #256]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_OscConfig+0x2b0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc40 	bl	8001618 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc3c 	bl	8001618 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e17b      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x2b4>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fc20 	bl	8001618 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc1c 	bl	8001618 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e15b      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x200>
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x2b4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fc09 	bl	8001618 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fc05 	bl	8001618 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e144      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a0 	beq.w	8001f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x2b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d121      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_RCC_OscConfig+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_RCC_OscConfig+0x2b8>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fbcb 	bl	8001618 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e011      	b.n	8001eaa <HAL_RCC_OscConfig+0x2ce>
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
 8001e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7ff fbbe 	bl	8001618 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0fd      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x4d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
 8001ebe:	4b7d      	ldr	r3, [pc, #500]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a7c      	ldr	r2, [pc, #496]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x32a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x312>
 8001ed4:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	4b74      	ldr	r3, [pc, #464]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a73      	ldr	r2, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x32a>
 8001eee:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a70      	ldr	r2, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a6d      	ldr	r2, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb83 	bl	8001618 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff fb7f 	bl	8001618 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0bc      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x33a>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fb6d 	bl	8001618 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fb69 	bl	8001618 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0a6      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a51      	ldr	r2, [pc, #324]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8092 	beq.w	80020a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d05c      	beq.n	8002046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d141      	bne.n	8002018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fb3d 	bl	8001618 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff fb39 	bl	8001618 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e078      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	061b      	lsls	r3, r3, #24
 8001fe4:	4933      	ldr	r1, [pc, #204]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fb12 	bl	8001618 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff fb0e 	bl	8001618 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e04d      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
 8002016:	e045      	b.n	80020a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fafb 	bl	8001618 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff faf7 	bl	8001618 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e036      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x44a>
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e029      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	429a      	cmp	r2, r3
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d115      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470060 	.word	0x42470060

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90c      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d044      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d119      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4934      	ldr	r1, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff fa34 	bl	8001618 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff fa30 	bl	8001618 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d20c      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4601      	mov	r1, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	fa21 f303 	lsr.w	r3, r1, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f994 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	08003f5c 	.word	0x08003f5c
 8002280:	20000000 	.word	0x20000000
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d007      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x32>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d008      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x38>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 80b4 	bne.w	800241c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022b6:	60bb      	str	r3, [r7, #8]
       break;
 80022b8:	e0b3      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b5e      	ldr	r3, [pc, #376]	; (8002434 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022bc:	60bb      	str	r3, [r7, #8]
      break;
 80022be:	e0b0      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b5a      	ldr	r3, [pc, #360]	; (800242c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b58      	ldr	r3, [pc, #352]	; (800242c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d04a      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	f04f 0400 	mov.w	r4, #0
 80022e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	ea03 0501 	and.w	r5, r3, r1
 80022ec:	ea04 0602 	and.w	r6, r4, r2
 80022f0:	4629      	mov	r1, r5
 80022f2:	4632      	mov	r2, r6
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	0154      	lsls	r4, r2, #5
 80022fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002302:	014b      	lsls	r3, r1, #5
 8002304:	4619      	mov	r1, r3
 8002306:	4622      	mov	r2, r4
 8002308:	1b49      	subs	r1, r1, r5
 800230a:	eb62 0206 	sbc.w	r2, r2, r6
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	0194      	lsls	r4, r2, #6
 8002318:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800231c:	018b      	lsls	r3, r1, #6
 800231e:	1a5b      	subs	r3, r3, r1
 8002320:	eb64 0402 	sbc.w	r4, r4, r2
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	00e2      	lsls	r2, r4, #3
 800232e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002332:	00d9      	lsls	r1, r3, #3
 8002334:	460b      	mov	r3, r1
 8002336:	4614      	mov	r4, r2
 8002338:	195b      	adds	r3, r3, r5
 800233a:	eb44 0406 	adc.w	r4, r4, r6
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	0262      	lsls	r2, r4, #9
 8002348:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800234c:	0259      	lsls	r1, r3, #9
 800234e:	460b      	mov	r3, r1
 8002350:	4614      	mov	r4, r2
 8002352:	4618      	mov	r0, r3
 8002354:	4621      	mov	r1, r4
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	f7fd ff8e 	bl	8000280 <__aeabi_uldivmod>
 8002364:	4603      	mov	r3, r0
 8002366:	460c      	mov	r4, r1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e049      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	f240 11ff 	movw	r1, #511	; 0x1ff
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	ea03 0501 	and.w	r5, r3, r1
 8002382:	ea04 0602 	and.w	r6, r4, r2
 8002386:	4629      	mov	r1, r5
 8002388:	4632      	mov	r2, r6
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	f04f 0400 	mov.w	r4, #0
 8002392:	0154      	lsls	r4, r2, #5
 8002394:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002398:	014b      	lsls	r3, r1, #5
 800239a:	4619      	mov	r1, r3
 800239c:	4622      	mov	r2, r4
 800239e:	1b49      	subs	r1, r1, r5
 80023a0:	eb62 0206 	sbc.w	r2, r2, r6
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	f04f 0400 	mov.w	r4, #0
 80023ac:	0194      	lsls	r4, r2, #6
 80023ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023b2:	018b      	lsls	r3, r1, #6
 80023b4:	1a5b      	subs	r3, r3, r1
 80023b6:	eb64 0402 	sbc.w	r4, r4, r2
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023c8:	00d9      	lsls	r1, r3, #3
 80023ca:	460b      	mov	r3, r1
 80023cc:	4614      	mov	r4, r2
 80023ce:	195b      	adds	r3, r3, r5
 80023d0:	eb44 0406 	adc.w	r4, r4, r6
 80023d4:	f04f 0100 	mov.w	r1, #0
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	02a2      	lsls	r2, r4, #10
 80023de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023e2:	0299      	lsls	r1, r3, #10
 80023e4:	460b      	mov	r3, r1
 80023e6:	4614      	mov	r4, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	4621      	mov	r1, r4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4623      	mov	r3, r4
 80023f6:	f7fd ff43 	bl	8000280 <__aeabi_uldivmod>
 80023fa:	4603      	mov	r3, r0
 80023fc:	460c      	mov	r4, r1
 80023fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	3301      	adds	r3, #1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	60bb      	str	r3, [r7, #8]
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800241e:	60bb      	str	r3, [r7, #8]
      break;
 8002420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002422:	68bb      	ldr	r3, [r7, #8]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	00f42400 	.word	0x00f42400
 8002434:	007a1200 	.word	0x007a1200

08002438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e056      	b.n	80024f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d106      	bne.n	800246a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7fe ff15 	bl	8001294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002480:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	ea42 0103 	orr.w	r1, r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	f003 0104 	and.w	r1, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_SPI_Transmit+0x22>
 800251e:	2302      	movs	r3, #2
 8002520:	e11e      	b.n	8002760 <HAL_SPI_Transmit+0x260>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800252a:	f7ff f875 	bl	8001618 <HAL_GetTick>
 800252e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d002      	beq.n	8002546 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002540:	2302      	movs	r3, #2
 8002542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002544:	e103      	b.n	800274e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_SPI_Transmit+0x52>
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002556:	e0fa      	b.n	800274e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2203      	movs	r2, #3
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259e:	d107      	bne.n	80025b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d007      	beq.n	80025ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d6:	d14b      	bne.n	8002670 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_SPI_Transmit+0xe6>
 80025e0:	8afb      	ldrh	r3, [r7, #22]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d13e      	bne.n	8002664 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	1c9a      	adds	r2, r3, #2
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800260a:	e02b      	b.n	8002664 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d112      	bne.n	8002640 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	86da      	strh	r2, [r3, #54]	; 0x36
 800263e:	e011      	b.n	8002664 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002640:	f7fe ffea 	bl	8001618 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d803      	bhi.n	8002658 <HAL_SPI_Transmit+0x158>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d102      	bne.n	800265e <HAL_SPI_Transmit+0x15e>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002662:	e074      	b.n	800274e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ce      	bne.n	800260c <HAL_SPI_Transmit+0x10c>
 800266e:	e04c      	b.n	800270a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_SPI_Transmit+0x17e>
 8002678:	8afb      	ldrh	r3, [r7, #22]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d140      	bne.n	8002700 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026a4:	e02c      	b.n	8002700 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d113      	bne.n	80026dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80026da:	e011      	b.n	8002700 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026dc:	f7fe ff9c 	bl	8001618 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d803      	bhi.n	80026f4 <HAL_SPI_Transmit+0x1f4>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d102      	bne.n	80026fa <HAL_SPI_Transmit+0x1fa>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026fe:	e026      	b.n	800274e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1cd      	bne.n	80026a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa44 	bl	8002b9c <SPI_EndRxTxTransaction>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	77fb      	strb	r3, [r7, #31]
 800274a:	e000      	b.n	800274e <HAL_SPI_Transmit+0x24e>
  }

error:
 800274c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800275e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002776:	2301      	movs	r3, #1
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_SPI_TransmitReceive+0x26>
 800278a:	2302      	movs	r3, #2
 800278c:	e18a      	b.n	8002aa4 <HAL_SPI_TransmitReceive+0x33c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002796:	f7fe ff3f 	bl	8001618 <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d00f      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x70>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027be:	d107      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x68>
 80027c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d003      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
 80027d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d6:	e15b      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x82>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x82>
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027f0:	e14e      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d003      	beq.n	8002806 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2205      	movs	r2, #5
 8002802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	887a      	ldrh	r2, [r7, #2]
 800282e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d007      	beq.n	800285a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002862:	d178      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x10a>
 800286c:	8b7b      	ldrh	r3, [r7, #26]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d166      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002896:	e053      	b.n	8002940 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d11b      	bne.n	80028de <HAL_SPI_TransmitReceive+0x176>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d016      	beq.n	80028de <HAL_SPI_TransmitReceive+0x176>
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d113      	bne.n	80028de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	1c9a      	adds	r2, r3, #2
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d119      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x1b8>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d014      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	b292      	uxth	r2, r2
 8002902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	1c9a      	adds	r2, r3, #2
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002920:	f7fe fe7a 	bl	8001618 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800292c:	429a      	cmp	r2, r3
 800292e:	d807      	bhi.n	8002940 <HAL_SPI_TransmitReceive+0x1d8>
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d003      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800293e:	e0a7      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1a6      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x130>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1a1      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x130>
 8002954:	e07c      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x1fc>
 800295e:	8b7b      	ldrh	r3, [r7, #26]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d16b      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800298a:	e057      	b.n	8002a3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d11c      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x26c>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x26c>
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d114      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d119      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x2ae>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d014      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a12:	2301      	movs	r3, #1
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a16:	f7fe fdff 	bl	8001618 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d803      	bhi.n	8002a2e <HAL_SPI_TransmitReceive+0x2c6>
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x2cc>
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a3a:	e029      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1a2      	bne.n	800298c <HAL_SPI_TransmitReceive+0x224>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d19d      	bne.n	800298c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f8a1 	bl	8002b9c <SPI_EndRxTxTransaction>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a6c:	e010      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	e000      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3730      	adds	r7, #48	; 0x30
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aba:	b2db      	uxtb	r3, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ad8:	e04c      	b.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d048      	beq.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ae2:	f7fe fd99 	bl	8001618 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d902      	bls.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d13d      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b10:	d111      	bne.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1a:	d004      	beq.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b24:	d107      	bne.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	d10f      	bne.n	8002b60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e00f      	b.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d1a3      	bne.n	8002ada <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <SPI_EndRxTxTransaction+0x7c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <SPI_EndRxTxTransaction+0x80>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0d5b      	lsrs	r3, r3, #21
 8002bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc6:	d112      	bne.n	8002bee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ff78 	bl	8002ac8 <SPI_WaitFlagStateUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d0f2      	beq.n	8002bee <SPI_EndRxTxTransaction+0x52>
 8002c08:	e000      	b.n	8002c0c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c0a:	bf00      	nop
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	165e9f81 	.word	0x165e9f81

08002c20 <__errno>:
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <__errno+0x8>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	4e0d      	ldr	r6, [pc, #52]	; (8002c64 <__libc_init_array+0x38>)
 8002c30:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c32:	1ba4      	subs	r4, r4, r6
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	2500      	movs	r5, #0
 8002c38:	42a5      	cmp	r5, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	4e0b      	ldr	r6, [pc, #44]	; (8002c6c <__libc_init_array+0x40>)
 8002c3e:	4c0c      	ldr	r4, [pc, #48]	; (8002c70 <__libc_init_array+0x44>)
 8002c40:	f001 f92e 	bl	8003ea0 <_init>
 8002c44:	1ba4      	subs	r4, r4, r6
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	2500      	movs	r5, #0
 8002c4a:	42a5      	cmp	r5, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c54:	4798      	blx	r3
 8002c56:	3501      	adds	r5, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c5e:	4798      	blx	r3
 8002c60:	3501      	adds	r5, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	0800400c 	.word	0x0800400c
 8002c68:	0800400c 	.word	0x0800400c
 8002c6c:	0800400c 	.word	0x0800400c
 8002c70:	08004010 	.word	0x08004010

08002c74 <memcpy>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	1e43      	subs	r3, r0, #1
 8002c78:	440a      	add	r2, r1
 8002c7a:	4291      	cmp	r1, r2
 8002c7c:	d100      	bne.n	8002c80 <memcpy+0xc>
 8002c7e:	bd10      	pop	{r4, pc}
 8002c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c88:	e7f7      	b.n	8002c7a <memcpy+0x6>

08002c8a <memset>:
 8002c8a:	4402      	add	r2, r0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d100      	bne.n	8002c94 <memset+0xa>
 8002c92:	4770      	bx	lr
 8002c94:	f803 1b01 	strb.w	r1, [r3], #1
 8002c98:	e7f9      	b.n	8002c8e <memset+0x4>
	...

08002c9c <iprintf>:
 8002c9c:	b40f      	push	{r0, r1, r2, r3}
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <iprintf+0x2c>)
 8002ca0:	b513      	push	{r0, r1, r4, lr}
 8002ca2:	681c      	ldr	r4, [r3, #0]
 8002ca4:	b124      	cbz	r4, 8002cb0 <iprintf+0x14>
 8002ca6:	69a3      	ldr	r3, [r4, #24]
 8002ca8:	b913      	cbnz	r3, 8002cb0 <iprintf+0x14>
 8002caa:	4620      	mov	r0, r4
 8002cac:	f000 fa42 	bl	8003134 <__sinit>
 8002cb0:	ab05      	add	r3, sp, #20
 8002cb2:	9a04      	ldr	r2, [sp, #16]
 8002cb4:	68a1      	ldr	r1, [r4, #8]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 fd4d 	bl	8003758 <_vfiprintf_r>
 8002cbe:	b002      	add	sp, #8
 8002cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc4:	b004      	add	sp, #16
 8002cc6:	4770      	bx	lr
 8002cc8:	2000000c 	.word	0x2000000c

08002ccc <_puts_r>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	460e      	mov	r6, r1
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	b118      	cbz	r0, 8002cdc <_puts_r+0x10>
 8002cd4:	6983      	ldr	r3, [r0, #24]
 8002cd6:	b90b      	cbnz	r3, 8002cdc <_puts_r+0x10>
 8002cd8:	f000 fa2c 	bl	8003134 <__sinit>
 8002cdc:	69ab      	ldr	r3, [r5, #24]
 8002cde:	68ac      	ldr	r4, [r5, #8]
 8002ce0:	b913      	cbnz	r3, 8002ce8 <_puts_r+0x1c>
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 fa26 	bl	8003134 <__sinit>
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <_puts_r+0xac>)
 8002cea:	429c      	cmp	r4, r3
 8002cec:	d117      	bne.n	8002d1e <_puts_r+0x52>
 8002cee:	686c      	ldr	r4, [r5, #4]
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	071b      	lsls	r3, r3, #28
 8002cf4:	d51d      	bpl.n	8002d32 <_puts_r+0x66>
 8002cf6:	6923      	ldr	r3, [r4, #16]
 8002cf8:	b1db      	cbz	r3, 8002d32 <_puts_r+0x66>
 8002cfa:	3e01      	subs	r6, #1
 8002cfc:	68a3      	ldr	r3, [r4, #8]
 8002cfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d02:	3b01      	subs	r3, #1
 8002d04:	60a3      	str	r3, [r4, #8]
 8002d06:	b9e9      	cbnz	r1, 8002d44 <_puts_r+0x78>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da2e      	bge.n	8002d6a <_puts_r+0x9e>
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	210a      	movs	r1, #10
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 f85f 	bl	8002dd4 <__swbuf_r>
 8002d16:	3001      	adds	r0, #1
 8002d18:	d011      	beq.n	8002d3e <_puts_r+0x72>
 8002d1a:	200a      	movs	r0, #10
 8002d1c:	e011      	b.n	8002d42 <_puts_r+0x76>
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <_puts_r+0xb0>)
 8002d20:	429c      	cmp	r4, r3
 8002d22:	d101      	bne.n	8002d28 <_puts_r+0x5c>
 8002d24:	68ac      	ldr	r4, [r5, #8]
 8002d26:	e7e3      	b.n	8002cf0 <_puts_r+0x24>
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_puts_r+0xb4>)
 8002d2a:	429c      	cmp	r4, r3
 8002d2c:	bf08      	it	eq
 8002d2e:	68ec      	ldreq	r4, [r5, #12]
 8002d30:	e7de      	b.n	8002cf0 <_puts_r+0x24>
 8002d32:	4621      	mov	r1, r4
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 f89f 	bl	8002e78 <__swsetup_r>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d0dd      	beq.n	8002cfa <_puts_r+0x2e>
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da04      	bge.n	8002d52 <_puts_r+0x86>
 8002d48:	69a2      	ldr	r2, [r4, #24]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dc06      	bgt.n	8002d5c <_puts_r+0x90>
 8002d4e:	290a      	cmp	r1, #10
 8002d50:	d004      	beq.n	8002d5c <_puts_r+0x90>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	7019      	strb	r1, [r3, #0]
 8002d5a:	e7cf      	b.n	8002cfc <_puts_r+0x30>
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f000 f838 	bl	8002dd4 <__swbuf_r>
 8002d64:	3001      	adds	r0, #1
 8002d66:	d1c9      	bne.n	8002cfc <_puts_r+0x30>
 8002d68:	e7e9      	b.n	8002d3e <_puts_r+0x72>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	200a      	movs	r0, #10
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	6022      	str	r2, [r4, #0]
 8002d72:	7018      	strb	r0, [r3, #0]
 8002d74:	e7e5      	b.n	8002d42 <_puts_r+0x76>
 8002d76:	bf00      	nop
 8002d78:	08003f90 	.word	0x08003f90
 8002d7c:	08003fb0 	.word	0x08003fb0
 8002d80:	08003f70 	.word	0x08003f70

08002d84 <puts>:
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <puts+0xc>)
 8002d86:	4601      	mov	r1, r0
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	f7ff bf9f 	b.w	8002ccc <_puts_r>
 8002d8e:	bf00      	nop
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <siprintf>:
 8002d94:	b40e      	push	{r1, r2, r3}
 8002d96:	b500      	push	{lr}
 8002d98:	b09c      	sub	sp, #112	; 0x70
 8002d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8002d9c:	9002      	str	r0, [sp, #8]
 8002d9e:	9006      	str	r0, [sp, #24]
 8002da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002da4:	4809      	ldr	r0, [pc, #36]	; (8002dcc <siprintf+0x38>)
 8002da6:	9107      	str	r1, [sp, #28]
 8002da8:	9104      	str	r1, [sp, #16]
 8002daa:	4909      	ldr	r1, [pc, #36]	; (8002dd0 <siprintf+0x3c>)
 8002dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db0:	9105      	str	r1, [sp, #20]
 8002db2:	6800      	ldr	r0, [r0, #0]
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	a902      	add	r1, sp, #8
 8002db8:	f000 fbac 	bl	8003514 <_svfiprintf_r>
 8002dbc:	9b02      	ldr	r3, [sp, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	b01c      	add	sp, #112	; 0x70
 8002dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc8:	b003      	add	sp, #12
 8002dca:	4770      	bx	lr
 8002dcc:	2000000c 	.word	0x2000000c
 8002dd0:	ffff0208 	.word	0xffff0208

08002dd4 <__swbuf_r>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	4614      	mov	r4, r2
 8002dda:	4605      	mov	r5, r0
 8002ddc:	b118      	cbz	r0, 8002de6 <__swbuf_r+0x12>
 8002dde:	6983      	ldr	r3, [r0, #24]
 8002de0:	b90b      	cbnz	r3, 8002de6 <__swbuf_r+0x12>
 8002de2:	f000 f9a7 	bl	8003134 <__sinit>
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <__swbuf_r+0x98>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	d12a      	bne.n	8002e42 <__swbuf_r+0x6e>
 8002dec:	686c      	ldr	r4, [r5, #4]
 8002dee:	69a3      	ldr	r3, [r4, #24]
 8002df0:	60a3      	str	r3, [r4, #8]
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	071a      	lsls	r2, r3, #28
 8002df6:	d52e      	bpl.n	8002e56 <__swbuf_r+0x82>
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	b363      	cbz	r3, 8002e56 <__swbuf_r+0x82>
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	6820      	ldr	r0, [r4, #0]
 8002e00:	1ac0      	subs	r0, r0, r3
 8002e02:	6963      	ldr	r3, [r4, #20]
 8002e04:	b2f6      	uxtb	r6, r6
 8002e06:	4283      	cmp	r3, r0
 8002e08:	4637      	mov	r7, r6
 8002e0a:	dc04      	bgt.n	8002e16 <__swbuf_r+0x42>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 f926 	bl	8003060 <_fflush_r>
 8002e14:	bb28      	cbnz	r0, 8002e62 <__swbuf_r+0x8e>
 8002e16:	68a3      	ldr	r3, [r4, #8]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	6022      	str	r2, [r4, #0]
 8002e22:	701e      	strb	r6, [r3, #0]
 8002e24:	6963      	ldr	r3, [r4, #20]
 8002e26:	3001      	adds	r0, #1
 8002e28:	4283      	cmp	r3, r0
 8002e2a:	d004      	beq.n	8002e36 <__swbuf_r+0x62>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	07db      	lsls	r3, r3, #31
 8002e30:	d519      	bpl.n	8002e66 <__swbuf_r+0x92>
 8002e32:	2e0a      	cmp	r6, #10
 8002e34:	d117      	bne.n	8002e66 <__swbuf_r+0x92>
 8002e36:	4621      	mov	r1, r4
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f000 f911 	bl	8003060 <_fflush_r>
 8002e3e:	b190      	cbz	r0, 8002e66 <__swbuf_r+0x92>
 8002e40:	e00f      	b.n	8002e62 <__swbuf_r+0x8e>
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <__swbuf_r+0x9c>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d101      	bne.n	8002e4c <__swbuf_r+0x78>
 8002e48:	68ac      	ldr	r4, [r5, #8]
 8002e4a:	e7d0      	b.n	8002dee <__swbuf_r+0x1a>
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <__swbuf_r+0xa0>)
 8002e4e:	429c      	cmp	r4, r3
 8002e50:	bf08      	it	eq
 8002e52:	68ec      	ldreq	r4, [r5, #12]
 8002e54:	e7cb      	b.n	8002dee <__swbuf_r+0x1a>
 8002e56:	4621      	mov	r1, r4
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f000 f80d 	bl	8002e78 <__swsetup_r>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0cc      	beq.n	8002dfc <__swbuf_r+0x28>
 8002e62:	f04f 37ff 	mov.w	r7, #4294967295
 8002e66:	4638      	mov	r0, r7
 8002e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08003f90 	.word	0x08003f90
 8002e70:	08003fb0 	.word	0x08003fb0
 8002e74:	08003f70 	.word	0x08003f70

08002e78 <__swsetup_r>:
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <__swsetup_r+0xcc>)
 8002e7a:	b570      	push	{r4, r5, r6, lr}
 8002e7c:	681d      	ldr	r5, [r3, #0]
 8002e7e:	4606      	mov	r6, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	b125      	cbz	r5, 8002e8e <__swsetup_r+0x16>
 8002e84:	69ab      	ldr	r3, [r5, #24]
 8002e86:	b913      	cbnz	r3, 8002e8e <__swsetup_r+0x16>
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f000 f953 	bl	8003134 <__sinit>
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <__swsetup_r+0xd0>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	d10f      	bne.n	8002eb4 <__swsetup_r+0x3c>
 8002e94:	686c      	ldr	r4, [r5, #4]
 8002e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	0715      	lsls	r5, r2, #28
 8002e9e:	d42c      	bmi.n	8002efa <__swsetup_r+0x82>
 8002ea0:	06d0      	lsls	r0, r2, #27
 8002ea2:	d411      	bmi.n	8002ec8 <__swsetup_r+0x50>
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	6032      	str	r2, [r6, #0]
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	81a3      	strh	r3, [r4, #12]
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb2:	e03e      	b.n	8002f32 <__swsetup_r+0xba>
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <__swsetup_r+0xd4>)
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	d101      	bne.n	8002ebe <__swsetup_r+0x46>
 8002eba:	68ac      	ldr	r4, [r5, #8]
 8002ebc:	e7eb      	b.n	8002e96 <__swsetup_r+0x1e>
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <__swsetup_r+0xd8>)
 8002ec0:	429c      	cmp	r4, r3
 8002ec2:	bf08      	it	eq
 8002ec4:	68ec      	ldreq	r4, [r5, #12]
 8002ec6:	e7e6      	b.n	8002e96 <__swsetup_r+0x1e>
 8002ec8:	0751      	lsls	r1, r2, #29
 8002eca:	d512      	bpl.n	8002ef2 <__swsetup_r+0x7a>
 8002ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ece:	b141      	cbz	r1, 8002ee2 <__swsetup_r+0x6a>
 8002ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	d002      	beq.n	8002ede <__swsetup_r+0x66>
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f000 fa19 	bl	8003310 <_free_r>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ee8:	81a3      	strh	r3, [r4, #12]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6063      	str	r3, [r4, #4]
 8002eee:	6923      	ldr	r3, [r4, #16]
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	b94b      	cbnz	r3, 8002f12 <__swsetup_r+0x9a>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f08:	d003      	beq.n	8002f12 <__swsetup_r+0x9a>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f000 f9bf 	bl	8003290 <__smakebuf_r>
 8002f12:	89a2      	ldrh	r2, [r4, #12]
 8002f14:	f012 0301 	ands.w	r3, r2, #1
 8002f18:	d00c      	beq.n	8002f34 <__swsetup_r+0xbc>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60a3      	str	r3, [r4, #8]
 8002f1e:	6963      	ldr	r3, [r4, #20]
 8002f20:	425b      	negs	r3, r3
 8002f22:	61a3      	str	r3, [r4, #24]
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	b953      	cbnz	r3, 8002f3e <__swsetup_r+0xc6>
 8002f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f30:	d1ba      	bne.n	8002ea8 <__swsetup_r+0x30>
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
 8002f34:	0792      	lsls	r2, r2, #30
 8002f36:	bf58      	it	pl
 8002f38:	6963      	ldrpl	r3, [r4, #20]
 8002f3a:	60a3      	str	r3, [r4, #8]
 8002f3c:	e7f2      	b.n	8002f24 <__swsetup_r+0xac>
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e7f7      	b.n	8002f32 <__swsetup_r+0xba>
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	08003f90 	.word	0x08003f90
 8002f4c:	08003fb0 	.word	0x08003fb0
 8002f50:	08003f70 	.word	0x08003f70

08002f54 <__sflush_r>:
 8002f54:	898a      	ldrh	r2, [r1, #12]
 8002f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	0710      	lsls	r0, r2, #28
 8002f5e:	460c      	mov	r4, r1
 8002f60:	d458      	bmi.n	8003014 <__sflush_r+0xc0>
 8002f62:	684b      	ldr	r3, [r1, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	dc05      	bgt.n	8002f74 <__sflush_r+0x20>
 8002f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dc02      	bgt.n	8002f74 <__sflush_r+0x20>
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f76:	2e00      	cmp	r6, #0
 8002f78:	d0f9      	beq.n	8002f6e <__sflush_r+0x1a>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f80:	682f      	ldr	r7, [r5, #0]
 8002f82:	6a21      	ldr	r1, [r4, #32]
 8002f84:	602b      	str	r3, [r5, #0]
 8002f86:	d032      	beq.n	8002fee <__sflush_r+0x9a>
 8002f88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	075a      	lsls	r2, r3, #29
 8002f8e:	d505      	bpl.n	8002f9c <__sflush_r+0x48>
 8002f90:	6863      	ldr	r3, [r4, #4]
 8002f92:	1ac0      	subs	r0, r0, r3
 8002f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f96:	b10b      	cbz	r3, 8002f9c <__sflush_r+0x48>
 8002f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f9a:	1ac0      	subs	r0, r0, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fa2:	6a21      	ldr	r1, [r4, #32]
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	47b0      	blx	r6
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	d106      	bne.n	8002fbc <__sflush_r+0x68>
 8002fae:	6829      	ldr	r1, [r5, #0]
 8002fb0:	291d      	cmp	r1, #29
 8002fb2:	d848      	bhi.n	8003046 <__sflush_r+0xf2>
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <__sflush_r+0x108>)
 8002fb6:	40ca      	lsrs	r2, r1
 8002fb8:	07d6      	lsls	r6, r2, #31
 8002fba:	d544      	bpl.n	8003046 <__sflush_r+0xf2>
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6062      	str	r2, [r4, #4]
 8002fc0:	04d9      	lsls	r1, r3, #19
 8002fc2:	6922      	ldr	r2, [r4, #16]
 8002fc4:	6022      	str	r2, [r4, #0]
 8002fc6:	d504      	bpl.n	8002fd2 <__sflush_r+0x7e>
 8002fc8:	1c42      	adds	r2, r0, #1
 8002fca:	d101      	bne.n	8002fd0 <__sflush_r+0x7c>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b903      	cbnz	r3, 8002fd2 <__sflush_r+0x7e>
 8002fd0:	6560      	str	r0, [r4, #84]	; 0x54
 8002fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fd4:	602f      	str	r7, [r5, #0]
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	d0c9      	beq.n	8002f6e <__sflush_r+0x1a>
 8002fda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fde:	4299      	cmp	r1, r3
 8002fe0:	d002      	beq.n	8002fe8 <__sflush_r+0x94>
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 f994 	bl	8003310 <_free_r>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	6360      	str	r0, [r4, #52]	; 0x34
 8002fec:	e7c0      	b.n	8002f70 <__sflush_r+0x1c>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	47b0      	blx	r6
 8002ff4:	1c41      	adds	r1, r0, #1
 8002ff6:	d1c8      	bne.n	8002f8a <__sflush_r+0x36>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0c5      	beq.n	8002f8a <__sflush_r+0x36>
 8002ffe:	2b1d      	cmp	r3, #29
 8003000:	d001      	beq.n	8003006 <__sflush_r+0xb2>
 8003002:	2b16      	cmp	r3, #22
 8003004:	d101      	bne.n	800300a <__sflush_r+0xb6>
 8003006:	602f      	str	r7, [r5, #0]
 8003008:	e7b1      	b.n	8002f6e <__sflush_r+0x1a>
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	e7ad      	b.n	8002f70 <__sflush_r+0x1c>
 8003014:	690f      	ldr	r7, [r1, #16]
 8003016:	2f00      	cmp	r7, #0
 8003018:	d0a9      	beq.n	8002f6e <__sflush_r+0x1a>
 800301a:	0793      	lsls	r3, r2, #30
 800301c:	680e      	ldr	r6, [r1, #0]
 800301e:	bf08      	it	eq
 8003020:	694b      	ldreq	r3, [r1, #20]
 8003022:	600f      	str	r7, [r1, #0]
 8003024:	bf18      	it	ne
 8003026:	2300      	movne	r3, #0
 8003028:	eba6 0807 	sub.w	r8, r6, r7
 800302c:	608b      	str	r3, [r1, #8]
 800302e:	f1b8 0f00 	cmp.w	r8, #0
 8003032:	dd9c      	ble.n	8002f6e <__sflush_r+0x1a>
 8003034:	4643      	mov	r3, r8
 8003036:	463a      	mov	r2, r7
 8003038:	6a21      	ldr	r1, [r4, #32]
 800303a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800303c:	4628      	mov	r0, r5
 800303e:	47b0      	blx	r6
 8003040:	2800      	cmp	r0, #0
 8003042:	dc06      	bgt.n	8003052 <__sflush_r+0xfe>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304a:	81a3      	strh	r3, [r4, #12]
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	e78e      	b.n	8002f70 <__sflush_r+0x1c>
 8003052:	4407      	add	r7, r0
 8003054:	eba8 0800 	sub.w	r8, r8, r0
 8003058:	e7e9      	b.n	800302e <__sflush_r+0xda>
 800305a:	bf00      	nop
 800305c:	20400001 	.word	0x20400001

08003060 <_fflush_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	690b      	ldr	r3, [r1, #16]
 8003064:	4605      	mov	r5, r0
 8003066:	460c      	mov	r4, r1
 8003068:	b1db      	cbz	r3, 80030a2 <_fflush_r+0x42>
 800306a:	b118      	cbz	r0, 8003074 <_fflush_r+0x14>
 800306c:	6983      	ldr	r3, [r0, #24]
 800306e:	b90b      	cbnz	r3, 8003074 <_fflush_r+0x14>
 8003070:	f000 f860 	bl	8003134 <__sinit>
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <_fflush_r+0x48>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d109      	bne.n	800308e <_fflush_r+0x2e>
 800307a:	686c      	ldr	r4, [r5, #4]
 800307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003080:	b17b      	cbz	r3, 80030a2 <_fflush_r+0x42>
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800308a:	f7ff bf63 	b.w	8002f54 <__sflush_r>
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <_fflush_r+0x4c>)
 8003090:	429c      	cmp	r4, r3
 8003092:	d101      	bne.n	8003098 <_fflush_r+0x38>
 8003094:	68ac      	ldr	r4, [r5, #8]
 8003096:	e7f1      	b.n	800307c <_fflush_r+0x1c>
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <_fflush_r+0x50>)
 800309a:	429c      	cmp	r4, r3
 800309c:	bf08      	it	eq
 800309e:	68ec      	ldreq	r4, [r5, #12]
 80030a0:	e7ec      	b.n	800307c <_fflush_r+0x1c>
 80030a2:	2000      	movs	r0, #0
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
 80030a6:	bf00      	nop
 80030a8:	08003f90 	.word	0x08003f90
 80030ac:	08003fb0 	.word	0x08003fb0
 80030b0:	08003f70 	.word	0x08003f70

080030b4 <std>:
 80030b4:	2300      	movs	r3, #0
 80030b6:	b510      	push	{r4, lr}
 80030b8:	4604      	mov	r4, r0
 80030ba:	e9c0 3300 	strd	r3, r3, [r0]
 80030be:	6083      	str	r3, [r0, #8]
 80030c0:	8181      	strh	r1, [r0, #12]
 80030c2:	6643      	str	r3, [r0, #100]	; 0x64
 80030c4:	81c2      	strh	r2, [r0, #14]
 80030c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ca:	6183      	str	r3, [r0, #24]
 80030cc:	4619      	mov	r1, r3
 80030ce:	2208      	movs	r2, #8
 80030d0:	305c      	adds	r0, #92	; 0x5c
 80030d2:	f7ff fdda 	bl	8002c8a <memset>
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <std+0x38>)
 80030d8:	6263      	str	r3, [r4, #36]	; 0x24
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <std+0x3c>)
 80030dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <std+0x40>)
 80030e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <std+0x44>)
 80030e4:	6224      	str	r4, [r4, #32]
 80030e6:	6323      	str	r3, [r4, #48]	; 0x30
 80030e8:	bd10      	pop	{r4, pc}
 80030ea:	bf00      	nop
 80030ec:	08003cb5 	.word	0x08003cb5
 80030f0:	08003cd7 	.word	0x08003cd7
 80030f4:	08003d0f 	.word	0x08003d0f
 80030f8:	08003d33 	.word	0x08003d33

080030fc <_cleanup_r>:
 80030fc:	4901      	ldr	r1, [pc, #4]	; (8003104 <_cleanup_r+0x8>)
 80030fe:	f000 b885 	b.w	800320c <_fwalk_reent>
 8003102:	bf00      	nop
 8003104:	08003061 	.word	0x08003061

08003108 <__sfmoreglue>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	1e4a      	subs	r2, r1, #1
 800310c:	2568      	movs	r5, #104	; 0x68
 800310e:	4355      	muls	r5, r2
 8003110:	460e      	mov	r6, r1
 8003112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003116:	f000 f949 	bl	80033ac <_malloc_r>
 800311a:	4604      	mov	r4, r0
 800311c:	b140      	cbz	r0, 8003130 <__sfmoreglue+0x28>
 800311e:	2100      	movs	r1, #0
 8003120:	e9c0 1600 	strd	r1, r6, [r0]
 8003124:	300c      	adds	r0, #12
 8003126:	60a0      	str	r0, [r4, #8]
 8003128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800312c:	f7ff fdad 	bl	8002c8a <memset>
 8003130:	4620      	mov	r0, r4
 8003132:	bd70      	pop	{r4, r5, r6, pc}

08003134 <__sinit>:
 8003134:	6983      	ldr	r3, [r0, #24]
 8003136:	b510      	push	{r4, lr}
 8003138:	4604      	mov	r4, r0
 800313a:	bb33      	cbnz	r3, 800318a <__sinit+0x56>
 800313c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003140:	6503      	str	r3, [r0, #80]	; 0x50
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <__sinit+0x58>)
 8003144:	4a12      	ldr	r2, [pc, #72]	; (8003190 <__sinit+0x5c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6282      	str	r2, [r0, #40]	; 0x28
 800314a:	4298      	cmp	r0, r3
 800314c:	bf04      	itt	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	6183      	streq	r3, [r0, #24]
 8003152:	f000 f81f 	bl	8003194 <__sfp>
 8003156:	6060      	str	r0, [r4, #4]
 8003158:	4620      	mov	r0, r4
 800315a:	f000 f81b 	bl	8003194 <__sfp>
 800315e:	60a0      	str	r0, [r4, #8]
 8003160:	4620      	mov	r0, r4
 8003162:	f000 f817 	bl	8003194 <__sfp>
 8003166:	2200      	movs	r2, #0
 8003168:	60e0      	str	r0, [r4, #12]
 800316a:	2104      	movs	r1, #4
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	f7ff ffa1 	bl	80030b4 <std>
 8003172:	2201      	movs	r2, #1
 8003174:	2109      	movs	r1, #9
 8003176:	68a0      	ldr	r0, [r4, #8]
 8003178:	f7ff ff9c 	bl	80030b4 <std>
 800317c:	2202      	movs	r2, #2
 800317e:	2112      	movs	r1, #18
 8003180:	68e0      	ldr	r0, [r4, #12]
 8003182:	f7ff ff97 	bl	80030b4 <std>
 8003186:	2301      	movs	r3, #1
 8003188:	61a3      	str	r3, [r4, #24]
 800318a:	bd10      	pop	{r4, pc}
 800318c:	08003f6c 	.word	0x08003f6c
 8003190:	080030fd 	.word	0x080030fd

08003194 <__sfp>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <__sfp+0x70>)
 8003198:	681e      	ldr	r6, [r3, #0]
 800319a:	69b3      	ldr	r3, [r6, #24]
 800319c:	4607      	mov	r7, r0
 800319e:	b913      	cbnz	r3, 80031a6 <__sfp+0x12>
 80031a0:	4630      	mov	r0, r6
 80031a2:	f7ff ffc7 	bl	8003134 <__sinit>
 80031a6:	3648      	adds	r6, #72	; 0x48
 80031a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	d503      	bpl.n	80031b8 <__sfp+0x24>
 80031b0:	6833      	ldr	r3, [r6, #0]
 80031b2:	b133      	cbz	r3, 80031c2 <__sfp+0x2e>
 80031b4:	6836      	ldr	r6, [r6, #0]
 80031b6:	e7f7      	b.n	80031a8 <__sfp+0x14>
 80031b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031bc:	b16d      	cbz	r5, 80031da <__sfp+0x46>
 80031be:	3468      	adds	r4, #104	; 0x68
 80031c0:	e7f4      	b.n	80031ac <__sfp+0x18>
 80031c2:	2104      	movs	r1, #4
 80031c4:	4638      	mov	r0, r7
 80031c6:	f7ff ff9f 	bl	8003108 <__sfmoreglue>
 80031ca:	6030      	str	r0, [r6, #0]
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d1f1      	bne.n	80031b4 <__sfp+0x20>
 80031d0:	230c      	movs	r3, #12
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4604      	mov	r4, r0
 80031d6:	4620      	mov	r0, r4
 80031d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <__sfp+0x74>)
 80031dc:	6665      	str	r5, [r4, #100]	; 0x64
 80031de:	e9c4 5500 	strd	r5, r5, [r4]
 80031e2:	60a5      	str	r5, [r4, #8]
 80031e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031ec:	2208      	movs	r2, #8
 80031ee:	4629      	mov	r1, r5
 80031f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031f4:	f7ff fd49 	bl	8002c8a <memset>
 80031f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003200:	e7e9      	b.n	80031d6 <__sfp+0x42>
 8003202:	bf00      	nop
 8003204:	08003f6c 	.word	0x08003f6c
 8003208:	ffff0001 	.word	0xffff0001

0800320c <_fwalk_reent>:
 800320c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003210:	4680      	mov	r8, r0
 8003212:	4689      	mov	r9, r1
 8003214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003218:	2600      	movs	r6, #0
 800321a:	b914      	cbnz	r4, 8003222 <_fwalk_reent+0x16>
 800321c:	4630      	mov	r0, r6
 800321e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003222:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003226:	3f01      	subs	r7, #1
 8003228:	d501      	bpl.n	800322e <_fwalk_reent+0x22>
 800322a:	6824      	ldr	r4, [r4, #0]
 800322c:	e7f5      	b.n	800321a <_fwalk_reent+0xe>
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d907      	bls.n	8003244 <_fwalk_reent+0x38>
 8003234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003238:	3301      	adds	r3, #1
 800323a:	d003      	beq.n	8003244 <_fwalk_reent+0x38>
 800323c:	4629      	mov	r1, r5
 800323e:	4640      	mov	r0, r8
 8003240:	47c8      	blx	r9
 8003242:	4306      	orrs	r6, r0
 8003244:	3568      	adds	r5, #104	; 0x68
 8003246:	e7ee      	b.n	8003226 <_fwalk_reent+0x1a>

08003248 <__swhatbuf_r>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	460e      	mov	r6, r1
 800324c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003250:	2900      	cmp	r1, #0
 8003252:	b096      	sub	sp, #88	; 0x58
 8003254:	4614      	mov	r4, r2
 8003256:	461d      	mov	r5, r3
 8003258:	da07      	bge.n	800326a <__swhatbuf_r+0x22>
 800325a:	2300      	movs	r3, #0
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	89b3      	ldrh	r3, [r6, #12]
 8003260:	061a      	lsls	r2, r3, #24
 8003262:	d410      	bmi.n	8003286 <__swhatbuf_r+0x3e>
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	e00e      	b.n	8003288 <__swhatbuf_r+0x40>
 800326a:	466a      	mov	r2, sp
 800326c:	f000 fd88 	bl	8003d80 <_fstat_r>
 8003270:	2800      	cmp	r0, #0
 8003272:	dbf2      	blt.n	800325a <__swhatbuf_r+0x12>
 8003274:	9a01      	ldr	r2, [sp, #4]
 8003276:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800327a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800327e:	425a      	negs	r2, r3
 8003280:	415a      	adcs	r2, r3
 8003282:	602a      	str	r2, [r5, #0]
 8003284:	e7ee      	b.n	8003264 <__swhatbuf_r+0x1c>
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	2000      	movs	r0, #0
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	b016      	add	sp, #88	; 0x58
 800328e:	bd70      	pop	{r4, r5, r6, pc}

08003290 <__smakebuf_r>:
 8003290:	898b      	ldrh	r3, [r1, #12]
 8003292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003294:	079d      	lsls	r5, r3, #30
 8003296:	4606      	mov	r6, r0
 8003298:	460c      	mov	r4, r1
 800329a:	d507      	bpl.n	80032ac <__smakebuf_r+0x1c>
 800329c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	6123      	str	r3, [r4, #16]
 80032a4:	2301      	movs	r3, #1
 80032a6:	6163      	str	r3, [r4, #20]
 80032a8:	b002      	add	sp, #8
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	ab01      	add	r3, sp, #4
 80032ae:	466a      	mov	r2, sp
 80032b0:	f7ff ffca 	bl	8003248 <__swhatbuf_r>
 80032b4:	9900      	ldr	r1, [sp, #0]
 80032b6:	4605      	mov	r5, r0
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 f877 	bl	80033ac <_malloc_r>
 80032be:	b948      	cbnz	r0, 80032d4 <__smakebuf_r+0x44>
 80032c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c4:	059a      	lsls	r2, r3, #22
 80032c6:	d4ef      	bmi.n	80032a8 <__smakebuf_r+0x18>
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	e7e3      	b.n	800329c <__smakebuf_r+0xc>
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <__smakebuf_r+0x7c>)
 80032d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	6020      	str	r0, [r4, #0]
 80032dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	9b00      	ldr	r3, [sp, #0]
 80032e4:	6163      	str	r3, [r4, #20]
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	6120      	str	r0, [r4, #16]
 80032ea:	b15b      	cbz	r3, 8003304 <__smakebuf_r+0x74>
 80032ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 fd57 	bl	8003da4 <_isatty_r>
 80032f6:	b128      	cbz	r0, 8003304 <__smakebuf_r+0x74>
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	431d      	orrs	r5, r3
 8003308:	81a5      	strh	r5, [r4, #12]
 800330a:	e7cd      	b.n	80032a8 <__smakebuf_r+0x18>
 800330c:	080030fd 	.word	0x080030fd

08003310 <_free_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4605      	mov	r5, r0
 8003314:	2900      	cmp	r1, #0
 8003316:	d045      	beq.n	80033a4 <_free_r+0x94>
 8003318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800331c:	1f0c      	subs	r4, r1, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfb8      	it	lt
 8003322:	18e4      	addlt	r4, r4, r3
 8003324:	f000 fd79 	bl	8003e1a <__malloc_lock>
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <_free_r+0x98>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	4610      	mov	r0, r2
 800332e:	b933      	cbnz	r3, 800333e <_free_r+0x2e>
 8003330:	6063      	str	r3, [r4, #4]
 8003332:	6014      	str	r4, [r2, #0]
 8003334:	4628      	mov	r0, r5
 8003336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800333a:	f000 bd6f 	b.w	8003e1c <__malloc_unlock>
 800333e:	42a3      	cmp	r3, r4
 8003340:	d90c      	bls.n	800335c <_free_r+0x4c>
 8003342:	6821      	ldr	r1, [r4, #0]
 8003344:	1862      	adds	r2, r4, r1
 8003346:	4293      	cmp	r3, r2
 8003348:	bf04      	itt	eq
 800334a:	681a      	ldreq	r2, [r3, #0]
 800334c:	685b      	ldreq	r3, [r3, #4]
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	bf04      	itt	eq
 8003352:	1852      	addeq	r2, r2, r1
 8003354:	6022      	streq	r2, [r4, #0]
 8003356:	6004      	str	r4, [r0, #0]
 8003358:	e7ec      	b.n	8003334 <_free_r+0x24>
 800335a:	4613      	mov	r3, r2
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	b10a      	cbz	r2, 8003364 <_free_r+0x54>
 8003360:	42a2      	cmp	r2, r4
 8003362:	d9fa      	bls.n	800335a <_free_r+0x4a>
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	1858      	adds	r0, r3, r1
 8003368:	42a0      	cmp	r0, r4
 800336a:	d10b      	bne.n	8003384 <_free_r+0x74>
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	4401      	add	r1, r0
 8003370:	1858      	adds	r0, r3, r1
 8003372:	4282      	cmp	r2, r0
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	d1dd      	bne.n	8003334 <_free_r+0x24>
 8003378:	6810      	ldr	r0, [r2, #0]
 800337a:	6852      	ldr	r2, [r2, #4]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	4401      	add	r1, r0
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	e7d7      	b.n	8003334 <_free_r+0x24>
 8003384:	d902      	bls.n	800338c <_free_r+0x7c>
 8003386:	230c      	movs	r3, #12
 8003388:	602b      	str	r3, [r5, #0]
 800338a:	e7d3      	b.n	8003334 <_free_r+0x24>
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	1821      	adds	r1, r4, r0
 8003390:	428a      	cmp	r2, r1
 8003392:	bf04      	itt	eq
 8003394:	6811      	ldreq	r1, [r2, #0]
 8003396:	6852      	ldreq	r2, [r2, #4]
 8003398:	6062      	str	r2, [r4, #4]
 800339a:	bf04      	itt	eq
 800339c:	1809      	addeq	r1, r1, r0
 800339e:	6021      	streq	r1, [r4, #0]
 80033a0:	605c      	str	r4, [r3, #4]
 80033a2:	e7c7      	b.n	8003334 <_free_r+0x24>
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
 80033a6:	bf00      	nop
 80033a8:	20000094 	.word	0x20000094

080033ac <_malloc_r>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	1ccd      	adds	r5, r1, #3
 80033b0:	f025 0503 	bic.w	r5, r5, #3
 80033b4:	3508      	adds	r5, #8
 80033b6:	2d0c      	cmp	r5, #12
 80033b8:	bf38      	it	cc
 80033ba:	250c      	movcc	r5, #12
 80033bc:	2d00      	cmp	r5, #0
 80033be:	4606      	mov	r6, r0
 80033c0:	db01      	blt.n	80033c6 <_malloc_r+0x1a>
 80033c2:	42a9      	cmp	r1, r5
 80033c4:	d903      	bls.n	80033ce <_malloc_r+0x22>
 80033c6:	230c      	movs	r3, #12
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	2000      	movs	r0, #0
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	f000 fd24 	bl	8003e1a <__malloc_lock>
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <_malloc_r+0xac>)
 80033d4:	6814      	ldr	r4, [r2, #0]
 80033d6:	4621      	mov	r1, r4
 80033d8:	b991      	cbnz	r1, 8003400 <_malloc_r+0x54>
 80033da:	4c20      	ldr	r4, [pc, #128]	; (800345c <_malloc_r+0xb0>)
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	b91b      	cbnz	r3, 80033e8 <_malloc_r+0x3c>
 80033e0:	4630      	mov	r0, r6
 80033e2:	f000 fc57 	bl	8003c94 <_sbrk_r>
 80033e6:	6020      	str	r0, [r4, #0]
 80033e8:	4629      	mov	r1, r5
 80033ea:	4630      	mov	r0, r6
 80033ec:	f000 fc52 	bl	8003c94 <_sbrk_r>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d124      	bne.n	800343e <_malloc_r+0x92>
 80033f4:	230c      	movs	r3, #12
 80033f6:	6033      	str	r3, [r6, #0]
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 fd0f 	bl	8003e1c <__malloc_unlock>
 80033fe:	e7e4      	b.n	80033ca <_malloc_r+0x1e>
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	1b5b      	subs	r3, r3, r5
 8003404:	d418      	bmi.n	8003438 <_malloc_r+0x8c>
 8003406:	2b0b      	cmp	r3, #11
 8003408:	d90f      	bls.n	800342a <_malloc_r+0x7e>
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	50cd      	str	r5, [r1, r3]
 800340e:	18cc      	adds	r4, r1, r3
 8003410:	4630      	mov	r0, r6
 8003412:	f000 fd03 	bl	8003e1c <__malloc_unlock>
 8003416:	f104 000b 	add.w	r0, r4, #11
 800341a:	1d23      	adds	r3, r4, #4
 800341c:	f020 0007 	bic.w	r0, r0, #7
 8003420:	1ac3      	subs	r3, r0, r3
 8003422:	d0d3      	beq.n	80033cc <_malloc_r+0x20>
 8003424:	425a      	negs	r2, r3
 8003426:	50e2      	str	r2, [r4, r3]
 8003428:	e7d0      	b.n	80033cc <_malloc_r+0x20>
 800342a:	428c      	cmp	r4, r1
 800342c:	684b      	ldr	r3, [r1, #4]
 800342e:	bf16      	itet	ne
 8003430:	6063      	strne	r3, [r4, #4]
 8003432:	6013      	streq	r3, [r2, #0]
 8003434:	460c      	movne	r4, r1
 8003436:	e7eb      	b.n	8003410 <_malloc_r+0x64>
 8003438:	460c      	mov	r4, r1
 800343a:	6849      	ldr	r1, [r1, #4]
 800343c:	e7cc      	b.n	80033d8 <_malloc_r+0x2c>
 800343e:	1cc4      	adds	r4, r0, #3
 8003440:	f024 0403 	bic.w	r4, r4, #3
 8003444:	42a0      	cmp	r0, r4
 8003446:	d005      	beq.n	8003454 <_malloc_r+0xa8>
 8003448:	1a21      	subs	r1, r4, r0
 800344a:	4630      	mov	r0, r6
 800344c:	f000 fc22 	bl	8003c94 <_sbrk_r>
 8003450:	3001      	adds	r0, #1
 8003452:	d0cf      	beq.n	80033f4 <_malloc_r+0x48>
 8003454:	6025      	str	r5, [r4, #0]
 8003456:	e7db      	b.n	8003410 <_malloc_r+0x64>
 8003458:	20000094 	.word	0x20000094
 800345c:	20000098 	.word	0x20000098

08003460 <__ssputs_r>:
 8003460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	688e      	ldr	r6, [r1, #8]
 8003466:	429e      	cmp	r6, r3
 8003468:	4682      	mov	sl, r0
 800346a:	460c      	mov	r4, r1
 800346c:	4690      	mov	r8, r2
 800346e:	4699      	mov	r9, r3
 8003470:	d837      	bhi.n	80034e2 <__ssputs_r+0x82>
 8003472:	898a      	ldrh	r2, [r1, #12]
 8003474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003478:	d031      	beq.n	80034de <__ssputs_r+0x7e>
 800347a:	6825      	ldr	r5, [r4, #0]
 800347c:	6909      	ldr	r1, [r1, #16]
 800347e:	1a6f      	subs	r7, r5, r1
 8003480:	6965      	ldr	r5, [r4, #20]
 8003482:	2302      	movs	r3, #2
 8003484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003488:	fb95 f5f3 	sdiv	r5, r5, r3
 800348c:	f109 0301 	add.w	r3, r9, #1
 8003490:	443b      	add	r3, r7
 8003492:	429d      	cmp	r5, r3
 8003494:	bf38      	it	cc
 8003496:	461d      	movcc	r5, r3
 8003498:	0553      	lsls	r3, r2, #21
 800349a:	d530      	bpl.n	80034fe <__ssputs_r+0x9e>
 800349c:	4629      	mov	r1, r5
 800349e:	f7ff ff85 	bl	80033ac <_malloc_r>
 80034a2:	4606      	mov	r6, r0
 80034a4:	b950      	cbnz	r0, 80034bc <__ssputs_r+0x5c>
 80034a6:	230c      	movs	r3, #12
 80034a8:	f8ca 3000 	str.w	r3, [sl]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034bc:	463a      	mov	r2, r7
 80034be:	6921      	ldr	r1, [r4, #16]
 80034c0:	f7ff fbd8 	bl	8002c74 <memcpy>
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ce:	81a3      	strh	r3, [r4, #12]
 80034d0:	6126      	str	r6, [r4, #16]
 80034d2:	6165      	str	r5, [r4, #20]
 80034d4:	443e      	add	r6, r7
 80034d6:	1bed      	subs	r5, r5, r7
 80034d8:	6026      	str	r6, [r4, #0]
 80034da:	60a5      	str	r5, [r4, #8]
 80034dc:	464e      	mov	r6, r9
 80034de:	454e      	cmp	r6, r9
 80034e0:	d900      	bls.n	80034e4 <__ssputs_r+0x84>
 80034e2:	464e      	mov	r6, r9
 80034e4:	4632      	mov	r2, r6
 80034e6:	4641      	mov	r1, r8
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	f000 fc7d 	bl	8003de8 <memmove>
 80034ee:	68a3      	ldr	r3, [r4, #8]
 80034f0:	1b9b      	subs	r3, r3, r6
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	441e      	add	r6, r3
 80034f8:	6026      	str	r6, [r4, #0]
 80034fa:	2000      	movs	r0, #0
 80034fc:	e7dc      	b.n	80034b8 <__ssputs_r+0x58>
 80034fe:	462a      	mov	r2, r5
 8003500:	f000 fc8d 	bl	8003e1e <_realloc_r>
 8003504:	4606      	mov	r6, r0
 8003506:	2800      	cmp	r0, #0
 8003508:	d1e2      	bne.n	80034d0 <__ssputs_r+0x70>
 800350a:	6921      	ldr	r1, [r4, #16]
 800350c:	4650      	mov	r0, sl
 800350e:	f7ff feff 	bl	8003310 <_free_r>
 8003512:	e7c8      	b.n	80034a6 <__ssputs_r+0x46>

08003514 <_svfiprintf_r>:
 8003514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003518:	461d      	mov	r5, r3
 800351a:	898b      	ldrh	r3, [r1, #12]
 800351c:	061f      	lsls	r7, r3, #24
 800351e:	b09d      	sub	sp, #116	; 0x74
 8003520:	4680      	mov	r8, r0
 8003522:	460c      	mov	r4, r1
 8003524:	4616      	mov	r6, r2
 8003526:	d50f      	bpl.n	8003548 <_svfiprintf_r+0x34>
 8003528:	690b      	ldr	r3, [r1, #16]
 800352a:	b96b      	cbnz	r3, 8003548 <_svfiprintf_r+0x34>
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	f7ff ff3d 	bl	80033ac <_malloc_r>
 8003532:	6020      	str	r0, [r4, #0]
 8003534:	6120      	str	r0, [r4, #16]
 8003536:	b928      	cbnz	r0, 8003544 <_svfiprintf_r+0x30>
 8003538:	230c      	movs	r3, #12
 800353a:	f8c8 3000 	str.w	r3, [r8]
 800353e:	f04f 30ff 	mov.w	r0, #4294967295
 8003542:	e0c8      	b.n	80036d6 <_svfiprintf_r+0x1c2>
 8003544:	2340      	movs	r3, #64	; 0x40
 8003546:	6163      	str	r3, [r4, #20]
 8003548:	2300      	movs	r3, #0
 800354a:	9309      	str	r3, [sp, #36]	; 0x24
 800354c:	2320      	movs	r3, #32
 800354e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003552:	2330      	movs	r3, #48	; 0x30
 8003554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003558:	9503      	str	r5, [sp, #12]
 800355a:	f04f 0b01 	mov.w	fp, #1
 800355e:	4637      	mov	r7, r6
 8003560:	463d      	mov	r5, r7
 8003562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003566:	b10b      	cbz	r3, 800356c <_svfiprintf_r+0x58>
 8003568:	2b25      	cmp	r3, #37	; 0x25
 800356a:	d13e      	bne.n	80035ea <_svfiprintf_r+0xd6>
 800356c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003570:	d00b      	beq.n	800358a <_svfiprintf_r+0x76>
 8003572:	4653      	mov	r3, sl
 8003574:	4632      	mov	r2, r6
 8003576:	4621      	mov	r1, r4
 8003578:	4640      	mov	r0, r8
 800357a:	f7ff ff71 	bl	8003460 <__ssputs_r>
 800357e:	3001      	adds	r0, #1
 8003580:	f000 80a4 	beq.w	80036cc <_svfiprintf_r+0x1b8>
 8003584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003586:	4453      	add	r3, sl
 8003588:	9309      	str	r3, [sp, #36]	; 0x24
 800358a:	783b      	ldrb	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 809d 	beq.w	80036cc <_svfiprintf_r+0x1b8>
 8003592:	2300      	movs	r3, #0
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	9307      	str	r3, [sp, #28]
 80035a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035a4:	931a      	str	r3, [sp, #104]	; 0x68
 80035a6:	462f      	mov	r7, r5
 80035a8:	2205      	movs	r2, #5
 80035aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80035ae:	4850      	ldr	r0, [pc, #320]	; (80036f0 <_svfiprintf_r+0x1dc>)
 80035b0:	f7fc fe16 	bl	80001e0 <memchr>
 80035b4:	9b04      	ldr	r3, [sp, #16]
 80035b6:	b9d0      	cbnz	r0, 80035ee <_svfiprintf_r+0xda>
 80035b8:	06d9      	lsls	r1, r3, #27
 80035ba:	bf44      	itt	mi
 80035bc:	2220      	movmi	r2, #32
 80035be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035c2:	071a      	lsls	r2, r3, #28
 80035c4:	bf44      	itt	mi
 80035c6:	222b      	movmi	r2, #43	; 0x2b
 80035c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035cc:	782a      	ldrb	r2, [r5, #0]
 80035ce:	2a2a      	cmp	r2, #42	; 0x2a
 80035d0:	d015      	beq.n	80035fe <_svfiprintf_r+0xea>
 80035d2:	9a07      	ldr	r2, [sp, #28]
 80035d4:	462f      	mov	r7, r5
 80035d6:	2000      	movs	r0, #0
 80035d8:	250a      	movs	r5, #10
 80035da:	4639      	mov	r1, r7
 80035dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e0:	3b30      	subs	r3, #48	; 0x30
 80035e2:	2b09      	cmp	r3, #9
 80035e4:	d94d      	bls.n	8003682 <_svfiprintf_r+0x16e>
 80035e6:	b1b8      	cbz	r0, 8003618 <_svfiprintf_r+0x104>
 80035e8:	e00f      	b.n	800360a <_svfiprintf_r+0xf6>
 80035ea:	462f      	mov	r7, r5
 80035ec:	e7b8      	b.n	8003560 <_svfiprintf_r+0x4c>
 80035ee:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <_svfiprintf_r+0x1dc>)
 80035f0:	1a80      	subs	r0, r0, r2
 80035f2:	fa0b f000 	lsl.w	r0, fp, r0
 80035f6:	4318      	orrs	r0, r3
 80035f8:	9004      	str	r0, [sp, #16]
 80035fa:	463d      	mov	r5, r7
 80035fc:	e7d3      	b.n	80035a6 <_svfiprintf_r+0x92>
 80035fe:	9a03      	ldr	r2, [sp, #12]
 8003600:	1d11      	adds	r1, r2, #4
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	9103      	str	r1, [sp, #12]
 8003606:	2a00      	cmp	r2, #0
 8003608:	db01      	blt.n	800360e <_svfiprintf_r+0xfa>
 800360a:	9207      	str	r2, [sp, #28]
 800360c:	e004      	b.n	8003618 <_svfiprintf_r+0x104>
 800360e:	4252      	negs	r2, r2
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	9207      	str	r2, [sp, #28]
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	783b      	ldrb	r3, [r7, #0]
 800361a:	2b2e      	cmp	r3, #46	; 0x2e
 800361c:	d10c      	bne.n	8003638 <_svfiprintf_r+0x124>
 800361e:	787b      	ldrb	r3, [r7, #1]
 8003620:	2b2a      	cmp	r3, #42	; 0x2a
 8003622:	d133      	bne.n	800368c <_svfiprintf_r+0x178>
 8003624:	9b03      	ldr	r3, [sp, #12]
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	9203      	str	r2, [sp, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	bfb8      	it	lt
 8003630:	f04f 33ff 	movlt.w	r3, #4294967295
 8003634:	3702      	adds	r7, #2
 8003636:	9305      	str	r3, [sp, #20]
 8003638:	4d2e      	ldr	r5, [pc, #184]	; (80036f4 <_svfiprintf_r+0x1e0>)
 800363a:	7839      	ldrb	r1, [r7, #0]
 800363c:	2203      	movs	r2, #3
 800363e:	4628      	mov	r0, r5
 8003640:	f7fc fdce 	bl	80001e0 <memchr>
 8003644:	b138      	cbz	r0, 8003656 <_svfiprintf_r+0x142>
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	1b40      	subs	r0, r0, r5
 800364a:	fa03 f000 	lsl.w	r0, r3, r0
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	4303      	orrs	r3, r0
 8003652:	3701      	adds	r7, #1
 8003654:	9304      	str	r3, [sp, #16]
 8003656:	7839      	ldrb	r1, [r7, #0]
 8003658:	4827      	ldr	r0, [pc, #156]	; (80036f8 <_svfiprintf_r+0x1e4>)
 800365a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365e:	2206      	movs	r2, #6
 8003660:	1c7e      	adds	r6, r7, #1
 8003662:	f7fc fdbd 	bl	80001e0 <memchr>
 8003666:	2800      	cmp	r0, #0
 8003668:	d038      	beq.n	80036dc <_svfiprintf_r+0x1c8>
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <_svfiprintf_r+0x1e8>)
 800366c:	bb13      	cbnz	r3, 80036b4 <_svfiprintf_r+0x1a0>
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	3307      	adds	r3, #7
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	3308      	adds	r3, #8
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367c:	444b      	add	r3, r9
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	e76d      	b.n	800355e <_svfiprintf_r+0x4a>
 8003682:	fb05 3202 	mla	r2, r5, r2, r3
 8003686:	2001      	movs	r0, #1
 8003688:	460f      	mov	r7, r1
 800368a:	e7a6      	b.n	80035da <_svfiprintf_r+0xc6>
 800368c:	2300      	movs	r3, #0
 800368e:	3701      	adds	r7, #1
 8003690:	9305      	str	r3, [sp, #20]
 8003692:	4619      	mov	r1, r3
 8003694:	250a      	movs	r5, #10
 8003696:	4638      	mov	r0, r7
 8003698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800369c:	3a30      	subs	r2, #48	; 0x30
 800369e:	2a09      	cmp	r2, #9
 80036a0:	d903      	bls.n	80036aa <_svfiprintf_r+0x196>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0c8      	beq.n	8003638 <_svfiprintf_r+0x124>
 80036a6:	9105      	str	r1, [sp, #20]
 80036a8:	e7c6      	b.n	8003638 <_svfiprintf_r+0x124>
 80036aa:	fb05 2101 	mla	r1, r5, r1, r2
 80036ae:	2301      	movs	r3, #1
 80036b0:	4607      	mov	r7, r0
 80036b2:	e7f0      	b.n	8003696 <_svfiprintf_r+0x182>
 80036b4:	ab03      	add	r3, sp, #12
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4622      	mov	r2, r4
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <_svfiprintf_r+0x1ec>)
 80036bc:	a904      	add	r1, sp, #16
 80036be:	4640      	mov	r0, r8
 80036c0:	f3af 8000 	nop.w
 80036c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036c8:	4681      	mov	r9, r0
 80036ca:	d1d6      	bne.n	800367a <_svfiprintf_r+0x166>
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	065b      	lsls	r3, r3, #25
 80036d0:	f53f af35 	bmi.w	800353e <_svfiprintf_r+0x2a>
 80036d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036d6:	b01d      	add	sp, #116	; 0x74
 80036d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036dc:	ab03      	add	r3, sp, #12
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4622      	mov	r2, r4
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <_svfiprintf_r+0x1ec>)
 80036e4:	a904      	add	r1, sp, #16
 80036e6:	4640      	mov	r0, r8
 80036e8:	f000 f9c2 	bl	8003a70 <_printf_i>
 80036ec:	e7ea      	b.n	80036c4 <_svfiprintf_r+0x1b0>
 80036ee:	bf00      	nop
 80036f0:	08003fd0 	.word	0x08003fd0
 80036f4:	08003fd6 	.word	0x08003fd6
 80036f8:	08003fda 	.word	0x08003fda
 80036fc:	00000000 	.word	0x00000000
 8003700:	08003461 	.word	0x08003461

08003704 <__sfputc_r>:
 8003704:	6893      	ldr	r3, [r2, #8]
 8003706:	3b01      	subs	r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	b410      	push	{r4}
 800370c:	6093      	str	r3, [r2, #8]
 800370e:	da08      	bge.n	8003722 <__sfputc_r+0x1e>
 8003710:	6994      	ldr	r4, [r2, #24]
 8003712:	42a3      	cmp	r3, r4
 8003714:	db01      	blt.n	800371a <__sfputc_r+0x16>
 8003716:	290a      	cmp	r1, #10
 8003718:	d103      	bne.n	8003722 <__sfputc_r+0x1e>
 800371a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800371e:	f7ff bb59 	b.w	8002dd4 <__swbuf_r>
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	1c58      	adds	r0, r3, #1
 8003726:	6010      	str	r0, [r2, #0]
 8003728:	7019      	strb	r1, [r3, #0]
 800372a:	4608      	mov	r0, r1
 800372c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003730:	4770      	bx	lr

08003732 <__sfputs_r>:
 8003732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003734:	4606      	mov	r6, r0
 8003736:	460f      	mov	r7, r1
 8003738:	4614      	mov	r4, r2
 800373a:	18d5      	adds	r5, r2, r3
 800373c:	42ac      	cmp	r4, r5
 800373e:	d101      	bne.n	8003744 <__sfputs_r+0x12>
 8003740:	2000      	movs	r0, #0
 8003742:	e007      	b.n	8003754 <__sfputs_r+0x22>
 8003744:	463a      	mov	r2, r7
 8003746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800374a:	4630      	mov	r0, r6
 800374c:	f7ff ffda 	bl	8003704 <__sfputc_r>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d1f3      	bne.n	800373c <__sfputs_r+0xa>
 8003754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003758 <_vfiprintf_r>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	460c      	mov	r4, r1
 800375e:	b09d      	sub	sp, #116	; 0x74
 8003760:	4617      	mov	r7, r2
 8003762:	461d      	mov	r5, r3
 8003764:	4606      	mov	r6, r0
 8003766:	b118      	cbz	r0, 8003770 <_vfiprintf_r+0x18>
 8003768:	6983      	ldr	r3, [r0, #24]
 800376a:	b90b      	cbnz	r3, 8003770 <_vfiprintf_r+0x18>
 800376c:	f7ff fce2 	bl	8003134 <__sinit>
 8003770:	4b7c      	ldr	r3, [pc, #496]	; (8003964 <_vfiprintf_r+0x20c>)
 8003772:	429c      	cmp	r4, r3
 8003774:	d158      	bne.n	8003828 <_vfiprintf_r+0xd0>
 8003776:	6874      	ldr	r4, [r6, #4]
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	0718      	lsls	r0, r3, #28
 800377c:	d55e      	bpl.n	800383c <_vfiprintf_r+0xe4>
 800377e:	6923      	ldr	r3, [r4, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05b      	beq.n	800383c <_vfiprintf_r+0xe4>
 8003784:	2300      	movs	r3, #0
 8003786:	9309      	str	r3, [sp, #36]	; 0x24
 8003788:	2320      	movs	r3, #32
 800378a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800378e:	2330      	movs	r3, #48	; 0x30
 8003790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003794:	9503      	str	r5, [sp, #12]
 8003796:	f04f 0b01 	mov.w	fp, #1
 800379a:	46b8      	mov	r8, r7
 800379c:	4645      	mov	r5, r8
 800379e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037a2:	b10b      	cbz	r3, 80037a8 <_vfiprintf_r+0x50>
 80037a4:	2b25      	cmp	r3, #37	; 0x25
 80037a6:	d154      	bne.n	8003852 <_vfiprintf_r+0xfa>
 80037a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80037ac:	d00b      	beq.n	80037c6 <_vfiprintf_r+0x6e>
 80037ae:	4653      	mov	r3, sl
 80037b0:	463a      	mov	r2, r7
 80037b2:	4621      	mov	r1, r4
 80037b4:	4630      	mov	r0, r6
 80037b6:	f7ff ffbc 	bl	8003732 <__sfputs_r>
 80037ba:	3001      	adds	r0, #1
 80037bc:	f000 80c2 	beq.w	8003944 <_vfiprintf_r+0x1ec>
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	4453      	add	r3, sl
 80037c4:	9309      	str	r3, [sp, #36]	; 0x24
 80037c6:	f898 3000 	ldrb.w	r3, [r8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80ba 	beq.w	8003944 <_vfiprintf_r+0x1ec>
 80037d0:	2300      	movs	r3, #0
 80037d2:	f04f 32ff 	mov.w	r2, #4294967295
 80037d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037da:	9304      	str	r3, [sp, #16]
 80037dc:	9307      	str	r3, [sp, #28]
 80037de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e2:	931a      	str	r3, [sp, #104]	; 0x68
 80037e4:	46a8      	mov	r8, r5
 80037e6:	2205      	movs	r2, #5
 80037e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80037ec:	485e      	ldr	r0, [pc, #376]	; (8003968 <_vfiprintf_r+0x210>)
 80037ee:	f7fc fcf7 	bl	80001e0 <memchr>
 80037f2:	9b04      	ldr	r3, [sp, #16]
 80037f4:	bb78      	cbnz	r0, 8003856 <_vfiprintf_r+0xfe>
 80037f6:	06d9      	lsls	r1, r3, #27
 80037f8:	bf44      	itt	mi
 80037fa:	2220      	movmi	r2, #32
 80037fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003800:	071a      	lsls	r2, r3, #28
 8003802:	bf44      	itt	mi
 8003804:	222b      	movmi	r2, #43	; 0x2b
 8003806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800380a:	782a      	ldrb	r2, [r5, #0]
 800380c:	2a2a      	cmp	r2, #42	; 0x2a
 800380e:	d02a      	beq.n	8003866 <_vfiprintf_r+0x10e>
 8003810:	9a07      	ldr	r2, [sp, #28]
 8003812:	46a8      	mov	r8, r5
 8003814:	2000      	movs	r0, #0
 8003816:	250a      	movs	r5, #10
 8003818:	4641      	mov	r1, r8
 800381a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800381e:	3b30      	subs	r3, #48	; 0x30
 8003820:	2b09      	cmp	r3, #9
 8003822:	d969      	bls.n	80038f8 <_vfiprintf_r+0x1a0>
 8003824:	b360      	cbz	r0, 8003880 <_vfiprintf_r+0x128>
 8003826:	e024      	b.n	8003872 <_vfiprintf_r+0x11a>
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <_vfiprintf_r+0x214>)
 800382a:	429c      	cmp	r4, r3
 800382c:	d101      	bne.n	8003832 <_vfiprintf_r+0xda>
 800382e:	68b4      	ldr	r4, [r6, #8]
 8003830:	e7a2      	b.n	8003778 <_vfiprintf_r+0x20>
 8003832:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <_vfiprintf_r+0x218>)
 8003834:	429c      	cmp	r4, r3
 8003836:	bf08      	it	eq
 8003838:	68f4      	ldreq	r4, [r6, #12]
 800383a:	e79d      	b.n	8003778 <_vfiprintf_r+0x20>
 800383c:	4621      	mov	r1, r4
 800383e:	4630      	mov	r0, r6
 8003840:	f7ff fb1a 	bl	8002e78 <__swsetup_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	d09d      	beq.n	8003784 <_vfiprintf_r+0x2c>
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	b01d      	add	sp, #116	; 0x74
 800384e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003852:	46a8      	mov	r8, r5
 8003854:	e7a2      	b.n	800379c <_vfiprintf_r+0x44>
 8003856:	4a44      	ldr	r2, [pc, #272]	; (8003968 <_vfiprintf_r+0x210>)
 8003858:	1a80      	subs	r0, r0, r2
 800385a:	fa0b f000 	lsl.w	r0, fp, r0
 800385e:	4318      	orrs	r0, r3
 8003860:	9004      	str	r0, [sp, #16]
 8003862:	4645      	mov	r5, r8
 8003864:	e7be      	b.n	80037e4 <_vfiprintf_r+0x8c>
 8003866:	9a03      	ldr	r2, [sp, #12]
 8003868:	1d11      	adds	r1, r2, #4
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	9103      	str	r1, [sp, #12]
 800386e:	2a00      	cmp	r2, #0
 8003870:	db01      	blt.n	8003876 <_vfiprintf_r+0x11e>
 8003872:	9207      	str	r2, [sp, #28]
 8003874:	e004      	b.n	8003880 <_vfiprintf_r+0x128>
 8003876:	4252      	negs	r2, r2
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	9207      	str	r2, [sp, #28]
 800387e:	9304      	str	r3, [sp, #16]
 8003880:	f898 3000 	ldrb.w	r3, [r8]
 8003884:	2b2e      	cmp	r3, #46	; 0x2e
 8003886:	d10e      	bne.n	80038a6 <_vfiprintf_r+0x14e>
 8003888:	f898 3001 	ldrb.w	r3, [r8, #1]
 800388c:	2b2a      	cmp	r3, #42	; 0x2a
 800388e:	d138      	bne.n	8003902 <_vfiprintf_r+0x1aa>
 8003890:	9b03      	ldr	r3, [sp, #12]
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	9203      	str	r2, [sp, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	bfb8      	it	lt
 800389c:	f04f 33ff 	movlt.w	r3, #4294967295
 80038a0:	f108 0802 	add.w	r8, r8, #2
 80038a4:	9305      	str	r3, [sp, #20]
 80038a6:	4d33      	ldr	r5, [pc, #204]	; (8003974 <_vfiprintf_r+0x21c>)
 80038a8:	f898 1000 	ldrb.w	r1, [r8]
 80038ac:	2203      	movs	r2, #3
 80038ae:	4628      	mov	r0, r5
 80038b0:	f7fc fc96 	bl	80001e0 <memchr>
 80038b4:	b140      	cbz	r0, 80038c8 <_vfiprintf_r+0x170>
 80038b6:	2340      	movs	r3, #64	; 0x40
 80038b8:	1b40      	subs	r0, r0, r5
 80038ba:	fa03 f000 	lsl.w	r0, r3, r0
 80038be:	9b04      	ldr	r3, [sp, #16]
 80038c0:	4303      	orrs	r3, r0
 80038c2:	f108 0801 	add.w	r8, r8, #1
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	f898 1000 	ldrb.w	r1, [r8]
 80038cc:	482a      	ldr	r0, [pc, #168]	; (8003978 <_vfiprintf_r+0x220>)
 80038ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038d2:	2206      	movs	r2, #6
 80038d4:	f108 0701 	add.w	r7, r8, #1
 80038d8:	f7fc fc82 	bl	80001e0 <memchr>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d037      	beq.n	8003950 <_vfiprintf_r+0x1f8>
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <_vfiprintf_r+0x224>)
 80038e2:	bb1b      	cbnz	r3, 800392c <_vfiprintf_r+0x1d4>
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	3307      	adds	r3, #7
 80038e8:	f023 0307 	bic.w	r3, r3, #7
 80038ec:	3308      	adds	r3, #8
 80038ee:	9303      	str	r3, [sp, #12]
 80038f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f2:	444b      	add	r3, r9
 80038f4:	9309      	str	r3, [sp, #36]	; 0x24
 80038f6:	e750      	b.n	800379a <_vfiprintf_r+0x42>
 80038f8:	fb05 3202 	mla	r2, r5, r2, r3
 80038fc:	2001      	movs	r0, #1
 80038fe:	4688      	mov	r8, r1
 8003900:	e78a      	b.n	8003818 <_vfiprintf_r+0xc0>
 8003902:	2300      	movs	r3, #0
 8003904:	f108 0801 	add.w	r8, r8, #1
 8003908:	9305      	str	r3, [sp, #20]
 800390a:	4619      	mov	r1, r3
 800390c:	250a      	movs	r5, #10
 800390e:	4640      	mov	r0, r8
 8003910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003914:	3a30      	subs	r2, #48	; 0x30
 8003916:	2a09      	cmp	r2, #9
 8003918:	d903      	bls.n	8003922 <_vfiprintf_r+0x1ca>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0c3      	beq.n	80038a6 <_vfiprintf_r+0x14e>
 800391e:	9105      	str	r1, [sp, #20]
 8003920:	e7c1      	b.n	80038a6 <_vfiprintf_r+0x14e>
 8003922:	fb05 2101 	mla	r1, r5, r1, r2
 8003926:	2301      	movs	r3, #1
 8003928:	4680      	mov	r8, r0
 800392a:	e7f0      	b.n	800390e <_vfiprintf_r+0x1b6>
 800392c:	ab03      	add	r3, sp, #12
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4622      	mov	r2, r4
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <_vfiprintf_r+0x228>)
 8003934:	a904      	add	r1, sp, #16
 8003936:	4630      	mov	r0, r6
 8003938:	f3af 8000 	nop.w
 800393c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003940:	4681      	mov	r9, r0
 8003942:	d1d5      	bne.n	80038f0 <_vfiprintf_r+0x198>
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	065b      	lsls	r3, r3, #25
 8003948:	f53f af7e 	bmi.w	8003848 <_vfiprintf_r+0xf0>
 800394c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800394e:	e77d      	b.n	800384c <_vfiprintf_r+0xf4>
 8003950:	ab03      	add	r3, sp, #12
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4622      	mov	r2, r4
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <_vfiprintf_r+0x228>)
 8003958:	a904      	add	r1, sp, #16
 800395a:	4630      	mov	r0, r6
 800395c:	f000 f888 	bl	8003a70 <_printf_i>
 8003960:	e7ec      	b.n	800393c <_vfiprintf_r+0x1e4>
 8003962:	bf00      	nop
 8003964:	08003f90 	.word	0x08003f90
 8003968:	08003fd0 	.word	0x08003fd0
 800396c:	08003fb0 	.word	0x08003fb0
 8003970:	08003f70 	.word	0x08003f70
 8003974:	08003fd6 	.word	0x08003fd6
 8003978:	08003fda 	.word	0x08003fda
 800397c:	00000000 	.word	0x00000000
 8003980:	08003733 	.word	0x08003733

08003984 <_printf_common>:
 8003984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003988:	4691      	mov	r9, r2
 800398a:	461f      	mov	r7, r3
 800398c:	688a      	ldr	r2, [r1, #8]
 800398e:	690b      	ldr	r3, [r1, #16]
 8003990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003994:	4293      	cmp	r3, r2
 8003996:	bfb8      	it	lt
 8003998:	4613      	movlt	r3, r2
 800399a:	f8c9 3000 	str.w	r3, [r9]
 800399e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a2:	4606      	mov	r6, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	b112      	cbz	r2, 80039ae <_printf_common+0x2a>
 80039a8:	3301      	adds	r3, #1
 80039aa:	f8c9 3000 	str.w	r3, [r9]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	0699      	lsls	r1, r3, #26
 80039b2:	bf42      	ittt	mi
 80039b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039b8:	3302      	addmi	r3, #2
 80039ba:	f8c9 3000 	strmi.w	r3, [r9]
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	f015 0506 	ands.w	r5, r5, #6
 80039c4:	d107      	bne.n	80039d6 <_printf_common+0x52>
 80039c6:	f104 0a19 	add.w	sl, r4, #25
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	f8d9 2000 	ldr.w	r2, [r9]
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	42ab      	cmp	r3, r5
 80039d4:	dc28      	bgt.n	8003a28 <_printf_common+0xa4>
 80039d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	3300      	adds	r3, #0
 80039de:	bf18      	it	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	0692      	lsls	r2, r2, #26
 80039e4:	d42d      	bmi.n	8003a42 <_printf_common+0xbe>
 80039e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ea:	4639      	mov	r1, r7
 80039ec:	4630      	mov	r0, r6
 80039ee:	47c0      	blx	r8
 80039f0:	3001      	adds	r0, #1
 80039f2:	d020      	beq.n	8003a36 <_printf_common+0xb2>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	68e5      	ldr	r5, [r4, #12]
 80039f8:	f8d9 2000 	ldr.w	r2, [r9]
 80039fc:	f003 0306 	and.w	r3, r3, #6
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	bf08      	it	eq
 8003a04:	1aad      	subeq	r5, r5, r2
 8003a06:	68a3      	ldr	r3, [r4, #8]
 8003a08:	6922      	ldr	r2, [r4, #16]
 8003a0a:	bf0c      	ite	eq
 8003a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a10:	2500      	movne	r5, #0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	bfc4      	itt	gt
 8003a16:	1a9b      	subgt	r3, r3, r2
 8003a18:	18ed      	addgt	r5, r5, r3
 8003a1a:	f04f 0900 	mov.w	r9, #0
 8003a1e:	341a      	adds	r4, #26
 8003a20:	454d      	cmp	r5, r9
 8003a22:	d11a      	bne.n	8003a5a <_printf_common+0xd6>
 8003a24:	2000      	movs	r0, #0
 8003a26:	e008      	b.n	8003a3a <_printf_common+0xb6>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	4630      	mov	r0, r6
 8003a30:	47c0      	blx	r8
 8003a32:	3001      	adds	r0, #1
 8003a34:	d103      	bne.n	8003a3e <_printf_common+0xba>
 8003a36:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3e:	3501      	adds	r5, #1
 8003a40:	e7c3      	b.n	80039ca <_printf_common+0x46>
 8003a42:	18e1      	adds	r1, r4, r3
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	2030      	movs	r0, #48	; 0x30
 8003a48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a4c:	4422      	add	r2, r4
 8003a4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a56:	3302      	adds	r3, #2
 8003a58:	e7c5      	b.n	80039e6 <_printf_common+0x62>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4639      	mov	r1, r7
 8003a60:	4630      	mov	r0, r6
 8003a62:	47c0      	blx	r8
 8003a64:	3001      	adds	r0, #1
 8003a66:	d0e6      	beq.n	8003a36 <_printf_common+0xb2>
 8003a68:	f109 0901 	add.w	r9, r9, #1
 8003a6c:	e7d8      	b.n	8003a20 <_printf_common+0x9c>
	...

08003a70 <_printf_i>:
 8003a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a78:	460c      	mov	r4, r1
 8003a7a:	7e09      	ldrb	r1, [r1, #24]
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	296e      	cmp	r1, #110	; 0x6e
 8003a80:	4617      	mov	r7, r2
 8003a82:	4606      	mov	r6, r0
 8003a84:	4698      	mov	r8, r3
 8003a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a88:	f000 80b3 	beq.w	8003bf2 <_printf_i+0x182>
 8003a8c:	d822      	bhi.n	8003ad4 <_printf_i+0x64>
 8003a8e:	2963      	cmp	r1, #99	; 0x63
 8003a90:	d036      	beq.n	8003b00 <_printf_i+0x90>
 8003a92:	d80a      	bhi.n	8003aaa <_printf_i+0x3a>
 8003a94:	2900      	cmp	r1, #0
 8003a96:	f000 80b9 	beq.w	8003c0c <_printf_i+0x19c>
 8003a9a:	2958      	cmp	r1, #88	; 0x58
 8003a9c:	f000 8083 	beq.w	8003ba6 <_printf_i+0x136>
 8003aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003aa8:	e032      	b.n	8003b10 <_printf_i+0xa0>
 8003aaa:	2964      	cmp	r1, #100	; 0x64
 8003aac:	d001      	beq.n	8003ab2 <_printf_i+0x42>
 8003aae:	2969      	cmp	r1, #105	; 0x69
 8003ab0:	d1f6      	bne.n	8003aa0 <_printf_i+0x30>
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	0605      	lsls	r5, r0, #24
 8003ab8:	f103 0104 	add.w	r1, r3, #4
 8003abc:	d52a      	bpl.n	8003b14 <_printf_i+0xa4>
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da03      	bge.n	8003ace <_printf_i+0x5e>
 8003ac6:	222d      	movs	r2, #45	; 0x2d
 8003ac8:	425b      	negs	r3, r3
 8003aca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ace:	486f      	ldr	r0, [pc, #444]	; (8003c8c <_printf_i+0x21c>)
 8003ad0:	220a      	movs	r2, #10
 8003ad2:	e039      	b.n	8003b48 <_printf_i+0xd8>
 8003ad4:	2973      	cmp	r1, #115	; 0x73
 8003ad6:	f000 809d 	beq.w	8003c14 <_printf_i+0x1a4>
 8003ada:	d808      	bhi.n	8003aee <_printf_i+0x7e>
 8003adc:	296f      	cmp	r1, #111	; 0x6f
 8003ade:	d020      	beq.n	8003b22 <_printf_i+0xb2>
 8003ae0:	2970      	cmp	r1, #112	; 0x70
 8003ae2:	d1dd      	bne.n	8003aa0 <_printf_i+0x30>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	e003      	b.n	8003af6 <_printf_i+0x86>
 8003aee:	2975      	cmp	r1, #117	; 0x75
 8003af0:	d017      	beq.n	8003b22 <_printf_i+0xb2>
 8003af2:	2978      	cmp	r1, #120	; 0x78
 8003af4:	d1d4      	bne.n	8003aa0 <_printf_i+0x30>
 8003af6:	2378      	movs	r3, #120	; 0x78
 8003af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003afc:	4864      	ldr	r0, [pc, #400]	; (8003c90 <_printf_i+0x220>)
 8003afe:	e055      	b.n	8003bac <_printf_i+0x13c>
 8003b00:	6813      	ldr	r3, [r2, #0]
 8003b02:	1d19      	adds	r1, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6011      	str	r1, [r2, #0]
 8003b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b10:	2301      	movs	r3, #1
 8003b12:	e08c      	b.n	8003c2e <_printf_i+0x1be>
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6011      	str	r1, [r2, #0]
 8003b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b1c:	bf18      	it	ne
 8003b1e:	b21b      	sxthne	r3, r3
 8003b20:	e7cf      	b.n	8003ac2 <_printf_i+0x52>
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	6825      	ldr	r5, [r4, #0]
 8003b26:	1d18      	adds	r0, r3, #4
 8003b28:	6010      	str	r0, [r2, #0]
 8003b2a:	0628      	lsls	r0, r5, #24
 8003b2c:	d501      	bpl.n	8003b32 <_printf_i+0xc2>
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	e002      	b.n	8003b38 <_printf_i+0xc8>
 8003b32:	0668      	lsls	r0, r5, #25
 8003b34:	d5fb      	bpl.n	8003b2e <_printf_i+0xbe>
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	4854      	ldr	r0, [pc, #336]	; (8003c8c <_printf_i+0x21c>)
 8003b3a:	296f      	cmp	r1, #111	; 0x6f
 8003b3c:	bf14      	ite	ne
 8003b3e:	220a      	movne	r2, #10
 8003b40:	2208      	moveq	r2, #8
 8003b42:	2100      	movs	r1, #0
 8003b44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b48:	6865      	ldr	r5, [r4, #4]
 8003b4a:	60a5      	str	r5, [r4, #8]
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	f2c0 8095 	blt.w	8003c7c <_printf_i+0x20c>
 8003b52:	6821      	ldr	r1, [r4, #0]
 8003b54:	f021 0104 	bic.w	r1, r1, #4
 8003b58:	6021      	str	r1, [r4, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d13d      	bne.n	8003bda <_printf_i+0x16a>
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	f040 808e 	bne.w	8003c80 <_printf_i+0x210>
 8003b64:	4665      	mov	r5, ip
 8003b66:	2a08      	cmp	r2, #8
 8003b68:	d10b      	bne.n	8003b82 <_printf_i+0x112>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	07db      	lsls	r3, r3, #31
 8003b6e:	d508      	bpl.n	8003b82 <_printf_i+0x112>
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bfde      	ittt	le
 8003b78:	2330      	movle	r3, #48	; 0x30
 8003b7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b82:	ebac 0305 	sub.w	r3, ip, r5
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	f8cd 8000 	str.w	r8, [sp]
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	aa03      	add	r2, sp, #12
 8003b90:	4621      	mov	r1, r4
 8003b92:	4630      	mov	r0, r6
 8003b94:	f7ff fef6 	bl	8003984 <_printf_common>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d14d      	bne.n	8003c38 <_printf_i+0x1c8>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	b005      	add	sp, #20
 8003ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ba6:	4839      	ldr	r0, [pc, #228]	; (8003c8c <_printf_i+0x21c>)
 8003ba8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	6821      	ldr	r1, [r4, #0]
 8003bb0:	1d1d      	adds	r5, r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6015      	str	r5, [r2, #0]
 8003bb6:	060a      	lsls	r2, r1, #24
 8003bb8:	d50b      	bpl.n	8003bd2 <_printf_i+0x162>
 8003bba:	07ca      	lsls	r2, r1, #31
 8003bbc:	bf44      	itt	mi
 8003bbe:	f041 0120 	orrmi.w	r1, r1, #32
 8003bc2:	6021      	strmi	r1, [r4, #0]
 8003bc4:	b91b      	cbnz	r3, 8003bce <_printf_i+0x15e>
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	f022 0220 	bic.w	r2, r2, #32
 8003bcc:	6022      	str	r2, [r4, #0]
 8003bce:	2210      	movs	r2, #16
 8003bd0:	e7b7      	b.n	8003b42 <_printf_i+0xd2>
 8003bd2:	064d      	lsls	r5, r1, #25
 8003bd4:	bf48      	it	mi
 8003bd6:	b29b      	uxthmi	r3, r3
 8003bd8:	e7ef      	b.n	8003bba <_printf_i+0x14a>
 8003bda:	4665      	mov	r5, ip
 8003bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003be0:	fb02 3311 	mls	r3, r2, r1, r3
 8003be4:	5cc3      	ldrb	r3, [r0, r3]
 8003be6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bea:	460b      	mov	r3, r1
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d1f5      	bne.n	8003bdc <_printf_i+0x16c>
 8003bf0:	e7b9      	b.n	8003b66 <_printf_i+0xf6>
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	6825      	ldr	r5, [r4, #0]
 8003bf6:	6961      	ldr	r1, [r4, #20]
 8003bf8:	1d18      	adds	r0, r3, #4
 8003bfa:	6010      	str	r0, [r2, #0]
 8003bfc:	0628      	lsls	r0, r5, #24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	d501      	bpl.n	8003c06 <_printf_i+0x196>
 8003c02:	6019      	str	r1, [r3, #0]
 8003c04:	e002      	b.n	8003c0c <_printf_i+0x19c>
 8003c06:	066a      	lsls	r2, r5, #25
 8003c08:	d5fb      	bpl.n	8003c02 <_printf_i+0x192>
 8003c0a:	8019      	strh	r1, [r3, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6123      	str	r3, [r4, #16]
 8003c10:	4665      	mov	r5, ip
 8003c12:	e7b9      	b.n	8003b88 <_printf_i+0x118>
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	1d19      	adds	r1, r3, #4
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	681d      	ldr	r5, [r3, #0]
 8003c1c:	6862      	ldr	r2, [r4, #4]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4628      	mov	r0, r5
 8003c22:	f7fc fadd 	bl	80001e0 <memchr>
 8003c26:	b108      	cbz	r0, 8003c2c <_printf_i+0x1bc>
 8003c28:	1b40      	subs	r0, r0, r5
 8003c2a:	6060      	str	r0, [r4, #4]
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	2300      	movs	r3, #0
 8003c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c36:	e7a7      	b.n	8003b88 <_printf_i+0x118>
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	462a      	mov	r2, r5
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	4630      	mov	r0, r6
 8003c40:	47c0      	blx	r8
 8003c42:	3001      	adds	r0, #1
 8003c44:	d0aa      	beq.n	8003b9c <_printf_i+0x12c>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	079b      	lsls	r3, r3, #30
 8003c4a:	d413      	bmi.n	8003c74 <_printf_i+0x204>
 8003c4c:	68e0      	ldr	r0, [r4, #12]
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	4298      	cmp	r0, r3
 8003c52:	bfb8      	it	lt
 8003c54:	4618      	movlt	r0, r3
 8003c56:	e7a3      	b.n	8003ba0 <_printf_i+0x130>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	464a      	mov	r2, r9
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4630      	mov	r0, r6
 8003c60:	47c0      	blx	r8
 8003c62:	3001      	adds	r0, #1
 8003c64:	d09a      	beq.n	8003b9c <_printf_i+0x12c>
 8003c66:	3501      	adds	r5, #1
 8003c68:	68e3      	ldr	r3, [r4, #12]
 8003c6a:	9a03      	ldr	r2, [sp, #12]
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	42ab      	cmp	r3, r5
 8003c70:	dcf2      	bgt.n	8003c58 <_printf_i+0x1e8>
 8003c72:	e7eb      	b.n	8003c4c <_printf_i+0x1dc>
 8003c74:	2500      	movs	r5, #0
 8003c76:	f104 0919 	add.w	r9, r4, #25
 8003c7a:	e7f5      	b.n	8003c68 <_printf_i+0x1f8>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ac      	bne.n	8003bda <_printf_i+0x16a>
 8003c80:	7803      	ldrb	r3, [r0, #0]
 8003c82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8a:	e76c      	b.n	8003b66 <_printf_i+0xf6>
 8003c8c:	08003fe1 	.word	0x08003fe1
 8003c90:	08003ff2 	.word	0x08003ff2

08003c94 <_sbrk_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4c06      	ldr	r4, [pc, #24]	; (8003cb0 <_sbrk_r+0x1c>)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	f7fd fbe8 	bl	8001474 <_sbrk>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_sbrk_r+0x1a>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_sbrk_r+0x1a>
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000022c 	.word	0x2000022c

08003cb4 <__sread>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	f000 f8d6 	bl	8003e6c <_read_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	bfab      	itete	ge
 8003cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc8:	181b      	addge	r3, r3, r0
 8003cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cce:	bfac      	ite	ge
 8003cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cd2:	81a3      	strhlt	r3, [r4, #12]
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <__swrite>:
 8003cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cda:	461f      	mov	r7, r3
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	05db      	lsls	r3, r3, #23
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	d505      	bpl.n	8003cf4 <__swrite+0x1e>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2200      	movs	r2, #0
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	f000 f868 	bl	8003dc4 <_lseek_r>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	4632      	mov	r2, r6
 8003d02:	463b      	mov	r3, r7
 8003d04:	4628      	mov	r0, r5
 8003d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	f000 b817 	b.w	8003d3c <_write_r>

08003d0e <__sseek>:
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	460c      	mov	r4, r1
 8003d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d16:	f000 f855 	bl	8003dc4 <_lseek_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	bf15      	itete	ne
 8003d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d2a:	81a3      	strheq	r3, [r4, #12]
 8003d2c:	bf18      	it	ne
 8003d2e:	81a3      	strhne	r3, [r4, #12]
 8003d30:	bd10      	pop	{r4, pc}

08003d32 <__sclose>:
 8003d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d36:	f000 b813 	b.w	8003d60 <_close_r>
	...

08003d3c <_write_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4c07      	ldr	r4, [pc, #28]	; (8003d5c <_write_r+0x20>)
 8003d40:	4605      	mov	r5, r0
 8003d42:	4608      	mov	r0, r1
 8003d44:	4611      	mov	r1, r2
 8003d46:	2200      	movs	r2, #0
 8003d48:	6022      	str	r2, [r4, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7fd f8cf 	bl	8000eee <_write>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_write_r+0x1e>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_write_r+0x1e>
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	2000022c 	.word	0x2000022c

08003d60 <_close_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4c06      	ldr	r4, [pc, #24]	; (8003d7c <_close_r+0x1c>)
 8003d64:	2300      	movs	r3, #0
 8003d66:	4605      	mov	r5, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	f7fd fb4d 	bl	800140a <_close>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_close_r+0x1a>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_close_r+0x1a>
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	2000022c 	.word	0x2000022c

08003d80 <_fstat_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4c07      	ldr	r4, [pc, #28]	; (8003da0 <_fstat_r+0x20>)
 8003d84:	2300      	movs	r3, #0
 8003d86:	4605      	mov	r5, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	f7fd fb48 	bl	8001422 <_fstat>
 8003d92:	1c43      	adds	r3, r0, #1
 8003d94:	d102      	bne.n	8003d9c <_fstat_r+0x1c>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	b103      	cbz	r3, 8003d9c <_fstat_r+0x1c>
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	bd38      	pop	{r3, r4, r5, pc}
 8003d9e:	bf00      	nop
 8003da0:	2000022c 	.word	0x2000022c

08003da4 <_isatty_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4c06      	ldr	r4, [pc, #24]	; (8003dc0 <_isatty_r+0x1c>)
 8003da8:	2300      	movs	r3, #0
 8003daa:	4605      	mov	r5, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	f7fd fb47 	bl	8001442 <_isatty>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d102      	bne.n	8003dbe <_isatty_r+0x1a>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	b103      	cbz	r3, 8003dbe <_isatty_r+0x1a>
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
 8003dc0:	2000022c 	.word	0x2000022c

08003dc4 <_lseek_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4c07      	ldr	r4, [pc, #28]	; (8003de4 <_lseek_r+0x20>)
 8003dc8:	4605      	mov	r5, r0
 8003dca:	4608      	mov	r0, r1
 8003dcc:	4611      	mov	r1, r2
 8003dce:	2200      	movs	r2, #0
 8003dd0:	6022      	str	r2, [r4, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7fd fb40 	bl	8001458 <_lseek>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_lseek_r+0x1e>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_lseek_r+0x1e>
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	2000022c 	.word	0x2000022c

08003de8 <memmove>:
 8003de8:	4288      	cmp	r0, r1
 8003dea:	b510      	push	{r4, lr}
 8003dec:	eb01 0302 	add.w	r3, r1, r2
 8003df0:	d807      	bhi.n	8003e02 <memmove+0x1a>
 8003df2:	1e42      	subs	r2, r0, #1
 8003df4:	4299      	cmp	r1, r3
 8003df6:	d00a      	beq.n	8003e0e <memmove+0x26>
 8003df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dfc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e00:	e7f8      	b.n	8003df4 <memmove+0xc>
 8003e02:	4283      	cmp	r3, r0
 8003e04:	d9f5      	bls.n	8003df2 <memmove+0xa>
 8003e06:	1881      	adds	r1, r0, r2
 8003e08:	1ad2      	subs	r2, r2, r3
 8003e0a:	42d3      	cmn	r3, r2
 8003e0c:	d100      	bne.n	8003e10 <memmove+0x28>
 8003e0e:	bd10      	pop	{r4, pc}
 8003e10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e18:	e7f7      	b.n	8003e0a <memmove+0x22>

08003e1a <__malloc_lock>:
 8003e1a:	4770      	bx	lr

08003e1c <__malloc_unlock>:
 8003e1c:	4770      	bx	lr

08003e1e <_realloc_r>:
 8003e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e20:	4607      	mov	r7, r0
 8003e22:	4614      	mov	r4, r2
 8003e24:	460e      	mov	r6, r1
 8003e26:	b921      	cbnz	r1, 8003e32 <_realloc_r+0x14>
 8003e28:	4611      	mov	r1, r2
 8003e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e2e:	f7ff babd 	b.w	80033ac <_malloc_r>
 8003e32:	b922      	cbnz	r2, 8003e3e <_realloc_r+0x20>
 8003e34:	f7ff fa6c 	bl	8003310 <_free_r>
 8003e38:	4625      	mov	r5, r4
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3e:	f000 f827 	bl	8003e90 <_malloc_usable_size_r>
 8003e42:	42a0      	cmp	r0, r4
 8003e44:	d20f      	bcs.n	8003e66 <_realloc_r+0x48>
 8003e46:	4621      	mov	r1, r4
 8003e48:	4638      	mov	r0, r7
 8003e4a:	f7ff faaf 	bl	80033ac <_malloc_r>
 8003e4e:	4605      	mov	r5, r0
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d0f2      	beq.n	8003e3a <_realloc_r+0x1c>
 8003e54:	4631      	mov	r1, r6
 8003e56:	4622      	mov	r2, r4
 8003e58:	f7fe ff0c 	bl	8002c74 <memcpy>
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f7ff fa56 	bl	8003310 <_free_r>
 8003e64:	e7e9      	b.n	8003e3a <_realloc_r+0x1c>
 8003e66:	4635      	mov	r5, r6
 8003e68:	e7e7      	b.n	8003e3a <_realloc_r+0x1c>
	...

08003e6c <_read_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4c07      	ldr	r4, [pc, #28]	; (8003e8c <_read_r+0x20>)
 8003e70:	4605      	mov	r5, r0
 8003e72:	4608      	mov	r0, r1
 8003e74:	4611      	mov	r1, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	6022      	str	r2, [r4, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fd faa8 	bl	80013d0 <_read>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_read_r+0x1e>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_read_r+0x1e>
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	2000022c 	.word	0x2000022c

08003e90 <_malloc_usable_size_r>:
 8003e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e94:	1f18      	subs	r0, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bfbc      	itt	lt
 8003e9a:	580b      	ldrlt	r3, [r1, r0]
 8003e9c:	18c0      	addlt	r0, r0, r3
 8003e9e:	4770      	bx	lr

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
