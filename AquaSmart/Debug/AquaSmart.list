
AquaSmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008500  08008500  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008508  08008508  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800850c  0800850c  0001850c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08008510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000114  08008624  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  08008624  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aace  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037b8  00000000  00000000  0003ac12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001000  00000000  00000000  0003f578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a2ca  00000000  00000000  00040578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000107bc  00000000  00000000  0005a842  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000957da  00000000  00000000  0006affe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001007d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f94  00000000  00000000  00100854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800820c 	.word	0x0800820c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	0800820c 	.word	0x0800820c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000588:	2101      	movs	r1, #1
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f80d 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6858      	ldr	r0, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	f002 fc55 	bl	8002e4c <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6958      	ldr	r0, [r3, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	b299      	uxth	r1, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	f002 fc3e 	bl	8002e4c <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005e0:	2101      	movs	r1, #1
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffe1 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	f002 fc29 	bl	8002e4c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f855 	bl	80006aa <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6858      	ldr	r0, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	2201      	movs	r2, #1
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fc1d 	bl	8002e4c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 f849 	bl	80006aa <SX1278_hw_DelayMs>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800062c:	2100      	movs	r1, #0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ffbb 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6998      	ldr	r0, [r3, #24]
 8000638:	1cf9      	adds	r1, r7, #3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	2201      	movs	r2, #1
 8000640:	f003 f8b0 	bl	80037a4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000644:	bf00      	nop
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fb80 	bl	8003d50 <HAL_SPI_GetState>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1f7      	bne.n	8000646 <SX1278_hw_SPICommand+0x26>
		;
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af02      	add	r7, sp, #8
 8000664:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800066e:	2100      	movs	r1, #0
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff9a 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6998      	ldr	r0, [r3, #24]
 800067a:	f107 020e 	add.w	r2, r7, #14
 800067e:	f107 010f 	add.w	r1, r7, #15
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	f003 f9bf 	bl	8003a0c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800068e:	bf00      	nop
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fb5b 	bl	8003d50 <HAL_SPI_GetState>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1f7      	bne.n	8000690 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fdd0 	bl	8002258 <HAL_Delay>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	4610      	mov	r0, r2
 80006d6:	f002 fba1 	bl	8002e1c <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff8c 	bl	8000620 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffa6 	bl	800065e <SX1278_hw_SPIReadByte>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff44 	bl	80005aa <SX1278_hw_SetNSS>
	return tmp;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
 8000738:	4613      	mov	r3, r2
 800073a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff31 	bl	80005aa <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff ff62 	bl	8000620 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	78ba      	ldrb	r2, [r7, #2]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5b 	bl	8000620 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff1a 	bl	80005aa <SX1278_hw_SetNSS>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 800077e:	b590      	push	{r4, r7, lr}
 8000780:	b087      	sub	sp, #28
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	461a      	mov	r2, r3
 800078a:	460b      	mov	r3, r1
 800078c:	72fb      	strb	r3, [r7, #11]
 800078e:	4613      	mov	r3, r2
 8000790:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000792:	7abb      	ldrb	r3, [r7, #10]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d927      	bls.n	80007e8 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff03 	bl	80005aa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7afa      	ldrb	r2, [r7, #11]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff37 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e00c      	b.n	80007d2 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6819      	ldr	r1, [r3, #0]
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	18d4      	adds	r4, r2, r3
 80007c2:	4608      	mov	r0, r1
 80007c4:	f7ff ff4b 	bl	800065e <SX1278_hw_SPIReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
 80007d2:	7dfa      	ldrb	r2, [r7, #23]
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3ee      	bcc.n	80007b8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fee2 	bl	80005aa <SX1278_hw_SetNSS>
 80007e6:	e000      	b.n	80007ea <SX1278_SPIBurstRead+0x6c>
		return;
 80007e8:	bf00      	nop
	}
}
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	72fb      	strb	r3, [r7, #11]
 8000800:	4613      	mov	r3, r2
 8000802:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000804:	7abb      	ldrb	r3, [r7, #10]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d929      	bls.n	800085e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feca 	bl	80005aa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	4610      	mov	r0, r2
 8000826:	f7ff fefb 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	75fb      	strb	r3, [r7, #23]
 800082e:	e00b      	b.n	8000848 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f7ff feef 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	3301      	adds	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	7abb      	ldrb	r3, [r7, #10]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3ef      	bcc.n	8000830 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fea7 	bl	80005aa <SX1278_hw_SetNSS>
 800085c:	e000      	b.n	8000860 <SX1278_SPIBurstWrite+0x70>
		return;
 800085e:	bf00      	nop
	}
}
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af02      	add	r7, sp, #8
 800086c:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7919      	ldrb	r1, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795a      	ldrb	r2, [r3, #5]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7998      	ldrb	r0, [r3, #6]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	79db      	ldrb	r3, [r3, #7]
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4603      	mov	r3, r0
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f804 	bl	8000890 <SX1278_config>
			module->LoRa_BW);
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f8aa 	bl	8000a04 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80008b0:	200f      	movs	r0, #15
 80008b2:	f7ff fefa 	bl	80006aa <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f8b4 	bl	8000a24 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80008bc:	78fa      	ldrb	r2, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <SX1278_config+0x144>)
 80008c6:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80008c8:	2303      	movs	r3, #3
 80008ca:	2106      	movs	r1, #6
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff8f 	bl	80007f0 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80008d2:	78bb      	ldrb	r3, [r7, #2]
 80008d4:	4a40      	ldr	r2, [pc, #256]	; (80009d8 <SX1278_config+0x148>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	461a      	mov	r2, r3
 80008da:	2109      	movs	r1, #9
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff25 	bl	800072c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80008e2:	220b      	movs	r2, #11
 80008e4:	210b      	movs	r1, #11
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff20 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80008ec:	2223      	movs	r2, #35	; 0x23
 80008ee:	210c      	movs	r1, #12
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff1b 	bl	800072c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	4a38      	ldr	r2, [pc, #224]	; (80009dc <SX1278_config+0x14c>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	2b06      	cmp	r3, #6
 80008fe:	d131      	bne.n	8000964 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000900:	7e3b      	ldrb	r3, [r7, #24]
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <SX1278_config+0x150>)
 8000904:	5cd3      	ldrb	r3, [r2, r3]
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800090a:	3303      	adds	r3, #3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	211d      	movs	r1, #29
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff0a 	bl	800072c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000918:	787b      	ldrb	r3, [r7, #1]
 800091a:	4a30      	ldr	r2, [pc, #192]	; (80009dc <SX1278_config+0x14c>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000922:	3307      	adds	r3, #7
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	211e      	movs	r1, #30
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fefe 	bl	800072c <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000930:	2131      	movs	r1, #49	; 0x31
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fedb 	bl	80006ee <SX1278_SPIRead>
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0305 	orr.w	r3, r3, #5
 800094a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	461a      	mov	r2, r3
 8000950:	2131      	movs	r1, #49	; 0x31
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff feea 	bl	800072c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000958:	220c      	movs	r2, #12
 800095a:	2137      	movs	r1, #55	; 0x37
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fee5 	bl	800072c <SX1278_SPIWrite>
 8000962:	e017      	b.n	8000994 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000964:	7e3b      	ldrb	r3, [r7, #24]
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <SX1278_config+0x150>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800096e:	3302      	adds	r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	211d      	movs	r1, #29
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fed8 	bl	800072c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800097c:	787b      	ldrb	r3, [r7, #1]
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <SX1278_config+0x14c>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000986:	3307      	adds	r3, #7
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	211e      	movs	r1, #30
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fecc 	bl	800072c <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000994:	22ff      	movs	r2, #255	; 0xff
 8000996:	211f      	movs	r1, #31
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fec7 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fec2 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80009a8:	220c      	movs	r2, #12
 80009aa:	2121      	movs	r1, #33	; 0x21
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff febd 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80009b2:	2201      	movs	r2, #1
 80009b4:	2141      	movs	r1, #65	; 0x41
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff feb8 	bl	800072c <SX1278_SPIWrite>
	module->readBytes = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f80d 	bl	80009e4 <SX1278_standby>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08008340 	.word	0x08008340
 80009d8:	08008344 	.word	0x08008344
 80009dc:	08008348 	.word	0x08008348
 80009e0:	08008350 	.word	0x08008350

080009e4 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80009ec:	2209      	movs	r2, #9
 80009ee:	2101      	movs	r1, #1
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fe9b 	bl	800072c <SX1278_SPIWrite>
	module->status = STANDBY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	725a      	strb	r2, [r3, #9]
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	2101      	movs	r1, #1
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fe8b 	bl	800072c <SX1278_SPIWrite>
	module->status = SLEEP;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	725a      	strb	r2, [r3, #9]
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000a2c:	2288      	movs	r2, #136	; 0x88
 8000a2e:	2101      	movs	r1, #1
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fe7b 	bl	800072c <SX1278_SPIWrite>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	2112      	movs	r1, #18
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe6e 	bl	800072c <SX1278_SPIWrite>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	460b      	mov	r3, r1
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	7afa      	ldrb	r2, [r7, #11]
 8000a6a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fefa 	bl	8000866 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000a72:	2284      	movs	r2, #132	; 0x84
 8000a74:	214d      	movs	r1, #77	; 0x4d
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fe58 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	2124      	movs	r1, #36	; 0x24
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fe53 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f7ff fe4e 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a90:	223f      	movs	r2, #63	; 0x3f
 8000a92:	2111      	movs	r1, #17
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe49 	bl	800072c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff ffcf 	bl	8000a3e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2122      	movs	r1, #34	; 0x22
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fe40 	bl	800072c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000aac:	210f      	movs	r1, #15
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fe1d 	bl	80006ee <SX1278_SPIRead>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	461a      	mov	r2, r3
 8000abc:	210d      	movs	r1, #13
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe34 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ac4:	228d      	movs	r2, #141	; 0x8d
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fe2f 	bl	800072c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ad6:	2118      	movs	r1, #24
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe08 	bl	80006ee <SX1278_SPIRead>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d104      	bne.n	8000af2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2203      	movs	r2, #3
 8000aec:	725a      	strb	r2, [r3, #9]
			return 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e013      	b.n	8000b1a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d109      	bne.n	8000b12 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd68 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff feac 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e003      	b.n	8000b1a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fdc9 	bl	80006aa <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b18:	e7dd      	b.n	8000ad6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fdc6 	bl	80006c0 <SX1278_hw_GetDIO0>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d030      	beq.n	8000b9c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	330a      	adds	r3, #10
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f006 fa56 	bl	8006ff6 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdce 	bl	80006ee <SX1278_SPIRead>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	210d      	movs	r1, #13
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fde5 	bl	800072c <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	799b      	ldrb	r3, [r3, #6]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7a1b      	ldrb	r3, [r3, #8]
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e005      	b.n	8000b7e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000b72:	2113      	movs	r1, #19
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fdba 	bl	80006ee <SX1278_SPIRead>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f103 020a 	add.w	r2, r3, #10
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2100      	movs	r1, #0
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fdf8 	bl	800077e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7bfa      	ldrb	r2, [r7, #15]
 8000b92:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff51 	bl	8000a3e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fe51 	bl	8000866 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000bc4:	2287      	movs	r2, #135	; 0x87
 8000bc6:	214d      	movs	r1, #77	; 0x4d
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fdaf 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2124      	movs	r1, #36	; 0x24
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fdaa 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000bd8:	2241      	movs	r2, #65	; 0x41
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fda5 	bl	800072c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff2b 	bl	8000a3e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000be8:	22f7      	movs	r2, #247	; 0xf7
 8000bea:	2111      	movs	r1, #17
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fd9d 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2122      	movs	r1, #34	; 0x22
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fd97 	bl	800072c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000bfe:	210e      	movs	r1, #14
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff fd74 	bl	80006ee <SX1278_SPIRead>
 8000c06:	4603      	mov	r3, r0
 8000c08:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	210d      	movs	r1, #13
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fd8b 	bl	800072c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000c16:	2122      	movs	r1, #34	; 0x22
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fd68 	bl	80006ee <SX1278_SPIRead>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000c22:	7dba      	ldrb	r2, [r7, #22]
 8000c24:	7afb      	ldrb	r3, [r7, #11]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d104      	bne.n	8000c34 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	725a      	strb	r2, [r3, #9]
			return 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e00e      	b.n	8000c52 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1ea      	bne.n	8000c16 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcc7 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fe0b 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000c50:	2300      	movs	r3, #0
		}
	}
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fdbd 	bl	80007f0 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000c76:	228b      	movs	r2, #139	; 0x8b
 8000c78:	2101      	movs	r1, #1
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fd56 	bl	800072c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd1b 	bl	80006c0 <SX1278_hw_GetDIO0>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00b      	beq.n	8000ca8 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000c90:	2112      	movs	r1, #18
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fd2b 	bl	80006ee <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fed0 	bl	8000a3e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fea0 	bl	80009e4 <SX1278_standby>
			return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e013      	b.n	8000cd0 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc8d 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fdd1 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e003      	b.n	8000cd0 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fcee 	bl	80006aa <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000cce:	e7d7      	b.n	8000c80 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	70fb      	strb	r3, [r7, #3]
 8000cea:	460b      	mov	r3, r1
 8000cec:	70bb      	strb	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc42 	bl	8000580 <SX1278_hw_init>
	module->frequency = frequency;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	78ba      	ldrb	r2, [r7, #2]
 8000d06:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	787a      	ldrb	r2, [r7, #1]
 8000d0c:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7c3a      	ldrb	r2, [r7, #16]
 8000d12:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fda3 	bl	8000866 <SX1278_defaultConfig>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d003      	beq.n	8000d4a <SX1278_read+0x22>
		length = module->readBytes;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d48:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	330a      	adds	r3, #10
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f006 f944 	bl	8006fe0 <memcpy>
	rxBuf[length] = '\0';
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <MX_ADC1_Init+0x9c>)
 8000d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <MX_ADC1_Init+0xa0>)
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dd6:	f001 fa61 	bl	800229c <HAL_ADC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de0:	f000 ff98 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000df6:	f001 fb7b 	bl	80024f0 <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e00:	f000 ff88 	bl	8001d14 <Error_Handler>
  }

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20004a44 	.word	0x20004a44
 8000e10:	40012000 	.word	0x40012000
 8000e14:	0f000001 	.word	0x0f000001

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0x7c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d127      	bne.n	8000e8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8000e72:	2306      	movs	r3, #6
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_ADC_MspInit+0x84>)
 8000e86:	f001 fe47 	bl	8002b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012000 	.word	0x40012000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e01c      	b.n	8000f0e <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d113      	bne.n	8000f08 <fsm_fire+0x44>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	4798      	blx	r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00c      	beq.n	8000f18 <fsm_fire+0x54>
        t->out(this);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
      break;
 8000f06:	e007      	b.n	8000f18 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dade      	bge.n	8000ed4 <fsm_fire+0x10>
    }
  }
}
 8000f16:	e000      	b.n	8000f1a <fsm_fire+0x56>
      break;
 8000f18:	bf00      	nop
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <error>:

int error (fsm_t* this) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <error+0x26>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	889a      	ldrh	r2, [r3, #4]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d901      	bls.n	8000f62 <error+0x2a>
		return 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <error+0x2c>
	else return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <no_error>:

int no_error (fsm_t* this) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	889b      	ldrh	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <no_error+0x2a>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	889a      	ldrh	r2, [r3, #4]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d801      	bhi.n	8000f9a <no_error+0x2a>
		return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <no_error+0x2c>
	else return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d008      	beq.n	8000fd4 <timer_sleep+0x2c>
 8000fc2:	f001 f93d 	bl	8002240 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d301      	bcc.n	8000fd4 <timer_sleep+0x2c>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <timer_sleep+0x2e>
	else return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <timer_adc>:

int timer_adc (fsm_t* this) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>250); /*Timer to ensure ADC setup*/
 8000fe6:	f001 f92b 	bl	8002240 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2bfa      	cmp	r3, #250	; 0xfa
 8000fee:	bf8c      	ite	hi
 8000ff0:	2301      	movhi	r3, #1
 8000ff2:	2300      	movls	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <timer_setup>:

int timer_setup (fsm_t* this) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8001010:	f001 f916 	bl	8002240 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	429a      	cmp	r2, r3
 800101c:	bf8c      	ite	hi
 800101e:	2301      	movhi	r3, #1
 8001020:	2300      	movls	r3, #0
 8001022:	b2db      	uxtb	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <warned>:

int warned (fsm_t* this) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	2b01      	cmp	r3, #1
 8001044:	bfd4      	ite	le
 8001046:	2301      	movle	r3, #1
 8001048:	2300      	movgt	r3, #0
 800104a:	b2db      	uxtb	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	60bb      	str	r3, [r7, #8]

	if(config->measure_count>=(config->measure_average))
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	7f1b      	ldrb	r3, [r3, #28]
 800106e:	b29a      	uxth	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001074:	429a      	cmp	r2, r3
 8001076:	d301      	bcc.n	800107c <timer_measure+0x24>
	return 0;
 8001078:	2300      	movs	r3, #0
 800107a:	e009      	b.n	8001090 <timer_measure+0x38>
	else return (HAL_GetTick()>=(config->measure_timer));
 800107c:	f001 f8e0 	bl	8002240 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	bf2c      	ite	cs
 800108a:	2301      	movcs	r3, #1
 800108c:	2300      	movcc	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <warning_limit>:

int warning_limit (fsm_t* this) {
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	bfcc      	ite	gt
 80010b2:	2301      	movgt	r3, #1
 80010b4:	2300      	movle	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <measuring>:

void measuring (fsm_t* this) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 80010da:	480f      	ldr	r0, [pc, #60]	; (8001118 <measuring+0x54>)
 80010dc:	f001 f9fb 	bl	80024d6 <HAL_ADC_GetValue>
 80010e0:	4603      	mov	r3, r0
 80010e2:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	885a      	ldrh	r2, [r3, #2]
 80010e8:	8afb      	ldrh	r3, [r7, #22]
 80010ea:	4413      	add	r3, r2
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	7f1b      	ldrb	r3, [r3, #28]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 80010fe:	f001 f89f 	bl	8002240 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20004a44 	.word	0x20004a44

0800111c <process_data>:

void process_data (fsm_t* this) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	885a      	ldrh	r2, [r3, #2]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <process_data+0x50>)
 8001138:	f001 f99a 	bl	8002470 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	889a      	ldrh	r2, [r3, #4]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001144:	429a      	cmp	r2, r3
 8001146:	d809      	bhi.n	800115c <process_data+0x40>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	889a      	ldrh	r2, [r3, #4]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001150:	429a      	cmp	r2, r3
 8001152:	d303      	bcc.n	800115c <process_data+0x40>
	{
		config->alarm = 0;
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2200      	movs	r2, #0
 8001158:	719a      	strb	r2, [r3, #6]
 800115a:	e002      	b.n	8001162 <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2201      	movs	r2, #1
 8001160:	719a      	strb	r2, [r3, #6]
	}

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20004a44 	.word	0x20004a44

08001170 <alert>:
void alert (fsm_t* this) {
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	615a      	str	r2, [r3, #20]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <sleep>:

void sleep (fsm_t* this) { // led orange
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 80011aa:	f001 f849 	bl	8002240 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80011b4:	4413      	add	r3, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <sleep+0x5c>)
 80011c6:	f001 fe41 	bl	8002e4c <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2201      	movs	r2, #1
 80011ce:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2200      	movs	r2, #0
 80011d4:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	dd03      	ble.n	80011e6 <sleep+0x4e>
	{
		config->error = 1;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2201      	movs	r2, #1
 80011e2:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 80011e4:	e002      	b.n	80011ec <sleep+0x54>
		config->error = 0;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2200      	movs	r2, #0
 80011ea:	71da      	strb	r2, [r3, #7]
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <init_adc>:

void init_adc (fsm_t* this) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <init_adc+0x28>)
 8001202:	f001 f935 	bl	8002470 <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 1000;
 8001206:	f001 f81b 	bl	8002240 <HAL_GetTick>
 800120a:	4603      	mov	r3, r0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b18      	subs	r3, #24
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <init_adc+0x2c>)
 8001214:	701a      	strb	r2, [r3, #0]

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20004a44 	.word	0x20004a44
 8001224:	20004a8d 	.word	0x20004a8d

08001228 <setting_up>:


void setting_up (fsm_t* this) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2200      	movs	r2, #0
 800123e:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2200      	movs	r2, #0
 800124a:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2200      	movs	r2, #0
 8001250:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 8001252:	f000 fff5 	bl	8002240 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800125c:	4413      	add	r3, r2
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001268:	2201      	movs	r2, #1
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <setting_up+0x64>)
 800126e:	f001 fded 	bl	8002e4c <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <setting_up+0x68>)
 8001274:	f001 f856 	bl	8002324 <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2201      	movs	r2, #1
 800127c:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2200      	movs	r2, #0
 8001282:	725a      	strb	r2, [r3, #9]
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020c00 	.word	0x40020c00
 8001290:	20004a44 	.word	0x20004a44

08001294 <save_data>:

void save_data (fsm_t* this)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	8bdb      	ldrh	r3, [r3, #30]
 80012aa:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b2:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	799b      	ldrb	r3, [r3, #6]
 80012b8:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	79db      	ldrb	r3, [r3, #7]
 80012be:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012d0:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012da:	f000 fc41 	bl	8001b60 <save_new_data>
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 80012f2:	4905      	ldr	r1, [pc, #20]	; (8001308 <fsm_sensor_init+0x20>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fdd3 	bl	8000ea0 <fsm_init>
  f->param = c;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	609a      	str	r2, [r3, #8]
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000

0800130c <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4603      	mov	r3, r0
 800131c:	817b      	strh	r3, [r7, #10]
 800131e:	460b      	mov	r3, r1
 8001320:	727b      	strb	r3, [r7, #9]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	897a      	ldrh	r2, [r7, #10]
 8001372:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7a7a      	ldrb	r2, [r7, #9]
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	88fa      	ldrh	r2, [r7, #6]
 8001380:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	7e3a      	ldrb	r2, [r7, #24]
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8bba      	ldrh	r2, [r7, #28]
 800138e:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8c3a      	ldrh	r2, [r7, #32]
 8001394:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013a0:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80013a6:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013ac:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013b2:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a42      	ldr	r2, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a34      	ldr	r2, [pc, #208]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_GPIO_Init+0x128>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <MX_GPIO_Init+0x12c>)
 800144c:	f001 fcfe 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2102      	movs	r1, #2
 8001454:	4826      	ldr	r0, [pc, #152]	; (80014f0 <MX_GPIO_Init+0x130>)
 8001456:	f001 fcf9 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin|LD6_Pin|Sensor1_Supply_Pin 
 800145a:	2200      	movs	r2, #0
 800145c:	f24d 0142 	movw	r1, #53314	; 0xd042
 8001460:	4824      	ldr	r0, [pc, #144]	; (80014f4 <MX_GPIO_Init+0x134>)
 8001462:	f001 fcf3 	bl	8002e4c <HAL_GPIO_WritePin>
                          |Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146c:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_GPIO_Init+0x134>)
 800146e:	f001 fced 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001472:	2310      	movs	r3, #16
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_GPIO_Init+0x12c>)
 800148a:	f001 fb45 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 800148e:	2305      	movs	r3, #5
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_GPIO_Init+0x130>)
 80014a2:	f001 fb39 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80014a6:	2302      	movs	r3, #2
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <MX_GPIO_Init+0x130>)
 80014be:	f001 fb2b 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80014c2:	f24f 0342 	movw	r3, #61506	; 0xf042
 80014c6:	617b      	str	r3, [r7, #20]
                          |Sensor1_Supply_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_GPIO_Init+0x134>)
 80014dc:	f001 fb1c 	bl	8002b18 <HAL_GPIO_Init>

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020c00 	.word	0x40020c00

080014f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001504:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001514:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001518:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001520:	e000      	b.n	8001524 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001522:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001524:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f9      	beq.n	8001522 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800152e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 fe11 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f879 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f7ff ff33 	bl	80013c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800155a:	f000 fc7d 	bl	8001e58 <MX_SPI1_Init>
  MX_ADC1_Init();
 800155e:	f7ff fc09 	bl	8000d74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <main+0xac>)
 8001564:	2134      	movs	r1, #52	; 0x34
 8001566:	2001      	movs	r0, #1
 8001568:	f002 fe5a 	bl	8004220 <osMessageQueueNew>
 800156c:	4602      	mov	r2, r0
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <main+0xb0>)
 8001570:	601a      	str	r2, [r3, #0]


  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor2_attributes);
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <main+0xb4>)
 8001574:	2134      	movs	r1, #52	; 0x34
 8001576:	2001      	movs	r0, #1
 8001578:	f002 fe52 	bl	8004220 <osMessageQueueNew>
 800157c:	4602      	mov	r2, r0
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <main+0xb8>)
 8001580:	601a      	str	r2, [r3, #0]

  /* creation of myQueueDataSaved */
  myQueueDataSavedHandle = osMessageQueueNew (2, sizeof(t_bool), &myQueueDataSaved_attributes);
 8001582:	4a20      	ldr	r2, [pc, #128]	; (8001604 <main+0xbc>)
 8001584:	2101      	movs	r1, #1
 8001586:	2002      	movs	r0, #2
 8001588:	f002 fe4a 	bl	8004220 <osMessageQueueNew>
 800158c:	4602      	mov	r2, r0
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <main+0xc0>)
 8001590:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001592:	f002 fc9f 	bl	8003ed4 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <main+0xc4>)
 8001598:	2100      	movs	r1, #0
 800159a:	481d      	ldr	r0, [pc, #116]	; (8001610 <main+0xc8>)
 800159c:	f002 fd2c 	bl	8003ff8 <osThreadNew>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <main+0xcc>)
 80015a4:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <main+0xd0>)
 80015ac:	4619      	mov	r1, r3
 80015ae:	481b      	ldr	r0, [pc, #108]	; (800161c <main+0xd4>)
 80015b0:	f002 fd22 	bl	8003ff8 <osThreadNew>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <main+0xd8>)
 80015b8:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <main+0xdc>)
 80015bc:	2100      	movs	r1, #0
 80015be:	481a      	ldr	r0, [pc, #104]	; (8001628 <main+0xe0>)
 80015c0:	f002 fd1a 	bl	8003ff8 <osThreadNew>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <main+0xe4>)
 80015c8:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <main+0xe8>)
 80015ce:	4619      	mov	r1, r3
 80015d0:	4818      	ldr	r0, [pc, #96]	; (8001634 <main+0xec>)
 80015d2:	f002 fd11 	bl	8003ff8 <osThreadNew>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <main+0xf0>)
 80015da:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <main+0xf4>)
 80015de:	2100      	movs	r1, #0
 80015e0:	4817      	ldr	r0, [pc, #92]	; (8001640 <main+0xf8>)
 80015e2:	f002 fd09 	bl	8003ff8 <osThreadNew>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <main+0xfc>)
 80015ea:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  /* Start scheduler */
  osKernelStart();
 80015ec:	f002 fca6 	bl	8003f3c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <main+0xa8>
 80015f2:	bf00      	nop
 80015f4:	08008410 	.word	0x08008410
 80015f8:	20004bbc 	.word	0x20004bbc
 80015fc:	08008428 	.word	0x08008428
 8001600:	20004a9c 	.word	0x20004a9c
 8001604:	08008440 	.word	0x08008440
 8001608:	20004aa8 	.word	0x20004aa8
 800160c:	0800835c 	.word	0x0800835c
 8001610:	08001751 	.word	0x08001751
 8001614:	20004a94 	.word	0x20004a94
 8001618:	08008380 	.word	0x08008380
 800161c:	08001761 	.word	0x08001761
 8001620:	20004aa4 	.word	0x20004aa4
 8001624:	080083a4 	.word	0x080083a4
 8001628:	08001891 	.word	0x08001891
 800162c:	20004a90 	.word	0x20004a90
 8001630:	080083c8 	.word	0x080083c8
 8001634:	0800191d 	.word	0x0800191d
 8001638:	20004bc0 	.word	0x20004bc0
 800163c:	080083ec 	.word	0x080083ec
 8001640:	08001a4d 	.word	0x08001a4d
 8001644:	20004aac 	.word	0x20004aac

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	; 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2230      	movs	r2, #48	; 0x30
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fccd 	bl	8006ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <SystemClock_Config+0xc8>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <SystemClock_Config+0xc8>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <SystemClock_Config+0xc8>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <SystemClock_Config+0xcc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <SystemClock_Config+0xcc>)
 8001692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <SystemClock_Config+0xcc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016bc:	2348      	movs	r3, #72	; 0x48
 80016be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016c4:	2303      	movs	r3, #3
 80016c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fbd7 	bl	8002e80 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016d8:	f000 fb1c 	bl	8001d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2102      	movs	r1, #2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 fe31 	bl	8003360 <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001704:	f000 fb06 	bl	8001d14 <Error_Handler>
  }
}
 8001708:	bf00      	nop
 800170a:	3750      	adds	r7, #80	; 0x50
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000

08001718 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e009      	b.n	800173e <_write+0x26>
		ITM_SendChar(*ptr++);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	60ba      	str	r2, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fee0 	bl	80014f8 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbf1      	blt.n	800172a <_write+0x12>
	}
	return len;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 // MX_USB_HOST_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f002 fcf3 	bl	8004144 <osDelay>
 800175e:	e7fb      	b.n	8001758 <StartDefaultTask+0x8>

08001760 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b09e      	sub	sp, #120	; 0x78
 8001764:	af08      	add	r7, sp, #32
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor1;
	t_bool sensor1_measured = FALSE;
 800176c:	2300      	movs	r3, #0
 800176e:	76fb      	strb	r3, [r7, #27]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8001782:	f107 001c 	add.w	r0, r7, #28
 8001786:	2304      	movs	r3, #4
 8001788:	9307      	str	r3, [sp, #28]
 800178a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800178e:	9306      	str	r3, [sp, #24]
 8001790:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179a:	9304      	str	r3, [sp, #16]
 800179c:	f44f 7361 	mov.w	r3, #900	; 0x384
 80017a0:	9303      	str	r3, [sp, #12]
 80017a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	f240 23ee 	movw	r3, #750	; 0x2ee
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2301      	movs	r3, #1
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2302      	movs	r3, #2
 80017b4:	2201      	movs	r2, #1
 80017b6:	2101      	movs	r1, #1
 80017b8:	f7ff fda8 	bl	800130c <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017c4:	f7ff fd90 	bl	80012e8 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 80017c8:	f002 fbee 	bl	8003fa8 <osKernelGetTickCount>
 80017cc:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {

	/*Select ADC Channel 1*/

	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 80017ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	dc2c      	bgt.n	8001830 <StartTaskSensor1+0xd0>
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <StartTaskSensor1+0x11c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d128      	bne.n	8001830 <StartTaskSensor1+0xd0>
	{
		sensor1_ON = TRUE;
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <StartTaskSensor1+0x120>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4619      	mov	r1, r3
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <StartTaskSensor1+0x124>)
 80017f8:	f000 fe7a 	bl	80024f0 <HAL_ADC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <StartTaskSensor1+0xa6>
		{
			Error_Handler();
 8001802:	f000 fa87 	bl	8001d14 <Error_Handler>
		}
		fsm_fire(&(fsm_s1->fsm));
 8001806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fb5b 	bl	8000ec4 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <StartTaskSensor1+0x128>)
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001814:	6899      	ldr	r1, [r3, #8]
 8001816:	2300      	movs	r3, #0
 8001818:	2200      	movs	r2, #0
 800181a:	f002 fd87 	bl	800432c <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <StartTaskSensor1+0x12c>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f107 011b 	add.w	r1, r7, #27
 8001826:	2300      	movs	r3, #0
 8001828:	2200      	movs	r2, #0
 800182a:	f002 fd7f 	bl	800432c <osMessageQueuePut>
 800182e:	e002      	b.n	8001836 <StartTaskSensor1+0xd6>

	}
	else sensor1_ON = FALSE;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <StartTaskSensor1+0x120>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]

	if(fsm_s1->fsm.current_state > 4)
 8001836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b04      	cmp	r3, #4
 800183c:	dd15      	ble.n	800186a <StartTaskSensor1+0x10a>
	{
		sensor1_measured = TRUE;
 800183e:	2301      	movs	r3, #1
 8001840:	76fb      	strb	r3, [r7, #27]
		fsm_fire(&(fsm_s1->fsm));
 8001842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb3d 	bl	8000ec4 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <StartTaskSensor1+0x128>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001850:	6899      	ldr	r1, [r3, #8]
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	f002 fd69 	bl	800432c <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <StartTaskSensor1+0x12c>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f107 011b 	add.w	r1, r7, #27
 8001862:	2300      	movs	r3, #0
 8001864:	2200      	movs	r2, #0
 8001866:	f002 fd61 	bl	800432c <osMessageQueuePut>
	}
	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 800186a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001870:	657b      	str	r3, [r7, #84]	; 0x54
    osDelayUntil(tDelay);
 8001872:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001874:	f002 fc94 	bl	80041a0 <osDelayUntil>
	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001878:	e7a9      	b.n	80017ce <StartTaskSensor1+0x6e>
 800187a:	bf00      	nop
 800187c:	20004a98 	.word	0x20004a98
 8001880:	20004aa0 	.word	0x20004aa0
 8001884:	20004a44 	.word	0x20004a44
 8001888:	20004bbc 	.word	0x20004bbc
 800188c:	20004aa8 	.word	0x20004aa8

08001890 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
  uint32_t tDelay = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  uint8_t master;
  t_bool sensor1_state = FALSE;
 800189c:	2300      	movs	r3, #0
 800189e:	727b      	strb	r3, [r7, #9]
  t_bool sensor2_state = FALSE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	723b      	strb	r3, [r7, #8]

  tDelay = osKernelGetTickCount();
 80018a4:	f002 fb80 	bl	8003fa8 <osKernelGetTickCount>
 80018a8:	60f8      	str	r0, [r7, #12]


	/*master 1 for all devices, 0 for GW*/
	master = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	72bb      	strb	r3, [r7, #10]

	Lora_inicio(master);  //0 es esclavo, 1 es maestro
 80018ae:	7abb      	ldrb	r3, [r7, #10]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f967 	bl	8001b84 <Lora_inicio>

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <StartTaskLoRa+0x88>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	f107 0109 	add.w	r1, r7, #9
 80018be:	2300      	movs	r3, #0
 80018c0:	2200      	movs	r2, #0
 80018c2:	f002 fda7 	bl	8004414 <osMessageQueueGet>
	osMessageQueueGet(myQueueDataSavedHandle, &sensor2_state, 0, 0);
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <StartTaskLoRa+0x88>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	2300      	movs	r3, #0
 80018d0:	2200      	movs	r2, #0
 80018d2:	f002 fd9f 	bl	8004414 <osMessageQueueGet>
	if (master == 1)
 80018d6:	7abb      	ldrb	r3, [r7, #10]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d111      	bne.n	8001900 <StartTaskLoRa+0x70>
	{
		if(sensor1_state && sensor2_state)
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d010      	beq.n	8001904 <StartTaskLoRa+0x74>
 80018e2:	7a3b      	ldrb	r3, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <StartTaskLoRa+0x74>
	//	if(sensor1_state)
		{
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	72fb      	strb	r3, [r7, #11]
 80018ec:	e004      	b.n	80018f8 <StartTaskLoRa+0x68>
			{
				Lora_envia();
 80018ee:	f000 f9cb 	bl	8001c88 <Lora_envia>
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	3301      	adds	r3, #1
 80018f6:	72fb      	strb	r3, [r7, #11]
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d9f7      	bls.n	80018ee <StartTaskLoRa+0x5e>
 80018fe:	e001      	b.n	8001904 <StartTaskLoRa+0x74>
			}
		}
	}
	else
	{
		Lora_recibe();
 8001900:	f000 f9a2 	bl	8001c48 <Lora_recibe>
	}
	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800190a:	3310      	adds	r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(tDelay);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f002 fc46 	bl	80041a0 <osDelayUntil>
	osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8001914:	e7cf      	b.n	80018b6 <StartTaskLoRa+0x26>
 8001916:	bf00      	nop
 8001918:	20004aa8 	.word	0x20004aa8

0800191c <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b09e      	sub	sp, #120	; 0x78
 8001920:	af08      	add	r7, sp, #32
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor2;
	t_bool sensor2_measured = FALSE;
 8001928:	2300      	movs	r3, #0
 800192a:	76fb      	strb	r3, [r7, #27]

	ADC_ChannelConfTypeDef sConfig = {0};
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]

	fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor2, ID_Device, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 800193e:	f107 001c 	add.w	r0, r7, #28
 8001942:	2304      	movs	r3, #4
 8001944:	9307      	str	r3, [sp, #28]
 8001946:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800194a:	9306      	str	r3, [sp, #24]
 800194c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001950:	9305      	str	r3, [sp, #20]
 8001952:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001956:	9304      	str	r3, [sp, #16]
 8001958:	f44f 7361 	mov.w	r3, #900	; 0x384
 800195c:	9303      	str	r3, [sp, #12]
 800195e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2302      	movs	r3, #2
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	2202      	movs	r2, #2
 8001972:	2101      	movs	r1, #1
 8001974:	f7ff fcca 	bl	800130c <sensor_initialization>
	fsm_sensor_init(fsm_s2, &sensor2);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001980:	f7ff fcb2 	bl	80012e8 <fsm_sensor_init>

	tDelay = osKernelGetTickCount();
 8001984:	f002 fb10 	bl	8003fa8 <osKernelGetTickCount>
 8001988:	6578      	str	r0, [r7, #84]	; 0x54
	/* Infinite loop */
	/* Infinite loop */
	for(;;)
	{
		/*Select ADC Channel 2*/
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 800198a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b04      	cmp	r3, #4
 8001990:	dc2c      	bgt.n	80019ec <StartTaskSensor2+0xd0>
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <StartTaskSensor2+0x11c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d128      	bne.n	80019ec <StartTaskSensor2+0xd0>
		{
			sensor2_ON = TRUE;
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <StartTaskSensor2+0x120>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <StartTaskSensor2+0x124>)
 80019b4:	f000 fd9c 	bl	80024f0 <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <StartTaskSensor2+0xa6>
			{
				Error_Handler();
 80019be:	f000 f9a9 	bl	8001d14 <Error_Handler>
			}
			fsm_fire(&(fsm_s2->fsm));
 80019c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fa7d 	bl	8000ec4 <fsm_fire>
			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <StartTaskSensor2+0x128>)
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2200      	movs	r2, #0
 80019d6:	f002 fca9 	bl	800432c <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <StartTaskSensor2+0x12c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f107 011b 	add.w	r1, r7, #27
 80019e2:	2300      	movs	r3, #0
 80019e4:	2200      	movs	r2, #0
 80019e6:	f002 fca1 	bl	800432c <osMessageQueuePut>
 80019ea:	e002      	b.n	80019f2 <StartTaskSensor2+0xd6>
		}
		else sensor2_ON = FALSE;
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <StartTaskSensor2+0x120>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]

		if(fsm_s2->fsm.current_state > 4)
 80019f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	dd15      	ble.n	8001a26 <StartTaskSensor2+0x10a>
		{
			sensor2_measured = TRUE;
 80019fa:	2301      	movs	r3, #1
 80019fc:	76fb      	strb	r3, [r7, #27]
			fsm_fire(&(fsm_s2->fsm));
 80019fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fa5f 	bl	8000ec4 <fsm_fire>

			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <StartTaskSensor2+0x128>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2200      	movs	r2, #0
 8001a12:	f002 fc8b 	bl	800432c <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <StartTaskSensor2+0x12c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	f107 011b 	add.w	r1, r7, #27
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2200      	movs	r2, #0
 8001a22:	f002 fc83 	bl	800432c <osMessageQueuePut>
		}

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(tDelay);
 8001a2e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a30:	f002 fbb6 	bl	80041a0 <osDelayUntil>
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001a34:	e7a9      	b.n	800198a <StartTaskSensor2+0x6e>
 8001a36:	bf00      	nop
 8001a38:	20004aa0 	.word	0x20004aa0
 8001a3c:	20004a98 	.word	0x20004a98
 8001a40:	20004a44 	.word	0x20004a44
 8001a44:	20004a9c 	.word	0x20004a9c
 8001a48:	20004aa8 	.word	0x20004aa8

08001a4c <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b09e      	sub	sp, #120	; 0x78
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 8001a58:	f002 faa6 	bl	8003fa8 <osKernelGetTickCount>
 8001a5c:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <StartTaskLEDs+0x108>)
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a66:	2300      	movs	r3, #0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f002 fcd3 	bl	8004414 <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <StartTaskLEDs+0x10c>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	f107 010c 	add.w	r1, r7, #12
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f002 fccb 	bl	8004414 <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 8001a7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d002      	beq.n	8001a8c <StartTaskLEDs+0x40>
 8001a86:	7d3b      	ldrb	r3, [r7, #20]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10c      	bne.n	8001aa6 <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <StartTaskLEDs+0x110>)
 8001a94:	f001 f9da 	bl	8002e4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a9e:	482f      	ldr	r0, [pc, #188]	; (8001b5c <StartTaskLEDs+0x110>)
 8001aa0:	f001 f9d4 	bl	8002e4c <HAL_GPIO_WritePin>
 8001aa4:	e039      	b.n	8001b1a <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 8001aa6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d129      	bne.n	8001b02 <StartTaskLEDs+0xb6>
 8001aae:	7d7b      	ldrb	r3, [r7, #21]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d126      	bne.n	8001b02 <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aba:	4828      	ldr	r0, [pc, #160]	; (8001b5c <StartTaskLEDs+0x110>)
 8001abc:	f001 f9c6 	bl	8002e4c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <StartTaskLEDs+0x82>
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d10c      	bne.n	8001ae8 <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	4821      	ldr	r0, [pc, #132]	; (8001b5c <StartTaskLEDs+0x110>)
 8001ad6:	f001 f9b9 	bl	8002e4c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	481e      	ldr	r0, [pc, #120]	; (8001b5c <StartTaskLEDs+0x110>)
 8001ae2:	f001 f9b3 	bl	8002e4c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001ae6:	e018      	b.n	8001b1a <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aee:	481b      	ldr	r0, [pc, #108]	; (8001b5c <StartTaskLEDs+0x110>)
 8001af0:	f001 f9ac 	bl	8002e4c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afa:	4818      	ldr	r0, [pc, #96]	; (8001b5c <StartTaskLEDs+0x110>)
 8001afc:	f001 f9a6 	bl	8002e4c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001b00:	e00b      	b.n	8001b1a <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b08:	4814      	ldr	r0, [pc, #80]	; (8001b5c <StartTaskLEDs+0x110>)
 8001b0a:	f001 f99f 	bl	8002e4c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b14:	4811      	ldr	r0, [pc, #68]	; (8001b5c <StartTaskLEDs+0x110>)
 8001b16:	f001 f999 	bl	8002e4c <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001b1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d002      	beq.n	8001b28 <StartTaskLEDs+0xdc>
 8001b22:	7cbb      	ldrb	r3, [r7, #18]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <StartTaskLEDs+0xea>
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b2e:	480b      	ldr	r0, [pc, #44]	; (8001b5c <StartTaskLEDs+0x110>)
 8001b30:	f001 f98c 	bl	8002e4c <HAL_GPIO_WritePin>
 8001b34:	e005      	b.n	8001b42 <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3c:	4807      	ldr	r0, [pc, #28]	; (8001b5c <StartTaskLEDs+0x110>)
 8001b3e:	f001 f985 	bl	8002e4c <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b48:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 8001b4a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b4c:	f002 fb28 	bl	80041a0 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001b50:	e785      	b.n	8001a5e <StartTaskLEDs+0x12>
 8001b52:	bf00      	nop
 8001b54:	20004bbc 	.word	0x20004bbc
 8001b58:	20004a9c 	.word	0x20004a9c
 8001b5c:	40020c00 	.word	0x40020c00

08001b60 <save_new_data>:
  }
  /* USER CODE END StartTaskLEDs */
}

void save_new_data(sensor_buf_t data)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ringbuf_put(&data_ring_buff, data);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <save_new_data+0x20>)
 8001b72:	f000 f8d6 	bl	8001d22 <ringbuf_put>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20004be0 	.word	0x20004be0

08001b84 <Lora_inicio>:

void Lora_inicio(int init){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <Lora_inicio+0xa4>)
 8001b8e:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <Lora_inicio+0xa8>)
 8001b90:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <Lora_inicio+0xa4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <Lora_inicio+0xa4>)
 8001b9a:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <Lora_inicio+0xac>)
 8001b9c:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <Lora_inicio+0xa4>)
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <Lora_inicio+0xa4>)
 8001ba6:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <Lora_inicio+0xa8>)
 8001ba8:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <Lora_inicio+0xa4>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <Lora_inicio+0xa4>)
 8001bb2:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <Lora_inicio+0xb0>)
 8001bb4:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <Lora_inicio+0xb4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <Lora_inicio+0xb4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <Lora_inicio+0xb4>)
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <Lora_inicio+0xa4>)
 8001bc8:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8001bca:	481c      	ldr	r0, [pc, #112]	; (8001c3c <Lora_inicio+0xb8>)
 8001bcc:	f005 fb38 	bl	8007240 <puts>
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <Lora_inicio+0xb4>)
 8001be0:	f7ff f87a 	bl	8000cd8 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	printf("Done configuring LoRaModule\r\n");
 8001be4:	4816      	ldr	r0, [pc, #88]	; (8001c40 <Lora_inicio+0xbc>)
 8001be6:	f005 fb2b 	bl	8007240 <puts>
	while (ret!=1){
 8001bea:	e015      	b.n	8001c18 <Lora_inicio+0x94>
		if (init == 1) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <Lora_inicio+0x7e>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001bf2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	480f      	ldr	r0, [pc, #60]	; (8001c38 <Lora_inicio+0xb4>)
 8001bfa:	f7fe ffd6 	bl	8000baa <SX1278_LoRaEntryTx>
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	e006      	b.n	8001c10 <Lora_inicio+0x8c>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 8001c02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c06:	2110      	movs	r1, #16
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <Lora_inicio+0xb4>)
 8001c0a:	f7fe ff25 	bl	8000a58 <SX1278_LoRaEntryRx>
 8001c0e:	60f8      	str	r0, [r7, #12]
		}
		printf("ret: %d\n", ret);
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <Lora_inicio+0xc0>)
 8001c14:	f005 faa0 	bl	8007158 <iprintf>
	while (ret!=1){
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d1e6      	bne.n	8001bec <Lora_inicio+0x68>
	}
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20004bc4 	.word	0x20004bc4
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020000 	.word	0x40020000
 8001c34:	20004c60 	.word	0x20004c60
 8001c38:	20004ab0 	.word	0x20004ab0
 8001c3c:	0800829c 	.word	0x0800829c
 8001c40:	080082b8 	.word	0x080082b8
 8001c44:	080082d8 	.word	0x080082d8

08001c48 <Lora_recibe>:
void Lora_recibe(void){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b092      	sub	sp, #72	; 0x48
 8001c4c:	af00      	add	r7, sp, #0
	int ret;
	char buffer[64];
	ret = SX1278_LoRaRxPacket(&SX1278);
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <Lora_recibe+0x38>)
 8001c50:	f7fe ff67 	bl	8000b22 <SX1278_LoRaRxPacket>
 8001c54:	4603      	mov	r3, r0
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
	if (ret > 0) {
 8001c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dd0c      	ble.n	8001c78 <Lora_recibe+0x30>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8001c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <Lora_recibe+0x38>)
 8001c68:	f7ff f85e 	bl	8000d28 <SX1278_read>
		printf("Content (%d): %s\r\n", ret, buffer);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <Lora_recibe+0x3c>)
 8001c74:	f005 fa70 	bl	8007158 <iprintf>
	}
}
 8001c78:	bf00      	nop
 8001c7a:	3748      	adds	r7, #72	; 0x48
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20004ab0 	.word	0x20004ab0
 8001c84:	080082e4 	.word	0x080082e4

08001c88 <Lora_envia>:
void Lora_envia(void){
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	b09d      	sub	sp, #116	; 0x74
 8001c8c:	af06      	add	r7, sp, #24
	int ret;
	char buffer[64];
	int message_length;
	sensor_buf_t data;

	data = ringbuf_get(&data_ring_buff);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	491c      	ldr	r1, [pc, #112]	; (8001d04 <Lora_envia+0x7c>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f8a8 	bl	8001de8 <ringbuf_get>

	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d", data.Device_ID, data.Sensor_ID, data.measure, data.alarm, data.error, data.threshold_L, data.threshold_H);
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	461e      	mov	r6, r3
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	469c      	mov	ip, r3
 8001ca0:	893b      	ldrh	r3, [r7, #8]
 8001ca2:	7aba      	ldrb	r2, [r7, #10]
 8001ca4:	7af9      	ldrb	r1, [r7, #11]
 8001ca6:	89b8      	ldrh	r0, [r7, #12]
 8001ca8:	4604      	mov	r4, r0
 8001caa:	89f8      	ldrh	r0, [r7, #14]
 8001cac:	4605      	mov	r5, r0
 8001cae:	f107 0010 	add.w	r0, r7, #16
 8001cb2:	9504      	str	r5, [sp, #16]
 8001cb4:	9403      	str	r4, [sp, #12]
 8001cb6:	9102      	str	r1, [sp, #8]
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	4632      	mov	r2, r6
 8001cc0:	4911      	ldr	r1, [pc, #68]	; (8001d08 <Lora_envia+0x80>)
 8001cc2:	f005 fad5 	bl	8007270 <siprintf>
 8001cc6:	6578      	str	r0, [r7, #84]	; 0x54
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480e      	ldr	r0, [pc, #56]	; (8001d0c <Lora_envia+0x84>)
 8001cd4:	f7fe ff69 	bl	8000baa <SX1278_LoRaEntryTx>
 8001cd8:	6538      	str	r0, [r7, #80]	; 0x50
	printf("Sending %s\r\n", buffer);
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <Lora_envia+0x88>)
 8001ce2:	f005 fa39 	bl	8007158 <iprintf>
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	f107 0110 	add.w	r1, r7, #16
 8001cee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <Lora_envia+0x84>)
 8001cf4:	f7fe ffb1 	bl	8000c5a <SX1278_LoRaTxPacket>
 8001cf8:	6538      	str	r0, [r7, #80]	; 0x50
}
 8001cfa:	bf00      	nop
 8001cfc:	375c      	adds	r7, #92	; 0x5c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20004be0 	.word	0x20004be0
 8001d08:	080082f8 	.word	0x080082f8
 8001d0c:	20004ab0 	.word	0x20004ab0
 8001d10:	08008318 	.word	0x08008318

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <ringbuf_put>:
  _this->tail = 0;
}

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001d22:	b490      	push	{r4, r7}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if((NEXT(_this->head) != 0) && (NEXT(_this->head)!= _this->tail)){
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d023      	beq.n	8001d80 <ringbuf_put+0x5e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d01e      	beq.n	8001d80 <ringbuf_put+0x5e>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	d01a      	beq.n	8001d80 <ringbuf_put+0x5e>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d013      	beq.n	8001d80 <ringbuf_put+0x5e>
  _this->buf[_this->head] = item;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	461c      	mov	r4, r3
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	679a      	str	r2, [r3, #120]	; 0x78
 8001d7e:	e02e      	b.n	8001dde <ringbuf_put+0xbc>
  }
  else
  {
	  _this->buf[_this->head] = item;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	461c      	mov	r4, r3
 8001d92:	463b      	mov	r3, r7
 8001d94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(NEXT(_this->head) == _this->tail)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d016      	beq.n	8001dd2 <ringbuf_put+0xb0>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d10f      	bne.n	8001dd2 <ringbuf_put+0xb0>
	  {
		  _this->head = _this->tail;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = NEXT(_this->tail);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d003      	beq.n	8001dca <ringbuf_put+0xa8>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	e000      	b.n	8001dcc <ringbuf_put+0xaa>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001dd0:	e005      	b.n	8001dde <ringbuf_put+0xbc>
	  }
	  else
	  {
		  _this->head = 0;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2209      	movs	r2, #9
 8001ddc:	67da      	str	r2, [r3, #124]	; 0x7c
	  }
  }
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc90      	pop	{r4, r7}
 8001de6:	4770      	bx	lr

08001de8 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001de8:	b490      	push	{r4, r7}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d01e      	beq.n	8001e3c <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	18ca      	adds	r2, r1, r3
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d00a      	beq.n	8001e36 <ringbuf_get+0x4e>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d005      	beq.n	8001e36 <ringbuf_get+0x4e>
		{
			_this->tail++;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e34:	e002      	b.n	8001e3c <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	67da      	str	r2, [r3, #124]	; 0x7c
		}
    }
	return item;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	461c      	mov	r4, r3
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e46:	6020      	str	r0, [r4, #0]
 8001e48:	6061      	str	r1, [r4, #4]
 8001e4a:	60a2      	str	r2, [r4, #8]
}
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc90      	pop	{r4, r7}
 8001e54:	4770      	bx	lr
	...

08001e58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <MX_SPI1_Init+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_SPI1_Init+0x64>)
 8001eaa:	f001 fc17 	bl	80036dc <HAL_SPI_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001eb4:	f7ff ff2e 	bl	8001d14 <Error_Handler>
  }

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20004c60 	.word	0x20004c60
 8001ec0:	40013000 	.word	0x40013000

08001ec4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_SPI_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12b      	bne.n	8001f3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f1e:	23e0      	movs	r3, #224	; 0xe0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_SPI_MspInit+0x8c>)
 8001f3a:	f000 fded 	bl	8002b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_MspInit+0x54>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <HAL_MspInit+0x54>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_MspInit+0x54>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_MspInit+0x54>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_MspInit+0x54>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_MspInit+0x54>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	210f      	movs	r1, #15
 8001f96:	f06f 0001 	mvn.w	r0, #1
 8001f9a:	f000 fd94 	bl	8002ac6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 f918 	bl	8002218 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fe8:	f003 ff94 	bl	8005f14 <xTaskGetSchedulerState>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ff2:	f004 fd69 	bl	8006ac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e00a      	b.n	8002022 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800200c:	f3af 8000 	nop.w
 8002010:	4601      	mov	r1, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	60ba      	str	r2, [r7, #8]
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	dbf0      	blt.n	800200c <_read+0x12>
	}

return len;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205c:	605a      	str	r2, [r3, #4]
	return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <_sbrk+0x50>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x16>
		heap_end = &end;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <_sbrk+0x50>)
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <_sbrk+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <_sbrk+0x50>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <_sbrk+0x50>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	466a      	mov	r2, sp
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d907      	bls.n	80020d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020c6:	f004 ff61 	bl	8006f8c <__errno>
 80020ca:	4602      	mov	r2, r0
 80020cc:	230c      	movs	r3, #12
 80020ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e006      	b.n	80020e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <_sbrk+0x50>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a03      	ldr	r2, [pc, #12]	; (80020ec <_sbrk+0x50>)
 80020e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000130 	.word	0x20000130
 80020f0:	20004d00 	.word	0x20004d00

080020f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <SystemInit+0x28>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <SystemInit+0x28>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <SystemInit+0x28>)
 800210a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800210e:	609a      	str	r2, [r3, #8]
#endif
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002126:	e003      	b.n	8002130 <LoopCopyDataInit>

08002128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800212a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800212c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800212e:	3104      	adds	r1, #4

08002130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002138:	d3f6      	bcc.n	8002128 <CopyDataInit>
  ldr  r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800213c:	e002      	b.n	8002144 <LoopFillZerobss>

0800213e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800213e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002140:	f842 3b04 	str.w	r3, [r2], #4

08002144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002148:	d3f9      	bcc.n	800213e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800214a:	f7ff ffd3 	bl	80020f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f004 ff23 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7ff f9f9 	bl	8001548 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800215c:	08008510 	.word	0x08008510
  ldr  r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002164:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 8002168:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 800216c:	20004d00 	.word	0x20004d00

08002170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 fc87 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fed4 	bl	8001f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fc91 	bl	8002afe <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 fc67 	bl	8002ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200000a0 	.word	0x200000a0
 8002210:	200000a8 	.word	0x200000a8
 8002214:	200000a4 	.word	0x200000a4

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200000a8 	.word	0x200000a8
 800223c:	20004cb8 	.word	0x20004cb8

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20004cb8 	.word	0x20004cb8

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_Delay+0x40>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200000a8 	.word	0x200000a8

0800229c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e033      	b.n	800231a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fdac 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e2:	f023 0302 	bic.w	r3, r3, #2
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fa30 	bl	8002754 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
 800230a:	e001      	b.n	8002310 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_ADC_Start+0x1a>
 800233a:	2302      	movs	r3, #2
 800233c:	e08a      	b.n	8002454 <HAL_ADC_Start+0x130>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d018      	beq.n	8002386 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <HAL_ADC_Start+0x13c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <HAL_ADC_Start+0x140>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0c9a      	lsrs	r2, r3, #18
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002378:	e002      	b.n	8002380 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f9      	bne.n	800237a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d15e      	bne.n	8002452 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f023 0206 	bic.w	r2, r3, #6
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	645a      	str	r2, [r3, #68]	; 0x44
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_ADC_Start+0x144>)
 80023f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11c      	bne.n	8002452 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e013      	b.n	8002452 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_ADC_Start+0x148>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d10e      	bne.n	8002452 <HAL_ADC_Start+0x12e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002450:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	200000a0 	.word	0x200000a0
 8002464:	431bde83 	.word	0x431bde83
 8002468:	40012300 	.word	0x40012300
 800246c:	40012000 	.word	0x40012000

08002470 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Stop+0x16>
 8002482:	2302      	movs	r3, #2
 8002484:	e021      	b.n	80024ca <HAL_ADC_Stop+0x5a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1c>
 8002508:	2302      	movs	r3, #2
 800250a:	e113      	b.n	8002734 <HAL_ADC_ConfigChannel+0x244>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b09      	cmp	r3, #9
 800251a:	d925      	bls.n	8002568 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68d9      	ldr	r1, [r3, #12]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	2207      	movs	r2, #7
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43da      	mvns	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	400a      	ands	r2, r1
 8002540:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68d9      	ldr	r1, [r3, #12]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	4618      	mov	r0, r3
 8002554:	4603      	mov	r3, r0
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4403      	add	r3, r0
 800255a:	3b1e      	subs	r3, #30
 800255c:	409a      	lsls	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	e022      	b.n	80025ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6919      	ldr	r1, [r3, #16]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	2207      	movs	r2, #7
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	400a      	ands	r2, r1
 800258a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6919      	ldr	r1, [r3, #16]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4403      	add	r3, r0
 80025a4:	409a      	lsls	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d824      	bhi.n	8002600 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3b05      	subs	r3, #5
 80025c8:	221f      	movs	r2, #31
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	400a      	ands	r2, r1
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4618      	mov	r0, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	3b05      	subs	r3, #5
 80025f2:	fa00 f203 	lsl.w	r2, r0, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
 80025fe:	e04c      	b.n	800269a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d824      	bhi.n	8002652 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b23      	subs	r3, #35	; 0x23
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43da      	mvns	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	400a      	ands	r2, r1
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b23      	subs	r3, #35	; 0x23
 8002644:	fa00 f203 	lsl.w	r2, r0, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
 8002650:	e023      	b.n	800269a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b41      	subs	r3, #65	; 0x41
 8002664:	221f      	movs	r2, #31
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b41      	subs	r3, #65	; 0x41
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800269a:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_ADC_ConfigChannel+0x250>)
 800269c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a28      	ldr	r2, [pc, #160]	; (8002744 <HAL_ADC_ConfigChannel+0x254>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10f      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d10b      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_ADC_ConfigChannel+0x254>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d12b      	bne.n	800272a <HAL_ADC_ConfigChannel+0x23a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_ADC_ConfigChannel+0x258>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d003      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0x1f4>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d122      	bne.n	800272a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_ADC_ConfigChannel+0x258>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d111      	bne.n	800272a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_ADC_ConfigChannel+0x25c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_ADC_ConfigChannel+0x260>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9a      	lsrs	r2, r3, #18
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800271c:	e002      	b.n	8002724 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3b01      	subs	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f9      	bne.n	800271e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40012300 	.word	0x40012300
 8002744:	40012000 	.word	0x40012000
 8002748:	10000012 	.word	0x10000012
 800274c:	200000a0 	.word	0x200000a0
 8002750:	431bde83 	.word	0x431bde83

08002754 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800275c:	4b79      	ldr	r3, [pc, #484]	; (8002944 <ADC_Init+0x1f0>)
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	4a58      	ldr	r2, [pc, #352]	; (8002948 <ADC_Init+0x1f4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800281c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e00f      	b.n	8002852 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002850:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0202 	bic.w	r2, r2, #2
 8002860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7e1b      	ldrb	r3, [r3, #24]
 800286c:	005a      	lsls	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01b      	beq.n	80028b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800289e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	3b01      	subs	r3, #1
 80028ac:	035a      	lsls	r2, r3, #13
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	e007      	b.n	80028c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	051a      	lsls	r2, r3, #20
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800290a:	025a      	lsls	r2, r3, #9
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	029a      	lsls	r2, r3, #10
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40012300 	.word	0x40012300
 8002948:	0f000001 	.word	0x0f000001

0800294c <__NVIC_SetPriorityGrouping>:
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_GetPriorityGrouping>:
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <__NVIC_GetPriorityGrouping+0x18>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_SetPriority>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	db0a      	blt.n	80029da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	490c      	ldr	r1, [pc, #48]	; (80029fc <__NVIC_SetPriority+0x4c>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	440b      	add	r3, r1
 80029d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029d8:	e00a      	b.n	80029f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4908      	ldr	r1, [pc, #32]	; (8002a00 <__NVIC_SetPriority+0x50>)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	3b04      	subs	r3, #4
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	440b      	add	r3, r1
 80029ee:	761a      	strb	r2, [r3, #24]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <NVIC_EncodePriority>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f1c3 0307 	rsb	r3, r3, #7
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	bf28      	it	cs
 8002a22:	2304      	movcs	r3, #4
 8002a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d902      	bls.n	8002a34 <NVIC_EncodePriority+0x30>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3b03      	subs	r3, #3
 8002a32:	e000      	b.n	8002a36 <NVIC_EncodePriority+0x32>
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	401a      	ands	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	43d9      	mvns	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	4313      	orrs	r3, r2
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <SysTick_Config>:
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7c:	d301      	bcc.n	8002a82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00f      	b.n	8002aa2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <SysTick_Config+0x40>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f7ff ff8e 	bl	80029b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <SysTick_Config+0x40>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <SysTick_Config+0x40>)
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000e010 	.word	0xe000e010

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ff47 	bl	800294c <__NVIC_SetPriorityGrouping>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad8:	f7ff ff5c 	bl	8002994 <__NVIC_GetPriorityGrouping>
 8002adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ff8e 	bl	8002a04 <NVIC_EncodePriority>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff5d 	bl	80029b0 <__NVIC_SetPriority>
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffb0 	bl	8002a6c <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e159      	b.n	8002de8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f040 8148 	bne.w	8002de2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d00b      	beq.n	8002b72 <HAL_GPIO_Init+0x5a>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d007      	beq.n	8002b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b66:	2b11      	cmp	r3, #17
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b12      	cmp	r3, #18
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0xfc>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b12      	cmp	r3, #18
 8002c12:	d123      	bne.n	8002c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a2 	beq.w	8002de2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_GPIO_Init+0x2e4>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a55      	ldr	r2, [pc, #340]	; (8002dfc <HAL_GPIO_Init+0x2e4>)
 8002ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_GPIO_Init+0x2e4>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cba:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <HAL_GPIO_Init+0x2e8>)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_GPIO_Init+0x2ec>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d019      	beq.n	8002d1a <HAL_GPIO_Init+0x202>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a47      	ldr	r2, [pc, #284]	; (8002e08 <HAL_GPIO_Init+0x2f0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_GPIO_Init+0x1fe>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_GPIO_Init+0x2f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00d      	beq.n	8002d12 <HAL_GPIO_Init+0x1fa>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a45      	ldr	r2, [pc, #276]	; (8002e10 <HAL_GPIO_Init+0x2f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <HAL_GPIO_Init+0x1f6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <HAL_GPIO_Init+0x2fc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_GPIO_Init+0x1f2>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e008      	b.n	8002d1c <HAL_GPIO_Init+0x204>
 8002d0a:	2307      	movs	r3, #7
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x204>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e004      	b.n	8002d1c <HAL_GPIO_Init+0x204>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e002      	b.n	8002d1c <HAL_GPIO_Init+0x204>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x204>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f002 0203 	and.w	r2, r2, #3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4093      	lsls	r3, r2
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d2c:	4934      	ldr	r1, [pc, #208]	; (8002e00 <HAL_GPIO_Init+0x2e8>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d5e:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d88:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_GPIO_Init+0x300>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	f67f aea2 	bls.w	8002b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40013c00 	.word	0x40013c00

08002e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e25b      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	4ba3      	ldr	r3, [pc, #652]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4ba0      	ldr	r3, [pc, #640]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b9d      	ldr	r3, [pc, #628]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b99      	ldr	r3, [pc, #612]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e236      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b91      	ldr	r3, [pc, #580]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a90      	ldr	r2, [pc, #576]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b8b      	ldr	r3, [pc, #556]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8a      	ldr	r2, [pc, #552]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a87      	ldr	r2, [pc, #540]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b84      	ldr	r3, [pc, #528]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a83      	ldr	r2, [pc, #524]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a80      	ldr	r2, [pc, #512]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7ff f982 	bl	8002240 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7ff f97e 	bl	8002240 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1fb      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff f96e 	bl	8002240 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff f96a 	bl	8002240 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1e7      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1bb      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4952      	ldr	r1, [pc, #328]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b4f      	ldr	r3, [pc, #316]	; (8003130 <HAL_RCC_OscConfig+0x2b0>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7ff f923 	bl	8002240 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7ff f91f 	bl	8002240 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e19c      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b46      	ldr	r3, [pc, #280]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4940      	ldr	r1, [pc, #256]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_OscConfig+0x2b0>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7ff f902 	bl	8002240 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7ff f8fe 	bl	8002240 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e17b      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d030      	beq.n	80030cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_OscConfig+0x2b4>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7ff f8e2 	bl	8002240 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7ff f8de 	bl	8002240 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e15b      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
 800309e:	e015      	b.n	80030cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_OscConfig+0x2b4>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7ff f8cb 	bl	8002240 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7ff f8c7 	bl	8002240 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e144      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a0 	beq.w	800321a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x2b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d121      	bne.n	800315a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCC_OscConfig+0x2b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <HAL_RCC_OscConfig+0x2b8>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7ff f88d 	bl	8002240 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	e011      	b.n	800314e <HAL_RCC_OscConfig+0x2ce>
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	42470000 	.word	0x42470000
 8003134:	42470e80 	.word	0x42470e80
 8003138:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7ff f880 	bl	8002240 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0fd      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_OscConfig+0x4d4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x2f0>
 8003162:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a7c      	ldr	r2, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e01c      	b.n	80031aa <HAL_RCC_OscConfig+0x32a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x312>
 8003178:	4b77      	ldr	r3, [pc, #476]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a76      	ldr	r2, [pc, #472]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b74      	ldr	r3, [pc, #464]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a73      	ldr	r2, [pc, #460]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e00b      	b.n	80031aa <HAL_RCC_OscConfig+0x32a>
 8003192:	4b71      	ldr	r3, [pc, #452]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a70      	ldr	r2, [pc, #448]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a6d      	ldr	r2, [pc, #436]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d015      	beq.n	80031de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7ff f845 	bl	8002240 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7ff f841 	bl	8002240 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0bc      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ee      	beq.n	80031ba <HAL_RCC_OscConfig+0x33a>
 80031dc:	e014      	b.n	8003208 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031de:	f7ff f82f 	bl	8002240 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7ff f82b 	bl	8002240 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0a6      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d105      	bne.n	800321a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320e:	4b52      	ldr	r3, [pc, #328]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a51      	ldr	r2, [pc, #324]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8092 	beq.w	8003348 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003224:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d05c      	beq.n	80032ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d141      	bne.n	80032bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003238:	4b48      	ldr	r3, [pc, #288]	; (800335c <HAL_RCC_OscConfig+0x4dc>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe ffff 	bl	8002240 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003246:	f7fe fffb 	bl	8002240 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e078      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	019b      	lsls	r3, r3, #6
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	4933      	ldr	r1, [pc, #204]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328e:	4b33      	ldr	r3, [pc, #204]	; (800335c <HAL_RCC_OscConfig+0x4dc>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe ffd4 	bl	8002240 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe ffd0 	bl	8002240 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e04d      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x41c>
 80032ba:	e045      	b.n	8003348 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x4dc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe ffbd 	bl	8002240 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe ffb9 	bl	8002240 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e036      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x44a>
 80032e8:	e02e      	b.n	8003348 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e029      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	429a      	cmp	r2, r3
 8003308:	d11c      	bne.n	8003344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d115      	bne.n	8003344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800331e:	4013      	ands	r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d10d      	bne.n	8003344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000
 8003358:	40023800 	.word	0x40023800
 800335c:	42470060 	.word	0x42470060

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe fef6 	bl	8002240 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe fef2 	bl	8002240 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4601      	mov	r1, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	fa21 f303 	lsr.w	r3, r1, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fe56 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08008458 	.word	0x08008458
 8003524:	200000a0 	.word	0x200000a0
 8003528:	200000a4 	.word	0x200000a4

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	2300      	movs	r3, #0
 800353c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d007      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x32>
 800354e:	2b08      	cmp	r3, #8
 8003550:	d008      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x38>
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 80b4 	bne.w	80036c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800355a:	60bb      	str	r3, [r7, #8]
       break;
 800355c:	e0b3      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800355e:	4b5e      	ldr	r3, [pc, #376]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003560:	60bb      	str	r3, [r7, #8]
      break;
 8003562:	e0b0      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003564:	4b5a      	ldr	r3, [pc, #360]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800356e:	4b58      	ldr	r3, [pc, #352]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d04a      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357a:	4b55      	ldr	r3, [pc, #340]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	f04f 0400 	mov.w	r4, #0
 8003584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	ea03 0501 	and.w	r5, r3, r1
 8003590:	ea04 0602 	and.w	r6, r4, r2
 8003594:	4629      	mov	r1, r5
 8003596:	4632      	mov	r2, r6
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	0154      	lsls	r4, r2, #5
 80035a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035a6:	014b      	lsls	r3, r1, #5
 80035a8:	4619      	mov	r1, r3
 80035aa:	4622      	mov	r2, r4
 80035ac:	1b49      	subs	r1, r1, r5
 80035ae:	eb62 0206 	sbc.w	r2, r2, r6
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	f04f 0400 	mov.w	r4, #0
 80035ba:	0194      	lsls	r4, r2, #6
 80035bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035c0:	018b      	lsls	r3, r1, #6
 80035c2:	1a5b      	subs	r3, r3, r1
 80035c4:	eb64 0402 	sbc.w	r4, r4, r2
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	00e2      	lsls	r2, r4, #3
 80035d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035d6:	00d9      	lsls	r1, r3, #3
 80035d8:	460b      	mov	r3, r1
 80035da:	4614      	mov	r4, r2
 80035dc:	195b      	adds	r3, r3, r5
 80035de:	eb44 0406 	adc.w	r4, r4, r6
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	0262      	lsls	r2, r4, #9
 80035ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035f0:	0259      	lsls	r1, r3, #9
 80035f2:	460b      	mov	r3, r1
 80035f4:	4614      	mov	r4, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	4621      	mov	r1, r4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	f7fc fe3c 	bl	8000280 <__aeabi_uldivmod>
 8003608:	4603      	mov	r3, r0
 800360a:	460c      	mov	r4, r1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e049      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003610:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	ea03 0501 	and.w	r5, r3, r1
 8003626:	ea04 0602 	and.w	r6, r4, r2
 800362a:	4629      	mov	r1, r5
 800362c:	4632      	mov	r2, r6
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	0154      	lsls	r4, r2, #5
 8003638:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800363c:	014b      	lsls	r3, r1, #5
 800363e:	4619      	mov	r1, r3
 8003640:	4622      	mov	r2, r4
 8003642:	1b49      	subs	r1, r1, r5
 8003644:	eb62 0206 	sbc.w	r2, r2, r6
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	0194      	lsls	r4, r2, #6
 8003652:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003656:	018b      	lsls	r3, r1, #6
 8003658:	1a5b      	subs	r3, r3, r1
 800365a:	eb64 0402 	sbc.w	r4, r4, r2
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800366c:	00d9      	lsls	r1, r3, #3
 800366e:	460b      	mov	r3, r1
 8003670:	4614      	mov	r4, r2
 8003672:	195b      	adds	r3, r3, r5
 8003674:	eb44 0406 	adc.w	r4, r4, r6
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	02a2      	lsls	r2, r4, #10
 8003682:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003686:	0299      	lsls	r1, r3, #10
 8003688:	460b      	mov	r3, r1
 800368a:	4614      	mov	r4, r2
 800368c:	4618      	mov	r0, r3
 800368e:	4621      	mov	r1, r4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f04f 0400 	mov.w	r4, #0
 8003696:	461a      	mov	r2, r3
 8003698:	4623      	mov	r3, r4
 800369a:	f7fc fdf1 	bl	8000280 <__aeabi_uldivmod>
 800369e:	4603      	mov	r3, r0
 80036a0:	460c      	mov	r4, r1
 80036a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036c2:	60bb      	str	r3, [r7, #8]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	68bb      	ldr	r3, [r7, #8]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400
 80036d8:	007a1200 	.word	0x007a1200

080036dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e056      	b.n	800379c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fe fbdb 	bl	8001ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	ea42 0103 	orr.w	r1, r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f003 0104 	and.w	r1, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_SPI_Transmit+0x22>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e11e      	b.n	8003a04 <HAL_SPI_Transmit+0x260>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ce:	f7fe fd37 	bl	8002240 <HAL_GetTick>
 80037d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037e8:	e103      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x52>
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037fa:	e0fa      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2203      	movs	r2, #3
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003842:	d107      	bne.n	8003854 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003852:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d007      	beq.n	8003872 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d14b      	bne.n	8003914 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_SPI_Transmit+0xe6>
 8003884:	8afb      	ldrh	r3, [r7, #22]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d13e      	bne.n	8003908 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038ae:	e02b      	b.n	8003908 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d112      	bne.n	80038e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	1c9a      	adds	r2, r3, #2
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80038e2:	e011      	b.n	8003908 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e4:	f7fe fcac 	bl	8002240 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d803      	bhi.n	80038fc <HAL_SPI_Transmit+0x158>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d102      	bne.n	8003902 <HAL_SPI_Transmit+0x15e>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003906:	e074      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ce      	bne.n	80038b0 <HAL_SPI_Transmit+0x10c>
 8003912:	e04c      	b.n	80039ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_Transmit+0x17e>
 800391c:	8afb      	ldrh	r3, [r7, #22]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d140      	bne.n	80039a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003948:	e02c      	b.n	80039a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d113      	bne.n	8003980 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	86da      	strh	r2, [r3, #54]	; 0x36
 800397e:	e011      	b.n	80039a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003980:	f7fe fc5e 	bl	8002240 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d803      	bhi.n	8003998 <HAL_SPI_Transmit+0x1f4>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d102      	bne.n	800399e <HAL_SPI_Transmit+0x1fa>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a2:	e026      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1cd      	bne.n	800394a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa44 	bl	8003e40 <SPI_EndRxTxTransaction>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e000      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80039f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x26>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e18a      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x33c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe fc01 	bl	8002240 <HAL_GetTick>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00f      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x70>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d107      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x68>
 8003a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a7a:	e15b      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x82>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x82>
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a94:	e14e      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	887a      	ldrh	r2, [r7, #2]
 8003aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d007      	beq.n	8003afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d178      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x10a>
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d166      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	1c9a      	adds	r2, r3, #2
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3a:	e053      	b.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d11b      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x176>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x176>
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d113      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d119      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bc4:	f7fe fb3c 	bl	8002240 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d807      	bhi.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d003      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003be2:	e0a7      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1a6      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x130>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1a1      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x130>
 8003bf8:	e07c      	b.n	8003cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x1fc>
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d16b      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c2e:	e057      	b.n	8003ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d11c      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x26c>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d017      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x26c>
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d114      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d119      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x2ae>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d014      	beq.n	8003cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cba:	f7fe fac1 	bl	8002240 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d803      	bhi.n	8003cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d102      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cde:	e029      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1a2      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x224>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d19d      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f8a1 	bl	8003e40 <SPI_EndRxTxTransaction>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d006      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d10:	e010      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	e000      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5e:	b2db      	uxtb	r3, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7c:	e04c      	b.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d048      	beq.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d86:	f7fe fa5b 	bl	8002240 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d902      	bls.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d13d      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003daa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db4:	d111      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbe:	d004      	beq.n	8003dca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d107      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	d10f      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e00f      	b.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4013      	ands	r3, r2
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d1a3      	bne.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <SPI_EndRxTxTransaction+0x7c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <SPI_EndRxTxTransaction+0x80>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0d5b      	lsrs	r3, r3, #21
 8003e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d112      	bne.n	8003e92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff78 	bl	8003d6c <SPI_WaitFlagStateUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e00f      	b.n	8003eb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d0f2      	beq.n	8003e92 <SPI_EndRxTxTransaction+0x52>
 8003eac:	e000      	b.n	8003eb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003eae:	bf00      	nop
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200000a0 	.word	0x200000a0
 8003ec0:	165e9f81 	.word	0x165e9f81

08003ec4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eda:	f3ef 8305 	mrs	r3, IPSR
 8003ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eea:	607b      	str	r3, [r7, #4]
  return(result);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <osKernelInitialize+0x3a>
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <osKernelInitialize+0x64>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d103      	bne.n	8003f0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f06:	f06f 0305 	mvn.w	r3, #5
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e00c      	b.n	8003f28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <osKernelInitialize+0x64>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <osKernelInitialize+0x64>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e002      	b.n	8003f28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000134 	.word	0x20000134

08003f3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f42:	f3ef 8305 	mrs	r3, IPSR
 8003f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f52:	607b      	str	r3, [r7, #4]
  return(result);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <osKernelStart+0x3a>
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <osKernelStart+0x68>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d103      	bne.n	8003f76 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f6e:	f06f 0305 	mvn.w	r3, #5
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e010      	b.n	8003f98 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <osKernelStart+0x68>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d109      	bne.n	8003f92 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f7e:	f7ff ffa1 	bl	8003ec4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <osKernelStart+0x68>)
 8003f84:	2202      	movs	r2, #2
 8003f86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f88:	f001 fb7c 	bl	8005684 <vTaskStartScheduler>
      stat = osOK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e002      	b.n	8003f98 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
 8003f96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000134 	.word	0x20000134

08003fa8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fae:	f3ef 8305 	mrs	r3, IPSR
 8003fb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	607b      	str	r3, [r7, #4]
  return(result);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fca:	603b      	str	r3, [r7, #0]
  return(result);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <osKernelGetTickCount+0x3a>
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <osKernelGetTickCount+0x4c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d103      	bne.n	8003fe2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8003fda:	f001 fc71 	bl	80058c0 <xTaskGetTickCountFromISR>
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	e002      	b.n	8003fe8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8003fe2:	f001 fc5d 	bl	80058a0 <xTaskGetTickCount>
 8003fe6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000134 	.word	0x20000134

08003ff8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b090      	sub	sp, #64	; 0x40
 8003ffc:	af04      	add	r7, sp, #16
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004008:	f3ef 8305 	mrs	r3, IPSR
 800400c:	61fb      	str	r3, [r7, #28]
  return(result);
 800400e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 808f 	bne.w	8004134 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004016:	f3ef 8310 	mrs	r3, PRIMASK
 800401a:	61bb      	str	r3, [r7, #24]
  return(result);
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004022:	f3ef 8311 	mrs	r3, BASEPRI
 8004026:	617b      	str	r3, [r7, #20]
  return(result);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <osThreadNew+0x3e>
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <osThreadNew+0x148>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d07e      	beq.n	8004134 <osThreadNew+0x13c>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d07b      	beq.n	8004134 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004040:	2318      	movs	r3, #24
 8004042:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
 800404c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d045      	beq.n	80040e0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <osThreadNew+0x6a>
        name = attr->name;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <osThreadNew+0x90>
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	2b38      	cmp	r3, #56	; 0x38
 800407a:	d805      	bhi.n	8004088 <osThreadNew+0x90>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <osThreadNew+0x94>
        return (NULL);
 8004088:	2300      	movs	r3, #0
 800408a:	e054      	b.n	8004136 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <osThreadNew+0xca>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b5b      	cmp	r3, #91	; 0x5b
 80040aa:	d90a      	bls.n	80040c2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <osThreadNew+0xca>
        mem = 1;
 80040bc:	2301      	movs	r3, #1
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	e010      	b.n	80040e4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <osThreadNew+0xec>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <osThreadNew+0xec>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <osThreadNew+0xec>
          mem = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	e001      	b.n	80040e4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d110      	bne.n	800410c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040f2:	9202      	str	r2, [sp, #8]
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f001 f873 	bl	80051ec <xTaskCreateStatic>
 8004106:	4603      	mov	r3, r0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e013      	b.n	8004134 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d110      	bne.n	8004134 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	b29a      	uxth	r2, r3
 8004116:	f107 0310 	add.w	r3, r7, #16
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f001 f8bb 	bl	80052a0 <xTaskCreate>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d001      	beq.n	8004134 <osThreadNew+0x13c>
          hTask = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004134:	693b      	ldr	r3, [r7, #16]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3730      	adds	r7, #48	; 0x30
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000134 	.word	0x20000134

08004144 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800414c:	f3ef 8305 	mrs	r3, IPSR
 8004150:	613b      	str	r3, [r7, #16]
  return(result);
 8004152:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004158:	f3ef 8310 	mrs	r3, PRIMASK
 800415c:	60fb      	str	r3, [r7, #12]
  return(result);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004164:	f3ef 8311 	mrs	r3, BASEPRI
 8004168:	60bb      	str	r3, [r7, #8]
  return(result);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <osDelay+0x3c>
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <osDelay+0x58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d103      	bne.n	8004180 <osDelay+0x3c>
    stat = osErrorISR;
 8004178:	f06f 0305 	mvn.w	r3, #5
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e007      	b.n	8004190 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <osDelay+0x4c>
      vTaskDelay(ticks);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 fa46 	bl	800561c <vTaskDelay>
    }
  }

  return (stat);
 8004190:	697b      	ldr	r3, [r7, #20]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000134 	.word	0x20000134

080041a0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a8:	f3ef 8305 	mrs	r3, IPSR
 80041ac:	617b      	str	r3, [r7, #20]
  return(result);
 80041ae:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	613b      	str	r3, [r7, #16]
  return(result);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041c0:	f3ef 8311 	mrs	r3, BASEPRI
 80041c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <osDelayUntil+0x3c>
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <osDelayUntil+0x7c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d103      	bne.n	80041dc <osDelayUntil+0x3c>
    stat = osErrorISR;
 80041d4:	f06f 0305 	mvn.w	r3, #5
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e019      	b.n	8004210 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80041e0:	f001 fb5e 	bl	80058a0 <xTaskGetTickCount>
 80041e4:	4603      	mov	r3, r0
 80041e6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <osDelayUntil+0x6a>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db06      	blt.n	800420a <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80041fc:	f107 0308 	add.w	r3, r7, #8
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	4618      	mov	r0, r3
 8004204:	f001 f990 	bl	8005528 <vTaskDelayUntil>
 8004208:	e002      	b.n	8004210 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800420a:	f06f 0303 	mvn.w	r3, #3
 800420e:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8004210:	69fb      	ldr	r3, [r7, #28]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000134 	.word	0x20000134

08004220 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	; 0x30
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004230:	f3ef 8305 	mrs	r3, IPSR
 8004234:	61bb      	str	r3, [r7, #24]
  return(result);
 8004236:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004238:	2b00      	cmp	r3, #0
 800423a:	d170      	bne.n	800431e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423c:	f3ef 8310 	mrs	r3, PRIMASK
 8004240:	617b      	str	r3, [r7, #20]
  return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004248:	f3ef 8311 	mrs	r3, BASEPRI
 800424c:	613b      	str	r3, [r7, #16]
  return(result);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <osMessageQueueNew+0x3c>
 8004254:	4b34      	ldr	r3, [pc, #208]	; (8004328 <osMessageQueueNew+0x108>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d060      	beq.n	800431e <osMessageQueueNew+0xfe>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d05d      	beq.n	800431e <osMessageQueueNew+0xfe>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05a      	beq.n	800431e <osMessageQueueNew+0xfe>
    mem = -1;
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
 800426c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d029      	beq.n	80042c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d012      	beq.n	80042a2 <osMessageQueueNew+0x82>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b4f      	cmp	r3, #79	; 0x4f
 8004282:	d90e      	bls.n	80042a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <osMessageQueueNew+0x82>
        mem = 1;
 800429c:	2301      	movs	r3, #1
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	e014      	b.n	80042cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d110      	bne.n	80042cc <osMessageQueueNew+0xac>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <osMessageQueueNew+0xac>
          mem = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	e001      	b.n	80042cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10c      	bne.n	80042ec <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6899      	ldr	r1, [r3, #8]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	460b      	mov	r3, r1
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa58 	bl	8004798 <xQueueGenericCreateStatic>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24
 80042ea:	e008      	b.n	80042fe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80042f2:	2200      	movs	r2, #0
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fac1 	bl	800487e <xQueueGenericCreate>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <osMessageQueueNew+0xf2>
        name = attr->name;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e001      	b.n	8004316 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004316:	69f9      	ldr	r1, [r7, #28]
 8004318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800431a:	f000 ff0b 	bl	8005134 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004320:	4618      	mov	r0, r3
 8004322:	3728      	adds	r7, #40	; 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000134 	.word	0x20000134

0800432c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004344:	f3ef 8305 	mrs	r3, IPSR
 8004348:	61fb      	str	r3, [r7, #28]
  return(result);
 800434a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004350:	f3ef 8310 	mrs	r3, PRIMASK
 8004354:	61bb      	str	r3, [r7, #24]
  return(result);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800435c:	f3ef 8311 	mrs	r3, BASEPRI
 8004360:	617b      	str	r3, [r7, #20]
  return(result);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02c      	beq.n	80043c2 <osMessageQueuePut+0x96>
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <osMessageQueuePut+0xe0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d128      	bne.n	80043c2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <osMessageQueuePut+0x56>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <osMessageQueuePut+0x56>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004382:	f06f 0303 	mvn.w	r3, #3
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004388:	e039      	b.n	80043fe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800438e:	f107 0210 	add.w	r2, r7, #16
 8004392:	2300      	movs	r3, #0
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	6a38      	ldr	r0, [r7, #32]
 8004398:	f000 fbce 	bl	8004b38 <xQueueGenericSendFromISR>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d003      	beq.n	80043aa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80043a2:	f06f 0302 	mvn.w	r3, #2
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043a8:	e029      	b.n	80043fe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d026      	beq.n	80043fe <osMessageQueuePut+0xd2>
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <osMessageQueuePut+0xe4>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043c0:	e01d      	b.n	80043fe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <osMessageQueuePut+0xa2>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80043ce:	f06f 0303 	mvn.w	r3, #3
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e014      	b.n	8004400 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80043d6:	2300      	movs	r3, #0
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	6a38      	ldr	r0, [r7, #32]
 80043de:	f000 fab1 	bl	8004944 <xQueueGenericSend>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d00b      	beq.n	8004400 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80043ee:	f06f 0301 	mvn.w	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	e004      	b.n	8004400 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80043f6:	f06f 0302 	mvn.w	r3, #2
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
 80043fc:	e000      	b.n	8004400 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004402:	4618      	mov	r0, r3
 8004404:	3728      	adds	r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000134 	.word	0x20000134
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442a:	f3ef 8305 	mrs	r3, IPSR
 800442e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004430:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004436:	f3ef 8310 	mrs	r3, PRIMASK
 800443a:	61bb      	str	r3, [r7, #24]
  return(result);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004442:	f3ef 8311 	mrs	r3, BASEPRI
 8004446:	617b      	str	r3, [r7, #20]
  return(result);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02c      	beq.n	80044a8 <osMessageQueueGet+0x94>
 800444e:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <osMessageQueueGet+0xdc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d128      	bne.n	80044a8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <osMessageQueueGet+0x54>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <osMessageQueueGet+0x54>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004468:	f06f 0303 	mvn.w	r3, #3
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800446e:	e038      	b.n	80044e2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004474:	f107 0310 	add.w	r3, r7, #16
 8004478:	461a      	mov	r2, r3
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	6a38      	ldr	r0, [r7, #32]
 800447e:	f000 fccb 	bl	8004e18 <xQueueReceiveFromISR>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d003      	beq.n	8004490 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004488:	f06f 0302 	mvn.w	r3, #2
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800448e:	e028      	b.n	80044e2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d025      	beq.n	80044e2 <osMessageQueueGet+0xce>
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <osMessageQueueGet+0xe0>)
 8004498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044a6:	e01c      	b.n	80044e2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <osMessageQueueGet+0xa0>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80044b4:	f06f 0303 	mvn.w	r3, #3
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e013      	b.n	80044e4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6a38      	ldr	r0, [r7, #32]
 80044c2:	f000 fbcd 	bl	8004c60 <xQueueReceive>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d00b      	beq.n	80044e4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80044d2:	f06f 0301 	mvn.w	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	e004      	b.n	80044e4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80044da:	f06f 0302 	mvn.w	r3, #2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	e000      	b.n	80044e4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044e2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3728      	adds	r7, #40	; 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000134 	.word	0x20000134
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <vApplicationGetIdleTaskMemory+0x2c>)
 8004508:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <vApplicationGetIdleTaskMemory+0x30>)
 800450e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	601a      	str	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000138 	.word	0x20000138
 8004528:	20000194 	.word	0x20000194

0800452c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a07      	ldr	r2, [pc, #28]	; (8004558 <vApplicationGetTimerTaskMemory+0x2c>)
 800453c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a06      	ldr	r2, [pc, #24]	; (800455c <vApplicationGetTimerTaskMemory+0x30>)
 8004542:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20000394 	.word	0x20000394
 800455c:	200003f0 	.word	0x200003f0

08004560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f103 0208 	add.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f103 0208 	add.w	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0208 	add.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d103      	bne.n	8004622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00c      	b.n	800463c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3308      	adds	r3, #8
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <vListInsert+0x2e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d2f6      	bcs.n	800462a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d103      	bne.n	80046a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	e7fe      	b.n	80046ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80046f0:	f002 f95c 	bl	80069ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	441a      	add	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	3b01      	subs	r3, #1
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	441a      	add	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	22ff      	movs	r2, #255	; 0xff
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	22ff      	movs	r2, #255	; 0xff
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d114      	bne.n	8004770 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01a      	beq.n	8004784 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3310      	adds	r3, #16
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fa28 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <xQueueGenericReset+0xcc>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	e009      	b.n	8004784 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3310      	adds	r3, #16
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fef3 	bl	8004560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff feee 	bl	8004560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004784:	f002 f940 	bl	8006a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004788:	2301      	movs	r3, #1
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	; 0x38
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <xQueueGenericCreateStatic+0x28>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047be:	e7fe      	b.n	80047be <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <xQueueGenericCreateStatic+0x42>
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	e7fe      	b.n	80047d8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <xQueueGenericCreateStatic+0x4e>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <xQueueGenericCreateStatic+0x52>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xQueueGenericCreateStatic+0x54>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <xQueueGenericCreateStatic+0x6c>
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	e7fe      	b.n	8004802 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <xQueueGenericCreateStatic+0x78>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <xQueueGenericCreateStatic+0x7c>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <xQueueGenericCreateStatic+0x7e>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <xQueueGenericCreateStatic+0x96>
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e7fe      	b.n	800482c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800482e:	2350      	movs	r3, #80	; 0x50
 8004830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b50      	cmp	r3, #80	; 0x50
 8004836:	d009      	beq.n	800484c <xQueueGenericCreateStatic+0xb4>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	e7fe      	b.n	800484a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800484c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004860:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f844 	bl	80048fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004876:	4618      	mov	r0, r3
 8004878:	3730      	adds	r7, #48	; 0x30
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08a      	sub	sp, #40	; 0x28
 8004882:	af02      	add	r7, sp, #8
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	4613      	mov	r3, r2
 800488a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <xQueueGenericCreate+0x28>
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	e7fe      	b.n	80048a4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e004      	b.n	80048bc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3350      	adds	r3, #80	; 0x50
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 f98d 	bl	8006be0 <pvPortMalloc>
 80048c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d011      	beq.n	80048f2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	3350      	adds	r3, #80	; 0x50
 80048d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e0:	79fa      	ldrb	r2, [r7, #7]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f805 	bl	80048fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048f2:	69bb      	ldr	r3, [r7, #24]
	}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e002      	b.n	800491e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800492a:	2101      	movs	r1, #1
 800492c:	69b8      	ldr	r0, [r7, #24]
 800492e:	f7ff fecb 	bl	80046c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	; 0x38
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <xQueueGenericSend+0x30>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
 8004972:	e7fe      	b.n	8004972 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <xQueueGenericSend+0x3e>
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xQueueGenericSend+0x42>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueGenericSend+0x44>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <xQueueGenericSend+0x5c>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	e7fe      	b.n	800499e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d103      	bne.n	80049ae <xQueueGenericSend+0x6a>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <xQueueGenericSend+0x6e>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <xQueueGenericSend+0x70>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <xQueueGenericSend+0x88>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049cc:	f001 faa2 	bl	8005f14 <xTaskGetSchedulerState>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <xQueueGenericSend+0x98>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <xQueueGenericSend+0x9c>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <xQueueGenericSend+0x9e>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <xQueueGenericSend+0xb6>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fa:	f001 ffd7 	bl	80069ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <xQueueGenericSend+0xcc>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d129      	bne.n	8004a64 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a16:	f000 fa7c 	bl	8004f12 <prvCopyDataToQueue>
 8004a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d010      	beq.n	8004a46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f8bd 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d013      	beq.n	8004a5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a34:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <xQueueGenericSend+0x1f0>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	e00a      	b.n	8004a5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <xQueueGenericSend+0x1f0>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a5c:	f001 ffd4 	bl	8006a08 <vPortExitCritical>
				return pdPASS;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e063      	b.n	8004b2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a6a:	f001 ffcd 	bl	8006a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e05c      	b.n	8004b2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f8f5 	bl	8005c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a82:	2301      	movs	r3, #1
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a86:	f001 ffbf 	bl	8006a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a8a:	f000 fe5f 	bl	800574c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a8e:	f001 ff8d 	bl	80069ac <vPortEnterCritical>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d103      	bne.n	8004aa8 <xQueueGenericSend+0x164>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d103      	bne.n	8004abe <xQueueGenericSend+0x17a>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004abe:	f001 ffa3 	bl	8006a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ac2:	1d3a      	adds	r2, r7, #4
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 f8e4 	bl	8005c98 <xTaskCheckForTimeOut>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d124      	bne.n	8004b20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad8:	f000 fb13 	bl	8005102 <prvIsQueueFull>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f80e 	bl	8005b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f000 fa9e 	bl	8005032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004af6:	f000 fe37 	bl	8005768 <xTaskResumeAll>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f47f af7c 	bne.w	80049fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <xQueueGenericSend+0x1f0>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	e772      	b.n	80049fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b16:	f000 fa8c 	bl	8005032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b1a:	f000 fe25 	bl	8005768 <xTaskResumeAll>
 8004b1e:	e76c      	b.n	80049fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b22:	f000 fa86 	bl	8005032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b26:	f000 fe1f 	bl	8005768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3738      	adds	r7, #56	; 0x38
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	; 0x38
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <xQueueGenericSendFromISR+0x2c>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	e7fe      	b.n	8004b62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <xQueueGenericSendFromISR+0x3a>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <xQueueGenericSendFromISR+0x3e>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <xQueueGenericSendFromISR+0x40>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <xQueueGenericSendFromISR+0x58>
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSendFromISR+0x66>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSendFromISR+0x6a>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSendFromISR+0x6c>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <xQueueGenericSendFromISR+0x84>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e7fe      	b.n	8004bba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbc:	f001 ffd2 	bl	8006b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61ba      	str	r2, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <xQueueGenericSendFromISR+0xb6>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d12c      	bne.n	8004c48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 f988 	bl	8004f12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d112      	bne.n	8004c32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d016      	beq.n	8004c42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 ffc5 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e007      	b.n	8004c42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c36:	3301      	adds	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	b25a      	sxtb	r2, r3
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c42:	2301      	movs	r3, #1
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c46:	e001      	b.n	8004c4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3738      	adds	r7, #56	; 0x38
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <xQueueReceive+0x2e>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	e7fe      	b.n	8004c8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0x3c>
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueReceive+0x40>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueReceive+0x42>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <xQueueReceive+0x5a>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cba:	f001 f92b 	bl	8005f14 <xTaskGetSchedulerState>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <xQueueReceive+0x6a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueReceive+0x6e>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueReceive+0x70>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <xQueueReceive+0x88>
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e7fe      	b.n	8004ce6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ce8:	f001 fe60 	bl	80069ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfc:	f000 f973 	bl	8004fe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1e5a      	subs	r2, r3, #1
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00f      	beq.n	8004d30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	3310      	adds	r3, #16
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 ff47 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b3c      	ldr	r3, [pc, #240]	; (8004e14 <xQueueReceive+0x1b4>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d30:	f001 fe6a 	bl	8006a08 <vPortExitCritical>
				return pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e069      	b.n	8004e0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d3e:	f001 fe63 	bl	8006a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e062      	b.n	8004e0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 ff8b 	bl	8005c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5a:	f001 fe55 	bl	8006a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d5e:	f000 fcf5 	bl	800574c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d62:	f001 fe23 	bl	80069ac <vPortEnterCritical>
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d103      	bne.n	8004d7c <xQueueReceive+0x11c>
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <xQueueReceive+0x132>
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d92:	f001 fe39 	bl	8006a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 ff7a 	bl	8005c98 <xTaskCheckForTimeOut>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d123      	bne.n	8004df2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dac:	f000 f993 	bl	80050d6 <prvIsQueueEmpty>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fea4 	bl	8005b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc6:	f000 f934 	bl	8005032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dca:	f000 fccd 	bl	8005768 <xTaskResumeAll>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d189      	bne.n	8004ce8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <xQueueReceive+0x1b4>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e780      	b.n	8004ce8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de8:	f000 f923 	bl	8005032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dec:	f000 fcbc 	bl	8005768 <xTaskResumeAll>
 8004df0:	e77a      	b.n	8004ce8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df4:	f000 f91d 	bl	8005032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004df8:	f000 fcb6 	bl	8005768 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfe:	f000 f96a 	bl	80050d6 <prvIsQueueEmpty>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f43f af6f 	beq.w	8004ce8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3730      	adds	r7, #48	; 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08e      	sub	sp, #56	; 0x38
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <xQueueReceiveFromISR+0x2a>
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	e7fe      	b.n	8004e40 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <xQueueReceiveFromISR+0x38>
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xQueueReceiveFromISR+0x3c>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <xQueueReceiveFromISR+0x3e>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <xQueueReceiveFromISR+0x56>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	e7fe      	b.n	8004e6c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e6e:	f001 fe79 	bl	8006b64 <vPortValidateInterruptPriority>
	__asm volatile
 8004e72:	f3ef 8211 	mrs	r2, BASEPRI
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	61ba      	str	r2, [r7, #24]
 8004e88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02f      	beq.n	8004efa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea8:	f000 f89d 	bl	8004fe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004eb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d112      	bne.n	8004ee4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	3310      	adds	r3, #16
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fe6c 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00e      	beq.n	8004ef4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e007      	b.n	8004ef4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee8:	3301      	adds	r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	b25a      	sxtb	r2, r3
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef8:	e001      	b.n	8004efe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3738      	adds	r7, #56	; 0x38
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d14d      	bne.n	8004fd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 f807 	bl	8005f50 <xTaskPriorityDisinherit>
 8004f42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
 8004f4a:	e043      	b.n	8004fd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d119      	bne.n	8004f86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6858      	ldr	r0, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	f002 f83f 	bl	8006fe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	441a      	add	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d32b      	bcc.n	8004fd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	e026      	b.n	8004fd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68d8      	ldr	r0, [r3, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	f002 f825 	bl	8006fe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	425b      	negs	r3, r3
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d207      	bcs.n	8004fc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	425b      	negs	r3, r3
 8004fbc:	441a      	add	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d105      	bne.n	8004fd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fdc:	697b      	ldr	r3, [r7, #20]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d018      	beq.n	800502a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d303      	bcc.n	800501a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68d9      	ldr	r1, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	461a      	mov	r2, r3
 8005024:	6838      	ldr	r0, [r7, #0]
 8005026:	f001 ffdb 	bl	8006fe0 <memcpy>
	}
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800503a:	f001 fcb7 	bl	80069ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005046:	e011      	b.n	800506c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d012      	beq.n	8005076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3324      	adds	r3, #36	; 0x24
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fda7 	bl	8005ba8 <xTaskRemoveFromEventList>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005060:	f000 fe7a 	bl	8005d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	3b01      	subs	r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800506c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dce9      	bgt.n	8005048 <prvUnlockQueue+0x16>
 8005074:	e000      	b.n	8005078 <prvUnlockQueue+0x46>
					break;
 8005076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	22ff      	movs	r2, #255	; 0xff
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005080:	f001 fcc2 	bl	8006a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005084:	f001 fc92 	bl	80069ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800508e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005090:	e011      	b.n	80050b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d012      	beq.n	80050c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3310      	adds	r3, #16
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fd82 	bl	8005ba8 <xTaskRemoveFromEventList>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050aa:	f000 fe55 	bl	8005d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dce9      	bgt.n	8005092 <prvUnlockQueue+0x60>
 80050be:	e000      	b.n	80050c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050ca:	f001 fc9d 	bl	8006a08 <vPortExitCritical>
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050de:	f001 fc65 	bl	80069ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050ea:	2301      	movs	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e001      	b.n	80050f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050f4:	f001 fc88 	bl	8006a08 <vPortExitCritical>

	return xReturn;
 80050f8:	68fb      	ldr	r3, [r7, #12]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800510a:	f001 fc4f 	bl	80069ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	429a      	cmp	r2, r3
 8005118:	d102      	bne.n	8005120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e001      	b.n	8005124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005124:	f001 fc70 	bl	8006a08 <vPortExitCritical>

	return xReturn;
 8005128:	68fb      	ldr	r3, [r7, #12]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e014      	b.n	800516e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005144:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <vQueueAddToRegistry+0x4c>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005150:	490b      	ldr	r1, [pc, #44]	; (8005180 <vQueueAddToRegistry+0x4c>)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <vQueueAddToRegistry+0x4c>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4413      	add	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005166:	e005      	b.n	8005174 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b07      	cmp	r3, #7
 8005172:	d9e7      	bls.n	8005144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20004cbc 	.word	0x20004cbc

08005184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005194:	f001 fc0a 	bl	80069ac <vPortEnterCritical>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800519e:	b25b      	sxtb	r3, r3
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d103      	bne.n	80051ae <vQueueWaitForMessageRestricted+0x2a>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d103      	bne.n	80051c4 <vQueueWaitForMessageRestricted+0x40>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c4:	f001 fc20 	bl	8006a08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fcbb 	bl	8005b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051de:	6978      	ldr	r0, [r7, #20]
 80051e0:	f7ff ff27 	bl	8005032 <prvUnlockQueue>
	}
 80051e4:	bf00      	nop
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	; 0x38
 80051f0:	af04      	add	r7, sp, #16
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <xTaskCreateStatic+0x28>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	e7fe      	b.n	8005212 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <xTaskCreateStatic+0x42>
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	e7fe      	b.n	800522c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800522e:	235c      	movs	r3, #92	; 0x5c
 8005230:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b5c      	cmp	r3, #92	; 0x5c
 8005236:	d009      	beq.n	800524c <xTaskCreateStatic+0x60>
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e7fe      	b.n	800524a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800524c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01e      	beq.n	8005292 <xTaskCreateStatic+0xa6>
 8005254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01b      	beq.n	8005292 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005262:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800526c:	2300      	movs	r3, #0
 800526e:	9303      	str	r3, [sp, #12]
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f850 	bl	800532a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800528a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528c:	f000 f8dc 	bl	8005448 <prvAddNewTaskToReadyList>
 8005290:	e001      	b.n	8005296 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005296:	697b      	ldr	r3, [r7, #20]
	}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af04      	add	r7, sp, #16
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fc93 	bl	8006be0 <pvPortMalloc>
 80052ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052c2:	205c      	movs	r0, #92	; 0x5c
 80052c4:	f001 fc8c 	bl	8006be0 <pvPortMalloc>
 80052c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
 80052d6:	e005      	b.n	80052e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052d8:	6978      	ldr	r0, [r7, #20]
 80052da:	f001 fd43 	bl	8006d64 <vPortFree>
 80052de:	e001      	b.n	80052e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d017      	beq.n	800531a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	2300      	movs	r3, #0
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f80e 	bl	800532a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800530e:	69f8      	ldr	r0, [r7, #28]
 8005310:	f000 f89a 	bl	8005448 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005314:	2301      	movs	r3, #1
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e002      	b.n	8005320 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005320:	69bb      	ldr	r3, [r7, #24]
	}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b088      	sub	sp, #32
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	461a      	mov	r2, r3
 8005342:	21a5      	movs	r1, #165	; 0xa5
 8005344:	f001 fe57 	bl	8006ff6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005352:	3b01      	subs	r3, #1
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <prvInitialiseNewTask+0x56>
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e7fe      	b.n	800537e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01f      	beq.n	80053c6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e012      	b.n	80053b2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	7819      	ldrb	r1, [r3, #0]
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	3334      	adds	r3, #52	; 0x34
 800539c:	460a      	mov	r2, r1
 800539e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d9e9      	bls.n	800538c <prvInitialiseNewTask+0x62>
 80053b8:	e000      	b.n	80053bc <prvInitialiseNewTask+0x92>
			{
				break;
 80053ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c4:	e003      	b.n	80053ce <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b37      	cmp	r3, #55	; 0x37
 80053d2:	d901      	bls.n	80053d8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053d4:	2337      	movs	r3, #55	; 0x37
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2200      	movs	r2, #0
 80053e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f8d6 	bl	80045a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	3318      	adds	r3, #24
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f8d1 	bl	80045a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	69b8      	ldr	r0, [r7, #24]
 8005428:	f001 f998 	bl	800675c <pxPortInitialiseStack>
 800542c:	4602      	mov	r2, r0
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800543e:	bf00      	nop
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005450:	f001 faac 	bl	80069ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005454:	4b2d      	ldr	r3, [pc, #180]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	4a2c      	ldr	r2, [pc, #176]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 800545c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800545e:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005466:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800546c:	4b27      	ldr	r3, [pc, #156]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d110      	bne.n	8005496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005474:	f000 fc94 	bl	8005da0 <prvInitialiseTaskLists>
 8005478:	e00d      	b.n	8005496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800547a:	4b26      	ldr	r3, [pc, #152]	; (8005514 <prvAddNewTaskToReadyList+0xcc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005482:	4b23      	ldr	r3, [pc, #140]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	429a      	cmp	r2, r3
 800548e:	d802      	bhi.n	8005496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 800549e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054a0:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <prvAddNewTaskToReadyList+0xd4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d903      	bls.n	80054bc <prvAddNewTaskToReadyList+0x74>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4a18      	ldr	r2, [pc, #96]	; (800551c <prvAddNewTaskToReadyList+0xd4>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a15      	ldr	r2, [pc, #84]	; (8005520 <prvAddNewTaskToReadyList+0xd8>)
 80054ca:	441a      	add	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f7ff f871 	bl	80045ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054d8:	f001 fa96 	bl	8006a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <prvAddNewTaskToReadyList+0xcc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d207      	bcs.n	8005502 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <prvAddNewTaskToReadyList+0xdc>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000cc4 	.word	0x20000cc4
 8005510:	200007f0 	.word	0x200007f0
 8005514:	20000cd0 	.word	0x20000cd0
 8005518:	20000ce0 	.word	0x20000ce0
 800551c:	20000ccc 	.word	0x20000ccc
 8005520:	200007f4 	.word	0x200007f4
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <vTaskDelayUntil+0x28>
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e7fe      	b.n	800554e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <vTaskDelayUntil+0x42>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e7fe      	b.n	8005568 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800556a:	4b29      	ldr	r3, [pc, #164]	; (8005610 <vTaskDelayUntil+0xe8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <vTaskDelayUntil+0x5e>
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e7fe      	b.n	8005584 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005586:	f000 f8e1 	bl	800574c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <vTaskDelayUntil+0xec>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	4413      	add	r3, r2
 8005598:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d20b      	bcs.n	80055bc <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d211      	bcs.n	80055d2 <vTaskDelayUntil+0xaa>
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d90d      	bls.n	80055d2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ba:	e00a      	b.n	80055d2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d303      	bcc.n	80055ce <vTaskDelayUntil+0xa6>
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d901      	bls.n	80055d2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d006      	beq.n	80055ec <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fd1e 	bl	8006028 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80055ec:	f000 f8bc 	bl	8005768 <xTaskResumeAll>
 80055f0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80055f8:	4b07      	ldr	r3, [pc, #28]	; (8005618 <vTaskDelayUntil+0xf0>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005608:	bf00      	nop
 800560a:	3728      	adds	r7, #40	; 0x28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000cec 	.word	0x20000cec
 8005614:	20000cc8 	.word	0x20000cc8
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <vTaskDelay+0x60>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <vTaskDelay+0x2e>
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	e7fe      	b.n	8005648 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800564a:	f000 f87f 	bl	800574c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fce9 	bl	8006028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005656:	f000 f887 	bl	8005768 <xTaskResumeAll>
 800565a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <vTaskDelay+0x64>)
 8005664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000cec 	.word	0x20000cec
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005692:	463a      	mov	r2, r7
 8005694:	1d39      	adds	r1, r7, #4
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe ff2c 	bl	80044f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	9202      	str	r2, [sp, #8]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	460a      	mov	r2, r1
 80056b2:	4920      	ldr	r1, [pc, #128]	; (8005734 <vTaskStartScheduler+0xb0>)
 80056b4:	4820      	ldr	r0, [pc, #128]	; (8005738 <vTaskStartScheduler+0xb4>)
 80056b6:	f7ff fd99 	bl	80051ec <xTaskCreateStatic>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4b1f      	ldr	r3, [pc, #124]	; (800573c <vTaskStartScheduler+0xb8>)
 80056be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056c0:	4b1e      	ldr	r3, [pc, #120]	; (800573c <vTaskStartScheduler+0xb8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e001      	b.n	80056d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d102      	bne.n	80056de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056d8:	f000 fcfa 	bl	80060d0 <xTimerCreateTimerTask>
 80056dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d115      	bne.n	8005710 <vTaskStartScheduler+0x8c>
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <vTaskStartScheduler+0xbc>)
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056fe:	4b11      	ldr	r3, [pc, #68]	; (8005744 <vTaskStartScheduler+0xc0>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005704:	4b10      	ldr	r3, [pc, #64]	; (8005748 <vTaskStartScheduler+0xc4>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800570a:	f001 f8b1 	bl	8006870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800570e:	e00d      	b.n	800572c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d109      	bne.n	800572c <vTaskStartScheduler+0xa8>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e7fe      	b.n	800572a <vTaskStartScheduler+0xa6>
}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	08008328 	.word	0x08008328
 8005738:	08005d71 	.word	0x08005d71
 800573c:	20000ce8 	.word	0x20000ce8
 8005740:	20000ce4 	.word	0x20000ce4
 8005744:	20000cd0 	.word	0x20000cd0
 8005748:	20000cc8 	.word	0x20000cc8

0800574c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <vTaskSuspendAll+0x18>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	4a03      	ldr	r2, [pc, #12]	; (8005764 <vTaskSuspendAll+0x18>)
 8005758:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800575a:	bf00      	nop
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	20000cec 	.word	0x20000cec

08005768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <xTaskResumeAll+0x114>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <xTaskResumeAll+0x2a>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	e7fe      	b.n	8005790 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005792:	f001 f90b 	bl	80069ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005796:	4b39      	ldr	r3, [pc, #228]	; (800587c <xTaskResumeAll+0x114>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a37      	ldr	r2, [pc, #220]	; (800587c <xTaskResumeAll+0x114>)
 800579e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a0:	4b36      	ldr	r3, [pc, #216]	; (800587c <xTaskResumeAll+0x114>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d162      	bne.n	800586e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057a8:	4b35      	ldr	r3, [pc, #212]	; (8005880 <xTaskResumeAll+0x118>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05e      	beq.n	800586e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b0:	e02f      	b.n	8005812 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <xTaskResumeAll+0x11c>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3318      	adds	r3, #24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe ff58 	bl	8004674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe ff53 	bl	8004674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <xTaskResumeAll+0x120>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <xTaskResumeAll+0x7a>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <xTaskResumeAll+0x120>)
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <xTaskResumeAll+0x124>)
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fe fede 	bl	80045ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005802:	4b23      	ldr	r3, [pc, #140]	; (8005890 <xTaskResumeAll+0x128>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <xTaskResumeAll+0x12c>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <xTaskResumeAll+0x11c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1cb      	bne.n	80057b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005820:	f000 fb58 	bl	8005ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <xTaskResumeAll+0x130>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005830:	f000 f858 	bl	80058e4 <xTaskIncrementTick>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800583a:	4b16      	ldr	r3, [pc, #88]	; (8005894 <xTaskResumeAll+0x12c>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f1      	bne.n	8005830 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800584c:	4b12      	ldr	r3, [pc, #72]	; (8005898 <xTaskResumeAll+0x130>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <xTaskResumeAll+0x12c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800585a:	2301      	movs	r3, #1
 800585c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <xTaskResumeAll+0x134>)
 8005860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800586e:	f001 f8cb 	bl	8006a08 <vPortExitCritical>

	return xAlreadyYielded;
 8005872:	68bb      	ldr	r3, [r7, #8]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000cec 	.word	0x20000cec
 8005880:	20000cc4 	.word	0x20000cc4
 8005884:	20000c84 	.word	0x20000c84
 8005888:	20000ccc 	.word	0x20000ccc
 800588c:	200007f4 	.word	0x200007f4
 8005890:	200007f0 	.word	0x200007f0
 8005894:	20000cd8 	.word	0x20000cd8
 8005898:	20000cd4 	.word	0x20000cd4
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <xTaskGetTickCount+0x1c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058ac:	687b      	ldr	r3, [r7, #4]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000cc8 	.word	0x20000cc8

080058c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c6:	f001 f94d 	bl	8006b64 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <xTaskGetTickCountFromISR+0x20>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058d4:	683b      	ldr	r3, [r7, #0]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000cc8 	.word	0x20000cc8

080058e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <xTaskIncrementTick+0x144>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 8088 	bne.w	8005a08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f8:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <xTaskIncrementTick+0x148>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005900:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <xTaskIncrementTick+0x148>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11f      	bne.n	800594c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800590c:	4b48      	ldr	r3, [pc, #288]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <xTaskIncrementTick+0x46>
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	e7fe      	b.n	8005928 <xTaskIncrementTick+0x44>
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <xTaskIncrementTick+0x150>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3e      	ldr	r2, [pc, #248]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4a3e      	ldr	r2, [pc, #248]	; (8005a34 <xTaskIncrementTick+0x150>)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	4a3c      	ldr	r2, [pc, #240]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	f000 fac4 	bl	8005ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800594c:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <xTaskIncrementTick+0x158>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	d349      	bcc.n	80059ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	601a      	str	r2, [r3, #0]
					break;
 8005968:	e03f      	b.n	80059ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596a:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d203      	bcs.n	800598a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005982:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005988:	e02f      	b.n	80059ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fe70 	bl	8004674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3318      	adds	r3, #24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fe67 	bl	8004674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <xTaskIncrementTick+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d903      	bls.n	80059ba <xTaskIncrementTick+0xd6>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <xTaskIncrementTick+0x15c>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059c8:	441a      	add	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7fe fdf2 	bl	80045ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d3b8      	bcc.n	8005956 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	e7b5      	b.n	8005956 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4914      	ldr	r1, [pc, #80]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d907      	bls.n	8005a12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005a02:	2301      	movs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	e004      	b.n	8005a12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <xTaskIncrementTick+0x168>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	4a0f      	ldr	r2, [pc, #60]	; (8005a4c <xTaskIncrementTick+0x168>)
 8005a10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <xTaskIncrementTick+0x16c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000cec 	.word	0x20000cec
 8005a2c:	20000cc8 	.word	0x20000cc8
 8005a30:	20000c7c 	.word	0x20000c7c
 8005a34:	20000c80 	.word	0x20000c80
 8005a38:	20000cdc 	.word	0x20000cdc
 8005a3c:	20000ce4 	.word	0x20000ce4
 8005a40:	20000ccc 	.word	0x20000ccc
 8005a44:	200007f4 	.word	0x200007f4
 8005a48:	200007f0 	.word	0x200007f0
 8005a4c:	20000cd4 	.word	0x20000cd4
 8005a50:	20000cd8 	.word	0x20000cd8

08005a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a5a:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <vTaskSwitchContext+0xa4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <vTaskSwitchContext+0xa8>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a68:	e040      	b.n	8005aec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <vTaskSwitchContext+0xa8>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <vTaskSwitchContext+0xac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e00f      	b.n	8005a98 <vTaskSwitchContext+0x44>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <vTaskSwitchContext+0x3e>
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	e7fe      	b.n	8005a90 <vTaskSwitchContext+0x3c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	491a      	ldr	r1, [pc, #104]	; (8005b04 <vTaskSwitchContext+0xb0>)
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0e5      	beq.n	8005a78 <vTaskSwitchContext+0x24>
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <vTaskSwitchContext+0xb0>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3308      	adds	r3, #8
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d104      	bne.n	8005adc <vTaskSwitchContext+0x88>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <vTaskSwitchContext+0xb4>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4a06      	ldr	r2, [pc, #24]	; (8005b00 <vTaskSwitchContext+0xac>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000cec 	.word	0x20000cec
 8005afc:	20000cd8 	.word	0x20000cd8
 8005b00:	20000ccc 	.word	0x20000ccc
 8005b04:	200007f4 	.word	0x200007f4
 8005b08:	200007f0 	.word	0x200007f0

08005b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <vTaskPlaceOnEventList+0x24>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e7fe      	b.n	8005b2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <vTaskPlaceOnEventList+0x44>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3318      	adds	r3, #24
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe fd62 	bl	8004602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b3e:	2101      	movs	r1, #1
 8005b40:	6838      	ldr	r0, [r7, #0]
 8005b42:	f000 fa71 	bl	8006028 <prvAddCurrentTaskToDelayedList>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200007f0 	.word	0x200007f0

08005b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <vTaskPlaceOnEventListRestricted+0x26>
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e7fe      	b.n	8005b78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <vTaskPlaceOnEventListRestricted+0x50>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3318      	adds	r3, #24
 8005b80:	4619      	mov	r1, r3
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7fe fd19 	bl	80045ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f000 fa46 	bl	8006028 <prvAddCurrentTaskToDelayedList>
	}
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	200007f0 	.word	0x200007f0

08005ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <xTaskRemoveFromEventList+0x2a>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e7fe      	b.n	8005bd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fd4c 	bl	8004674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <xTaskRemoveFromEventList+0xac>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fd43 	bl	8004674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d903      	bls.n	8005c02 <xTaskRemoveFromEventList+0x5a>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <xTaskRemoveFromEventList+0xb4>)
 8005c10:	441a      	add	r2, r3
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7fe fcce 	bl	80045ba <vListInsertEnd>
 8005c1e:	e005      	b.n	8005c2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3318      	adds	r3, #24
 8005c24:	4619      	mov	r1, r3
 8005c26:	480e      	ldr	r0, [pc, #56]	; (8005c60 <xTaskRemoveFromEventList+0xb8>)
 8005c28:	f7fe fcc7 	bl	80045ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <xTaskRemoveFromEventList+0xbc>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d905      	bls.n	8005c46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <xTaskRemoveFromEventList+0xc0>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e001      	b.n	8005c4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c4a:	697b      	ldr	r3, [r7, #20]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000cec 	.word	0x20000cec
 8005c58:	20000ccc 	.word	0x20000ccc
 8005c5c:	200007f4 	.word	0x200007f4
 8005c60:	20000c84 	.word	0x20000c84
 8005c64:	200007f0 	.word	0x200007f0
 8005c68:	20000cd8 	.word	0x20000cd8

08005c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <vTaskInternalSetTimeOutState+0x24>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <vTaskInternalSetTimeOutState+0x28>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000cdc 	.word	0x20000cdc
 8005c94:	20000cc8 	.word	0x20000cc8

08005c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <xTaskCheckForTimeOut+0x24>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e7fe      	b.n	8005cba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x3e>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e7fe      	b.n	8005cd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005cd6:	f000 fe69 	bl	80069ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <xTaskCheckForTimeOut+0xb8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d102      	bne.n	8005cfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e023      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <xTaskCheckForTimeOut+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d007      	beq.n	8005d16 <xTaskCheckForTimeOut+0x7e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e015      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d20b      	bcs.n	8005d38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff9d 	bl	8005c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e004      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f000 fe61 	bl	8006a08 <vPortExitCritical>

	return xReturn;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000cc8 	.word	0x20000cc8
 8005d54:	20000cdc 	.word	0x20000cdc

08005d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <vTaskMissedYield+0x14>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000cd8 	.word	0x20000cd8

08005d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d78:	f000 f852 	bl	8005e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <prvIdleTask+0x28>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d9f9      	bls.n	8005d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <prvIdleTask+0x2c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d94:	e7f0      	b.n	8005d78 <prvIdleTask+0x8>
 8005d96:	bf00      	nop
 8005d98:	200007f4 	.word	0x200007f4
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	e00c      	b.n	8005dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <prvInitialiseTaskLists+0x60>)
 8005db8:	4413      	add	r3, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fbd0 	bl	8004560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b37      	cmp	r3, #55	; 0x37
 8005dca:	d9ef      	bls.n	8005dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dce:	f7fe fbc7 	bl	8004560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dd2:	480d      	ldr	r0, [pc, #52]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005dd4:	f7fe fbc4 	bl	8004560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd8:	480c      	ldr	r0, [pc, #48]	; (8005e0c <prvInitialiseTaskLists+0x6c>)
 8005dda:	f7fe fbc1 	bl	8004560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dde:	480c      	ldr	r0, [pc, #48]	; (8005e10 <prvInitialiseTaskLists+0x70>)
 8005de0:	f7fe fbbe 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de4:	480b      	ldr	r0, [pc, #44]	; (8005e14 <prvInitialiseTaskLists+0x74>)
 8005de6:	f7fe fbbb 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvInitialiseTaskLists+0x78>)
 8005dec:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <prvInitialiseTaskLists+0x7c>)
 8005df2:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200007f4 	.word	0x200007f4
 8005e04:	20000c54 	.word	0x20000c54
 8005e08:	20000c68 	.word	0x20000c68
 8005e0c:	20000c84 	.word	0x20000c84
 8005e10:	20000c98 	.word	0x20000c98
 8005e14:	20000cb0 	.word	0x20000cb0
 8005e18:	20000c7c 	.word	0x20000c7c
 8005e1c:	20000c80 	.word	0x20000c80

08005e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e26:	e019      	b.n	8005e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e28:	f000 fdc0 	bl	80069ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <prvCheckTasksWaitingTermination+0x4c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fc1b 	bl	8004674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e52:	f000 fdd9 	bl	8006a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f80e 	bl	8005e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e1      	bne.n	8005e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000c98 	.word	0x20000c98
 8005e70:	20000cc4 	.word	0x20000cc4
 8005e74:	20000cac 	.word	0x20000cac

08005e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff68 	bl	8006d64 <vPortFree>
				vPortFree( pxTCB );
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 ff65 	bl	8006d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e9a:	e017      	b.n	8005ecc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d103      	bne.n	8005eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 ff5c 	bl	8006d64 <vPortFree>
	}
 8005eac:	e00e      	b.n	8005ecc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d009      	beq.n	8005ecc <prvDeleteTCB+0x54>
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e7fe      	b.n	8005eca <prvDeleteTCB+0x52>
	}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <prvResetNextTaskUnblockTime+0x38>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <prvResetNextTaskUnblockTime+0x3c>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eec:	e008      	b.n	8005f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvResetNextTaskUnblockTime+0x38>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <prvResetNextTaskUnblockTime+0x3c>)
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000c7c 	.word	0x20000c7c
 8005f10:	20000ce4 	.word	0x20000ce4

08005f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <xTaskGetSchedulerState+0x34>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f22:	2301      	movs	r3, #1
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	e008      	b.n	8005f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <xTaskGetSchedulerState+0x38>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f30:	2302      	movs	r3, #2
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	e001      	b.n	8005f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f3a:	687b      	ldr	r3, [r7, #4]
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20000cd0 	.word	0x20000cd0
 8005f4c:	20000cec 	.word	0x20000cec

08005f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d054      	beq.n	8006010 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f66:	4b2d      	ldr	r3, [pc, #180]	; (800601c <xTaskPriorityDisinherit+0xcc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d009      	beq.n	8005f84 <xTaskPriorityDisinherit+0x34>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e7fe      	b.n	8005f82 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xTaskPriorityDisinherit+0x50>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	e7fe      	b.n	8005f9e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d02c      	beq.n	8006010 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d128      	bne.n	8006010 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fb56 	bl	8004674 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <xTaskPriorityDisinherit+0xd0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d903      	bls.n	8005ff0 <xTaskPriorityDisinherit+0xa0>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <xTaskPriorityDisinherit+0xd0>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4a09      	ldr	r2, [pc, #36]	; (8006024 <xTaskPriorityDisinherit+0xd4>)
 8005ffe:	441a      	add	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fe fad7 	bl	80045ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006010:	697b      	ldr	r3, [r7, #20]
	}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200007f0 	.word	0x200007f0
 8006020:	20000ccc 	.word	0x20000ccc
 8006024:	200007f4 	.word	0x200007f4

08006028 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006038:	4b20      	ldr	r3, [pc, #128]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fb18 	bl	8004674 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d10a      	bne.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006052:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4819      	ldr	r0, [pc, #100]	; (80060c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800605c:	f7fe faad 	bl	80045ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006060:	e026      	b.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	429a      	cmp	r2, r3
 8006078:	d209      	bcs.n	800608e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fe fabb 	bl	8004602 <vListInsert>
}
 800608c:	e010      	b.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fab1 	bl	8004602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d202      	bcs.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060aa:	4a08      	ldr	r2, [pc, #32]	; (80060cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6013      	str	r3, [r2, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000cc8 	.word	0x20000cc8
 80060bc:	200007f0 	.word	0x200007f0
 80060c0:	20000cb0 	.word	0x20000cb0
 80060c4:	20000c80 	.word	0x20000c80
 80060c8:	20000c7c 	.word	0x20000c7c
 80060cc:	20000ce4 	.word	0x20000ce4

080060d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060da:	f000 faff 	bl	80066dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <xTimerCreateTimerTask+0x80>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d021      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060ee:	1d3a      	adds	r2, r7, #4
 80060f0:	f107 0108 	add.w	r1, r7, #8
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fa17 	bl	800452c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	2302      	movs	r3, #2
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	460a      	mov	r2, r1
 8006110:	4910      	ldr	r1, [pc, #64]	; (8006154 <xTimerCreateTimerTask+0x84>)
 8006112:	4811      	ldr	r0, [pc, #68]	; (8006158 <xTimerCreateTimerTask+0x88>)
 8006114:	f7ff f86a 	bl	80051ec <xTaskCreateStatic>
 8006118:	4602      	mov	r2, r0
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <xTimerCreateTimerTask+0x8c>)
 800611c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <xTimerCreateTimerTask+0x8c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <xTimerCreateTimerTask+0x74>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e7fe      	b.n	8006142 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000d20 	.word	0x20000d20
 8006154:	08008330 	.word	0x08008330
 8006158:	08006291 	.word	0x08006291
 800615c:	20000d24 	.word	0x20000d24

08006160 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <xTimerGenericCommand+0x2c>
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	e7fe      	b.n	800618a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800618c:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <xTimerGenericCommand+0x94>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02a      	beq.n	80061ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	dc18      	bgt.n	80061d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061a6:	f7ff feb5 	bl	8005f14 <xTaskGetSchedulerState>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d109      	bne.n	80061c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <xTimerGenericCommand+0x94>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f107 0110 	add.w	r1, r7, #16
 80061b8:	2300      	movs	r3, #0
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	f7fe fbc2 	bl	8004944 <xQueueGenericSend>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24
 80061c2:	e012      	b.n	80061ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <xTimerGenericCommand+0x94>)
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	f107 0110 	add.w	r1, r7, #16
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	f7fe fbb8 	bl	8004944 <xQueueGenericSend>
 80061d4:	6278      	str	r0, [r7, #36]	; 0x24
 80061d6:	e008      	b.n	80061ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <xTimerGenericCommand+0x94>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	f107 0110 	add.w	r1, r7, #16
 80061e0:	2300      	movs	r3, #0
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	f7fe fca8 	bl	8004b38 <xQueueGenericSendFromISR>
 80061e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3728      	adds	r7, #40	; 0x28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000d20 	.word	0x20000d20

080061f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <prvProcessExpiredTimer+0x94>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	3304      	adds	r3, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fa2f 	bl	8004674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d021      	beq.n	8006268 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	18d1      	adds	r1, r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	6978      	ldr	r0, [r7, #20]
 8006232:	f000 f8d1 	bl	80063d8 <prvInsertTimerInActiveList>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800623c:	2300      	movs	r3, #0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	2100      	movs	r1, #0
 8006246:	6978      	ldr	r0, [r7, #20]
 8006248:	f7ff ff8a 	bl	8006160 <xTimerGenericCommand>
 800624c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d112      	bne.n	800627a <prvProcessExpiredTimer+0x82>
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e7fe      	b.n	8006266 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	6978      	ldr	r0, [r7, #20]
 8006280:	4798      	blx	r3
}
 8006282:	bf00      	nop
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000d18 	.word	0x20000d18

08006290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006298:	f107 0308 	add.w	r3, r7, #8
 800629c:	4618      	mov	r0, r3
 800629e:	f000 f857 	bl	8006350 <prvGetNextExpireTime>
 80062a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f803 	bl	80062b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062ae:	f000 f8d5 	bl	800645c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062b2:	e7f1      	b.n	8006298 <prvTimerTask+0x8>

080062b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062be:	f7ff fa45 	bl	800574c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062c2:	f107 0308 	add.w	r3, r7, #8
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f866 	bl	8006398 <prvSampleTimeNow>
 80062cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d130      	bne.n	8006336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <prvProcessTimerOrBlockTask+0x3c>
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d806      	bhi.n	80062f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062e2:	f7ff fa41 	bl	8005768 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff ff85 	bl	80061f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ee:	e024      	b.n	800633a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <prvProcessTimerOrBlockTask+0x90>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <prvProcessTimerOrBlockTask+0x50>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <prvProcessTimerOrBlockTask+0x52>
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <prvProcessTimerOrBlockTask+0x94>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	f7fe ff35 	bl	8005184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800631a:	f7ff fa25 	bl	8005768 <xTaskResumeAll>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <prvProcessTimerOrBlockTask+0x98>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
}
 8006334:	e001      	b.n	800633a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006336:	f7ff fa17 	bl	8005768 <xTaskResumeAll>
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000d1c 	.word	0x20000d1c
 8006348:	20000d20 	.word	0x20000d20
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <prvGetNextExpireTime+0x44>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <prvGetNextExpireTime+0x16>
 8006362:	2201      	movs	r2, #1
 8006364:	e000      	b.n	8006368 <prvGetNextExpireTime+0x18>
 8006366:	2200      	movs	r2, #0
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <prvGetNextExpireTime+0x44>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e001      	b.n	8006384 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006384:	68fb      	ldr	r3, [r7, #12]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000d18 	.word	0x20000d18

08006398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063a0:	f7ff fa7e 	bl	80058a0 <xTaskGetTickCount>
 80063a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <prvSampleTimeNow+0x3c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d205      	bcs.n	80063bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063b0:	f000 f930 	bl	8006614 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e002      	b.n	80063c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063c2:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <prvSampleTimeNow+0x3c>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000d28 	.word	0x20000d28

080063d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d812      	bhi.n	8006424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	1ad2      	subs	r2, r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e01b      	b.n	800644a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	4b10      	ldr	r3, [pc, #64]	; (8006454 <prvInsertTimerInActiveList+0x7c>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fe f8f0 	bl	8004602 <vListInsert>
 8006422:	e012      	b.n	800644a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d206      	bcs.n	800643a <prvInsertTimerInActiveList+0x62>
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006434:	2301      	movs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e007      	b.n	800644a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <prvInsertTimerInActiveList+0x80>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f7fe f8dc 	bl	8004602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000d1c 	.word	0x20000d1c
 8006458:	20000d18 	.word	0x20000d18

0800645c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	; 0x38
 8006460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006462:	e0c6      	b.n	80065f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da17      	bge.n	800649a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	3304      	adds	r3, #4
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <prvProcessReceivedCommands+0x2e>
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e7fe      	b.n	8006488 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006490:	6850      	ldr	r0, [r2, #4]
 8006492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006494:	6892      	ldr	r2, [r2, #8]
 8006496:	4611      	mov	r1, r2
 8006498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f2c0 80a7 	blt.w	80065f0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	3304      	adds	r3, #4
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe f8de 	bl	8004674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064b8:	463b      	mov	r3, r7
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ff6c 	bl	8006398 <prvSampleTimeNow>
 80064c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b09      	cmp	r3, #9
 80064c6:	f200 8094 	bhi.w	80065f2 <prvProcessReceivedCommands+0x196>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <prvProcessReceivedCommands+0x74>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	0800656b 	.word	0x0800656b
 80064e0:	0800657f 	.word	0x0800657f
 80064e4:	080065c7 	.word	0x080065c7
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	080064f9 	.word	0x080064f9
 80064f0:	0800656b 	.word	0x0800656b
 80064f4:	0800657f 	.word	0x0800657f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	18d1      	adds	r1, r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006518:	f7ff ff5e 	bl	80063d8 <prvInsertTimerInActiveList>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d067      	beq.n	80065f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d05c      	beq.n	80065f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	441a      	add	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	2100      	movs	r1, #0
 8006548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654a:	f7ff fe09 	bl	8006160 <xTimerGenericCommand>
 800654e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d14d      	bne.n	80065f2 <prvProcessReceivedCommands+0x196>
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e7fe      	b.n	8006568 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800657c:	e039      	b.n	80065f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <prvProcessReceivedCommands+0x156>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	e7fe      	b.n	80065b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	18d1      	adds	r1, r2, r3
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c0:	f7ff ff0a 	bl	80063d8 <prvInsertTimerInActiveList>
					break;
 80065c4:	e015      	b.n	80065f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80065d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d6:	f000 fbc5 	bl	8006d64 <vPortFree>
 80065da:	e00a      	b.n	80065f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ee:	e000      	b.n	80065f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <prvProcessReceivedCommands+0x1b4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1d39      	adds	r1, r7, #4
 80065f8:	2200      	movs	r2, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fb30 	bl	8004c60 <xQueueReceive>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	f47f af2e 	bne.w	8006464 <prvProcessReceivedCommands+0x8>
	}
}
 8006608:	bf00      	nop
 800660a:	3730      	adds	r7, #48	; 0x30
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000d20 	.word	0x20000d20

08006614 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800661a:	e047      	b.n	80066ac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800661c:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3304      	adds	r3, #4
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe f81d 	bl	8004674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02d      	beq.n	80066ac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d90e      	bls.n	8006680 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800666e:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fd ffc2 	bl	8004602 <vListInsert>
 800667e:	e015      	b.n	80066ac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	2100      	movs	r1, #0
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fd68 	bl	8006160 <xTimerGenericCommand>
 8006690:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <prvSwitchTimerLists+0x98>
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	e7fe      	b.n	80066aa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1b2      	bne.n	800661c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <prvSwitchTimerLists+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 80066c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <prvSwitchTimerLists+0xc4>)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6013      	str	r3, [r2, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000d18 	.word	0x20000d18
 80066d8:	20000d1c 	.word	0x20000d1c

080066dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066e2:	f000 f963 	bl	80069ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d120      	bne.n	8006730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ee:	4814      	ldr	r0, [pc, #80]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066f0:	f7fd ff36 	bl	8004560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066f4:	4813      	ldr	r0, [pc, #76]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 80066f6:	f7fd ff33 	bl	8004560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <prvCheckForValidListAndQueue+0x6c>)
 80066fc:	4a10      	ldr	r2, [pc, #64]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <prvCheckForValidListAndQueue+0x70>)
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <prvCheckForValidListAndQueue+0x74>)
 800670c:	4a11      	ldr	r2, [pc, #68]	; (8006754 <prvCheckForValidListAndQueue+0x78>)
 800670e:	2110      	movs	r1, #16
 8006710:	200a      	movs	r0, #10
 8006712:	f7fe f841 	bl	8004798 <xQueueGenericCreateStatic>
 8006716:	4602      	mov	r2, r0
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	490b      	ldr	r1, [pc, #44]	; (8006758 <prvCheckForValidListAndQueue+0x7c>)
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fd02 	bl	8005134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006730:	f000 f96a 	bl	8006a08 <vPortExitCritical>
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000d20 	.word	0x20000d20
 8006740:	20000cf0 	.word	0x20000cf0
 8006744:	20000d04 	.word	0x20000d04
 8006748:	20000d18 	.word	0x20000d18
 800674c:	20000d1c 	.word	0x20000d1c
 8006750:	20000dcc 	.word	0x20000dcc
 8006754:	20000d2c 	.word	0x20000d2c
 8006758:	08008338 	.word	0x08008338

0800675c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b04      	subs	r3, #4
 800676c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b04      	subs	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800678c:	4a0c      	ldr	r2, [pc, #48]	; (80067c0 <pxPortInitialiseStack+0x64>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b14      	subs	r3, #20
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3b04      	subs	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f06f 0202 	mvn.w	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3b20      	subs	r3, #32
 80067b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	080067c5 	.word	0x080067c5

080067c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <prvTaskExitError+0x50>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d009      	beq.n	80067ec <prvTaskExitError+0x28>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e7fe      	b.n	80067ea <prvTaskExitError+0x26>
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067fe:	bf00      	nop
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0fc      	beq.n	8006800 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	200000ac 	.word	0x200000ac
	...

08006820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <pxCurrentTCBConst2>)
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f380 8809 	msr	PSP, r0
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	4770      	bx	lr
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst2>:
 8006840:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006848:	4808      	ldr	r0, [pc, #32]	; (800686c <prvPortStartFirstTask+0x24>)
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f380 8808 	msr	MSP, r0
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8814 	msr	CONTROL, r0
 800685a:	b662      	cpsie	i
 800685c:	b661      	cpsie	f
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	df00      	svc	0
 8006868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800686a:	bf00      	nop
 800686c:	e000ed08 	.word	0xe000ed08

08006870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006876:	4b44      	ldr	r3, [pc, #272]	; (8006988 <xPortStartScheduler+0x118>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a44      	ldr	r2, [pc, #272]	; (800698c <xPortStartScheduler+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <xPortStartScheduler+0x24>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	e7fe      	b.n	8006892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006894:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <xPortStartScheduler+0x118>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <xPortStartScheduler+0x120>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d109      	bne.n	80068b2 <xPortStartScheduler+0x42>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e7fe      	b.n	80068b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <xPortStartScheduler+0x124>)
 80068b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <xPortStartScheduler+0x128>)
 80068d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068da:	4b30      	ldr	r3, [pc, #192]	; (800699c <xPortStartScheduler+0x12c>)
 80068dc:	2207      	movs	r2, #7
 80068de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068e0:	e009      	b.n	80068f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <xPortStartScheduler+0x12c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4a2c      	ldr	r2, [pc, #176]	; (800699c <xPortStartScheduler+0x12c>)
 80068ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d0ef      	beq.n	80068e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <xPortStartScheduler+0x12c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1c3 0307 	rsb	r3, r3, #7
 800690a:	2b04      	cmp	r3, #4
 800690c:	d009      	beq.n	8006922 <xPortStartScheduler+0xb2>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	e7fe      	b.n	8006920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006922:	4b1e      	ldr	r3, [pc, #120]	; (800699c <xPortStartScheduler+0x12c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <xPortStartScheduler+0x12c>)
 800692a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <xPortStartScheduler+0x12c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <xPortStartScheduler+0x12c>)
 8006936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006940:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <xPortStartScheduler+0x130>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <xPortStartScheduler+0x130>)
 8006946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800694a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <xPortStartScheduler+0x130>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <xPortStartScheduler+0x130>)
 8006952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006958:	f000 f8d6 	bl	8006b08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <xPortStartScheduler+0x134>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006962:	f000 f8f5 	bl	8006b50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <xPortStartScheduler+0x138>)
 800696c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006972:	f7ff ff69 	bl	8006848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006976:	f7ff f86d 	bl	8005a54 <vTaskSwitchContext>
	prvTaskExitError();
 800697a:	f7ff ff23 	bl	80067c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed00 	.word	0xe000ed00
 800698c:	410fc271 	.word	0x410fc271
 8006990:	410fc270 	.word	0x410fc270
 8006994:	e000e400 	.word	0xe000e400
 8006998:	20000e1c 	.word	0x20000e1c
 800699c:	20000e20 	.word	0x20000e20
 80069a0:	e000ed20 	.word	0xe000ed20
 80069a4:	200000ac 	.word	0x200000ac
 80069a8:	e000ef34 	.word	0xe000ef34

080069ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <vPortEnterCritical+0x54>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	4a0d      	ldr	r2, [pc, #52]	; (8006a00 <vPortEnterCritical+0x54>)
 80069cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <vPortEnterCritical+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10e      	bne.n	80069f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortEnterCritical+0x58>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <vPortEnterCritical+0x48>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	e7fe      	b.n	80069f2 <vPortEnterCritical+0x46>
	}
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	200000ac 	.word	0x200000ac
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <vPortExitCritical+0x22>
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e7fe      	b.n	8006a28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <vPortExitCritical+0x3e>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	200000ac 	.word	0x200000ac
	...

08006a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a60:	f3ef 8009 	mrs	r0, PSP
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <pxCurrentTCBConst>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	f01e 0f10 	tst.w	lr, #16
 8006a70:	bf08      	it	eq
 8006a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	6010      	str	r0, [r2, #0]
 8006a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a84:	f380 8811 	msr	BASEPRI, r0
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f7fe ffe0 	bl	8005a54 <vTaskSwitchContext>
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f380 8811 	msr	BASEPRI, r0
 8006a9c:	bc09      	pop	{r0, r3}
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa6:	f01e 0f10 	tst.w	lr, #16
 8006aaa:	bf08      	it	eq
 8006aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ab0:	f380 8809 	msr	PSP, r0
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst>:
 8006ac0:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ae0:	f7fe ff00 	bl	80058e4 <xTaskIncrementTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <xPortSysTickHandler+0x3c>)
 8006aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <vPortSetupTimerInterrupt+0x38>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <vPortSetupTimerInterrupt+0x3c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <vPortSetupTimerInterrupt+0x40>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <vPortSetupTimerInterrupt+0x44>)
 8006b26:	3b01      	subs	r3, #1
 8006b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b2a:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b2c:	2207      	movs	r2, #7
 8006b2e:	601a      	str	r2, [r3, #0]
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	e000e010 	.word	0xe000e010
 8006b40:	e000e018 	.word	0xe000e018
 8006b44:	200000a0 	.word	0x200000a0
 8006b48:	10624dd3 	.word	0x10624dd3
 8006b4c:	e000e014 	.word	0xe000e014

08006b50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b60 <vPortEnableVFP+0x10>
 8006b54:	6801      	ldr	r1, [r0, #0]
 8006b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b5a:	6001      	str	r1, [r0, #0]
 8006b5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b5e:	bf00      	nop
 8006b60:	e000ed88 	.word	0xe000ed88

08006b64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b6a:	f3ef 8305 	mrs	r3, IPSR
 8006b6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d913      	bls.n	8006b9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b76:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <vPortValidateInterruptPriority+0x6c>)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b80:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <vPortValidateInterruptPriority+0x70>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	7afa      	ldrb	r2, [r7, #11]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d209      	bcs.n	8006b9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	e7fe      	b.n	8006b9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <vPortValidateInterruptPriority+0x74>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <vPortValidateInterruptPriority+0x78>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d909      	bls.n	8006bc2 <vPortValidateInterruptPriority+0x5e>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	e7fe      	b.n	8006bc0 <vPortValidateInterruptPriority+0x5c>
	}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	e000e3f0 	.word	0xe000e3f0
 8006bd4:	20000e1c 	.word	0x20000e1c
 8006bd8:	e000ed0c 	.word	0xe000ed0c
 8006bdc:	20000e20 	.word	0x20000e20

08006be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bec:	f7fe fdae 	bl	800574c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bf0:	4b57      	ldr	r3, [pc, #348]	; (8006d50 <pvPortMalloc+0x170>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf8:	f000 f90c 	bl	8006e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bfc:	4b55      	ldr	r3, [pc, #340]	; (8006d54 <pvPortMalloc+0x174>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 808c 	bne.w	8006d22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01c      	beq.n	8006c4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c10:	2208      	movs	r2, #8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d013      	beq.n	8006c4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	3308      	adds	r3, #8
 8006c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <pvPortMalloc+0x6a>
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e7fe      	b.n	8006c48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d068      	beq.n	8006d22 <pvPortMalloc+0x142>
 8006c50:	4b41      	ldr	r3, [pc, #260]	; (8006d58 <pvPortMalloc+0x178>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d863      	bhi.n	8006d22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c5a:	4b40      	ldr	r3, [pc, #256]	; (8006d5c <pvPortMalloc+0x17c>)
 8006c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c5e:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <pvPortMalloc+0x17c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c64:	e004      	b.n	8006c70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <pvPortMalloc+0xa2>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f1      	bne.n	8006c66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c82:	4b33      	ldr	r3, [pc, #204]	; (8006d50 <pvPortMalloc+0x170>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d04a      	beq.n	8006d22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d91e      	bls.n	8006cec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <pvPortMalloc+0xf4>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e7fe      	b.n	8006cd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce6:	69b8      	ldr	r0, [r7, #24]
 8006ce8:	f000 f8f6 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <pvPortMalloc+0x178>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <pvPortMalloc+0x178>)
 8006cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cfa:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <pvPortMalloc+0x178>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <pvPortMalloc+0x180>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d203      	bcs.n	8006d0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <pvPortMalloc+0x178>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <pvPortMalloc+0x180>)
 8006d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <pvPortMalloc+0x174>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d22:	f7fe fd21 	bl	8005768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <pvPortMalloc+0x164>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e7fe      	b.n	8006d42 <pvPortMalloc+0x162>
	return pvReturn;
 8006d44:	69fb      	ldr	r3, [r7, #28]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3728      	adds	r7, #40	; 0x28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20004a2c 	.word	0x20004a2c
 8006d54:	20004a38 	.word	0x20004a38
 8006d58:	20004a30 	.word	0x20004a30
 8006d5c:	20004a24 	.word	0x20004a24
 8006d60:	20004a34 	.word	0x20004a34

08006d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d046      	beq.n	8006e04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d76:	2308      	movs	r3, #8
 8006d78:	425b      	negs	r3, r3
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <vPortFree+0xa8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <vPortFree+0x42>
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e7fe      	b.n	8006da4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <vPortFree+0x5e>
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	e7fe      	b.n	8006dc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <vPortFree+0xa8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d019      	beq.n	8006e04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d115      	bne.n	8006e04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <vPortFree+0xa8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006de8:	f7fe fcb0 	bl	800574c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vPortFree+0xac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <vPortFree+0xac>)
 8006df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 f86c 	bl	8006ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e00:	f7fe fcb2 	bl	8005768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20004a38 	.word	0x20004a38
 8006e10:	20004a30 	.word	0x20004a30

08006e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <prvHeapInit+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3307      	adds	r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <prvHeapInit+0xac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e60:	2208      	movs	r2, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <prvHeapInit+0xb8>)
 8006ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <prvHeapInit+0xbc>)
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvHeapInit+0xc0>)
 8006eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000e24 	.word	0x20000e24
 8006ec4:	20004a24 	.word	0x20004a24
 8006ec8:	20004a2c 	.word	0x20004a2c
 8006ecc:	20004a34 	.word	0x20004a34
 8006ed0:	20004a30 	.word	0x20004a30
 8006ed4:	20004a38 	.word	0x20004a38

08006ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <prvInsertBlockIntoFreeList+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <prvInsertBlockIntoFreeList+0x14>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8f7      	bhi.n	8006ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d118      	bne.n	8006f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00d      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20004a24 	.word	0x20004a24
 8006f88:	20004a2c 	.word	0x20004a2c

08006f8c <__errno>:
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <__errno+0x8>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	200000b0 	.word	0x200000b0

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4e0d      	ldr	r6, [pc, #52]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9c:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006f9e:	1ba4      	subs	r4, r4, r6
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	42a5      	cmp	r5, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	4e0b      	ldr	r6, [pc, #44]	; (8006fd8 <__libc_init_array+0x40>)
 8006faa:	4c0c      	ldr	r4, [pc, #48]	; (8006fdc <__libc_init_array+0x44>)
 8006fac:	f001 f92e 	bl	800820c <_init>
 8006fb0:	1ba4      	subs	r4, r4, r6
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	42a5      	cmp	r5, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fc0:	4798      	blx	r3
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fca:	4798      	blx	r3
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	08008508 	.word	0x08008508
 8006fd4:	08008508 	.word	0x08008508
 8006fd8:	08008508 	.word	0x08008508
 8006fdc:	0800850c 	.word	0x0800850c

08006fe0 <memcpy>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	1e43      	subs	r3, r0, #1
 8006fe4:	440a      	add	r2, r1
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	d100      	bne.n	8006fec <memcpy+0xc>
 8006fea:	bd10      	pop	{r4, pc}
 8006fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff4:	e7f7      	b.n	8006fe6 <memcpy+0x6>

08006ff6 <memset>:
 8006ff6:	4402      	add	r2, r0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d100      	bne.n	8007000 <memset+0xa>
 8006ffe:	4770      	bx	lr
 8007000:	f803 1b01 	strb.w	r1, [r3], #1
 8007004:	e7f9      	b.n	8006ffa <memset+0x4>
	...

08007008 <_free_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4605      	mov	r5, r0
 800700c:	2900      	cmp	r1, #0
 800700e:	d045      	beq.n	800709c <_free_r+0x94>
 8007010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007014:	1f0c      	subs	r4, r1, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfb8      	it	lt
 800701a:	18e4      	addlt	r4, r4, r3
 800701c:	f000 fbe6 	bl	80077ec <__malloc_lock>
 8007020:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <_free_r+0x98>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	4610      	mov	r0, r2
 8007026:	b933      	cbnz	r3, 8007036 <_free_r+0x2e>
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	6014      	str	r4, [r2, #0]
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007032:	f000 bbdc 	b.w	80077ee <__malloc_unlock>
 8007036:	42a3      	cmp	r3, r4
 8007038:	d90c      	bls.n	8007054 <_free_r+0x4c>
 800703a:	6821      	ldr	r1, [r4, #0]
 800703c:	1862      	adds	r2, r4, r1
 800703e:	4293      	cmp	r3, r2
 8007040:	bf04      	itt	eq
 8007042:	681a      	ldreq	r2, [r3, #0]
 8007044:	685b      	ldreq	r3, [r3, #4]
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	bf04      	itt	eq
 800704a:	1852      	addeq	r2, r2, r1
 800704c:	6022      	streq	r2, [r4, #0]
 800704e:	6004      	str	r4, [r0, #0]
 8007050:	e7ec      	b.n	800702c <_free_r+0x24>
 8007052:	4613      	mov	r3, r2
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	b10a      	cbz	r2, 800705c <_free_r+0x54>
 8007058:	42a2      	cmp	r2, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x4a>
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	1858      	adds	r0, r3, r1
 8007060:	42a0      	cmp	r0, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x74>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	4401      	add	r1, r0
 8007068:	1858      	adds	r0, r3, r1
 800706a:	4282      	cmp	r2, r0
 800706c:	6019      	str	r1, [r3, #0]
 800706e:	d1dd      	bne.n	800702c <_free_r+0x24>
 8007070:	6810      	ldr	r0, [r2, #0]
 8007072:	6852      	ldr	r2, [r2, #4]
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	4401      	add	r1, r0
 8007078:	6019      	str	r1, [r3, #0]
 800707a:	e7d7      	b.n	800702c <_free_r+0x24>
 800707c:	d902      	bls.n	8007084 <_free_r+0x7c>
 800707e:	230c      	movs	r3, #12
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	e7d3      	b.n	800702c <_free_r+0x24>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	1821      	adds	r1, r4, r0
 8007088:	428a      	cmp	r2, r1
 800708a:	bf04      	itt	eq
 800708c:	6811      	ldreq	r1, [r2, #0]
 800708e:	6852      	ldreq	r2, [r2, #4]
 8007090:	6062      	str	r2, [r4, #4]
 8007092:	bf04      	itt	eq
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	605c      	str	r4, [r3, #4]
 800709a:	e7c7      	b.n	800702c <_free_r+0x24>
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	20004a3c 	.word	0x20004a3c

080070a4 <_malloc_r>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	1ccd      	adds	r5, r1, #3
 80070a8:	f025 0503 	bic.w	r5, r5, #3
 80070ac:	3508      	adds	r5, #8
 80070ae:	2d0c      	cmp	r5, #12
 80070b0:	bf38      	it	cc
 80070b2:	250c      	movcc	r5, #12
 80070b4:	2d00      	cmp	r5, #0
 80070b6:	4606      	mov	r6, r0
 80070b8:	db01      	blt.n	80070be <_malloc_r+0x1a>
 80070ba:	42a9      	cmp	r1, r5
 80070bc:	d903      	bls.n	80070c6 <_malloc_r+0x22>
 80070be:	230c      	movs	r3, #12
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	2000      	movs	r0, #0
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	f000 fb91 	bl	80077ec <__malloc_lock>
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <_malloc_r+0xac>)
 80070cc:	6814      	ldr	r4, [r2, #0]
 80070ce:	4621      	mov	r1, r4
 80070d0:	b991      	cbnz	r1, 80070f8 <_malloc_r+0x54>
 80070d2:	4c20      	ldr	r4, [pc, #128]	; (8007154 <_malloc_r+0xb0>)
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	b91b      	cbnz	r3, 80070e0 <_malloc_r+0x3c>
 80070d8:	4630      	mov	r0, r6
 80070da:	f000 f8b9 	bl	8007250 <_sbrk_r>
 80070de:	6020      	str	r0, [r4, #0]
 80070e0:	4629      	mov	r1, r5
 80070e2:	4630      	mov	r0, r6
 80070e4:	f000 f8b4 	bl	8007250 <_sbrk_r>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d124      	bne.n	8007136 <_malloc_r+0x92>
 80070ec:	230c      	movs	r3, #12
 80070ee:	6033      	str	r3, [r6, #0]
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 fb7c 	bl	80077ee <__malloc_unlock>
 80070f6:	e7e4      	b.n	80070c2 <_malloc_r+0x1e>
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	1b5b      	subs	r3, r3, r5
 80070fc:	d418      	bmi.n	8007130 <_malloc_r+0x8c>
 80070fe:	2b0b      	cmp	r3, #11
 8007100:	d90f      	bls.n	8007122 <_malloc_r+0x7e>
 8007102:	600b      	str	r3, [r1, #0]
 8007104:	50cd      	str	r5, [r1, r3]
 8007106:	18cc      	adds	r4, r1, r3
 8007108:	4630      	mov	r0, r6
 800710a:	f000 fb70 	bl	80077ee <__malloc_unlock>
 800710e:	f104 000b 	add.w	r0, r4, #11
 8007112:	1d23      	adds	r3, r4, #4
 8007114:	f020 0007 	bic.w	r0, r0, #7
 8007118:	1ac3      	subs	r3, r0, r3
 800711a:	d0d3      	beq.n	80070c4 <_malloc_r+0x20>
 800711c:	425a      	negs	r2, r3
 800711e:	50e2      	str	r2, [r4, r3]
 8007120:	e7d0      	b.n	80070c4 <_malloc_r+0x20>
 8007122:	428c      	cmp	r4, r1
 8007124:	684b      	ldr	r3, [r1, #4]
 8007126:	bf16      	itet	ne
 8007128:	6063      	strne	r3, [r4, #4]
 800712a:	6013      	streq	r3, [r2, #0]
 800712c:	460c      	movne	r4, r1
 800712e:	e7eb      	b.n	8007108 <_malloc_r+0x64>
 8007130:	460c      	mov	r4, r1
 8007132:	6849      	ldr	r1, [r1, #4]
 8007134:	e7cc      	b.n	80070d0 <_malloc_r+0x2c>
 8007136:	1cc4      	adds	r4, r0, #3
 8007138:	f024 0403 	bic.w	r4, r4, #3
 800713c:	42a0      	cmp	r0, r4
 800713e:	d005      	beq.n	800714c <_malloc_r+0xa8>
 8007140:	1a21      	subs	r1, r4, r0
 8007142:	4630      	mov	r0, r6
 8007144:	f000 f884 	bl	8007250 <_sbrk_r>
 8007148:	3001      	adds	r0, #1
 800714a:	d0cf      	beq.n	80070ec <_malloc_r+0x48>
 800714c:	6025      	str	r5, [r4, #0]
 800714e:	e7db      	b.n	8007108 <_malloc_r+0x64>
 8007150:	20004a3c 	.word	0x20004a3c
 8007154:	20004a40 	.word	0x20004a40

08007158 <iprintf>:
 8007158:	b40f      	push	{r0, r1, r2, r3}
 800715a:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <iprintf+0x2c>)
 800715c:	b513      	push	{r0, r1, r4, lr}
 800715e:	681c      	ldr	r4, [r3, #0]
 8007160:	b124      	cbz	r4, 800716c <iprintf+0x14>
 8007162:	69a3      	ldr	r3, [r4, #24]
 8007164:	b913      	cbnz	r3, 800716c <iprintf+0x14>
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fa52 	bl	8007610 <__sinit>
 800716c:	ab05      	add	r3, sp, #20
 800716e:	9a04      	ldr	r2, [sp, #16]
 8007170:	68a1      	ldr	r1, [r4, #8]
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fcb7 	bl	8007ae8 <_vfiprintf_r>
 800717a:	b002      	add	sp, #8
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	b004      	add	sp, #16
 8007182:	4770      	bx	lr
 8007184:	200000b0 	.word	0x200000b0

08007188 <_puts_r>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	460e      	mov	r6, r1
 800718c:	4605      	mov	r5, r0
 800718e:	b118      	cbz	r0, 8007198 <_puts_r+0x10>
 8007190:	6983      	ldr	r3, [r0, #24]
 8007192:	b90b      	cbnz	r3, 8007198 <_puts_r+0x10>
 8007194:	f000 fa3c 	bl	8007610 <__sinit>
 8007198:	69ab      	ldr	r3, [r5, #24]
 800719a:	68ac      	ldr	r4, [r5, #8]
 800719c:	b913      	cbnz	r3, 80071a4 <_puts_r+0x1c>
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 fa36 	bl	8007610 <__sinit>
 80071a4:	4b23      	ldr	r3, [pc, #140]	; (8007234 <_puts_r+0xac>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d117      	bne.n	80071da <_puts_r+0x52>
 80071aa:	686c      	ldr	r4, [r5, #4]
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	071b      	lsls	r3, r3, #28
 80071b0:	d51d      	bpl.n	80071ee <_puts_r+0x66>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	b1db      	cbz	r3, 80071ee <_puts_r+0x66>
 80071b6:	3e01      	subs	r6, #1
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071be:	3b01      	subs	r3, #1
 80071c0:	60a3      	str	r3, [r4, #8]
 80071c2:	b9e9      	cbnz	r1, 8007200 <_puts_r+0x78>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da2e      	bge.n	8007226 <_puts_r+0x9e>
 80071c8:	4622      	mov	r2, r4
 80071ca:	210a      	movs	r1, #10
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 f86f 	bl	80072b0 <__swbuf_r>
 80071d2:	3001      	adds	r0, #1
 80071d4:	d011      	beq.n	80071fa <_puts_r+0x72>
 80071d6:	200a      	movs	r0, #10
 80071d8:	e011      	b.n	80071fe <_puts_r+0x76>
 80071da:	4b17      	ldr	r3, [pc, #92]	; (8007238 <_puts_r+0xb0>)
 80071dc:	429c      	cmp	r4, r3
 80071de:	d101      	bne.n	80071e4 <_puts_r+0x5c>
 80071e0:	68ac      	ldr	r4, [r5, #8]
 80071e2:	e7e3      	b.n	80071ac <_puts_r+0x24>
 80071e4:	4b15      	ldr	r3, [pc, #84]	; (800723c <_puts_r+0xb4>)
 80071e6:	429c      	cmp	r4, r3
 80071e8:	bf08      	it	eq
 80071ea:	68ec      	ldreq	r4, [r5, #12]
 80071ec:	e7de      	b.n	80071ac <_puts_r+0x24>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 f8af 	bl	8007354 <__swsetup_r>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d0dd      	beq.n	80071b6 <_puts_r+0x2e>
 80071fa:	f04f 30ff 	mov.w	r0, #4294967295
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	2b00      	cmp	r3, #0
 8007202:	da04      	bge.n	800720e <_puts_r+0x86>
 8007204:	69a2      	ldr	r2, [r4, #24]
 8007206:	429a      	cmp	r2, r3
 8007208:	dc06      	bgt.n	8007218 <_puts_r+0x90>
 800720a:	290a      	cmp	r1, #10
 800720c:	d004      	beq.n	8007218 <_puts_r+0x90>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	6022      	str	r2, [r4, #0]
 8007214:	7019      	strb	r1, [r3, #0]
 8007216:	e7cf      	b.n	80071b8 <_puts_r+0x30>
 8007218:	4622      	mov	r2, r4
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f848 	bl	80072b0 <__swbuf_r>
 8007220:	3001      	adds	r0, #1
 8007222:	d1c9      	bne.n	80071b8 <_puts_r+0x30>
 8007224:	e7e9      	b.n	80071fa <_puts_r+0x72>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	200a      	movs	r0, #10
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	7018      	strb	r0, [r3, #0]
 8007230:	e7e5      	b.n	80071fe <_puts_r+0x76>
 8007232:	bf00      	nop
 8007234:	0800848c 	.word	0x0800848c
 8007238:	080084ac 	.word	0x080084ac
 800723c:	0800846c 	.word	0x0800846c

08007240 <puts>:
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <puts+0xc>)
 8007242:	4601      	mov	r1, r0
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f7ff bf9f 	b.w	8007188 <_puts_r>
 800724a:	bf00      	nop
 800724c:	200000b0 	.word	0x200000b0

08007250 <_sbrk_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4c06      	ldr	r4, [pc, #24]	; (800726c <_sbrk_r+0x1c>)
 8007254:	2300      	movs	r3, #0
 8007256:	4605      	mov	r5, r0
 8007258:	4608      	mov	r0, r1
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	f7fa ff1e 	bl	800209c <_sbrk>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_sbrk_r+0x1a>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	b103      	cbz	r3, 800726a <_sbrk_r+0x1a>
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	20004cfc 	.word	0x20004cfc

08007270 <siprintf>:
 8007270:	b40e      	push	{r1, r2, r3}
 8007272:	b500      	push	{lr}
 8007274:	b09c      	sub	sp, #112	; 0x70
 8007276:	ab1d      	add	r3, sp, #116	; 0x74
 8007278:	9002      	str	r0, [sp, #8]
 800727a:	9006      	str	r0, [sp, #24]
 800727c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007280:	4809      	ldr	r0, [pc, #36]	; (80072a8 <siprintf+0x38>)
 8007282:	9107      	str	r1, [sp, #28]
 8007284:	9104      	str	r1, [sp, #16]
 8007286:	4909      	ldr	r1, [pc, #36]	; (80072ac <siprintf+0x3c>)
 8007288:	f853 2b04 	ldr.w	r2, [r3], #4
 800728c:	9105      	str	r1, [sp, #20]
 800728e:	6800      	ldr	r0, [r0, #0]
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	a902      	add	r1, sp, #8
 8007294:	f000 fb06 	bl	80078a4 <_svfiprintf_r>
 8007298:	9b02      	ldr	r3, [sp, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	b01c      	add	sp, #112	; 0x70
 80072a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a4:	b003      	add	sp, #12
 80072a6:	4770      	bx	lr
 80072a8:	200000b0 	.word	0x200000b0
 80072ac:	ffff0208 	.word	0xffff0208

080072b0 <__swbuf_r>:
 80072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b2:	460e      	mov	r6, r1
 80072b4:	4614      	mov	r4, r2
 80072b6:	4605      	mov	r5, r0
 80072b8:	b118      	cbz	r0, 80072c2 <__swbuf_r+0x12>
 80072ba:	6983      	ldr	r3, [r0, #24]
 80072bc:	b90b      	cbnz	r3, 80072c2 <__swbuf_r+0x12>
 80072be:	f000 f9a7 	bl	8007610 <__sinit>
 80072c2:	4b21      	ldr	r3, [pc, #132]	; (8007348 <__swbuf_r+0x98>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	d12a      	bne.n	800731e <__swbuf_r+0x6e>
 80072c8:	686c      	ldr	r4, [r5, #4]
 80072ca:	69a3      	ldr	r3, [r4, #24]
 80072cc:	60a3      	str	r3, [r4, #8]
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	071a      	lsls	r2, r3, #28
 80072d2:	d52e      	bpl.n	8007332 <__swbuf_r+0x82>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	b363      	cbz	r3, 8007332 <__swbuf_r+0x82>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	6820      	ldr	r0, [r4, #0]
 80072dc:	1ac0      	subs	r0, r0, r3
 80072de:	6963      	ldr	r3, [r4, #20]
 80072e0:	b2f6      	uxtb	r6, r6
 80072e2:	4283      	cmp	r3, r0
 80072e4:	4637      	mov	r7, r6
 80072e6:	dc04      	bgt.n	80072f2 <__swbuf_r+0x42>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f926 	bl	800753c <_fflush_r>
 80072f0:	bb28      	cbnz	r0, 800733e <__swbuf_r+0x8e>
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	701e      	strb	r6, [r3, #0]
 8007300:	6963      	ldr	r3, [r4, #20]
 8007302:	3001      	adds	r0, #1
 8007304:	4283      	cmp	r3, r0
 8007306:	d004      	beq.n	8007312 <__swbuf_r+0x62>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	07db      	lsls	r3, r3, #31
 800730c:	d519      	bpl.n	8007342 <__swbuf_r+0x92>
 800730e:	2e0a      	cmp	r6, #10
 8007310:	d117      	bne.n	8007342 <__swbuf_r+0x92>
 8007312:	4621      	mov	r1, r4
 8007314:	4628      	mov	r0, r5
 8007316:	f000 f911 	bl	800753c <_fflush_r>
 800731a:	b190      	cbz	r0, 8007342 <__swbuf_r+0x92>
 800731c:	e00f      	b.n	800733e <__swbuf_r+0x8e>
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <__swbuf_r+0x9c>)
 8007320:	429c      	cmp	r4, r3
 8007322:	d101      	bne.n	8007328 <__swbuf_r+0x78>
 8007324:	68ac      	ldr	r4, [r5, #8]
 8007326:	e7d0      	b.n	80072ca <__swbuf_r+0x1a>
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <__swbuf_r+0xa0>)
 800732a:	429c      	cmp	r4, r3
 800732c:	bf08      	it	eq
 800732e:	68ec      	ldreq	r4, [r5, #12]
 8007330:	e7cb      	b.n	80072ca <__swbuf_r+0x1a>
 8007332:	4621      	mov	r1, r4
 8007334:	4628      	mov	r0, r5
 8007336:	f000 f80d 	bl	8007354 <__swsetup_r>
 800733a:	2800      	cmp	r0, #0
 800733c:	d0cc      	beq.n	80072d8 <__swbuf_r+0x28>
 800733e:	f04f 37ff 	mov.w	r7, #4294967295
 8007342:	4638      	mov	r0, r7
 8007344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007346:	bf00      	nop
 8007348:	0800848c 	.word	0x0800848c
 800734c:	080084ac 	.word	0x080084ac
 8007350:	0800846c 	.word	0x0800846c

08007354 <__swsetup_r>:
 8007354:	4b32      	ldr	r3, [pc, #200]	; (8007420 <__swsetup_r+0xcc>)
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b125      	cbz	r5, 800736a <__swsetup_r+0x16>
 8007360:	69ab      	ldr	r3, [r5, #24]
 8007362:	b913      	cbnz	r3, 800736a <__swsetup_r+0x16>
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f953 	bl	8007610 <__sinit>
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <__swsetup_r+0xd0>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d10f      	bne.n	8007390 <__swsetup_r+0x3c>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007376:	b29a      	uxth	r2, r3
 8007378:	0715      	lsls	r5, r2, #28
 800737a:	d42c      	bmi.n	80073d6 <__swsetup_r+0x82>
 800737c:	06d0      	lsls	r0, r2, #27
 800737e:	d411      	bmi.n	80073a4 <__swsetup_r+0x50>
 8007380:	2209      	movs	r2, #9
 8007382:	6032      	str	r2, [r6, #0]
 8007384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	e03e      	b.n	800740e <__swsetup_r+0xba>
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <__swsetup_r+0xd4>)
 8007392:	429c      	cmp	r4, r3
 8007394:	d101      	bne.n	800739a <__swsetup_r+0x46>
 8007396:	68ac      	ldr	r4, [r5, #8]
 8007398:	e7eb      	b.n	8007372 <__swsetup_r+0x1e>
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <__swsetup_r+0xd8>)
 800739c:	429c      	cmp	r4, r3
 800739e:	bf08      	it	eq
 80073a0:	68ec      	ldreq	r4, [r5, #12]
 80073a2:	e7e6      	b.n	8007372 <__swsetup_r+0x1e>
 80073a4:	0751      	lsls	r1, r2, #29
 80073a6:	d512      	bpl.n	80073ce <__swsetup_r+0x7a>
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073aa:	b141      	cbz	r1, 80073be <__swsetup_r+0x6a>
 80073ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <__swsetup_r+0x66>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff fe27 	bl	8007008 <_free_r>
 80073ba:	2300      	movs	r3, #0
 80073bc:	6363      	str	r3, [r4, #52]	; 0x34
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	b94b      	cbnz	r3, 80073ee <__swsetup_r+0x9a>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d003      	beq.n	80073ee <__swsetup_r+0x9a>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 f9bf 	bl	800776c <__smakebuf_r>
 80073ee:	89a2      	ldrh	r2, [r4, #12]
 80073f0:	f012 0301 	ands.w	r3, r2, #1
 80073f4:	d00c      	beq.n	8007410 <__swsetup_r+0xbc>
 80073f6:	2300      	movs	r3, #0
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	6963      	ldr	r3, [r4, #20]
 80073fc:	425b      	negs	r3, r3
 80073fe:	61a3      	str	r3, [r4, #24]
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b953      	cbnz	r3, 800741a <__swsetup_r+0xc6>
 8007404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007408:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800740c:	d1ba      	bne.n	8007384 <__swsetup_r+0x30>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	0792      	lsls	r2, r2, #30
 8007412:	bf58      	it	pl
 8007414:	6963      	ldrpl	r3, [r4, #20]
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	e7f2      	b.n	8007400 <__swsetup_r+0xac>
 800741a:	2000      	movs	r0, #0
 800741c:	e7f7      	b.n	800740e <__swsetup_r+0xba>
 800741e:	bf00      	nop
 8007420:	200000b0 	.word	0x200000b0
 8007424:	0800848c 	.word	0x0800848c
 8007428:	080084ac 	.word	0x080084ac
 800742c:	0800846c 	.word	0x0800846c

08007430 <__sflush_r>:
 8007430:	898a      	ldrh	r2, [r1, #12]
 8007432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007436:	4605      	mov	r5, r0
 8007438:	0710      	lsls	r0, r2, #28
 800743a:	460c      	mov	r4, r1
 800743c:	d458      	bmi.n	80074f0 <__sflush_r+0xc0>
 800743e:	684b      	ldr	r3, [r1, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc05      	bgt.n	8007450 <__sflush_r+0x20>
 8007444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc02      	bgt.n	8007450 <__sflush_r+0x20>
 800744a:	2000      	movs	r0, #0
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007452:	2e00      	cmp	r6, #0
 8007454:	d0f9      	beq.n	800744a <__sflush_r+0x1a>
 8007456:	2300      	movs	r3, #0
 8007458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800745c:	682f      	ldr	r7, [r5, #0]
 800745e:	6a21      	ldr	r1, [r4, #32]
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	d032      	beq.n	80074ca <__sflush_r+0x9a>
 8007464:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	075a      	lsls	r2, r3, #29
 800746a:	d505      	bpl.n	8007478 <__sflush_r+0x48>
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	1ac0      	subs	r0, r0, r3
 8007470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007472:	b10b      	cbz	r3, 8007478 <__sflush_r+0x48>
 8007474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007476:	1ac0      	subs	r0, r0, r3
 8007478:	2300      	movs	r3, #0
 800747a:	4602      	mov	r2, r0
 800747c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747e:	6a21      	ldr	r1, [r4, #32]
 8007480:	4628      	mov	r0, r5
 8007482:	47b0      	blx	r6
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	d106      	bne.n	8007498 <__sflush_r+0x68>
 800748a:	6829      	ldr	r1, [r5, #0]
 800748c:	291d      	cmp	r1, #29
 800748e:	d848      	bhi.n	8007522 <__sflush_r+0xf2>
 8007490:	4a29      	ldr	r2, [pc, #164]	; (8007538 <__sflush_r+0x108>)
 8007492:	40ca      	lsrs	r2, r1
 8007494:	07d6      	lsls	r6, r2, #31
 8007496:	d544      	bpl.n	8007522 <__sflush_r+0xf2>
 8007498:	2200      	movs	r2, #0
 800749a:	6062      	str	r2, [r4, #4]
 800749c:	04d9      	lsls	r1, r3, #19
 800749e:	6922      	ldr	r2, [r4, #16]
 80074a0:	6022      	str	r2, [r4, #0]
 80074a2:	d504      	bpl.n	80074ae <__sflush_r+0x7e>
 80074a4:	1c42      	adds	r2, r0, #1
 80074a6:	d101      	bne.n	80074ac <__sflush_r+0x7c>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b903      	cbnz	r3, 80074ae <__sflush_r+0x7e>
 80074ac:	6560      	str	r0, [r4, #84]	; 0x54
 80074ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b0:	602f      	str	r7, [r5, #0]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d0c9      	beq.n	800744a <__sflush_r+0x1a>
 80074b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ba:	4299      	cmp	r1, r3
 80074bc:	d002      	beq.n	80074c4 <__sflush_r+0x94>
 80074be:	4628      	mov	r0, r5
 80074c0:	f7ff fda2 	bl	8007008 <_free_r>
 80074c4:	2000      	movs	r0, #0
 80074c6:	6360      	str	r0, [r4, #52]	; 0x34
 80074c8:	e7c0      	b.n	800744c <__sflush_r+0x1c>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b0      	blx	r6
 80074d0:	1c41      	adds	r1, r0, #1
 80074d2:	d1c8      	bne.n	8007466 <__sflush_r+0x36>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0c5      	beq.n	8007466 <__sflush_r+0x36>
 80074da:	2b1d      	cmp	r3, #29
 80074dc:	d001      	beq.n	80074e2 <__sflush_r+0xb2>
 80074de:	2b16      	cmp	r3, #22
 80074e0:	d101      	bne.n	80074e6 <__sflush_r+0xb6>
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	e7b1      	b.n	800744a <__sflush_r+0x1a>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7ad      	b.n	800744c <__sflush_r+0x1c>
 80074f0:	690f      	ldr	r7, [r1, #16]
 80074f2:	2f00      	cmp	r7, #0
 80074f4:	d0a9      	beq.n	800744a <__sflush_r+0x1a>
 80074f6:	0793      	lsls	r3, r2, #30
 80074f8:	680e      	ldr	r6, [r1, #0]
 80074fa:	bf08      	it	eq
 80074fc:	694b      	ldreq	r3, [r1, #20]
 80074fe:	600f      	str	r7, [r1, #0]
 8007500:	bf18      	it	ne
 8007502:	2300      	movne	r3, #0
 8007504:	eba6 0807 	sub.w	r8, r6, r7
 8007508:	608b      	str	r3, [r1, #8]
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	dd9c      	ble.n	800744a <__sflush_r+0x1a>
 8007510:	4643      	mov	r3, r8
 8007512:	463a      	mov	r2, r7
 8007514:	6a21      	ldr	r1, [r4, #32]
 8007516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007518:	4628      	mov	r0, r5
 800751a:	47b0      	blx	r6
 800751c:	2800      	cmp	r0, #0
 800751e:	dc06      	bgt.n	800752e <__sflush_r+0xfe>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e78e      	b.n	800744c <__sflush_r+0x1c>
 800752e:	4407      	add	r7, r0
 8007530:	eba8 0800 	sub.w	r8, r8, r0
 8007534:	e7e9      	b.n	800750a <__sflush_r+0xda>
 8007536:	bf00      	nop
 8007538:	20400001 	.word	0x20400001

0800753c <_fflush_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	b1db      	cbz	r3, 800757e <_fflush_r+0x42>
 8007546:	b118      	cbz	r0, 8007550 <_fflush_r+0x14>
 8007548:	6983      	ldr	r3, [r0, #24]
 800754a:	b90b      	cbnz	r3, 8007550 <_fflush_r+0x14>
 800754c:	f000 f860 	bl	8007610 <__sinit>
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <_fflush_r+0x48>)
 8007552:	429c      	cmp	r4, r3
 8007554:	d109      	bne.n	800756a <_fflush_r+0x2e>
 8007556:	686c      	ldr	r4, [r5, #4]
 8007558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755c:	b17b      	cbz	r3, 800757e <_fflush_r+0x42>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007566:	f7ff bf63 	b.w	8007430 <__sflush_r>
 800756a:	4b07      	ldr	r3, [pc, #28]	; (8007588 <_fflush_r+0x4c>)
 800756c:	429c      	cmp	r4, r3
 800756e:	d101      	bne.n	8007574 <_fflush_r+0x38>
 8007570:	68ac      	ldr	r4, [r5, #8]
 8007572:	e7f1      	b.n	8007558 <_fflush_r+0x1c>
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <_fflush_r+0x50>)
 8007576:	429c      	cmp	r4, r3
 8007578:	bf08      	it	eq
 800757a:	68ec      	ldreq	r4, [r5, #12]
 800757c:	e7ec      	b.n	8007558 <_fflush_r+0x1c>
 800757e:	2000      	movs	r0, #0
 8007580:	bd38      	pop	{r3, r4, r5, pc}
 8007582:	bf00      	nop
 8007584:	0800848c 	.word	0x0800848c
 8007588:	080084ac 	.word	0x080084ac
 800758c:	0800846c 	.word	0x0800846c

08007590 <std>:
 8007590:	2300      	movs	r3, #0
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	e9c0 3300 	strd	r3, r3, [r0]
 800759a:	6083      	str	r3, [r0, #8]
 800759c:	8181      	strh	r1, [r0, #12]
 800759e:	6643      	str	r3, [r0, #100]	; 0x64
 80075a0:	81c2      	strh	r2, [r0, #14]
 80075a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075a6:	6183      	str	r3, [r0, #24]
 80075a8:	4619      	mov	r1, r3
 80075aa:	2208      	movs	r2, #8
 80075ac:	305c      	adds	r0, #92	; 0x5c
 80075ae:	f7ff fd22 	bl	8006ff6 <memset>
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <std+0x38>)
 80075b4:	6263      	str	r3, [r4, #36]	; 0x24
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x3c>)
 80075b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <std+0x40>)
 80075bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <std+0x44>)
 80075c0:	6224      	str	r4, [r4, #32]
 80075c2:	6323      	str	r3, [r4, #48]	; 0x30
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	bf00      	nop
 80075c8:	08008025 	.word	0x08008025
 80075cc:	08008047 	.word	0x08008047
 80075d0:	0800807f 	.word	0x0800807f
 80075d4:	080080a3 	.word	0x080080a3

080075d8 <_cleanup_r>:
 80075d8:	4901      	ldr	r1, [pc, #4]	; (80075e0 <_cleanup_r+0x8>)
 80075da:	f000 b885 	b.w	80076e8 <_fwalk_reent>
 80075de:	bf00      	nop
 80075e0:	0800753d 	.word	0x0800753d

080075e4 <__sfmoreglue>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	1e4a      	subs	r2, r1, #1
 80075e8:	2568      	movs	r5, #104	; 0x68
 80075ea:	4355      	muls	r5, r2
 80075ec:	460e      	mov	r6, r1
 80075ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075f2:	f7ff fd57 	bl	80070a4 <_malloc_r>
 80075f6:	4604      	mov	r4, r0
 80075f8:	b140      	cbz	r0, 800760c <__sfmoreglue+0x28>
 80075fa:	2100      	movs	r1, #0
 80075fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007600:	300c      	adds	r0, #12
 8007602:	60a0      	str	r0, [r4, #8]
 8007604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007608:	f7ff fcf5 	bl	8006ff6 <memset>
 800760c:	4620      	mov	r0, r4
 800760e:	bd70      	pop	{r4, r5, r6, pc}

08007610 <__sinit>:
 8007610:	6983      	ldr	r3, [r0, #24]
 8007612:	b510      	push	{r4, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	bb33      	cbnz	r3, 8007666 <__sinit+0x56>
 8007618:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800761c:	6503      	str	r3, [r0, #80]	; 0x50
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <__sinit+0x58>)
 8007620:	4a12      	ldr	r2, [pc, #72]	; (800766c <__sinit+0x5c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6282      	str	r2, [r0, #40]	; 0x28
 8007626:	4298      	cmp	r0, r3
 8007628:	bf04      	itt	eq
 800762a:	2301      	moveq	r3, #1
 800762c:	6183      	streq	r3, [r0, #24]
 800762e:	f000 f81f 	bl	8007670 <__sfp>
 8007632:	6060      	str	r0, [r4, #4]
 8007634:	4620      	mov	r0, r4
 8007636:	f000 f81b 	bl	8007670 <__sfp>
 800763a:	60a0      	str	r0, [r4, #8]
 800763c:	4620      	mov	r0, r4
 800763e:	f000 f817 	bl	8007670 <__sfp>
 8007642:	2200      	movs	r2, #0
 8007644:	60e0      	str	r0, [r4, #12]
 8007646:	2104      	movs	r1, #4
 8007648:	6860      	ldr	r0, [r4, #4]
 800764a:	f7ff ffa1 	bl	8007590 <std>
 800764e:	2201      	movs	r2, #1
 8007650:	2109      	movs	r1, #9
 8007652:	68a0      	ldr	r0, [r4, #8]
 8007654:	f7ff ff9c 	bl	8007590 <std>
 8007658:	2202      	movs	r2, #2
 800765a:	2112      	movs	r1, #18
 800765c:	68e0      	ldr	r0, [r4, #12]
 800765e:	f7ff ff97 	bl	8007590 <std>
 8007662:	2301      	movs	r3, #1
 8007664:	61a3      	str	r3, [r4, #24]
 8007666:	bd10      	pop	{r4, pc}
 8007668:	08008468 	.word	0x08008468
 800766c:	080075d9 	.word	0x080075d9

08007670 <__sfp>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <__sfp+0x70>)
 8007674:	681e      	ldr	r6, [r3, #0]
 8007676:	69b3      	ldr	r3, [r6, #24]
 8007678:	4607      	mov	r7, r0
 800767a:	b913      	cbnz	r3, 8007682 <__sfp+0x12>
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff ffc7 	bl	8007610 <__sinit>
 8007682:	3648      	adds	r6, #72	; 0x48
 8007684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007688:	3b01      	subs	r3, #1
 800768a:	d503      	bpl.n	8007694 <__sfp+0x24>
 800768c:	6833      	ldr	r3, [r6, #0]
 800768e:	b133      	cbz	r3, 800769e <__sfp+0x2e>
 8007690:	6836      	ldr	r6, [r6, #0]
 8007692:	e7f7      	b.n	8007684 <__sfp+0x14>
 8007694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007698:	b16d      	cbz	r5, 80076b6 <__sfp+0x46>
 800769a:	3468      	adds	r4, #104	; 0x68
 800769c:	e7f4      	b.n	8007688 <__sfp+0x18>
 800769e:	2104      	movs	r1, #4
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff ff9f 	bl	80075e4 <__sfmoreglue>
 80076a6:	6030      	str	r0, [r6, #0]
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d1f1      	bne.n	8007690 <__sfp+0x20>
 80076ac:	230c      	movs	r3, #12
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4604      	mov	r4, r0
 80076b2:	4620      	mov	r0, r4
 80076b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <__sfp+0x74>)
 80076b8:	6665      	str	r5, [r4, #100]	; 0x64
 80076ba:	e9c4 5500 	strd	r5, r5, [r4]
 80076be:	60a5      	str	r5, [r4, #8]
 80076c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80076c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80076c8:	2208      	movs	r2, #8
 80076ca:	4629      	mov	r1, r5
 80076cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d0:	f7ff fc91 	bl	8006ff6 <memset>
 80076d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076dc:	e7e9      	b.n	80076b2 <__sfp+0x42>
 80076de:	bf00      	nop
 80076e0:	08008468 	.word	0x08008468
 80076e4:	ffff0001 	.word	0xffff0001

080076e8 <_fwalk_reent>:
 80076e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	4680      	mov	r8, r0
 80076ee:	4689      	mov	r9, r1
 80076f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076f4:	2600      	movs	r6, #0
 80076f6:	b914      	cbnz	r4, 80076fe <_fwalk_reent+0x16>
 80076f8:	4630      	mov	r0, r6
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007702:	3f01      	subs	r7, #1
 8007704:	d501      	bpl.n	800770a <_fwalk_reent+0x22>
 8007706:	6824      	ldr	r4, [r4, #0]
 8007708:	e7f5      	b.n	80076f6 <_fwalk_reent+0xe>
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d907      	bls.n	8007720 <_fwalk_reent+0x38>
 8007710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007714:	3301      	adds	r3, #1
 8007716:	d003      	beq.n	8007720 <_fwalk_reent+0x38>
 8007718:	4629      	mov	r1, r5
 800771a:	4640      	mov	r0, r8
 800771c:	47c8      	blx	r9
 800771e:	4306      	orrs	r6, r0
 8007720:	3568      	adds	r5, #104	; 0x68
 8007722:	e7ee      	b.n	8007702 <_fwalk_reent+0x1a>

08007724 <__swhatbuf_r>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	460e      	mov	r6, r1
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	2900      	cmp	r1, #0
 800772e:	b096      	sub	sp, #88	; 0x58
 8007730:	4614      	mov	r4, r2
 8007732:	461d      	mov	r5, r3
 8007734:	da07      	bge.n	8007746 <__swhatbuf_r+0x22>
 8007736:	2300      	movs	r3, #0
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	89b3      	ldrh	r3, [r6, #12]
 800773c:	061a      	lsls	r2, r3, #24
 800773e:	d410      	bmi.n	8007762 <__swhatbuf_r+0x3e>
 8007740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007744:	e00e      	b.n	8007764 <__swhatbuf_r+0x40>
 8007746:	466a      	mov	r2, sp
 8007748:	f000 fcd2 	bl	80080f0 <_fstat_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	dbf2      	blt.n	8007736 <__swhatbuf_r+0x12>
 8007750:	9a01      	ldr	r2, [sp, #4]
 8007752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007756:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800775a:	425a      	negs	r2, r3
 800775c:	415a      	adcs	r2, r3
 800775e:	602a      	str	r2, [r5, #0]
 8007760:	e7ee      	b.n	8007740 <__swhatbuf_r+0x1c>
 8007762:	2340      	movs	r3, #64	; 0x40
 8007764:	2000      	movs	r0, #0
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	b016      	add	sp, #88	; 0x58
 800776a:	bd70      	pop	{r4, r5, r6, pc}

0800776c <__smakebuf_r>:
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007770:	079d      	lsls	r5, r3, #30
 8007772:	4606      	mov	r6, r0
 8007774:	460c      	mov	r4, r1
 8007776:	d507      	bpl.n	8007788 <__smakebuf_r+0x1c>
 8007778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	2301      	movs	r3, #1
 8007782:	6163      	str	r3, [r4, #20]
 8007784:	b002      	add	sp, #8
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	ab01      	add	r3, sp, #4
 800778a:	466a      	mov	r2, sp
 800778c:	f7ff ffca 	bl	8007724 <__swhatbuf_r>
 8007790:	9900      	ldr	r1, [sp, #0]
 8007792:	4605      	mov	r5, r0
 8007794:	4630      	mov	r0, r6
 8007796:	f7ff fc85 	bl	80070a4 <_malloc_r>
 800779a:	b948      	cbnz	r0, 80077b0 <__smakebuf_r+0x44>
 800779c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a0:	059a      	lsls	r2, r3, #22
 80077a2:	d4ef      	bmi.n	8007784 <__smakebuf_r+0x18>
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	f043 0302 	orr.w	r3, r3, #2
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	e7e3      	b.n	8007778 <__smakebuf_r+0xc>
 80077b0:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <__smakebuf_r+0x7c>)
 80077b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	6020      	str	r0, [r4, #0]
 80077b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	6163      	str	r3, [r4, #20]
 80077c2:	9b01      	ldr	r3, [sp, #4]
 80077c4:	6120      	str	r0, [r4, #16]
 80077c6:	b15b      	cbz	r3, 80077e0 <__smakebuf_r+0x74>
 80077c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 fca1 	bl	8008114 <_isatty_r>
 80077d2:	b128      	cbz	r0, 80077e0 <__smakebuf_r+0x74>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	431d      	orrs	r5, r3
 80077e4:	81a5      	strh	r5, [r4, #12]
 80077e6:	e7cd      	b.n	8007784 <__smakebuf_r+0x18>
 80077e8:	080075d9 	.word	0x080075d9

080077ec <__malloc_lock>:
 80077ec:	4770      	bx	lr

080077ee <__malloc_unlock>:
 80077ee:	4770      	bx	lr

080077f0 <__ssputs_r>:
 80077f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	688e      	ldr	r6, [r1, #8]
 80077f6:	429e      	cmp	r6, r3
 80077f8:	4682      	mov	sl, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4690      	mov	r8, r2
 80077fe:	4699      	mov	r9, r3
 8007800:	d837      	bhi.n	8007872 <__ssputs_r+0x82>
 8007802:	898a      	ldrh	r2, [r1, #12]
 8007804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007808:	d031      	beq.n	800786e <__ssputs_r+0x7e>
 800780a:	6825      	ldr	r5, [r4, #0]
 800780c:	6909      	ldr	r1, [r1, #16]
 800780e:	1a6f      	subs	r7, r5, r1
 8007810:	6965      	ldr	r5, [r4, #20]
 8007812:	2302      	movs	r3, #2
 8007814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007818:	fb95 f5f3 	sdiv	r5, r5, r3
 800781c:	f109 0301 	add.w	r3, r9, #1
 8007820:	443b      	add	r3, r7
 8007822:	429d      	cmp	r5, r3
 8007824:	bf38      	it	cc
 8007826:	461d      	movcc	r5, r3
 8007828:	0553      	lsls	r3, r2, #21
 800782a:	d530      	bpl.n	800788e <__ssputs_r+0x9e>
 800782c:	4629      	mov	r1, r5
 800782e:	f7ff fc39 	bl	80070a4 <_malloc_r>
 8007832:	4606      	mov	r6, r0
 8007834:	b950      	cbnz	r0, 800784c <__ssputs_r+0x5c>
 8007836:	230c      	movs	r3, #12
 8007838:	f8ca 3000 	str.w	r3, [sl]
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784c:	463a      	mov	r2, r7
 800784e:	6921      	ldr	r1, [r4, #16]
 8007850:	f7ff fbc6 	bl	8006fe0 <memcpy>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800785a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	6126      	str	r6, [r4, #16]
 8007862:	6165      	str	r5, [r4, #20]
 8007864:	443e      	add	r6, r7
 8007866:	1bed      	subs	r5, r5, r7
 8007868:	6026      	str	r6, [r4, #0]
 800786a:	60a5      	str	r5, [r4, #8]
 800786c:	464e      	mov	r6, r9
 800786e:	454e      	cmp	r6, r9
 8007870:	d900      	bls.n	8007874 <__ssputs_r+0x84>
 8007872:	464e      	mov	r6, r9
 8007874:	4632      	mov	r2, r6
 8007876:	4641      	mov	r1, r8
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	f000 fc6d 	bl	8008158 <memmove>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	1b9b      	subs	r3, r3, r6
 8007882:	60a3      	str	r3, [r4, #8]
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	441e      	add	r6, r3
 8007888:	6026      	str	r6, [r4, #0]
 800788a:	2000      	movs	r0, #0
 800788c:	e7dc      	b.n	8007848 <__ssputs_r+0x58>
 800788e:	462a      	mov	r2, r5
 8007890:	f000 fc7b 	bl	800818a <_realloc_r>
 8007894:	4606      	mov	r6, r0
 8007896:	2800      	cmp	r0, #0
 8007898:	d1e2      	bne.n	8007860 <__ssputs_r+0x70>
 800789a:	6921      	ldr	r1, [r4, #16]
 800789c:	4650      	mov	r0, sl
 800789e:	f7ff fbb3 	bl	8007008 <_free_r>
 80078a2:	e7c8      	b.n	8007836 <__ssputs_r+0x46>

080078a4 <_svfiprintf_r>:
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	461d      	mov	r5, r3
 80078aa:	898b      	ldrh	r3, [r1, #12]
 80078ac:	061f      	lsls	r7, r3, #24
 80078ae:	b09d      	sub	sp, #116	; 0x74
 80078b0:	4680      	mov	r8, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4616      	mov	r6, r2
 80078b6:	d50f      	bpl.n	80078d8 <_svfiprintf_r+0x34>
 80078b8:	690b      	ldr	r3, [r1, #16]
 80078ba:	b96b      	cbnz	r3, 80078d8 <_svfiprintf_r+0x34>
 80078bc:	2140      	movs	r1, #64	; 0x40
 80078be:	f7ff fbf1 	bl	80070a4 <_malloc_r>
 80078c2:	6020      	str	r0, [r4, #0]
 80078c4:	6120      	str	r0, [r4, #16]
 80078c6:	b928      	cbnz	r0, 80078d4 <_svfiprintf_r+0x30>
 80078c8:	230c      	movs	r3, #12
 80078ca:	f8c8 3000 	str.w	r3, [r8]
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	e0c8      	b.n	8007a66 <_svfiprintf_r+0x1c2>
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	6163      	str	r3, [r4, #20]
 80078d8:	2300      	movs	r3, #0
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	2320      	movs	r3, #32
 80078de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078e2:	2330      	movs	r3, #48	; 0x30
 80078e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078e8:	9503      	str	r5, [sp, #12]
 80078ea:	f04f 0b01 	mov.w	fp, #1
 80078ee:	4637      	mov	r7, r6
 80078f0:	463d      	mov	r5, r7
 80078f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078f6:	b10b      	cbz	r3, 80078fc <_svfiprintf_r+0x58>
 80078f8:	2b25      	cmp	r3, #37	; 0x25
 80078fa:	d13e      	bne.n	800797a <_svfiprintf_r+0xd6>
 80078fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8007900:	d00b      	beq.n	800791a <_svfiprintf_r+0x76>
 8007902:	4653      	mov	r3, sl
 8007904:	4632      	mov	r2, r6
 8007906:	4621      	mov	r1, r4
 8007908:	4640      	mov	r0, r8
 800790a:	f7ff ff71 	bl	80077f0 <__ssputs_r>
 800790e:	3001      	adds	r0, #1
 8007910:	f000 80a4 	beq.w	8007a5c <_svfiprintf_r+0x1b8>
 8007914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007916:	4453      	add	r3, sl
 8007918:	9309      	str	r3, [sp, #36]	; 0x24
 800791a:	783b      	ldrb	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 809d 	beq.w	8007a5c <_svfiprintf_r+0x1b8>
 8007922:	2300      	movs	r3, #0
 8007924:	f04f 32ff 	mov.w	r2, #4294967295
 8007928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007934:	931a      	str	r3, [sp, #104]	; 0x68
 8007936:	462f      	mov	r7, r5
 8007938:	2205      	movs	r2, #5
 800793a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800793e:	4850      	ldr	r0, [pc, #320]	; (8007a80 <_svfiprintf_r+0x1dc>)
 8007940:	f7f8 fc4e 	bl	80001e0 <memchr>
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	b9d0      	cbnz	r0, 800797e <_svfiprintf_r+0xda>
 8007948:	06d9      	lsls	r1, r3, #27
 800794a:	bf44      	itt	mi
 800794c:	2220      	movmi	r2, #32
 800794e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007952:	071a      	lsls	r2, r3, #28
 8007954:	bf44      	itt	mi
 8007956:	222b      	movmi	r2, #43	; 0x2b
 8007958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800795c:	782a      	ldrb	r2, [r5, #0]
 800795e:	2a2a      	cmp	r2, #42	; 0x2a
 8007960:	d015      	beq.n	800798e <_svfiprintf_r+0xea>
 8007962:	9a07      	ldr	r2, [sp, #28]
 8007964:	462f      	mov	r7, r5
 8007966:	2000      	movs	r0, #0
 8007968:	250a      	movs	r5, #10
 800796a:	4639      	mov	r1, r7
 800796c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007970:	3b30      	subs	r3, #48	; 0x30
 8007972:	2b09      	cmp	r3, #9
 8007974:	d94d      	bls.n	8007a12 <_svfiprintf_r+0x16e>
 8007976:	b1b8      	cbz	r0, 80079a8 <_svfiprintf_r+0x104>
 8007978:	e00f      	b.n	800799a <_svfiprintf_r+0xf6>
 800797a:	462f      	mov	r7, r5
 800797c:	e7b8      	b.n	80078f0 <_svfiprintf_r+0x4c>
 800797e:	4a40      	ldr	r2, [pc, #256]	; (8007a80 <_svfiprintf_r+0x1dc>)
 8007980:	1a80      	subs	r0, r0, r2
 8007982:	fa0b f000 	lsl.w	r0, fp, r0
 8007986:	4318      	orrs	r0, r3
 8007988:	9004      	str	r0, [sp, #16]
 800798a:	463d      	mov	r5, r7
 800798c:	e7d3      	b.n	8007936 <_svfiprintf_r+0x92>
 800798e:	9a03      	ldr	r2, [sp, #12]
 8007990:	1d11      	adds	r1, r2, #4
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	9103      	str	r1, [sp, #12]
 8007996:	2a00      	cmp	r2, #0
 8007998:	db01      	blt.n	800799e <_svfiprintf_r+0xfa>
 800799a:	9207      	str	r2, [sp, #28]
 800799c:	e004      	b.n	80079a8 <_svfiprintf_r+0x104>
 800799e:	4252      	negs	r2, r2
 80079a0:	f043 0302 	orr.w	r3, r3, #2
 80079a4:	9207      	str	r2, [sp, #28]
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	783b      	ldrb	r3, [r7, #0]
 80079aa:	2b2e      	cmp	r3, #46	; 0x2e
 80079ac:	d10c      	bne.n	80079c8 <_svfiprintf_r+0x124>
 80079ae:	787b      	ldrb	r3, [r7, #1]
 80079b0:	2b2a      	cmp	r3, #42	; 0x2a
 80079b2:	d133      	bne.n	8007a1c <_svfiprintf_r+0x178>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	1d1a      	adds	r2, r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	9203      	str	r2, [sp, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfb8      	it	lt
 80079c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80079c4:	3702      	adds	r7, #2
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	4d2e      	ldr	r5, [pc, #184]	; (8007a84 <_svfiprintf_r+0x1e0>)
 80079ca:	7839      	ldrb	r1, [r7, #0]
 80079cc:	2203      	movs	r2, #3
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7f8 fc06 	bl	80001e0 <memchr>
 80079d4:	b138      	cbz	r0, 80079e6 <_svfiprintf_r+0x142>
 80079d6:	2340      	movs	r3, #64	; 0x40
 80079d8:	1b40      	subs	r0, r0, r5
 80079da:	fa03 f000 	lsl.w	r0, r3, r0
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	4303      	orrs	r3, r0
 80079e2:	3701      	adds	r7, #1
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	7839      	ldrb	r1, [r7, #0]
 80079e8:	4827      	ldr	r0, [pc, #156]	; (8007a88 <_svfiprintf_r+0x1e4>)
 80079ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ee:	2206      	movs	r2, #6
 80079f0:	1c7e      	adds	r6, r7, #1
 80079f2:	f7f8 fbf5 	bl	80001e0 <memchr>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d038      	beq.n	8007a6c <_svfiprintf_r+0x1c8>
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <_svfiprintf_r+0x1e8>)
 80079fc:	bb13      	cbnz	r3, 8007a44 <_svfiprintf_r+0x1a0>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	3307      	adds	r3, #7
 8007a02:	f023 0307 	bic.w	r3, r3, #7
 8007a06:	3308      	adds	r3, #8
 8007a08:	9303      	str	r3, [sp, #12]
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	444b      	add	r3, r9
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	e76d      	b.n	80078ee <_svfiprintf_r+0x4a>
 8007a12:	fb05 3202 	mla	r2, r5, r2, r3
 8007a16:	2001      	movs	r0, #1
 8007a18:	460f      	mov	r7, r1
 8007a1a:	e7a6      	b.n	800796a <_svfiprintf_r+0xc6>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	3701      	adds	r7, #1
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	4619      	mov	r1, r3
 8007a24:	250a      	movs	r5, #10
 8007a26:	4638      	mov	r0, r7
 8007a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2c:	3a30      	subs	r2, #48	; 0x30
 8007a2e:	2a09      	cmp	r2, #9
 8007a30:	d903      	bls.n	8007a3a <_svfiprintf_r+0x196>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c8      	beq.n	80079c8 <_svfiprintf_r+0x124>
 8007a36:	9105      	str	r1, [sp, #20]
 8007a38:	e7c6      	b.n	80079c8 <_svfiprintf_r+0x124>
 8007a3a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4607      	mov	r7, r0
 8007a42:	e7f0      	b.n	8007a26 <_svfiprintf_r+0x182>
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <_svfiprintf_r+0x1ec>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f3af 8000 	nop.w
 8007a54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a58:	4681      	mov	r9, r0
 8007a5a:	d1d6      	bne.n	8007a0a <_svfiprintf_r+0x166>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	065b      	lsls	r3, r3, #25
 8007a60:	f53f af35 	bmi.w	80078ce <_svfiprintf_r+0x2a>
 8007a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a66:	b01d      	add	sp, #116	; 0x74
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	4622      	mov	r2, r4
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <_svfiprintf_r+0x1ec>)
 8007a74:	a904      	add	r1, sp, #16
 8007a76:	4640      	mov	r0, r8
 8007a78:	f000 f9c2 	bl	8007e00 <_printf_i>
 8007a7c:	e7ea      	b.n	8007a54 <_svfiprintf_r+0x1b0>
 8007a7e:	bf00      	nop
 8007a80:	080084cc 	.word	0x080084cc
 8007a84:	080084d2 	.word	0x080084d2
 8007a88:	080084d6 	.word	0x080084d6
 8007a8c:	00000000 	.word	0x00000000
 8007a90:	080077f1 	.word	0x080077f1

08007a94 <__sfputc_r>:
 8007a94:	6893      	ldr	r3, [r2, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	b410      	push	{r4}
 8007a9c:	6093      	str	r3, [r2, #8]
 8007a9e:	da08      	bge.n	8007ab2 <__sfputc_r+0x1e>
 8007aa0:	6994      	ldr	r4, [r2, #24]
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	db01      	blt.n	8007aaa <__sfputc_r+0x16>
 8007aa6:	290a      	cmp	r1, #10
 8007aa8:	d103      	bne.n	8007ab2 <__sfputc_r+0x1e>
 8007aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aae:	f7ff bbff 	b.w	80072b0 <__swbuf_r>
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	1c58      	adds	r0, r3, #1
 8007ab6:	6010      	str	r0, [r2, #0]
 8007ab8:	7019      	strb	r1, [r3, #0]
 8007aba:	4608      	mov	r0, r1
 8007abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <__sfputs_r>:
 8007ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	4614      	mov	r4, r2
 8007aca:	18d5      	adds	r5, r2, r3
 8007acc:	42ac      	cmp	r4, r5
 8007ace:	d101      	bne.n	8007ad4 <__sfputs_r+0x12>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e007      	b.n	8007ae4 <__sfputs_r+0x22>
 8007ad4:	463a      	mov	r2, r7
 8007ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffda 	bl	8007a94 <__sfputc_r>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d1f3      	bne.n	8007acc <__sfputs_r+0xa>
 8007ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ae8 <_vfiprintf_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	b09d      	sub	sp, #116	; 0x74
 8007af0:	4617      	mov	r7, r2
 8007af2:	461d      	mov	r5, r3
 8007af4:	4606      	mov	r6, r0
 8007af6:	b118      	cbz	r0, 8007b00 <_vfiprintf_r+0x18>
 8007af8:	6983      	ldr	r3, [r0, #24]
 8007afa:	b90b      	cbnz	r3, 8007b00 <_vfiprintf_r+0x18>
 8007afc:	f7ff fd88 	bl	8007610 <__sinit>
 8007b00:	4b7c      	ldr	r3, [pc, #496]	; (8007cf4 <_vfiprintf_r+0x20c>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d158      	bne.n	8007bb8 <_vfiprintf_r+0xd0>
 8007b06:	6874      	ldr	r4, [r6, #4]
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	0718      	lsls	r0, r3, #28
 8007b0c:	d55e      	bpl.n	8007bcc <_vfiprintf_r+0xe4>
 8007b0e:	6923      	ldr	r3, [r4, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d05b      	beq.n	8007bcc <_vfiprintf_r+0xe4>
 8007b14:	2300      	movs	r3, #0
 8007b16:	9309      	str	r3, [sp, #36]	; 0x24
 8007b18:	2320      	movs	r3, #32
 8007b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b1e:	2330      	movs	r3, #48	; 0x30
 8007b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b24:	9503      	str	r5, [sp, #12]
 8007b26:	f04f 0b01 	mov.w	fp, #1
 8007b2a:	46b8      	mov	r8, r7
 8007b2c:	4645      	mov	r5, r8
 8007b2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b32:	b10b      	cbz	r3, 8007b38 <_vfiprintf_r+0x50>
 8007b34:	2b25      	cmp	r3, #37	; 0x25
 8007b36:	d154      	bne.n	8007be2 <_vfiprintf_r+0xfa>
 8007b38:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b3c:	d00b      	beq.n	8007b56 <_vfiprintf_r+0x6e>
 8007b3e:	4653      	mov	r3, sl
 8007b40:	463a      	mov	r2, r7
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ffbc 	bl	8007ac2 <__sfputs_r>
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f000 80c2 	beq.w	8007cd4 <_vfiprintf_r+0x1ec>
 8007b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b52:	4453      	add	r3, sl
 8007b54:	9309      	str	r3, [sp, #36]	; 0x24
 8007b56:	f898 3000 	ldrb.w	r3, [r8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80ba 	beq.w	8007cd4 <_vfiprintf_r+0x1ec>
 8007b60:	2300      	movs	r3, #0
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295
 8007b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	9307      	str	r3, [sp, #28]
 8007b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b72:	931a      	str	r3, [sp, #104]	; 0x68
 8007b74:	46a8      	mov	r8, r5
 8007b76:	2205      	movs	r2, #5
 8007b78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007b7c:	485e      	ldr	r0, [pc, #376]	; (8007cf8 <_vfiprintf_r+0x210>)
 8007b7e:	f7f8 fb2f 	bl	80001e0 <memchr>
 8007b82:	9b04      	ldr	r3, [sp, #16]
 8007b84:	bb78      	cbnz	r0, 8007be6 <_vfiprintf_r+0xfe>
 8007b86:	06d9      	lsls	r1, r3, #27
 8007b88:	bf44      	itt	mi
 8007b8a:	2220      	movmi	r2, #32
 8007b8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b90:	071a      	lsls	r2, r3, #28
 8007b92:	bf44      	itt	mi
 8007b94:	222b      	movmi	r2, #43	; 0x2b
 8007b96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b9a:	782a      	ldrb	r2, [r5, #0]
 8007b9c:	2a2a      	cmp	r2, #42	; 0x2a
 8007b9e:	d02a      	beq.n	8007bf6 <_vfiprintf_r+0x10e>
 8007ba0:	9a07      	ldr	r2, [sp, #28]
 8007ba2:	46a8      	mov	r8, r5
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	250a      	movs	r5, #10
 8007ba8:	4641      	mov	r1, r8
 8007baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bae:	3b30      	subs	r3, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d969      	bls.n	8007c88 <_vfiprintf_r+0x1a0>
 8007bb4:	b360      	cbz	r0, 8007c10 <_vfiprintf_r+0x128>
 8007bb6:	e024      	b.n	8007c02 <_vfiprintf_r+0x11a>
 8007bb8:	4b50      	ldr	r3, [pc, #320]	; (8007cfc <_vfiprintf_r+0x214>)
 8007bba:	429c      	cmp	r4, r3
 8007bbc:	d101      	bne.n	8007bc2 <_vfiprintf_r+0xda>
 8007bbe:	68b4      	ldr	r4, [r6, #8]
 8007bc0:	e7a2      	b.n	8007b08 <_vfiprintf_r+0x20>
 8007bc2:	4b4f      	ldr	r3, [pc, #316]	; (8007d00 <_vfiprintf_r+0x218>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	bf08      	it	eq
 8007bc8:	68f4      	ldreq	r4, [r6, #12]
 8007bca:	e79d      	b.n	8007b08 <_vfiprintf_r+0x20>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff fbc0 	bl	8007354 <__swsetup_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d09d      	beq.n	8007b14 <_vfiprintf_r+0x2c>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b01d      	add	sp, #116	; 0x74
 8007bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be2:	46a8      	mov	r8, r5
 8007be4:	e7a2      	b.n	8007b2c <_vfiprintf_r+0x44>
 8007be6:	4a44      	ldr	r2, [pc, #272]	; (8007cf8 <_vfiprintf_r+0x210>)
 8007be8:	1a80      	subs	r0, r0, r2
 8007bea:	fa0b f000 	lsl.w	r0, fp, r0
 8007bee:	4318      	orrs	r0, r3
 8007bf0:	9004      	str	r0, [sp, #16]
 8007bf2:	4645      	mov	r5, r8
 8007bf4:	e7be      	b.n	8007b74 <_vfiprintf_r+0x8c>
 8007bf6:	9a03      	ldr	r2, [sp, #12]
 8007bf8:	1d11      	adds	r1, r2, #4
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	9103      	str	r1, [sp, #12]
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	db01      	blt.n	8007c06 <_vfiprintf_r+0x11e>
 8007c02:	9207      	str	r2, [sp, #28]
 8007c04:	e004      	b.n	8007c10 <_vfiprintf_r+0x128>
 8007c06:	4252      	negs	r2, r2
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	9207      	str	r2, [sp, #28]
 8007c0e:	9304      	str	r3, [sp, #16]
 8007c10:	f898 3000 	ldrb.w	r3, [r8]
 8007c14:	2b2e      	cmp	r3, #46	; 0x2e
 8007c16:	d10e      	bne.n	8007c36 <_vfiprintf_r+0x14e>
 8007c18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1e:	d138      	bne.n	8007c92 <_vfiprintf_r+0x1aa>
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	1d1a      	adds	r2, r3, #4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	9203      	str	r2, [sp, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bfb8      	it	lt
 8007c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c30:	f108 0802 	add.w	r8, r8, #2
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	4d33      	ldr	r5, [pc, #204]	; (8007d04 <_vfiprintf_r+0x21c>)
 8007c38:	f898 1000 	ldrb.w	r1, [r8]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7f8 face 	bl	80001e0 <memchr>
 8007c44:	b140      	cbz	r0, 8007c58 <_vfiprintf_r+0x170>
 8007c46:	2340      	movs	r3, #64	; 0x40
 8007c48:	1b40      	subs	r0, r0, r5
 8007c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	4303      	orrs	r3, r0
 8007c52:	f108 0801 	add.w	r8, r8, #1
 8007c56:	9304      	str	r3, [sp, #16]
 8007c58:	f898 1000 	ldrb.w	r1, [r8]
 8007c5c:	482a      	ldr	r0, [pc, #168]	; (8007d08 <_vfiprintf_r+0x220>)
 8007c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c62:	2206      	movs	r2, #6
 8007c64:	f108 0701 	add.w	r7, r8, #1
 8007c68:	f7f8 faba 	bl	80001e0 <memchr>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d037      	beq.n	8007ce0 <_vfiprintf_r+0x1f8>
 8007c70:	4b26      	ldr	r3, [pc, #152]	; (8007d0c <_vfiprintf_r+0x224>)
 8007c72:	bb1b      	cbnz	r3, 8007cbc <_vfiprintf_r+0x1d4>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c82:	444b      	add	r3, r9
 8007c84:	9309      	str	r3, [sp, #36]	; 0x24
 8007c86:	e750      	b.n	8007b2a <_vfiprintf_r+0x42>
 8007c88:	fb05 3202 	mla	r2, r5, r2, r3
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	4688      	mov	r8, r1
 8007c90:	e78a      	b.n	8007ba8 <_vfiprintf_r+0xc0>
 8007c92:	2300      	movs	r3, #0
 8007c94:	f108 0801 	add.w	r8, r8, #1
 8007c98:	9305      	str	r3, [sp, #20]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	250a      	movs	r5, #10
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca4:	3a30      	subs	r2, #48	; 0x30
 8007ca6:	2a09      	cmp	r2, #9
 8007ca8:	d903      	bls.n	8007cb2 <_vfiprintf_r+0x1ca>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c3      	beq.n	8007c36 <_vfiprintf_r+0x14e>
 8007cae:	9105      	str	r1, [sp, #20]
 8007cb0:	e7c1      	b.n	8007c36 <_vfiprintf_r+0x14e>
 8007cb2:	fb05 2101 	mla	r1, r5, r1, r2
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4680      	mov	r8, r0
 8007cba:	e7f0      	b.n	8007c9e <_vfiprintf_r+0x1b6>
 8007cbc:	ab03      	add	r3, sp, #12
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <_vfiprintf_r+0x228>)
 8007cc4:	a904      	add	r1, sp, #16
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f3af 8000 	nop.w
 8007ccc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cd0:	4681      	mov	r9, r0
 8007cd2:	d1d5      	bne.n	8007c80 <_vfiprintf_r+0x198>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	065b      	lsls	r3, r3, #25
 8007cd8:	f53f af7e 	bmi.w	8007bd8 <_vfiprintf_r+0xf0>
 8007cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cde:	e77d      	b.n	8007bdc <_vfiprintf_r+0xf4>
 8007ce0:	ab03      	add	r3, sp, #12
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <_vfiprintf_r+0x228>)
 8007ce8:	a904      	add	r1, sp, #16
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f888 	bl	8007e00 <_printf_i>
 8007cf0:	e7ec      	b.n	8007ccc <_vfiprintf_r+0x1e4>
 8007cf2:	bf00      	nop
 8007cf4:	0800848c 	.word	0x0800848c
 8007cf8:	080084cc 	.word	0x080084cc
 8007cfc:	080084ac 	.word	0x080084ac
 8007d00:	0800846c 	.word	0x0800846c
 8007d04:	080084d2 	.word	0x080084d2
 8007d08:	080084d6 	.word	0x080084d6
 8007d0c:	00000000 	.word	0x00000000
 8007d10:	08007ac3 	.word	0x08007ac3

08007d14 <_printf_common>:
 8007d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d18:	4691      	mov	r9, r2
 8007d1a:	461f      	mov	r7, r3
 8007d1c:	688a      	ldr	r2, [r1, #8]
 8007d1e:	690b      	ldr	r3, [r1, #16]
 8007d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d24:	4293      	cmp	r3, r2
 8007d26:	bfb8      	it	lt
 8007d28:	4613      	movlt	r3, r2
 8007d2a:	f8c9 3000 	str.w	r3, [r9]
 8007d2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d32:	4606      	mov	r6, r0
 8007d34:	460c      	mov	r4, r1
 8007d36:	b112      	cbz	r2, 8007d3e <_printf_common+0x2a>
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f8c9 3000 	str.w	r3, [r9]
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	0699      	lsls	r1, r3, #26
 8007d42:	bf42      	ittt	mi
 8007d44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d48:	3302      	addmi	r3, #2
 8007d4a:	f8c9 3000 	strmi.w	r3, [r9]
 8007d4e:	6825      	ldr	r5, [r4, #0]
 8007d50:	f015 0506 	ands.w	r5, r5, #6
 8007d54:	d107      	bne.n	8007d66 <_printf_common+0x52>
 8007d56:	f104 0a19 	add.w	sl, r4, #25
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	42ab      	cmp	r3, r5
 8007d64:	dc28      	bgt.n	8007db8 <_printf_common+0xa4>
 8007d66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d6a:	6822      	ldr	r2, [r4, #0]
 8007d6c:	3300      	adds	r3, #0
 8007d6e:	bf18      	it	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	0692      	lsls	r2, r2, #26
 8007d74:	d42d      	bmi.n	8007dd2 <_printf_common+0xbe>
 8007d76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	47c0      	blx	r8
 8007d80:	3001      	adds	r0, #1
 8007d82:	d020      	beq.n	8007dc6 <_printf_common+0xb2>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	68e5      	ldr	r5, [r4, #12]
 8007d88:	f8d9 2000 	ldr.w	r2, [r9]
 8007d8c:	f003 0306 	and.w	r3, r3, #6
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	bf08      	it	eq
 8007d94:	1aad      	subeq	r5, r5, r2
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	6922      	ldr	r2, [r4, #16]
 8007d9a:	bf0c      	ite	eq
 8007d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da0:	2500      	movne	r5, #0
 8007da2:	4293      	cmp	r3, r2
 8007da4:	bfc4      	itt	gt
 8007da6:	1a9b      	subgt	r3, r3, r2
 8007da8:	18ed      	addgt	r5, r5, r3
 8007daa:	f04f 0900 	mov.w	r9, #0
 8007dae:	341a      	adds	r4, #26
 8007db0:	454d      	cmp	r5, r9
 8007db2:	d11a      	bne.n	8007dea <_printf_common+0xd6>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e008      	b.n	8007dca <_printf_common+0xb6>
 8007db8:	2301      	movs	r3, #1
 8007dba:	4652      	mov	r2, sl
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	47c0      	blx	r8
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d103      	bne.n	8007dce <_printf_common+0xba>
 8007dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	3501      	adds	r5, #1
 8007dd0:	e7c3      	b.n	8007d5a <_printf_common+0x46>
 8007dd2:	18e1      	adds	r1, r4, r3
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	2030      	movs	r0, #48	; 0x30
 8007dd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ddc:	4422      	add	r2, r4
 8007dde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de6:	3302      	adds	r3, #2
 8007de8:	e7c5      	b.n	8007d76 <_printf_common+0x62>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4622      	mov	r2, r4
 8007dee:	4639      	mov	r1, r7
 8007df0:	4630      	mov	r0, r6
 8007df2:	47c0      	blx	r8
 8007df4:	3001      	adds	r0, #1
 8007df6:	d0e6      	beq.n	8007dc6 <_printf_common+0xb2>
 8007df8:	f109 0901 	add.w	r9, r9, #1
 8007dfc:	e7d8      	b.n	8007db0 <_printf_common+0x9c>
	...

08007e00 <_printf_i>:
 8007e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e08:	460c      	mov	r4, r1
 8007e0a:	7e09      	ldrb	r1, [r1, #24]
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	296e      	cmp	r1, #110	; 0x6e
 8007e10:	4617      	mov	r7, r2
 8007e12:	4606      	mov	r6, r0
 8007e14:	4698      	mov	r8, r3
 8007e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e18:	f000 80b3 	beq.w	8007f82 <_printf_i+0x182>
 8007e1c:	d822      	bhi.n	8007e64 <_printf_i+0x64>
 8007e1e:	2963      	cmp	r1, #99	; 0x63
 8007e20:	d036      	beq.n	8007e90 <_printf_i+0x90>
 8007e22:	d80a      	bhi.n	8007e3a <_printf_i+0x3a>
 8007e24:	2900      	cmp	r1, #0
 8007e26:	f000 80b9 	beq.w	8007f9c <_printf_i+0x19c>
 8007e2a:	2958      	cmp	r1, #88	; 0x58
 8007e2c:	f000 8083 	beq.w	8007f36 <_printf_i+0x136>
 8007e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e38:	e032      	b.n	8007ea0 <_printf_i+0xa0>
 8007e3a:	2964      	cmp	r1, #100	; 0x64
 8007e3c:	d001      	beq.n	8007e42 <_printf_i+0x42>
 8007e3e:	2969      	cmp	r1, #105	; 0x69
 8007e40:	d1f6      	bne.n	8007e30 <_printf_i+0x30>
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	6813      	ldr	r3, [r2, #0]
 8007e46:	0605      	lsls	r5, r0, #24
 8007e48:	f103 0104 	add.w	r1, r3, #4
 8007e4c:	d52a      	bpl.n	8007ea4 <_printf_i+0xa4>
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da03      	bge.n	8007e5e <_printf_i+0x5e>
 8007e56:	222d      	movs	r2, #45	; 0x2d
 8007e58:	425b      	negs	r3, r3
 8007e5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e5e:	486f      	ldr	r0, [pc, #444]	; (800801c <_printf_i+0x21c>)
 8007e60:	220a      	movs	r2, #10
 8007e62:	e039      	b.n	8007ed8 <_printf_i+0xd8>
 8007e64:	2973      	cmp	r1, #115	; 0x73
 8007e66:	f000 809d 	beq.w	8007fa4 <_printf_i+0x1a4>
 8007e6a:	d808      	bhi.n	8007e7e <_printf_i+0x7e>
 8007e6c:	296f      	cmp	r1, #111	; 0x6f
 8007e6e:	d020      	beq.n	8007eb2 <_printf_i+0xb2>
 8007e70:	2970      	cmp	r1, #112	; 0x70
 8007e72:	d1dd      	bne.n	8007e30 <_printf_i+0x30>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	f043 0320 	orr.w	r3, r3, #32
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	e003      	b.n	8007e86 <_printf_i+0x86>
 8007e7e:	2975      	cmp	r1, #117	; 0x75
 8007e80:	d017      	beq.n	8007eb2 <_printf_i+0xb2>
 8007e82:	2978      	cmp	r1, #120	; 0x78
 8007e84:	d1d4      	bne.n	8007e30 <_printf_i+0x30>
 8007e86:	2378      	movs	r3, #120	; 0x78
 8007e88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e8c:	4864      	ldr	r0, [pc, #400]	; (8008020 <_printf_i+0x220>)
 8007e8e:	e055      	b.n	8007f3c <_printf_i+0x13c>
 8007e90:	6813      	ldr	r3, [r2, #0]
 8007e92:	1d19      	adds	r1, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6011      	str	r1, [r2, #0]
 8007e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e08c      	b.n	8007fbe <_printf_i+0x1be>
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6011      	str	r1, [r2, #0]
 8007ea8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eac:	bf18      	it	ne
 8007eae:	b21b      	sxthne	r3, r3
 8007eb0:	e7cf      	b.n	8007e52 <_printf_i+0x52>
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	6825      	ldr	r5, [r4, #0]
 8007eb6:	1d18      	adds	r0, r3, #4
 8007eb8:	6010      	str	r0, [r2, #0]
 8007eba:	0628      	lsls	r0, r5, #24
 8007ebc:	d501      	bpl.n	8007ec2 <_printf_i+0xc2>
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	e002      	b.n	8007ec8 <_printf_i+0xc8>
 8007ec2:	0668      	lsls	r0, r5, #25
 8007ec4:	d5fb      	bpl.n	8007ebe <_printf_i+0xbe>
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	4854      	ldr	r0, [pc, #336]	; (800801c <_printf_i+0x21c>)
 8007eca:	296f      	cmp	r1, #111	; 0x6f
 8007ecc:	bf14      	ite	ne
 8007ece:	220a      	movne	r2, #10
 8007ed0:	2208      	moveq	r2, #8
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ed8:	6865      	ldr	r5, [r4, #4]
 8007eda:	60a5      	str	r5, [r4, #8]
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	f2c0 8095 	blt.w	800800c <_printf_i+0x20c>
 8007ee2:	6821      	ldr	r1, [r4, #0]
 8007ee4:	f021 0104 	bic.w	r1, r1, #4
 8007ee8:	6021      	str	r1, [r4, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d13d      	bne.n	8007f6a <_printf_i+0x16a>
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	f040 808e 	bne.w	8008010 <_printf_i+0x210>
 8007ef4:	4665      	mov	r5, ip
 8007ef6:	2a08      	cmp	r2, #8
 8007ef8:	d10b      	bne.n	8007f12 <_printf_i+0x112>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	07db      	lsls	r3, r3, #31
 8007efe:	d508      	bpl.n	8007f12 <_printf_i+0x112>
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bfde      	ittt	le
 8007f08:	2330      	movle	r3, #48	; 0x30
 8007f0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f12:	ebac 0305 	sub.w	r3, ip, r5
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	f8cd 8000 	str.w	r8, [sp]
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	aa03      	add	r2, sp, #12
 8007f20:	4621      	mov	r1, r4
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7ff fef6 	bl	8007d14 <_printf_common>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d14d      	bne.n	8007fc8 <_printf_i+0x1c8>
 8007f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f30:	b005      	add	sp, #20
 8007f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f36:	4839      	ldr	r0, [pc, #228]	; (800801c <_printf_i+0x21c>)
 8007f38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f3c:	6813      	ldr	r3, [r2, #0]
 8007f3e:	6821      	ldr	r1, [r4, #0]
 8007f40:	1d1d      	adds	r5, r3, #4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6015      	str	r5, [r2, #0]
 8007f46:	060a      	lsls	r2, r1, #24
 8007f48:	d50b      	bpl.n	8007f62 <_printf_i+0x162>
 8007f4a:	07ca      	lsls	r2, r1, #31
 8007f4c:	bf44      	itt	mi
 8007f4e:	f041 0120 	orrmi.w	r1, r1, #32
 8007f52:	6021      	strmi	r1, [r4, #0]
 8007f54:	b91b      	cbnz	r3, 8007f5e <_printf_i+0x15e>
 8007f56:	6822      	ldr	r2, [r4, #0]
 8007f58:	f022 0220 	bic.w	r2, r2, #32
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	e7b7      	b.n	8007ed2 <_printf_i+0xd2>
 8007f62:	064d      	lsls	r5, r1, #25
 8007f64:	bf48      	it	mi
 8007f66:	b29b      	uxthmi	r3, r3
 8007f68:	e7ef      	b.n	8007f4a <_printf_i+0x14a>
 8007f6a:	4665      	mov	r5, ip
 8007f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f70:	fb02 3311 	mls	r3, r2, r1, r3
 8007f74:	5cc3      	ldrb	r3, [r0, r3]
 8007f76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d1f5      	bne.n	8007f6c <_printf_i+0x16c>
 8007f80:	e7b9      	b.n	8007ef6 <_printf_i+0xf6>
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	6825      	ldr	r5, [r4, #0]
 8007f86:	6961      	ldr	r1, [r4, #20]
 8007f88:	1d18      	adds	r0, r3, #4
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	0628      	lsls	r0, r5, #24
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	d501      	bpl.n	8007f96 <_printf_i+0x196>
 8007f92:	6019      	str	r1, [r3, #0]
 8007f94:	e002      	b.n	8007f9c <_printf_i+0x19c>
 8007f96:	066a      	lsls	r2, r5, #25
 8007f98:	d5fb      	bpl.n	8007f92 <_printf_i+0x192>
 8007f9a:	8019      	strh	r1, [r3, #0]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	4665      	mov	r5, ip
 8007fa2:	e7b9      	b.n	8007f18 <_printf_i+0x118>
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	1d19      	adds	r1, r3, #4
 8007fa8:	6011      	str	r1, [r2, #0]
 8007faa:	681d      	ldr	r5, [r3, #0]
 8007fac:	6862      	ldr	r2, [r4, #4]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7f8 f915 	bl	80001e0 <memchr>
 8007fb6:	b108      	cbz	r0, 8007fbc <_printf_i+0x1bc>
 8007fb8:	1b40      	subs	r0, r0, r5
 8007fba:	6060      	str	r0, [r4, #4]
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc6:	e7a7      	b.n	8007f18 <_printf_i+0x118>
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4630      	mov	r0, r6
 8007fd0:	47c0      	blx	r8
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d0aa      	beq.n	8007f2c <_printf_i+0x12c>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	079b      	lsls	r3, r3, #30
 8007fda:	d413      	bmi.n	8008004 <_printf_i+0x204>
 8007fdc:	68e0      	ldr	r0, [r4, #12]
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	4298      	cmp	r0, r3
 8007fe2:	bfb8      	it	lt
 8007fe4:	4618      	movlt	r0, r3
 8007fe6:	e7a3      	b.n	8007f30 <_printf_i+0x130>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	464a      	mov	r2, r9
 8007fec:	4639      	mov	r1, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	47c0      	blx	r8
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d09a      	beq.n	8007f2c <_printf_i+0x12c>
 8007ff6:	3501      	adds	r5, #1
 8007ff8:	68e3      	ldr	r3, [r4, #12]
 8007ffa:	9a03      	ldr	r2, [sp, #12]
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	42ab      	cmp	r3, r5
 8008000:	dcf2      	bgt.n	8007fe8 <_printf_i+0x1e8>
 8008002:	e7eb      	b.n	8007fdc <_printf_i+0x1dc>
 8008004:	2500      	movs	r5, #0
 8008006:	f104 0919 	add.w	r9, r4, #25
 800800a:	e7f5      	b.n	8007ff8 <_printf_i+0x1f8>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1ac      	bne.n	8007f6a <_printf_i+0x16a>
 8008010:	7803      	ldrb	r3, [r0, #0]
 8008012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008016:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800801a:	e76c      	b.n	8007ef6 <_printf_i+0xf6>
 800801c:	080084dd 	.word	0x080084dd
 8008020:	080084ee 	.word	0x080084ee

08008024 <__sread>:
 8008024:	b510      	push	{r4, lr}
 8008026:	460c      	mov	r4, r1
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	f000 f8d4 	bl	80081d8 <_read_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	bfab      	itete	ge
 8008034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008036:	89a3      	ldrhlt	r3, [r4, #12]
 8008038:	181b      	addge	r3, r3, r0
 800803a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800803e:	bfac      	ite	ge
 8008040:	6563      	strge	r3, [r4, #84]	; 0x54
 8008042:	81a3      	strhlt	r3, [r4, #12]
 8008044:	bd10      	pop	{r4, pc}

08008046 <__swrite>:
 8008046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804a:	461f      	mov	r7, r3
 800804c:	898b      	ldrh	r3, [r1, #12]
 800804e:	05db      	lsls	r3, r3, #23
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4616      	mov	r6, r2
 8008056:	d505      	bpl.n	8008064 <__swrite+0x1e>
 8008058:	2302      	movs	r3, #2
 800805a:	2200      	movs	r2, #0
 800805c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008060:	f000 f868 	bl	8008134 <_lseek_r>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800806a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	4632      	mov	r2, r6
 8008072:	463b      	mov	r3, r7
 8008074:	4628      	mov	r0, r5
 8008076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	f000 b817 	b.w	80080ac <_write_r>

0800807e <__sseek>:
 800807e:	b510      	push	{r4, lr}
 8008080:	460c      	mov	r4, r1
 8008082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008086:	f000 f855 	bl	8008134 <_lseek_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	bf15      	itete	ne
 8008090:	6560      	strne	r0, [r4, #84]	; 0x54
 8008092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800809a:	81a3      	strheq	r3, [r4, #12]
 800809c:	bf18      	it	ne
 800809e:	81a3      	strhne	r3, [r4, #12]
 80080a0:	bd10      	pop	{r4, pc}

080080a2 <__sclose>:
 80080a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a6:	f000 b813 	b.w	80080d0 <_close_r>
	...

080080ac <_write_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4c07      	ldr	r4, [pc, #28]	; (80080cc <_write_r+0x20>)
 80080b0:	4605      	mov	r5, r0
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	2200      	movs	r2, #0
 80080b8:	6022      	str	r2, [r4, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f7f9 fb2c 	bl	8001718 <_write>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_write_r+0x1e>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_write_r+0x1e>
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20004cfc 	.word	0x20004cfc

080080d0 <_close_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4c06      	ldr	r4, [pc, #24]	; (80080ec <_close_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4605      	mov	r5, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	f7f9 ffaa 	bl	8002034 <_close>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_close_r+0x1a>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_close_r+0x1a>
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20004cfc 	.word	0x20004cfc

080080f0 <_fstat_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4c07      	ldr	r4, [pc, #28]	; (8008110 <_fstat_r+0x20>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4605      	mov	r5, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	f7f9 ffa5 	bl	800204c <_fstat>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_fstat_r+0x1c>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	b103      	cbz	r3, 800810c <_fstat_r+0x1c>
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	20004cfc 	.word	0x20004cfc

08008114 <_isatty_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4c06      	ldr	r4, [pc, #24]	; (8008130 <_isatty_r+0x1c>)
 8008118:	2300      	movs	r3, #0
 800811a:	4605      	mov	r5, r0
 800811c:	4608      	mov	r0, r1
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	f7f9 ffa4 	bl	800206c <_isatty>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_isatty_r+0x1a>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	b103      	cbz	r3, 800812e <_isatty_r+0x1a>
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20004cfc 	.word	0x20004cfc

08008134 <_lseek_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4c07      	ldr	r4, [pc, #28]	; (8008154 <_lseek_r+0x20>)
 8008138:	4605      	mov	r5, r0
 800813a:	4608      	mov	r0, r1
 800813c:	4611      	mov	r1, r2
 800813e:	2200      	movs	r2, #0
 8008140:	6022      	str	r2, [r4, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	f7f9 ff9d 	bl	8002082 <_lseek>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_lseek_r+0x1e>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	b103      	cbz	r3, 8008152 <_lseek_r+0x1e>
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20004cfc 	.word	0x20004cfc

08008158 <memmove>:
 8008158:	4288      	cmp	r0, r1
 800815a:	b510      	push	{r4, lr}
 800815c:	eb01 0302 	add.w	r3, r1, r2
 8008160:	d807      	bhi.n	8008172 <memmove+0x1a>
 8008162:	1e42      	subs	r2, r0, #1
 8008164:	4299      	cmp	r1, r3
 8008166:	d00a      	beq.n	800817e <memmove+0x26>
 8008168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800816c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008170:	e7f8      	b.n	8008164 <memmove+0xc>
 8008172:	4283      	cmp	r3, r0
 8008174:	d9f5      	bls.n	8008162 <memmove+0xa>
 8008176:	1881      	adds	r1, r0, r2
 8008178:	1ad2      	subs	r2, r2, r3
 800817a:	42d3      	cmn	r3, r2
 800817c:	d100      	bne.n	8008180 <memmove+0x28>
 800817e:	bd10      	pop	{r4, pc}
 8008180:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008184:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008188:	e7f7      	b.n	800817a <memmove+0x22>

0800818a <_realloc_r>:
 800818a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818c:	4607      	mov	r7, r0
 800818e:	4614      	mov	r4, r2
 8008190:	460e      	mov	r6, r1
 8008192:	b921      	cbnz	r1, 800819e <_realloc_r+0x14>
 8008194:	4611      	mov	r1, r2
 8008196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800819a:	f7fe bf83 	b.w	80070a4 <_malloc_r>
 800819e:	b922      	cbnz	r2, 80081aa <_realloc_r+0x20>
 80081a0:	f7fe ff32 	bl	8007008 <_free_r>
 80081a4:	4625      	mov	r5, r4
 80081a6:	4628      	mov	r0, r5
 80081a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081aa:	f000 f827 	bl	80081fc <_malloc_usable_size_r>
 80081ae:	42a0      	cmp	r0, r4
 80081b0:	d20f      	bcs.n	80081d2 <_realloc_r+0x48>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7fe ff75 	bl	80070a4 <_malloc_r>
 80081ba:	4605      	mov	r5, r0
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0f2      	beq.n	80081a6 <_realloc_r+0x1c>
 80081c0:	4631      	mov	r1, r6
 80081c2:	4622      	mov	r2, r4
 80081c4:	f7fe ff0c 	bl	8006fe0 <memcpy>
 80081c8:	4631      	mov	r1, r6
 80081ca:	4638      	mov	r0, r7
 80081cc:	f7fe ff1c 	bl	8007008 <_free_r>
 80081d0:	e7e9      	b.n	80081a6 <_realloc_r+0x1c>
 80081d2:	4635      	mov	r5, r6
 80081d4:	e7e7      	b.n	80081a6 <_realloc_r+0x1c>
	...

080081d8 <_read_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4c07      	ldr	r4, [pc, #28]	; (80081f8 <_read_r+0x20>)
 80081dc:	4605      	mov	r5, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	6022      	str	r2, [r4, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7f9 ff07 	bl	8001ffa <_read>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_read_r+0x1e>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_read_r+0x1e>
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20004cfc 	.word	0x20004cfc

080081fc <_malloc_usable_size_r>:
 80081fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008200:	1f18      	subs	r0, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfbc      	itt	lt
 8008206:	580b      	ldrlt	r3, [r1, r0]
 8008208:	18c0      	addlt	r0, r0, r3
 800820a:	4770      	bx	lr

0800820c <_init>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr

08008218 <_fini>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr
