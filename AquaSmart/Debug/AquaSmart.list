
AquaSmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007278  08007278  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007280  08007280  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08007288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000114  0800739c  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800739c  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bb1  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036c9  00000000  00000000  00039cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  0003d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  0003e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019d7c  00000000  00000000  0003f458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010841  00000000  00000000  000591d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094b7c  00000000  00000000  00069a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  000fe60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007070 	.word	0x08007070

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	08007070 	.word	0x08007070

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SX1278_hw_SetNSS>:
__weak void SX1278_hw_init(SX1278_hw_t * hw) {
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6958      	ldr	r0, [r3, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	b299      	uxth	r1, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	f002 f889 	bl	80026b8 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffdf 	bl	8000580 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6998      	ldr	r0, [r3, #24]
 80005c6:	1cf9      	adds	r1, r7, #3
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	2201      	movs	r2, #1
 80005ce:	f002 fd1f 	bl	8003010 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80005d2:	bf00      	nop
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 ffef 	bl	80035bc <HAL_SPI_GetState>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d1f7      	bne.n	80005d4 <SX1278_hw_SPICommand+0x26>
		;
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80005fc:	2100      	movs	r1, #0
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ffbe 	bl	8000580 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6998      	ldr	r0, [r3, #24]
 8000608:	f107 020e 	add.w	r2, r7, #14
 800060c:	f107 010f 	add.w	r1, r7, #15
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f002 fe2e 	bl	8003278 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800061c:	bf00      	nop
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4618      	mov	r0, r3
 8000624:	f002 ffca 	bl	80035bc <HAL_SPI_GetState>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1f7      	bne.n	800061e <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800062e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <SX1278_hw_GetDIO0>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	68da      	ldr	r2, [r3, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	b29b      	uxth	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	4610      	mov	r0, r2
 800064e:	f002 f81b 	bl	8002688 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	bf0c      	ite	eq
 8000658:	2301      	moveq	r3, #1
 800065a:	2300      	movne	r3, #0
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	78fa      	ldrb	r2, [r7, #3]
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff97 	bl	80005ae <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ffb1 	bl	80005ec <SX1278_hw_SPIReadByte>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2101      	movs	r1, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff73 	bl	8000580 <SX1278_hw_SetNSS>
	return tmp;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	4613      	mov	r3, r2
 80006b2:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff60 	bl	8000580 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	4610      	mov	r0, r2
 80006d0:	f7ff ff6d 	bl	80005ae <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	78ba      	ldrb	r2, [r7, #2]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff66 	bl	80005ae <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff49 	bl	8000580 <SX1278_hw_SetNSS>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b087      	sub	sp, #28
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	461a      	mov	r2, r3
 8000702:	460b      	mov	r3, r1
 8000704:	72fb      	strb	r3, [r7, #11]
 8000706:	4613      	mov	r3, r2
 8000708:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800070a:	7abb      	ldrb	r3, [r7, #10]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d927      	bls.n	8000760 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff32 	bl	8000580 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	7afa      	ldrb	r2, [r7, #11]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff42 	bl	80005ae <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	75fb      	strb	r3, [r7, #23]
 800072e:	e00c      	b.n	800074a <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	7dfb      	ldrb	r3, [r7, #23]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	18d4      	adds	r4, r2, r3
 800073a:	4608      	mov	r0, r1
 800073c:	f7ff ff56 	bl	80005ec <SX1278_hw_SPIReadByte>
 8000740:	4603      	mov	r3, r0
 8000742:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	3301      	adds	r3, #1
 8000748:	75fb      	strb	r3, [r7, #23]
 800074a:	7dfa      	ldrb	r2, [r7, #23]
 800074c:	7abb      	ldrb	r3, [r7, #10]
 800074e:	429a      	cmp	r2, r3
 8000750:	d3ee      	bcc.n	8000730 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2101      	movs	r1, #1
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff11 	bl	8000580 <SX1278_hw_SetNSS>
 800075e:	e000      	b.n	8000762 <SX1278_SPIBurstRead+0x6c>
		return;
 8000760:	bf00      	nop
	}
}
 8000762:	371c      	adds	r7, #28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd90      	pop	{r4, r7, pc}

08000768 <SX1278_clearLoRaIrq>:

void SX1278_entryLoRa(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
}

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	2112      	movs	r1, #18
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff95 	bl	80006a4 <SX1278_SPIWrite>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <SX1278_LoRaRxPacket>:
		}
		SX1278_hw_DelayMs(1);
	}
}

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff52 	bl	8000638 <SX1278_hw_GetDIO0>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d030      	beq.n	80007fc <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	330a      	adds	r3, #10
 800079e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f006 f85e 	bl	8006866 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80007aa:	2110      	movs	r1, #16
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff5a 	bl	8000666 <SX1278_SPIRead>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	461a      	mov	r2, r3
 80007ba:	210d      	movs	r1, #13
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff71 	bl	80006a4 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	799b      	ldrb	r3, [r3, #6]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7a1b      	ldrb	r3, [r3, #8]
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e005      	b.n	80007de <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80007d2:	2113      	movs	r1, #19
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff46 	bl	8000666 <SX1278_SPIRead>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f103 020a 	add.w	r2, r3, #10
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	2100      	movs	r1, #0
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff84 	bl	80006f6 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7bfa      	ldrb	r2, [r7, #15]
 80007f2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffb6 	bl	8000768 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <MX_ADC1_Init+0x9c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_ADC1_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_ADC1_Init+0x98>)
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_ADC1_Init+0xa0>)
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000858:	2201      	movs	r2, #1
 800085a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_ADC1_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_ADC1_Init+0x98>)
 8000866:	2201      	movs	r2, #1
 8000868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	; (80008a4 <MX_ADC1_Init+0x98>)
 800086c:	f001 f94c 	bl	8001b08 <HAL_ADC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fef5 	bl	8001664 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087a:	2301      	movs	r3, #1
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_ADC1_Init+0x98>)
 800088c:	f001 fa66 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000896:	f000 fee5 	bl	8001664 <Error_Handler>
  }

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20004a44 	.word	0x20004a44
 80008a8:	40012000 	.word	0x40012000
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_ADC_MspInit+0x7c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d127      	bne.n	8000922 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_ADC_MspInit+0x80>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <HAL_ADC_MspInit+0x80>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <HAL_ADC_MspInit+0x80>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_ADC_MspInit+0x80>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_ADC_MspInit+0x80>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_ADC_MspInit+0x80>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 800090a:	2306      	movs	r3, #6
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <HAL_ADC_MspInit+0x84>)
 800091e:	f001 fd31 	bl	8002384 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40012000 	.word	0x40012000
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 800093e:	4a23      	ldr	r2, [pc, #140]	; (80009cc <MX_FREERTOS_Init+0x94>)
 8000940:	2134      	movs	r1, #52	; 0x34
 8000942:	2001      	movs	r0, #1
 8000944:	f003 f8a2 	bl	8003a8c <osMessageQueueNew>
 8000948:	4602      	mov	r2, r0
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_FREERTOS_Init+0x98>)
 800094c:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor2_attributes);
 800094e:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_FREERTOS_Init+0x9c>)
 8000950:	2134      	movs	r1, #52	; 0x34
 8000952:	2001      	movs	r0, #1
 8000954:	f003 f89a 	bl	8003a8c <osMessageQueueNew>
 8000958:	4602      	mov	r2, r0
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_FREERTOS_Init+0xa0>)
 800095c:	601a      	str	r2, [r3, #0]

  /* creation of myQueueDataSaved */
  myQueueDataSavedHandle = osMessageQueueNew (1, sizeof(t_bool), &myQueueDataSaved_attributes);
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <MX_FREERTOS_Init+0xa4>)
 8000960:	2101      	movs	r1, #1
 8000962:	2001      	movs	r0, #1
 8000964:	f003 f892 	bl	8003a8c <osMessageQueueNew>
 8000968:	4602      	mov	r2, r0
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_FREERTOS_Init+0xa8>)
 800096c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800096e:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <MX_FREERTOS_Init+0xac>)
 8000970:	2100      	movs	r1, #0
 8000972:	481d      	ldr	r0, [pc, #116]	; (80009e8 <MX_FREERTOS_Init+0xb0>)
 8000974:	f002 ff76 	bl	8003864 <osThreadNew>
 8000978:	4602      	mov	r2, r0
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_FREERTOS_Init+0xb4>)
 800097c:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_FREERTOS_Init+0xb8>)
 8000984:	4619      	mov	r1, r3
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <MX_FREERTOS_Init+0xbc>)
 8000988:	f002 ff6c 	bl	8003864 <osThreadNew>
 800098c:	4602      	mov	r2, r0
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_FREERTOS_Init+0xc0>)
 8000990:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 8000992:	463b      	mov	r3, r7
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <MX_FREERTOS_Init+0xc4>)
 8000996:	4619      	mov	r1, r3
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <MX_FREERTOS_Init+0xc8>)
 800099a:	f002 ff63 	bl	8003864 <osThreadNew>
 800099e:	4602      	mov	r2, r0
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_FREERTOS_Init+0xcc>)
 80009a2:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <MX_FREERTOS_Init+0xd0>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_FREERTOS_Init+0xd4>)
 80009aa:	f002 ff5b 	bl	8003864 <osThreadNew>
 80009ae:	4602      	mov	r2, r0
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_FREERTOS_Init+0xd8>)
 80009b2:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_FREERTOS_Init+0xdc>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <MX_FREERTOS_Init+0xe0>)
 80009ba:	f002 ff53 	bl	8003864 <osThreadNew>
 80009be:	4602      	mov	r2, r0
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_FREERTOS_Init+0xe4>)
 80009c2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	080071ec 	.word	0x080071ec
 80009d0:	20004aac 	.word	0x20004aac
 80009d4:	08007204 	.word	0x08007204
 80009d8:	20004a98 	.word	0x20004a98
 80009dc:	0800721c 	.word	0x0800721c
 80009e0:	20004aa4 	.word	0x20004aa4
 80009e4:	08007138 	.word	0x08007138
 80009e8:	08000a21 	.word	0x08000a21
 80009ec:	20004a90 	.word	0x20004a90
 80009f0:	0800715c 	.word	0x0800715c
 80009f4:	08000a31 	.word	0x08000a31
 80009f8:	20004aa0 	.word	0x20004aa0
 80009fc:	08007180 	.word	0x08007180
 8000a00:	08000b31 	.word	0x08000b31
 8000a04:	20004ab0 	.word	0x20004ab0
 8000a08:	080071a4 	.word	0x080071a4
 8000a0c:	08000c31 	.word	0x08000c31
 8000a10:	20004a8c 	.word	0x20004a8c
 8000a14:	080071c8 	.word	0x080071c8
 8000a18:	08000cb5 	.word	0x08000cb5
 8000a1c:	20004aa8 	.word	0x20004aa8

08000a20 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f002 ffc1 	bl	80039b0 <osDelay>
 8000a2e:	e7fb      	b.n	8000a28 <StartDefaultTask+0x8>

08000a30 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09a      	sub	sp, #104	; 0x68
 8000a34:	af08      	add	r7, sp, #32
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
	sensor_t sensor1;
	t_bool sensor1_measured = FALSE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	72fb      	strb	r3, [r7, #11]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40

    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8000a44:	f107 000c 	add.w	r0, r7, #12
 8000a48:	2304      	movs	r3, #4
 8000a4a:	9307      	str	r3, [sp, #28]
 8000a4c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a50:	9306      	str	r3, [sp, #24]
 8000a52:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a56:	9305      	str	r3, [sp, #20]
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	9304      	str	r3, [sp, #16]
 8000a5e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000a62:	9303      	str	r3, [sp, #12]
 8000a64:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2302      	movs	r3, #2
 8000a76:	2201      	movs	r2, #1
 8000a78:	2101      	movs	r1, #1
 8000a7a:	f000 fbc5 	bl	8001208 <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000a86:	f000 fbad 	bl	80011e4 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8000a8a:	f002 fec3 	bl	8003814 <osKernelGetTickCount>
 8000a8e:	6478      	str	r0, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {

	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8000a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	dc1d      	bgt.n	8000ad4 <StartTaskSensor1+0xa4>
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <StartTaskSensor1+0xf0>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d119      	bne.n	8000ad4 <StartTaskSensor1+0xa4>
	{
		sensor1_ON = TRUE;
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <StartTaskSensor1+0xf4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
		adc_config_ch1();
 8000aa6:	f000 fd21 	bl	80014ec <adc_config_ch1>
		fsm_fire(&(fsm_s1->fsm));
 8000aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f987 	bl	8000dc0 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <StartTaskSensor1+0xf8>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab8:	6899      	ldr	r1, [r3, #8]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	f003 f86b 	bl	8003b98 <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <StartTaskSensor1+0xfc>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 010b 	add.w	r1, r7, #11
 8000aca:	2300      	movs	r3, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	f003 f863 	bl	8003b98 <osMessageQueuePut>
 8000ad2:	e002      	b.n	8000ada <StartTaskSensor1+0xaa>
	}
	else sensor1_ON = FALSE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <StartTaskSensor1+0xf4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]

	if(fsm_s1->fsm.current_state > 4)
 8000ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	dd15      	ble.n	8000b0e <StartTaskSensor1+0xde>
	{
		sensor1_measured = TRUE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	72fb      	strb	r3, [r7, #11]
		fsm_fire(&(fsm_s1->fsm));
 8000ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f969 	bl	8000dc0 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <StartTaskSensor1+0xf8>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af4:	6899      	ldr	r1, [r3, #8]
 8000af6:	2300      	movs	r3, #0
 8000af8:	2200      	movs	r2, #0
 8000afa:	f003 f84d 	bl	8003b98 <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <StartTaskSensor1+0xfc>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	f107 010b 	add.w	r1, r7, #11
 8000b06:	2300      	movs	r3, #0
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f003 f845 	bl	8003b98 <osMessageQueuePut>
	}
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 8000b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b10:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000b14:	647b      	str	r3, [r7, #68]	; 0x44
    osDelayUntil(tDelay);
 8000b16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000b18:	f002 ff78 	bl	8003a0c <osDelayUntil>
	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8000b1c:	e7b8      	b.n	8000a90 <StartTaskSensor1+0x60>
 8000b1e:	bf00      	nop
 8000b20:	20004a94 	.word	0x20004a94
 8000b24:	20004a9c 	.word	0x20004a9c
 8000b28:	20004aac 	.word	0x20004aac
 8000b2c:	20004aa4 	.word	0x20004aa4

08000b30 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09a      	sub	sp, #104	; 0x68
 8000b34:	af08      	add	r7, sp, #32
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
	sensor_t sensor2;
	t_bool sensor2_measured = FALSE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	72fb      	strb	r3, [r7, #11]

    fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40

    sensor_initialization(&sensor2, ID_Device, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 8000b44:	f107 000c 	add.w	r0, r7, #12
 8000b48:	2304      	movs	r3, #4
 8000b4a:	9307      	str	r3, [sp, #28]
 8000b4c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000b50:	9306      	str	r3, [sp, #24]
 8000b52:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b56:	9305      	str	r3, [sp, #20]
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	9304      	str	r3, [sp, #16]
 8000b5e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	2302      	movs	r3, #2
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2340      	movs	r3, #64	; 0x40
 8000b76:	2202      	movs	r2, #2
 8000b78:	2101      	movs	r1, #1
 8000b7a:	f000 fb45 	bl	8001208 <sensor_initialization>
    fsm_sensor_init(fsm_s2, &sensor2);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b86:	f000 fb2d 	bl	80011e4 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8000b8a:	f002 fe43 	bl	8003814 <osKernelGetTickCount>
 8000b8e:	6478      	str	r0, [r7, #68]	; 0x44
  for(;;)
  {

	/*Select ADC Channel 1*/

	if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8000b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	dc1d      	bgt.n	8000bd4 <StartTaskSensor2+0xa4>
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <StartTaskSensor2+0xf0>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d119      	bne.n	8000bd4 <StartTaskSensor2+0xa4>
	{
		sensor2_ON = TRUE;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <StartTaskSensor2+0xf4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		adc_config_ch2();
 8000ba6:	f000 fcc1 	bl	800152c <adc_config_ch2>
		fsm_fire(&(fsm_s2->fsm));
 8000baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f907 	bl	8000dc0 <fsm_fire>
		osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <StartTaskSensor2+0xf8>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb8:	6899      	ldr	r1, [r3, #8]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f002 ffeb 	bl	8003b98 <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <StartTaskSensor2+0xfc>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	f107 010b 	add.w	r1, r7, #11
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f002 ffe3 	bl	8003b98 <osMessageQueuePut>
 8000bd2:	e002      	b.n	8000bda <StartTaskSensor2+0xaa>
	}
	else sensor2_ON = FALSE;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <StartTaskSensor2+0xf4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]

	if(fsm_s2->fsm.current_state > 4)
 8000bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	dd15      	ble.n	8000c0e <StartTaskSensor2+0xde>
	{
		sensor2_measured = TRUE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	72fb      	strb	r3, [r7, #11]
		fsm_fire(&(fsm_s2->fsm));
 8000be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f8e9 	bl	8000dc0 <fsm_fire>
		osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <StartTaskSensor2+0xf8>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bf4:	6899      	ldr	r1, [r3, #8]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f002 ffcd 	bl	8003b98 <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <StartTaskSensor2+0xfc>)
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	f107 010b 	add.w	r1, r7, #11
 8000c06:	2300      	movs	r3, #0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f002 ffc5 	bl	8003b98 <osMessageQueuePut>
	}
	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8000c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c14:	647b      	str	r3, [r7, #68]	; 0x44
    osDelayUntil(tDelay);
 8000c16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c18:	f002 fef8 	bl	8003a0c <osDelayUntil>
	if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8000c1c:	e7b8      	b.n	8000b90 <StartTaskSensor2+0x60>
 8000c1e:	bf00      	nop
 8000c20:	20004a9c 	.word	0x20004a9c
 8000c24:	20004a94 	.word	0x20004a94
 8000c28:	20004a98 	.word	0x20004a98
 8000c2c:	20004aa4 	.word	0x20004aa4

08000c30 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
	uint32_t tDelay = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
	tDelay = osKernelGetTickCount();
 8000c3c:	f002 fdea 	bl	8003814 <osKernelGetTickCount>
 8000c40:	60f8      	str	r0, [r7, #12]
	uint8_t master;
	t_bool sensor1_state = FALSE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	727b      	strb	r3, [r7, #9]
	t_bool sensor2_state = FALSE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	723b      	strb	r3, [r7, #8]

	/*master 1 for all devices, 0 for GW*/
	master = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	72bb      	strb	r3, [r7, #10]

	Lora_inicio(master);  //0 es esclavo, 1 es maestro
 8000c4e:	7abb      	ldrb	r3, [r7, #10]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fc9d 	bl	8001590 <Lora_inicio>

	/* Infinite loop */
	for(;;)
	{
	  osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <StartTaskLoRa+0x80>)
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	f107 0109 	add.w	r1, r7, #9
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2200      	movs	r2, #0
 8000c62:	f003 f80d 	bl	8003c80 <osMessageQueueGet>
	  osMessageQueueGet(myQueueDataSavedHandle, &sensor2_state, 0, 0);
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <StartTaskLoRa+0x80>)
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	f107 0108 	add.w	r1, r7, #8
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	f003 f805 	bl	8003c80 <osMessageQueueGet>

	if (master == 1)
 8000c76:	7abb      	ldrb	r3, [r7, #10]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10e      	bne.n	8000c9a <StartTaskLoRa+0x6a>
	{
	//	if(sensor1_state && sensor2_state)
		if(sensor1_state)
 8000c7c:	7a7b      	ldrb	r3, [r7, #9]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00d      	beq.n	8000c9e <StartTaskLoRa+0x6e>
		{
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	72fb      	strb	r3, [r7, #11]
 8000c86:	e004      	b.n	8000c92 <StartTaskLoRa+0x62>
			{
				Lora_envia();
 8000c88:	f000 fcc4 	bl	8001614 <Lora_envia>
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	72fb      	strb	r3, [r7, #11]
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d9f7      	bls.n	8000c88 <StartTaskLoRa+0x58>
 8000c98:	e001      	b.n	8000c9e <StartTaskLoRa+0x6e>
			}
		}
	}
	else
	{
		Lora_recibe();
 8000c9a:	f000 fcad 	bl	80015f8 <Lora_recibe>
	}
	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(tDelay);
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f002 feaf 	bl	8003a0c <osDelayUntil>
	  osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 8000cae:	e7d2      	b.n	8000c56 <StartTaskLoRa+0x26>
 8000cb0:	20004aa4 	.word	0x20004aa4

08000cb4 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b09e      	sub	sp, #120	; 0x78
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 8000cc0:	f002 fda8 	bl	8003814 <osKernelGetTickCount>
 8000cc4:	6778      	str	r0, [r7, #116]	; 0x74

	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <StartTaskLEDs+0xe0>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f002 ffd5 	bl	8003c80 <osMessageQueueGet>
		//osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);



		//if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
		if(sensor1.measuring == TRUE) /*LED BLUE => MEASURING*/
 8000cd6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d10c      	bne.n	8000cf8 <StartTaskLEDs+0x44>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce4:	482c      	ldr	r0, [pc, #176]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000ce6:	f001 fce7 	bl	80026b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf0:	4829      	ldr	r0, [pc, #164]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000cf2:	f001 fce1 	bl	80026b8 <HAL_GPIO_WritePin>
 8000cf6:	e033      	b.n	8000d60 <StartTaskLEDs+0xac>
		}
		else
		{
			if(sensor1.sleeping == TRUE)
 8000cf8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d123      	bne.n	8000d48 <StartTaskLEDs+0x94>
//			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	4824      	ldr	r0, [pc, #144]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d08:	f001 fcd6 	bl	80026b8 <HAL_GPIO_WritePin>
//				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
				if(sensor1.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8000d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10c      	bne.n	8000d2e <StartTaskLEDs+0x7a>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	481f      	ldr	r0, [pc, #124]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d1c:	f001 fccc 	bl	80026b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d28:	f001 fcc6 	bl	80026b8 <HAL_GPIO_WritePin>
 8000d2c:	e018      	b.n	8000d60 <StartTaskLEDs+0xac>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d36:	f001 fcbf 	bl	80026b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	4815      	ldr	r0, [pc, #84]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d42:	f001 fcb9 	bl	80026b8 <HAL_GPIO_WritePin>
 8000d46:	e00b      	b.n	8000d60 <StartTaskLEDs+0xac>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	4812      	ldr	r0, [pc, #72]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d50:	f001 fcb2 	bl	80026b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d5c:	f001 fcac 	bl	80026b8 <HAL_GPIO_WritePin>
			}
		}

//		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
		if(sensor1.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000d60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d106      	bne.n	8000d76 <StartTaskLEDs+0xc2>
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d70:	f001 fca2 	bl	80026b8 <HAL_GPIO_WritePin>
 8000d74:	e005      	b.n	8000d82 <StartTaskLEDs+0xce>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <StartTaskLEDs+0xe4>)
 8000d7e:	f001 fc9b 	bl	80026b8 <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8000d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d88:	677b      	str	r3, [r7, #116]	; 0x74
		osDelayUntil(tDelay);
 8000d8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d8c:	f002 fe3e 	bl	8003a0c <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8000d90:	e799      	b.n	8000cc6 <StartTaskLEDs+0x12>
 8000d92:	bf00      	nop
 8000d94:	20004aac 	.word	0x20004aac
 8000d98:	40020c00 	.word	0x40020c00

08000d9c <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e01c      	b.n	8000e0a <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d113      	bne.n	8000e04 <fsm_fire+0x44>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4798      	blx	r3
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00c      	beq.n	8000e14 <fsm_fire+0x54>
        t->out(this);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
      break;
 8000e02:	e007      	b.n	8000e14 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3310      	adds	r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	dade      	bge.n	8000dd0 <fsm_fire+0x10>
    }
  }
}
 8000e12:	e000      	b.n	8000e16 <fsm_fire+0x56>
      break;
 8000e14:	bf00      	nop
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	2301      	movs	r3, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <error>:

int error (fsm_t* this) {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	889b      	ldrh	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <error+0x26>
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	889a      	ldrh	r2, [r3, #4]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d901      	bls.n	8000e5e <error+0x2a>
		return 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <error+0x2c>
	else return 0;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <no_error>:

int no_error (fsm_t* this) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	889b      	ldrh	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <no_error+0x2a>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d801      	bhi.n	8000e96 <no_error+0x2a>
		return 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <no_error+0x2c>
	else return 0;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <timer_sleep+0x2c>
 8000ebe:	f000 fe17 	bl	8001af0 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d301      	bcc.n	8000ed0 <timer_sleep+0x2c>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <timer_sleep+0x2e>
	else return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <timer_adc>:

int timer_adc (fsm_t* this) {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>250); /*Timer to ensure ADC setup*/
 8000ee2:	f000 fe05 	bl	8001af0 <HAL_GetTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2bfa      	cmp	r3, #250	; 0xfa
 8000eea:	bf8c      	ite	hi
 8000eec:	2301      	movhi	r3, #1
 8000eee:	2300      	movls	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <timer_setup>:

int timer_setup (fsm_t* this) {
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000f0c:	f000 fdf0 	bl	8001af0 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	bf8c      	ite	hi
 8000f1a:	2301      	movhi	r3, #1
 8000f1c:	2300      	movls	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <warned>:

int warned (fsm_t* this) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	bfd4      	ite	le
 8000f42:	2301      	movle	r3, #1
 8000f44:	2300      	movgt	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	60bb      	str	r3, [r7, #8]

	if(config->measure_count>=(config->measure_average))
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	7f1b      	ldrb	r3, [r3, #28]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d301      	bcc.n	8000f78 <timer_measure+0x24>
	return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e009      	b.n	8000f8c <timer_measure+0x38>
	else return (HAL_GetTick()>=(config->measure_timer));
 8000f78:	f000 fdba 	bl	8001af0 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	bf2c      	ite	cs
 8000f86:	2301      	movcs	r3, #1
 8000f88:	2300      	movcc	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <warning_limit>:

int warning_limit (fsm_t* this) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	bfcc      	ite	gt
 8000fae:	2301      	movgt	r3, #1
 8000fb0:	2300      	movle	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <measuring>:

void measuring (fsm_t* this) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 8000fd6:	480f      	ldr	r0, [pc, #60]	; (8001014 <measuring+0x54>)
 8000fd8:	f000 feb3 	bl	8001d42 <HAL_ADC_GetValue>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	885a      	ldrh	r2, [r3, #2]
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	7f1b      	ldrb	r3, [r3, #28]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 8000ffa:	f000 fd79 	bl	8001af0 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001004:	4413      	add	r3, r2
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	619a      	str	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20004a44 	.word	0x20004a44

08001018 <process_data>:

void process_data (fsm_t* this) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	885a      	ldrh	r2, [r3, #2]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <process_data+0x50>)
 8001034:	f000 fe52 	bl	8001cdc <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	889a      	ldrh	r2, [r3, #4]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001040:	429a      	cmp	r2, r3
 8001042:	d809      	bhi.n	8001058 <process_data+0x40>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	889a      	ldrh	r2, [r3, #4]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800104c:	429a      	cmp	r2, r3
 800104e:	d303      	bcc.n	8001058 <process_data+0x40>
	{
		config->alarm = 0;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2200      	movs	r2, #0
 8001054:	719a      	strb	r2, [r3, #6]
 8001056:	e002      	b.n	800105e <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2201      	movs	r2, #1
 800105c:	719a      	strb	r2, [r3, #6]
	}

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20004a44 	.word	0x20004a44

0800106c <alert>:
void alert (fsm_t* this) {
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	615a      	str	r2, [r3, #20]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <sleep>:

void sleep (fsm_t* this) { // led orange
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 80010a6:	f000 fd23 	bl	8001af0 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80010b0:	4413      	add	r3, r2
 80010b2:	461a      	mov	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <sleep+0x5c>)
 80010c2:	f001 faf9 	bl	80026b8 <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2201      	movs	r2, #1
 80010ca:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2200      	movs	r2, #0
 80010d0:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	dd03      	ble.n	80010e2 <sleep+0x4e>
	{
		config->error = 1;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2201      	movs	r2, #1
 80010de:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 80010e0:	e002      	b.n	80010e8 <sleep+0x54>
		config->error = 0;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2200      	movs	r2, #0
 80010e6:	71da      	strb	r2, [r3, #7]
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <init_adc>:

void init_adc (fsm_t* this) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <init_adc+0x28>)
 80010fe:	f000 fded 	bl	8001cdc <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 1000;
 8001102:	f000 fcf5 	bl	8001af0 <HAL_GetTick>
 8001106:	4603      	mov	r3, r0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	3b18      	subs	r3, #24
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <init_adc+0x2c>)
 8001110:	701a      	strb	r2, [r3, #0]

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20004a44 	.word	0x20004a44
 8001120:	20004ab5 	.word	0x20004ab5

08001124 <setting_up>:


void setting_up (fsm_t* this) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2200      	movs	r2, #0
 800113a:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2200      	movs	r2, #0
 8001146:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 800114e:	f000 fccf 	bl	8001af0 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001158:	4413      	add	r3, r2
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <setting_up+0x64>)
 800116a:	f001 faa5 	bl	80026b8 <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <setting_up+0x68>)
 8001170:	f000 fd0e 	bl	8001b90 <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2201      	movs	r2, #1
 8001178:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2200      	movs	r2, #0
 800117e:	725a      	strb	r2, [r3, #9]
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40020c00 	.word	0x40020c00
 800118c:	20004a44 	.word	0x20004a44

08001190 <save_data>:

void save_data (fsm_t* this)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	8bdb      	ldrh	r3, [r3, #30]
 80011a6:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ae:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	799b      	ldrb	r3, [r3, #6]
 80011b4:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	79db      	ldrb	r3, [r3, #7]
 80011ba:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c6:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011cc:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011d6:	f000 f9c9 	bl	800156c <save_new_data>
}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 80011ee:	4905      	ldr	r1, [pc, #20]	; (8001204 <fsm_sensor_init+0x20>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fdd3 	bl	8000d9c <fsm_init>
  f->param = c;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	609a      	str	r2, [r3, #8]
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000

08001208 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4603      	mov	r3, r0
 8001218:	817b      	strh	r3, [r7, #10]
 800121a:	460b      	mov	r3, r1
 800121c:	727b      	strb	r3, [r7, #9]
 800121e:	4613      	mov	r3, r2
 8001220:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	897a      	ldrh	r2, [r7, #10]
 800126e:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	7a7a      	ldrb	r2, [r7, #9]
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	7e3a      	ldrb	r2, [r7, #24]
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8bba      	ldrh	r2, [r7, #28]
 800128a:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8c3a      	ldrh	r2, [r7, #32]
 8001290:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001296:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800129c:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80012a2:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012a8:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012ae:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <MX_GPIO_Init+0x128>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a42      	ldr	r2, [pc, #264]	; (80013e4 <MX_GPIO_Init+0x128>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <MX_GPIO_Init+0x128>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <MX_GPIO_Init+0x128>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <MX_GPIO_Init+0x128>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <MX_GPIO_Init+0x128>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <MX_GPIO_Init+0x128>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <MX_GPIO_Init+0x128>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <MX_GPIO_Init+0x128>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <MX_GPIO_Init+0x128>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <MX_GPIO_Init+0x128>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <MX_GPIO_Init+0x128>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	4828      	ldr	r0, [pc, #160]	; (80013e8 <MX_GPIO_Init+0x12c>)
 8001348:	f001 f9b6 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2102      	movs	r1, #2
 8001350:	4826      	ldr	r0, [pc, #152]	; (80013ec <MX_GPIO_Init+0x130>)
 8001352:	f001 f9b1 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin|LD6_Pin|Sensor1_Supply_Pin 
 8001356:	2200      	movs	r2, #0
 8001358:	f24d 0142 	movw	r1, #53314	; 0xd042
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <MX_GPIO_Init+0x134>)
 800135e:	f001 f9ab 	bl	80026b8 <HAL_GPIO_WritePin>
                          |Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001368:	4821      	ldr	r0, [pc, #132]	; (80013f0 <MX_GPIO_Init+0x134>)
 800136a:	f001 f9a5 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_GPIO_Init+0x12c>)
 8001386:	f000 fffd 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 800138a:	2305      	movs	r3, #5
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_GPIO_Init+0x130>)
 800139e:	f000 fff1 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80013a2:	2302      	movs	r3, #2
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_GPIO_Init+0x130>)
 80013ba:	f000 ffe3 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80013be:	f24f 0342 	movw	r3, #61506	; 0xf042
 80013c2:	617b      	str	r3, [r7, #20]
                          |Sensor1_Supply_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_GPIO_Init+0x134>)
 80013d8:	f000 ffd4 	bl	8002384 <HAL_GPIO_Init>

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f000 fb14 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f80e 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f7ff ff5c 	bl	80012bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001404:	f000 f9d0 	bl	80017a8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001408:	f7ff fa00 	bl	800080c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800140c:	f002 f998 	bl	8003740 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001410:	f7ff fa92 	bl	8000938 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001414:	f002 f9c8 	bl	80037a8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x24>
	...

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f005 fa1b 	bl	8006866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <SystemClock_Config+0xc8>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <SystemClock_Config+0xc8>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <SystemClock_Config+0xc8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <SystemClock_Config+0xcc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <SystemClock_Config+0xcc>)
 8001466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <SystemClock_Config+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800148c:	2304      	movs	r3, #4
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001490:	2348      	movs	r3, #72	; 0x48
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001498:	2303      	movs	r3, #3
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 f923 	bl	80026ec <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 f8da 	bl	8001664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2102      	movs	r1, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fb7d 	bl	8002bcc <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d8:	f000 f8c4 	bl	8001664 <Error_Handler>
  }
}
 80014dc:	bf00      	nop
 80014de:	3750      	adds	r7, #80	; 0x50
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <adc_config_ch1>:

/* USER CODE BEGIN 4 */
void adc_config_ch1(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_1;
 80014fe:	2301      	movs	r3, #1
 8001500:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <adc_config_ch1+0x3c>)
 8001510:	f000 fc24 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <adc_config_ch1+0x32>
	{
		Error_Handler();
 800151a:	f000 f8a3 	bl	8001664 <Error_Handler>
	}
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20004a44 	.word	0x20004a44

0800152c <adc_config_ch2>:

void adc_config_ch2(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_2;
 800153e:	2302      	movs	r3, #2
 8001540:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <adc_config_ch2+0x3c>)
 8001550:	f000 fc04 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <adc_config_ch2+0x32>
	{
		Error_Handler();
 800155a:	f000 f883 	bl	8001664 <Error_Handler>
	}
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20004a44 	.word	0x20004a44

0800156c <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ringbuf_put(&data_ring_buff, data);
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <save_new_data+0x20>)
 800157e:	f000 f878 	bl	8001672 <ringbuf_put>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20004be0 	.word	0x20004be0

08001590 <Lora_inicio>:

void Lora_inicio(int init){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <Lora_inicio+0x54>)
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <Lora_inicio+0x58>)
 800159c:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <Lora_inicio+0x54>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <Lora_inicio+0x54>)
 80015a6:	4a11      	ldr	r2, [pc, #68]	; (80015ec <Lora_inicio+0x5c>)
 80015a8:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <Lora_inicio+0x54>)
 80015ac:	2210      	movs	r2, #16
 80015ae:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <Lora_inicio+0x54>)
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <Lora_inicio+0x58>)
 80015b4:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <Lora_inicio+0x54>)
 80015b8:	2202      	movs	r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <Lora_inicio+0x54>)
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <Lora_inicio+0x60>)
 80015c0:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <Lora_inicio+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <Lora_inicio+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <Lora_inicio+0x64>)
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <Lora_inicio+0x54>)
 80015d4:	601a      	str	r2, [r3, #0]
//		} else {
//			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
//		}
//		printf("ret: %d\n", ret);
//	}
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20004bc4 	.word	0x20004bc4
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020000 	.word	0x40020000
 80015f0:	20004c60 	.word	0x20004c60
 80015f4:	20004ab8 	.word	0x20004ab8

080015f8 <Lora_recibe>:
void Lora_recibe(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b092      	sub	sp, #72	; 0x48
 80015fc:	af00      	add	r7, sp, #0
	int ret;
	char buffer[64];
	ret = SX1278_LoRaRxPacket(&SX1278);
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <Lora_recibe+0x18>)
 8001600:	f7ff f8bf 	bl	8000782 <SX1278_LoRaRxPacket>
 8001604:	4603      	mov	r3, r0
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
//	if (ret > 0) {
//		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
//		printf("Content (%d): %s\r\n", ret, buffer);
//	}
}
 8001608:	bf00      	nop
 800160a:	3748      	adds	r7, #72	; 0x48
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20004ab8 	.word	0x20004ab8

08001614 <Lora_envia>:
void Lora_envia(void){
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	b09b      	sub	sp, #108	; 0x6c
 8001618:	af06      	add	r7, sp, #24
	int ret;
	char buffer[64];
	int message_length;
	sensor_buf_t data;

	data = ringbuf_get(&data_ring_buff);
 800161a:	463b      	mov	r3, r7
 800161c:	490f      	ldr	r1, [pc, #60]	; (800165c <Lora_envia+0x48>)
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f88a 	bl	8001738 <ringbuf_get>

	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d", data.Device_ID, data.Sensor_ID, data.measure, data.alarm, data.error, data.threshold_L, data.threshold_H);
 8001624:	883b      	ldrh	r3, [r7, #0]
 8001626:	461e      	mov	r6, r3
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	469c      	mov	ip, r3
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	79f9      	ldrb	r1, [r7, #7]
 8001632:	8938      	ldrh	r0, [r7, #8]
 8001634:	4604      	mov	r4, r0
 8001636:	8978      	ldrh	r0, [r7, #10]
 8001638:	4605      	mov	r5, r0
 800163a:	f107 000c 	add.w	r0, r7, #12
 800163e:	9504      	str	r5, [sp, #16]
 8001640:	9403      	str	r4, [sp, #12]
 8001642:	9102      	str	r1, [sp, #8]
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	4663      	mov	r3, ip
 800164a:	4632      	mov	r2, r6
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <Lora_envia+0x4c>)
 800164e:	f005 f9cb 	bl	80069e8 <siprintf>
 8001652:	64f8      	str	r0, [r7, #76]	; 0x4c
//	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
//	printf("Sending %s\r\n", buffer);
//	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
}
 8001654:	bf00      	nop
 8001656:	3754      	adds	r7, #84	; 0x54
 8001658:	46bd      	mov	sp, r7
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	20004be0 	.word	0x20004be0
 8001660:	08007100 	.word	0x08007100

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <ringbuf_put>:
  _this->tail = 0;
}

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001672:	b490      	push	{r4, r7}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	4638      	mov	r0, r7
 800167c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if((NEXT(_this->head) != 0) && (NEXT(_this->head)!= _this->tail)){
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001684:	2b09      	cmp	r3, #9
 8001686:	d023      	beq.n	80016d0 <ringbuf_put+0x5e>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d01e      	beq.n	80016d0 <ringbuf_put+0x5e>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001696:	2b09      	cmp	r3, #9
 8001698:	d01a      	beq.n	80016d0 <ringbuf_put+0x5e>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d013      	beq.n	80016d0 <ringbuf_put+0x5e>
  _this->buf[_this->head] = item;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	461c      	mov	r4, r3
 80016ba:	463b      	mov	r3, r7
 80016bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	679a      	str	r2, [r3, #120]	; 0x78
 80016ce:	e02e      	b.n	800172e <ringbuf_put+0xbc>
  }
  else
  {
	  _this->buf[_this->head] = item;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	461c      	mov	r4, r3
 80016e2:	463b      	mov	r3, r7
 80016e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(NEXT(_this->head) == _this->tail)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d016      	beq.n	8001722 <ringbuf_put+0xb0>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10f      	bne.n	8001722 <ringbuf_put+0xb0>
	  {
		  _this->head = _this->tail;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = NEXT(_this->tail);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800170e:	2b09      	cmp	r3, #9
 8001710:	d003      	beq.n	800171a <ringbuf_put+0xa8>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001716:	3301      	adds	r3, #1
 8001718:	e000      	b.n	800171c <ringbuf_put+0xaa>
 800171a:	2300      	movs	r3, #0
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001720:	e005      	b.n	800172e <ringbuf_put+0xbc>
	  }
	  else
	  {
		  _this->head = 0;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2209      	movs	r2, #9
 800172c:	67da      	str	r2, [r3, #124]	; 0x7c
	  }
  }
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bc90      	pop	{r4, r7}
 8001736:	4770      	bx	lr

08001738 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001738:	b490      	push	{r4, r7}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800174a:	429a      	cmp	r2, r3
 800174c:	d01e      	beq.n	800178c <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	18ca      	adds	r2, r1, r3
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	ca07      	ldmia	r2, {r0, r1, r2}
 8001764:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800176c:	2b09      	cmp	r3, #9
 800176e:	d00a      	beq.n	8001786 <ringbuf_get+0x4e>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <ringbuf_get+0x4e>
		{
			_this->tail++;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	67da      	str	r2, [r3, #124]	; 0x7c
 8001784:	e002      	b.n	800178c <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	67da      	str	r2, [r3, #124]	; 0x7c
		}
    }
	return item;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	461c      	mov	r4, r3
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001796:	6020      	str	r0, [r4, #0]
 8001798:	6061      	str	r1, [r4, #4]
 800179a:	60a2      	str	r2, [r4, #8]
}
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc90      	pop	{r4, r7}
 80017a4:	4770      	bx	lr
	...

080017a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_SPI1_Init+0x64>)
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <MX_SPI1_Init+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_SPI1_Init+0x64>)
 80017b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_SPI1_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_SPI1_Init+0x64>)
 80017dc:	2208      	movs	r2, #8
 80017de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_SPI1_Init+0x64>)
 80017f4:	220a      	movs	r2, #10
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_SPI1_Init+0x64>)
 80017fa:	f001 fba5 	bl	8002f48 <HAL_SPI_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001804:	f7ff ff2e 	bl	8001664 <Error_Handler>
  }

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20004c60 	.word	0x20004c60
 8001810:	40013000 	.word	0x40013000

08001814 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_SPI_MspInit+0x84>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12b      	bne.n	800188e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_SPI_MspInit+0x88>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_SPI_MspInit+0x88>)
 8001840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_SPI_MspInit+0x88>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_SPI_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_SPI_MspInit+0x88>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_SPI_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23e0      	movs	r3, #224	; 0xe0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187e:	2305      	movs	r3, #5
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_SPI_MspInit+0x8c>)
 800188a:	f000 fd7b 	bl	8002384 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40013000 	.word	0x40013000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_MspInit+0x54>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_MspInit+0x54>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_MspInit+0x54>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_MspInit+0x54>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_MspInit+0x54>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_MspInit+0x54>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	210f      	movs	r1, #15
 80018e6:	f06f 0001 	mvn.w	r0, #1
 80018ea:	f000 fd22 	bl	8002332 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f8c8 	bl	8001ac8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001938:	f003 ff22 	bl	8005780 <xTaskGetSchedulerState>
 800193c:	4603      	mov	r3, r0
 800193e:	2b01      	cmp	r3, #1
 8001940:	d001      	beq.n	8001946 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001942:	f004 fcf9 	bl	8006338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x50>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x16>
		heap_end = &end;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_sbrk+0x50>)
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <_sbrk+0x54>)
 8001960:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <_sbrk+0x50>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <_sbrk+0x50>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	466a      	mov	r2, sp
 8001972:	4293      	cmp	r3, r2
 8001974:	d907      	bls.n	8001986 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001976:	f004 ff41 	bl	80067fc <__errno>
 800197a:	4602      	mov	r2, r0
 800197c:	230c      	movs	r3, #12
 800197e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e006      	b.n	8001994 <_sbrk+0x48>
	}

	heap_end += incr;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <_sbrk+0x50>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a03      	ldr	r2, [pc, #12]	; (800199c <_sbrk+0x50>)
 8001990:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000130 	.word	0x20000130
 80019a0:	20004d00 	.word	0x20004d00

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <SystemInit+0x28>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <SystemInit+0x28>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SystemInit+0x28>)
 80019ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019be:	609a      	str	r2, [r3, #8]
#endif
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019d6:	e003      	b.n	80019e0 <LoopCopyDataInit>

080019d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019de:	3104      	adds	r1, #4

080019e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019e8:	d3f6      	bcc.n	80019d8 <CopyDataInit>
  ldr  r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019ec:	e002      	b.n	80019f4 <LoopFillZerobss>

080019ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019f0:	f842 3b04 	str.w	r3, [r2], #4

080019f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019f8:	d3f9      	bcc.n	80019ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019fa:	f7ff ffd3 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f004 ff03 	bl	8006808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff fcf7 	bl	80013f4 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a0c:	08007288 	.word	0x08007288
  ldr  r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a14:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 8001a18:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 8001a1c:	20004d00 	.word	0x20004d00

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 fc65 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff ff24 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fc6f 	bl	800236a <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 fc45 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200000a0 	.word	0x200000a0
 8001ac0:	200000a8 	.word	0x200000a8
 8001ac4:	200000a4 	.word	0x200000a4

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200000a8 	.word	0x200000a8
 8001aec:	20004cb8 	.word	0x20004cb8

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20004cb8 	.word	0x20004cb8

08001b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e033      	b.n	8001b86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fec2 	bl	80008b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b4e:	f023 0302 	bic.w	r3, r3, #2
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fa30 	bl	8001fc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
 8001b76:	e001      	b.n	8001b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Start+0x1a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e08a      	b.n	8001cc0 <HAL_ADC_Start+0x130>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d018      	beq.n	8001bf2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_ADC_Start+0x13c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <HAL_ADC_Start+0x140>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9a      	lsrs	r2, r3, #18
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d15e      	bne.n	8001cbe <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f023 0206 	bic.w	r2, r3, #6
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_ADC_Start+0x144>)
 8001c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11c      	bne.n	8001cbe <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e013      	b.n	8001cbe <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_ADC_Start+0x148>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d10e      	bne.n	8001cbe <HAL_ADC_Start+0x12e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cbc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	200000a0 	.word	0x200000a0
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	40012300 	.word	0x40012300
 8001cd8:	40012000 	.word	0x40012000

08001cdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Stop+0x16>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e021      	b.n	8001d36 <HAL_ADC_Stop+0x5a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x1c>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e113      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x244>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d925      	bls.n	8001dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68d9      	ldr	r1, [r3, #12]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b1e      	subs	r3, #30
 8001d9e:	2207      	movs	r2, #7
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43da      	mvns	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68d9      	ldr	r1, [r3, #12]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4403      	add	r3, r0
 8001dc6:	3b1e      	subs	r3, #30
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	e022      	b.n	8001e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6919      	ldr	r1, [r3, #16]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	2207      	movs	r2, #7
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4403      	add	r3, r0
 8001e10:	409a      	lsls	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d824      	bhi.n	8001e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b05      	subs	r3, #5
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b05      	subs	r3, #5
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
 8001e6a:	e04c      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d824      	bhi.n	8001ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b23      	subs	r3, #35	; 0x23
 8001e86:	221f      	movs	r2, #31
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	400a      	ands	r2, r1
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b23      	subs	r3, #35	; 0x23
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebc:	e023      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b41      	subs	r3, #65	; 0x41
 8001ed0:	221f      	movs	r2, #31
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	400a      	ands	r2, r1
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b41      	subs	r3, #65	; 0x41
 8001efa:	fa00 f203 	lsl.w	r2, r0, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_ADC_ConfigChannel+0x250>)
 8001f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_ADC_ConfigChannel+0x254>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10f      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1d8>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b12      	cmp	r3, #18
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_ADC_ConfigChannel+0x254>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d12b      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x23a>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_ADC_ConfigChannel+0x258>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x1f4>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d122      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_ADC_ConfigChannel+0x258>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d111      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_ADC_ConfigChannel+0x25c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_ConfigChannel+0x260>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9a      	lsrs	r2, r3, #18
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40012300 	.word	0x40012300
 8001fb0:	40012000 	.word	0x40012000
 8001fb4:	10000012 	.word	0x10000012
 8001fb8:	200000a0 	.word	0x200000a0
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc8:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <ADC_Init+0x1f0>)
 8001fca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	021a      	lsls	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <ADC_Init+0x1f4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d022      	beq.n	800209e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e00f      	b.n	80020be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0202 	bic.w	r2, r2, #2
 80020cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
 80020d8:	005a      	lsls	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800210a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	3b01      	subs	r3, #1
 8002118:	035a      	lsls	r2, r3, #13
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	e007      	b.n	8002134 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002132:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	3b01      	subs	r3, #1
 8002150:	051a      	lsls	r2, r3, #20
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002176:	025a      	lsls	r2, r3, #9
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	029a      	lsls	r2, r3, #10
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40012300 	.word	0x40012300
 80021b4:	0f000001 	.word	0x0f000001

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff47 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff5c 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffb0 	bl	80022d8 <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e159      	b.n	8002654 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	f040 8148 	bne.w	800264e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d00b      	beq.n	80023de <HAL_GPIO_Init+0x5a>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d2:	2b11      	cmp	r3, #17
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d130      	bne.n	8002440 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 0201 	and.w	r2, r3, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0xfc>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b12      	cmp	r3, #18
 800247e:	d123      	bne.n	80024c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a2 	beq.w	800264e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b56      	ldr	r3, [pc, #344]	; (8002668 <HAL_GPIO_Init+0x2e4>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_GPIO_Init+0x2e4>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_GPIO_Init+0x2e4>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002526:	4a51      	ldr	r2, [pc, #324]	; (800266c <HAL_GPIO_Init+0x2e8>)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2ec>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x202>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x1fe>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a46      	ldr	r2, [pc, #280]	; (8002678 <HAL_GPIO_Init+0x2f4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x1fa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_GPIO_Init+0x2f8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x1f6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a44      	ldr	r2, [pc, #272]	; (8002680 <HAL_GPIO_Init+0x2fc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x1f2>
 8002572:	2304      	movs	r3, #4
 8002574:	e008      	b.n	8002588 <HAL_GPIO_Init+0x204>
 8002576:	2307      	movs	r3, #7
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x204>
 800257a:	2303      	movs	r3, #3
 800257c:	e004      	b.n	8002588 <HAL_GPIO_Init+0x204>
 800257e:	2302      	movs	r3, #2
 8002580:	e002      	b.n	8002588 <HAL_GPIO_Init+0x204>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x204>
 8002586:	2300      	movs	r3, #0
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f002 0203 	and.w	r2, r2, #3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	4093      	lsls	r3, r2
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002598:	4934      	ldr	r1, [pc, #208]	; (800266c <HAL_GPIO_Init+0x2e8>)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_GPIO_Init+0x300>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ca:	4a2e      	ldr	r2, [pc, #184]	; (8002684 <HAL_GPIO_Init+0x300>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025d0:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <HAL_GPIO_Init+0x300>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_GPIO_Init+0x300>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_GPIO_Init+0x300>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_GPIO_Init+0x300>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_GPIO_Init+0x300>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_GPIO_Init+0x300>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b0f      	cmp	r3, #15
 8002658:	f67f aea2 	bls.w	80023a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800265c:	bf00      	nop
 800265e:	3724      	adds	r7, #36	; 0x24
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e001      	b.n	80026aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e25b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d075      	beq.n	80027f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270a:	4ba3      	ldr	r3, [pc, #652]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d00c      	beq.n	8002730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002716:	4ba0      	ldr	r3, [pc, #640]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271e:	2b08      	cmp	r3, #8
 8002720:	d112      	bne.n	8002748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002722:	4b9d      	ldr	r3, [pc, #628]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	4b99      	ldr	r3, [pc, #612]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d05b      	beq.n	80027f4 <HAL_RCC_OscConfig+0x108>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d157      	bne.n	80027f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e236      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x74>
 8002752:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a90      	ldr	r2, [pc, #576]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xb0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x98>
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a8a      	ldr	r2, [pc, #552]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xb0>
 8002784:	4b84      	ldr	r3, [pc, #528]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a83      	ldr	r2, [pc, #524]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b81      	ldr	r3, [pc, #516]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a80      	ldr	r2, [pc, #512]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f9a4 	bl	8001af0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff f9a0 	bl	8001af0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1fb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xc0>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f990 	bl	8001af0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7ff f98c 	bl	8001af0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1e7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0xe8>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d063      	beq.n	80028ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11c      	bne.n	8002854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281a:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_RCC_OscConfig+0x152>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e1bb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b56      	ldr	r3, [pc, #344]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4952      	ldr	r1, [pc, #328]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e03a      	b.n	80028ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285c:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCC_OscConfig+0x2b0>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7ff f945 	bl	8001af0 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff f941 	bl	8001af0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e19c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4940      	ldr	r1, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x2b0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7ff f924 	bl	8001af0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ac:	f7ff f920 	bl	8001af0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e17b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d030      	beq.n	8002938 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x2b4>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7ff f904 	bl	8001af0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff f900 	bl	8001af0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e15b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x200>
 800290a:	e015      	b.n	8002938 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x2b4>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7ff f8ed 	bl	8001af0 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291a:	f7ff f8e9 	bl	8001af0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e144      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a0 	beq.w	8002a86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x2b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d121      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_RCC_OscConfig+0x2b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_RCC_OscConfig+0x2b8>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7ff f8af 	bl	8001af0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e011      	b.n	80029ba <HAL_RCC_OscConfig+0x2ce>
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	42470000 	.word	0x42470000
 80029a0:	42470e80 	.word	0x42470e80
 80029a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7ff f8a2 	bl	8001af0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0fd      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x2f0>
 80029ce:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a7c      	ldr	r2, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	e01c      	b.n	8002a16 <HAL_RCC_OscConfig+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d10c      	bne.n	80029fe <HAL_RCC_OscConfig+0x312>
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
 80029f0:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a73      	ldr	r2, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	e00b      	b.n	8002a16 <HAL_RCC_OscConfig+0x32a>
 80029fe:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a70      	ldr	r2, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a6d      	ldr	r2, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d015      	beq.n	8002a4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7ff f867 	bl	8001af0 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7ff f863 	bl	8001af0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0bc      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ee      	beq.n	8002a26 <HAL_RCC_OscConfig+0x33a>
 8002a48:	e014      	b.n	8002a74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7ff f851 	bl	8001af0 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7ff f84d 	bl	8001af0 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0a6      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ee      	bne.n	8002a52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8092 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a90:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d05c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d141      	bne.n	8002b28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <HAL_RCC_OscConfig+0x4dc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff f821 	bl	8001af0 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7ff f81d 	bl	8001af0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e078      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	4933      	ldr	r1, [pc, #204]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x4dc>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fff6 	bl	8001af0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fff2 	bl	8001af0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e04d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x41c>
 8002b26:	e045      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x4dc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ffdf 	bl	8001af0 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe ffdb 	bl	8001af0 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e036      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x44a>
 8002b54:	e02e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e029      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b62:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d115      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	42470060 	.word	0x42470060

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe ff18 	bl	8001af0 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe ff14 	bl	8001af0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4601      	mov	r1, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fe78 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08007234 	.word	0x08007234
 8002d90:	200000a0 	.word	0x200000a0
 8002d94:	200000a4 	.word	0x200000a4

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d007      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x32>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x38>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 80b4 	bne.w	8002f2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dc6:	60bb      	str	r3, [r7, #8]
       break;
 8002dc8:	e0b3      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002dcc:	60bb      	str	r3, [r7, #8]
      break;
 8002dce:	e0b0      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d04a      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	ea03 0501 	and.w	r5, r3, r1
 8002dfc:	ea04 0602 	and.w	r6, r4, r2
 8002e00:	4629      	mov	r1, r5
 8002e02:	4632      	mov	r2, r6
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	f04f 0400 	mov.w	r4, #0
 8002e0c:	0154      	lsls	r4, r2, #5
 8002e0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e12:	014b      	lsls	r3, r1, #5
 8002e14:	4619      	mov	r1, r3
 8002e16:	4622      	mov	r2, r4
 8002e18:	1b49      	subs	r1, r1, r5
 8002e1a:	eb62 0206 	sbc.w	r2, r2, r6
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0194      	lsls	r4, r2, #6
 8002e28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e2c:	018b      	lsls	r3, r1, #6
 8002e2e:	1a5b      	subs	r3, r3, r1
 8002e30:	eb64 0402 	sbc.w	r4, r4, r2
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e42:	00d9      	lsls	r1, r3, #3
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	195b      	adds	r3, r3, r5
 8002e4a:	eb44 0406 	adc.w	r4, r4, r6
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	0262      	lsls	r2, r4, #9
 8002e58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e5c:	0259      	lsls	r1, r3, #9
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4614      	mov	r4, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	4621      	mov	r1, r4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f04f 0400 	mov.w	r4, #0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	f7fd fa06 	bl	8000280 <__aeabi_uldivmod>
 8002e74:	4603      	mov	r3, r0
 8002e76:	460c      	mov	r4, r1
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e049      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	f04f 0400 	mov.w	r4, #0
 8002e86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	ea03 0501 	and.w	r5, r3, r1
 8002e92:	ea04 0602 	and.w	r6, r4, r2
 8002e96:	4629      	mov	r1, r5
 8002e98:	4632      	mov	r2, r6
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	f04f 0400 	mov.w	r4, #0
 8002ea2:	0154      	lsls	r4, r2, #5
 8002ea4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ea8:	014b      	lsls	r3, r1, #5
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4622      	mov	r2, r4
 8002eae:	1b49      	subs	r1, r1, r5
 8002eb0:	eb62 0206 	sbc.w	r2, r2, r6
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	0194      	lsls	r4, r2, #6
 8002ebe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	1a5b      	subs	r3, r3, r1
 8002ec6:	eb64 0402 	sbc.w	r4, r4, r2
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	00e2      	lsls	r2, r4, #3
 8002ed4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ed8:	00d9      	lsls	r1, r3, #3
 8002eda:	460b      	mov	r3, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	195b      	adds	r3, r3, r5
 8002ee0:	eb44 0406 	adc.w	r4, r4, r6
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	02a2      	lsls	r2, r4, #10
 8002eee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ef2:	0299      	lsls	r1, r3, #10
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4621      	mov	r1, r4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4623      	mov	r3, r4
 8002f06:	f7fd f9bb 	bl	8000280 <__aeabi_uldivmod>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60bb      	str	r3, [r7, #8]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f2e:	60bb      	str	r3, [r7, #8]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	68bb      	ldr	r3, [r7, #8]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e056      	b.n	8003008 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fe fc4d 	bl	8001814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	ea42 0103 	orr.w	r1, r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	f003 0104 	and.w	r1, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_SPI_Transmit+0x22>
 800302e:	2302      	movs	r3, #2
 8003030:	e11e      	b.n	8003270 <HAL_SPI_Transmit+0x260>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800303a:	f7fe fd59 	bl	8001af0 <HAL_GetTick>
 800303e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d002      	beq.n	8003056 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003050:	2302      	movs	r3, #2
 8003052:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003054:	e103      	b.n	800325e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_SPI_Transmit+0x52>
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003066:	e0fa      	b.n	800325e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2203      	movs	r2, #3
 800306c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ae:	d107      	bne.n	80030c0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d007      	beq.n	80030de <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e6:	d14b      	bne.n	8003180 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_SPI_Transmit+0xe6>
 80030f0:	8afb      	ldrh	r3, [r7, #22]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d13e      	bne.n	8003174 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	1c9a      	adds	r2, r3, #2
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800311a:	e02b      	b.n	8003174 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d112      	bne.n	8003150 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	86da      	strh	r2, [r3, #54]	; 0x36
 800314e:	e011      	b.n	8003174 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003150:	f7fe fcce 	bl	8001af0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d803      	bhi.n	8003168 <HAL_SPI_Transmit+0x158>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d102      	bne.n	800316e <HAL_SPI_Transmit+0x15e>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003172:	e074      	b.n	800325e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ce      	bne.n	800311c <HAL_SPI_Transmit+0x10c>
 800317e:	e04c      	b.n	800321a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_SPI_Transmit+0x17e>
 8003188:	8afb      	ldrh	r3, [r7, #22]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d140      	bne.n	8003210 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031b4:	e02c      	b.n	8003210 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d113      	bne.n	80031ec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80031ea:	e011      	b.n	8003210 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ec:	f7fe fc80 	bl	8001af0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d803      	bhi.n	8003204 <HAL_SPI_Transmit+0x1f4>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d102      	bne.n	800320a <HAL_SPI_Transmit+0x1fa>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800320e:	e026      	b.n	800325e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1cd      	bne.n	80031b6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa44 	bl	80036ac <SPI_EndRxTxTransaction>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e000      	b.n	800325e <HAL_SPI_Transmit+0x24e>
  }

error:
 800325c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800326e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08c      	sub	sp, #48	; 0x30
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003286:	2301      	movs	r3, #1
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_SPI_TransmitReceive+0x26>
 800329a:	2302      	movs	r3, #2
 800329c:	e18a      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x33c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a6:	f7fe fc23 	bl	8001af0 <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d00f      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x70>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ce:	d107      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d103      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x68>
 80032d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d003      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032e6:	e15b      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x82>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x82>
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003300:	e14e      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d007      	beq.n	800336a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d178      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x10a>
 800337c:	8b7b      	ldrh	r3, [r7, #26]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d166      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a6:	e053      	b.n	8003450 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d11b      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x176>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x176>
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d113      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d119      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x1b8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d014      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	b292      	uxth	r2, r2
 8003412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800342c:	2301      	movs	r3, #1
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003430:	f7fe fb5e 	bl	8001af0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800343c:	429a      	cmp	r2, r3
 800343e:	d807      	bhi.n	8003450 <HAL_SPI_TransmitReceive+0x1d8>
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d003      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800344e:	e0a7      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1a6      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x130>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1a1      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x130>
 8003464:	e07c      	b.n	8003560 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x1fc>
 800346e:	8b7b      	ldrh	r3, [r7, #26]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d16b      	bne.n	800354c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	7812      	ldrb	r2, [r2, #0]
 8003480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800349a:	e057      	b.n	800354c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d11c      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x26c>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d017      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x26c>
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d114      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d119      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x2ae>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d014      	beq.n	8003526 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003522:	2301      	movs	r3, #1
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003526:	f7fe fae3 	bl	8001af0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003532:	429a      	cmp	r2, r3
 8003534:	d803      	bhi.n	800353e <HAL_SPI_TransmitReceive+0x2c6>
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d102      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x2cc>
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800354a:	e029      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1a2      	bne.n	800349c <HAL_SPI_TransmitReceive+0x224>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d19d      	bne.n	800349c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8a1 	bl	80036ac <SPI_EndRxTxTransaction>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800357c:	e010      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	e000      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800359e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3730      	adds	r7, #48	; 0x30
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ca:	b2db      	uxtb	r3, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e8:	e04c      	b.n	8003684 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d048      	beq.n	8003684 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035f2:	f7fe fa7d 	bl	8001af0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d902      	bls.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d13d      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003616:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003620:	d111      	bne.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362a:	d004      	beq.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003634:	d107      	bne.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003644:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364e:	d10f      	bne.n	8003670 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e00f      	b.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d1a3      	bne.n	80035ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <SPI_EndRxTxTransaction+0x7c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <SPI_EndRxTxTransaction+0x80>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0d5b      	lsrs	r3, r3, #21
 80036c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d6:	d112      	bne.n	80036fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff78 	bl	80035d8 <SPI_WaitFlagStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e00f      	b.n	800371e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3b01      	subs	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d0f2      	beq.n	80036fe <SPI_EndRxTxTransaction+0x52>
 8003718:	e000      	b.n	800371c <SPI_EndRxTxTransaction+0x70>
        break;
 800371a:	bf00      	nop
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200000a0 	.word	0x200000a0
 800372c:	165e9f81 	.word	0x165e9f81

08003730 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003746:	f3ef 8305 	mrs	r3, IPSR
 800374a:	60bb      	str	r3, [r7, #8]
  return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8310 	mrs	r3, PRIMASK
 8003756:	607b      	str	r3, [r7, #4]
  return(result);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800375e:	f3ef 8311 	mrs	r3, BASEPRI
 8003762:	603b      	str	r3, [r7, #0]
  return(result);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <osKernelInitialize+0x3a>
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <osKernelInitialize+0x64>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d103      	bne.n	800377a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003772:	f06f 0305 	mvn.w	r3, #5
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e00c      	b.n	8003794 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <osKernelInitialize+0x64>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <osKernelInitialize+0x64>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e002      	b.n	8003794 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000134 	.word	0x20000134

080037a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ae:	f3ef 8305 	mrs	r3, IPSR
 80037b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8310 	mrs	r3, PRIMASK
 80037be:	607b      	str	r3, [r7, #4]
  return(result);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037c6:	f3ef 8311 	mrs	r3, BASEPRI
 80037ca:	603b      	str	r3, [r7, #0]
  return(result);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <osKernelStart+0x3a>
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <osKernelStart+0x68>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d103      	bne.n	80037e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80037da:	f06f 0305 	mvn.w	r3, #5
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e010      	b.n	8003804 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <osKernelStart+0x68>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d109      	bne.n	80037fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ea:	f7ff ffa1 	bl	8003730 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <osKernelStart+0x68>)
 80037f0:	2202      	movs	r2, #2
 80037f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037f4:	f001 fb7c 	bl	8004ef0 <vTaskStartScheduler>
      stat = osOK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e002      	b.n	8003804 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003804:	68fb      	ldr	r3, [r7, #12]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000134 	.word	0x20000134

08003814 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381a:	f3ef 8305 	mrs	r3, IPSR
 800381e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003820:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003826:	f3ef 8310 	mrs	r3, PRIMASK
 800382a:	607b      	str	r3, [r7, #4]
  return(result);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003832:	f3ef 8311 	mrs	r3, BASEPRI
 8003836:	603b      	str	r3, [r7, #0]
  return(result);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <osKernelGetTickCount+0x3a>
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <osKernelGetTickCount+0x4c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8003846:	f001 fc71 	bl	800512c <xTaskGetTickCountFromISR>
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	e002      	b.n	8003854 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800384e:	f001 fc5d 	bl	800510c <xTaskGetTickCount>
 8003852:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000134 	.word	0x20000134

08003864 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	; 0x40
 8003868:	af04      	add	r7, sp, #16
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003874:	f3ef 8305 	mrs	r3, IPSR
 8003878:	61fb      	str	r3, [r7, #28]
  return(result);
 800387a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 808f 	bne.w	80039a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	61bb      	str	r3, [r7, #24]
  return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800388e:	f3ef 8311 	mrs	r3, BASEPRI
 8003892:	617b      	str	r3, [r7, #20]
  return(result);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <osThreadNew+0x3e>
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <osThreadNew+0x148>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d07e      	beq.n	80039a0 <osThreadNew+0x13c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d07b      	beq.n	80039a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80038ac:	2318      	movs	r3, #24
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
 80038b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d045      	beq.n	800394c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <osThreadNew+0x6a>
        name = attr->name;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <osThreadNew+0x90>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	2b38      	cmp	r3, #56	; 0x38
 80038e6:	d805      	bhi.n	80038f4 <osThreadNew+0x90>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <osThreadNew+0x94>
        return (NULL);
 80038f4:	2300      	movs	r3, #0
 80038f6:	e054      	b.n	80039a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <osThreadNew+0xca>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b5b      	cmp	r3, #91	; 0x5b
 8003916:	d90a      	bls.n	800392e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <osThreadNew+0xca>
        mem = 1;
 8003928:	2301      	movs	r3, #1
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	e010      	b.n	8003950 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <osThreadNew+0xec>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d108      	bne.n	8003950 <osThreadNew+0xec>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <osThreadNew+0xec>
          mem = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	e001      	b.n	8003950 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d110      	bne.n	8003978 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800395e:	9202      	str	r2, [sp, #8]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f001 f873 	bl	8004a58 <xTaskCreateStatic>
 8003972:	4603      	mov	r3, r0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e013      	b.n	80039a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d110      	bne.n	80039a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	b29a      	uxth	r2, r3
 8003982:	f107 0310 	add.w	r3, r7, #16
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f001 f8bb 	bl	8004b0c <xTaskCreate>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <osThreadNew+0x13c>
          hTask = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039a0:	693b      	ldr	r3, [r7, #16]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3730      	adds	r7, #48	; 0x30
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000134 	.word	0x20000134

080039b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b8:	f3ef 8305 	mrs	r3, IPSR
 80039bc:	613b      	str	r3, [r7, #16]
  return(result);
 80039be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10f      	bne.n	80039e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039d0:	f3ef 8311 	mrs	r3, BASEPRI
 80039d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <osDelay+0x3c>
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <osDelay+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d103      	bne.n	80039ec <osDelay+0x3c>
    stat = osErrorISR;
 80039e4:	f06f 0305 	mvn.w	r3, #5
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e007      	b.n	80039fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f001 fa46 	bl	8004e88 <vTaskDelay>
    }
  }

  return (stat);
 80039fc:	697b      	ldr	r3, [r7, #20]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000134 	.word	0x20000134

08003a0c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a14:	f3ef 8305 	mrs	r3, IPSR
 8003a18:	617b      	str	r3, [r7, #20]
  return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10f      	bne.n	8003a40 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8310 	mrs	r3, PRIMASK
 8003a24:	613b      	str	r3, [r7, #16]
  return(result);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <osDelayUntil+0x3c>
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <osDelayUntil+0x7c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d103      	bne.n	8003a48 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8003a40:	f06f 0305 	mvn.w	r3, #5
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e019      	b.n	8003a7c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8003a4c:	f001 fb5e 	bl	800510c <xTaskGetTickCount>
 8003a50:	4603      	mov	r3, r0
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <osDelayUntil+0x6a>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db06      	blt.n	8003a76 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8003a68:	f107 0308 	add.w	r3, r7, #8
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f990 	bl	8004d94 <vTaskDelayUntil>
 8003a74:	e002      	b.n	8003a7c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8003a76:	f06f 0303 	mvn.w	r3, #3
 8003a7a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000134 	.word	0x20000134

08003a8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08c      	sub	sp, #48	; 0x30
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9c:	f3ef 8305 	mrs	r3, IPSR
 8003aa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aa2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d170      	bne.n	8003b8a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aac:	617b      	str	r3, [r7, #20]
  return(result);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <osMessageQueueNew+0x3c>
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <osMessageQueueNew+0x108>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d060      	beq.n	8003b8a <osMessageQueueNew+0xfe>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d05d      	beq.n	8003b8a <osMessageQueueNew+0xfe>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05a      	beq.n	8003b8a <osMessageQueueNew+0xfe>
    mem = -1;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d029      	beq.n	8003b34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d012      	beq.n	8003b0e <osMessageQueueNew+0x82>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b4f      	cmp	r3, #79	; 0x4f
 8003aee:	d90e      	bls.n	8003b0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <osMessageQueueNew+0x82>
        mem = 1;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	e014      	b.n	8003b38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d110      	bne.n	8003b38 <osMessageQueueNew+0xac>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <osMessageQueueNew+0xac>
          mem = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	e001      	b.n	8003b38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d10c      	bne.n	8003b58 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6899      	ldr	r1, [r3, #8]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa58 	bl	8004004 <xQueueGenericCreateStatic>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24
 8003b56:	e008      	b.n	8003b6a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fac1 	bl	80040ea <xQueueGenericCreate>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <osMessageQueueNew+0xf2>
        name = attr->name;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	e001      	b.n	8003b82 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b82:	69f9      	ldr	r1, [r7, #28]
 8003b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b86:	f000 ff0b 	bl	80049a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3728      	adds	r7, #40	; 0x28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000134 	.word	0x20000134

08003b98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bb0:	f3ef 8305 	mrs	r3, IPSR
 8003bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bb6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8003bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02c      	beq.n	8003c2e <osMessageQueuePut+0x96>
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <osMessageQueuePut+0xe0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d128      	bne.n	8003c2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <osMessageQueuePut+0x56>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <osMessageQueuePut+0x56>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003bee:	f06f 0303 	mvn.w	r3, #3
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bf4:	e039      	b.n	8003c6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bfa:	f107 0210 	add.w	r2, r7, #16
 8003bfe:	2300      	movs	r3, #0
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	6a38      	ldr	r0, [r7, #32]
 8003c04:	f000 fbce 	bl	80043a4 <xQueueGenericSendFromISR>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d003      	beq.n	8003c16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003c0e:	f06f 0302 	mvn.w	r3, #2
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c14:	e029      	b.n	8003c6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d026      	beq.n	8003c6a <osMessageQueuePut+0xd2>
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <osMessageQueuePut+0xe4>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c2c:	e01d      	b.n	8003c6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <osMessageQueuePut+0xa2>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003c3a:	f06f 0303 	mvn.w	r3, #3
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c40:	e014      	b.n	8003c6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6a38      	ldr	r0, [r7, #32]
 8003c4a:	f000 fab1 	bl	80041b0 <xQueueGenericSend>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d00b      	beq.n	8003c6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003c5a:	f06f 0301 	mvn.w	r3, #1
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c60:	e004      	b.n	8003c6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003c62:	f06f 0302 	mvn.w	r3, #2
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	e000      	b.n	8003c6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3728      	adds	r7, #40	; 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000134 	.word	0x20000134
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c96:	f3ef 8305 	mrs	r3, IPSR
 8003c9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d105      	bne.n	8003cba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cae:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb2:	617b      	str	r3, [r7, #20]
  return(result);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02c      	beq.n	8003d14 <osMessageQueueGet+0x94>
 8003cba:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <osMessageQueueGet+0xdc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d128      	bne.n	8003d14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <osMessageQueueGet+0x54>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <osMessageQueueGet+0x54>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003cd4:	f06f 0303 	mvn.w	r3, #3
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cda:	e038      	b.n	8003d4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ce0:	f107 0310 	add.w	r3, r7, #16
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6a38      	ldr	r0, [r7, #32]
 8003cea:	f000 fccb 	bl	8004684 <xQueueReceiveFromISR>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d003      	beq.n	8003cfc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003cf4:	f06f 0302 	mvn.w	r3, #2
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cfa:	e028      	b.n	8003d4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d025      	beq.n	8003d4e <osMessageQueueGet+0xce>
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <osMessageQueueGet+0xe0>)
 8003d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d12:	e01c      	b.n	8003d4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <osMessageQueueGet+0xa0>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003d20:	f06f 0303 	mvn.w	r3, #3
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	e013      	b.n	8003d50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	6a38      	ldr	r0, [r7, #32]
 8003d2e:	f000 fbcd 	bl	80044cc <xQueueReceive>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d00b      	beq.n	8003d50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003d3e:	f06f 0301 	mvn.w	r3, #1
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e004      	b.n	8003d50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003d46:	f06f 0302 	mvn.w	r3, #2
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e000      	b.n	8003d50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000134 	.word	0x20000134
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4a06      	ldr	r2, [pc, #24]	; (8003d94 <vApplicationGetIdleTaskMemory+0x30>)
 8003d7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000138 	.word	0x20000138
 8003d94:	20000194 	.word	0x20000194

08003d98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003da8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <vApplicationGetTimerTaskMemory+0x30>)
 8003dae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000394 	.word	0x20000394
 8003dc8:	200003f0 	.word	0x200003f0

08003dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f103 0208 	add.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f103 0208 	add.w	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0208 	add.w	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d103      	bne.n	8003e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e00c      	b.n	8003ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3308      	adds	r3, #8
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e002      	b.n	8003e9c <vListInsert+0x2e>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d2f6      	bcs.n	8003e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6852      	ldr	r2, [r2, #4]
 8003f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d103      	bne.n	8003f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1e5a      	subs	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	e7fe      	b.n	8003f5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003f5c:	f002 f95e 	bl	800621c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	441a      	add	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	22ff      	movs	r2, #255	; 0xff
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d114      	bne.n	8003fdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01a      	beq.n	8003ff0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fa28 	bl	8005414 <xTaskRemoveFromEventList>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <xQueueGenericReset+0xcc>)
 8003fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	e009      	b.n	8003ff0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3310      	adds	r3, #16
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fef3 	bl	8003dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3324      	adds	r3, #36	; 0x24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff feee 	bl	8003dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ff0:	f002 f942 	bl	8006278 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08e      	sub	sp, #56	; 0x38
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <xQueueGenericCreateStatic+0x28>
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
 800402a:	e7fe      	b.n	800402a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <xQueueGenericCreateStatic+0x42>
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	e7fe      	b.n	8004044 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <xQueueGenericCreateStatic+0x4e>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <xQueueGenericCreateStatic+0x52>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <xQueueGenericCreateStatic+0x54>
 8004056:	2300      	movs	r3, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <xQueueGenericCreateStatic+0x6c>
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	e7fe      	b.n	800406e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <xQueueGenericCreateStatic+0x78>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <xQueueGenericCreateStatic+0x7c>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <xQueueGenericCreateStatic+0x7e>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <xQueueGenericCreateStatic+0x96>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800409a:	2350      	movs	r3, #80	; 0x50
 800409c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d009      	beq.n	80040b8 <xQueueGenericCreateStatic+0xb4>
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e7fe      	b.n	80040b6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f844 	bl	8004168 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3730      	adds	r7, #48	; 0x30
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b08a      	sub	sp, #40	; 0x28
 80040ee:	af02      	add	r7, sp, #8
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <xQueueGenericCreate+0x28>
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e7fe      	b.n	8004110 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e004      	b.n	8004128 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3350      	adds	r3, #80	; 0x50
 800412c:	4618      	mov	r0, r3
 800412e:	f002 f98f 	bl	8006450 <pvPortMalloc>
 8004132:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3350      	adds	r3, #80	; 0x50
 8004142:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800414c:	79fa      	ldrb	r2, [r7, #7]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f805 	bl	8004168 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800415e:	69bb      	ldr	r3, [r7, #24]
	}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e002      	b.n	800418a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004196:	2101      	movs	r1, #1
 8004198:	69b8      	ldr	r0, [r7, #24]
 800419a:	f7ff fecb 	bl	8003f34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	; 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041be:	2300      	movs	r3, #0
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <xQueueGenericSend+0x30>
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041de:	e7fe      	b.n	80041de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x3e>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSend+0x42>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueGenericSend+0x44>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <xQueueGenericSend+0x5c>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
 800420a:	e7fe      	b.n	800420a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d103      	bne.n	800421a <xQueueGenericSend+0x6a>
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <xQueueGenericSend+0x6e>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <xQueueGenericSend+0x70>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <xQueueGenericSend+0x88>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	e7fe      	b.n	8004236 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004238:	f001 faa2 	bl	8005780 <xTaskGetSchedulerState>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <xQueueGenericSend+0x98>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <xQueueGenericSend+0x9c>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <xQueueGenericSend+0x9e>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <xQueueGenericSend+0xb6>
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	e7fe      	b.n	8004264 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004266:	f001 ffd9 	bl	800621c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <xQueueGenericSend+0xcc>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d129      	bne.n	80042d0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004282:	f000 fa7c 	bl	800477e <prvCopyDataToQueue>
 8004286:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	3324      	adds	r3, #36	; 0x24
 8004294:	4618      	mov	r0, r3
 8004296:	f001 f8bd 	bl	8005414 <xTaskRemoveFromEventList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042a0:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <xQueueGenericSend+0x1f0>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	e00a      	b.n	80042c8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <xQueueGenericSend+0x1f0>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042c8:	f001 ffd6 	bl	8006278 <vPortExitCritical>
				return pdPASS;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e063      	b.n	8004398 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042d6:	f001 ffcf 	bl	8006278 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	e05c      	b.n	8004398 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f8f5 	bl	80054d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ee:	2301      	movs	r3, #1
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f2:	f001 ffc1 	bl	8006278 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042f6:	f000 fe5f 	bl	8004fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042fa:	f001 ff8f 	bl	800621c <vPortEnterCritical>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004304:	b25b      	sxtb	r3, r3
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d103      	bne.n	8004314 <xQueueGenericSend+0x164>
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431a:	b25b      	sxtb	r3, r3
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d103      	bne.n	800432a <xQueueGenericSend+0x17a>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800432a:	f001 ffa5 	bl	8006278 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800432e:	1d3a      	adds	r2, r7, #4
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f8e4 	bl	8005504 <xTaskCheckForTimeOut>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d124      	bne.n	800438c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004344:	f000 fb13 	bl	800496e <prvIsQueueFull>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	3310      	adds	r3, #16
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f001 f80e 	bl	8005378 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800435c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435e:	f000 fa9e 	bl	800489e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004362:	f000 fe37 	bl	8004fd4 <xTaskResumeAll>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f af7c 	bne.w	8004266 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <xQueueGenericSend+0x1f0>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	e772      	b.n	8004266 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004382:	f000 fa8c 	bl	800489e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004386:	f000 fe25 	bl	8004fd4 <xTaskResumeAll>
 800438a:	e76c      	b.n	8004266 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800438c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438e:	f000 fa86 	bl	800489e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004392:	f000 fe1f 	bl	8004fd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004396:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004398:	4618      	mov	r0, r3
 800439a:	3738      	adds	r7, #56	; 0x38
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08e      	sub	sp, #56	; 0x38
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <xQueueGenericSendFromISR+0x2c>
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e7fe      	b.n	80043ce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <xQueueGenericSendFromISR+0x3a>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <xQueueGenericSendFromISR+0x3e>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <xQueueGenericSendFromISR+0x40>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <xQueueGenericSendFromISR+0x58>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	623b      	str	r3, [r7, #32]
 80043fa:	e7fe      	b.n	80043fa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d103      	bne.n	800440a <xQueueGenericSendFromISR+0x66>
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <xQueueGenericSendFromISR+0x6a>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <xQueueGenericSendFromISR+0x6c>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <xQueueGenericSendFromISR+0x84>
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e7fe      	b.n	8004426 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004428:	f001 ffd4 	bl	80063d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800442c:	f3ef 8211 	mrs	r2, BASEPRI
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	61ba      	str	r2, [r7, #24]
 8004442:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004444:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <xQueueGenericSendFromISR+0xb6>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d12c      	bne.n	80044b4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800446a:	f000 f988 	bl	800477e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800446e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d112      	bne.n	800449e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	3324      	adds	r3, #36	; 0x24
 8004484:	4618      	mov	r0, r3
 8004486:	f000 ffc5 	bl	8005414 <xTaskRemoveFromEventList>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e007      	b.n	80044ae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800449e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044a2:	3301      	adds	r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	b25a      	sxtb	r2, r3
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044ae:	2301      	movs	r3, #1
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80044b2:	e001      	b.n	80044b8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3738      	adds	r7, #56	; 0x38
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08c      	sub	sp, #48	; 0x30
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <xQueueReceive+0x2e>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	e7fe      	b.n	80044f8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <xQueueReceive+0x3c>
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <xQueueReceive+0x40>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <xQueueReceive+0x42>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <xQueueReceive+0x5a>
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e7fe      	b.n	8004524 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004526:	f001 f92b 	bl	8005780 <xTaskGetSchedulerState>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xQueueReceive+0x6a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <xQueueReceive+0x6e>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueReceive+0x70>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <xQueueReceive+0x88>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e7fe      	b.n	8004552 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004554:	f001 fe62 	bl	800621c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01f      	beq.n	80045a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004568:	f000 f973 	bl	8004852 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00f      	beq.n	800459c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	3310      	adds	r3, #16
 8004580:	4618      	mov	r0, r3
 8004582:	f000 ff47 	bl	8005414 <xTaskRemoveFromEventList>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800458c:	4b3c      	ldr	r3, [pc, #240]	; (8004680 <xQueueReceive+0x1b4>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800459c:	f001 fe6c 	bl	8006278 <vPortExitCritical>
				return pdPASS;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e069      	b.n	8004678 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045aa:	f001 fe65 	bl	8006278 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e062      	b.n	8004678 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b8:	f107 0310 	add.w	r3, r7, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 ff8b 	bl	80054d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045c6:	f001 fe57 	bl	8006278 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ca:	f000 fcf5 	bl	8004fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ce:	f001 fe25 	bl	800621c <vPortEnterCritical>
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d103      	bne.n	80045e8 <xQueueReceive+0x11c>
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ee:	b25b      	sxtb	r3, r3
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d103      	bne.n	80045fe <xQueueReceive+0x132>
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045fe:	f001 fe3b 	bl	8006278 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004602:	1d3a      	adds	r2, r7, #4
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ff7a 	bl	8005504 <xTaskCheckForTimeOut>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d123      	bne.n	800465e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004618:	f000 f993 	bl	8004942 <prvIsQueueEmpty>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	3324      	adds	r3, #36	; 0x24
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fea4 	bl	8005378 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004632:	f000 f934 	bl	800489e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004636:	f000 fccd 	bl	8004fd4 <xTaskResumeAll>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d189      	bne.n	8004554 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <xQueueReceive+0x1b4>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	e780      	b.n	8004554 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004654:	f000 f923 	bl	800489e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004658:	f000 fcbc 	bl	8004fd4 <xTaskResumeAll>
 800465c:	e77a      	b.n	8004554 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800465e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004660:	f000 f91d 	bl	800489e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004664:	f000 fcb6 	bl	8004fd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466a:	f000 f96a 	bl	8004942 <prvIsQueueEmpty>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	f43f af6f 	beq.w	8004554 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004676:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004678:	4618      	mov	r0, r3
 800467a:	3730      	adds	r7, #48	; 0x30
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	; 0x38
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <xQueueReceiveFromISR+0x2a>
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	e7fe      	b.n	80046ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d103      	bne.n	80046bc <xQueueReceiveFromISR+0x38>
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <xQueueReceiveFromISR+0x3c>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <xQueueReceiveFromISR+0x3e>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <xQueueReceiveFromISR+0x56>
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e7fe      	b.n	80046d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046da:	f001 fe7b 	bl	80063d4 <vPortValidateInterruptPriority>
	__asm volatile
 80046de:	f3ef 8211 	mrs	r2, BASEPRI
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61ba      	str	r2, [r7, #24]
 80046f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02f      	beq.n	8004766 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004714:	f000 f89d 	bl	8004852 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d112      	bne.n	8004750 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	3310      	adds	r3, #16
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fe6c 	bl	8005414 <xTaskRemoveFromEventList>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e007      	b.n	8004760 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004754:	3301      	adds	r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	b25a      	sxtb	r2, r3
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004760:	2301      	movs	r3, #1
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
 8004764:	e001      	b.n	800476a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004766:	2300      	movs	r3, #0
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004776:	4618      	mov	r0, r3
 8004778:	3738      	adds	r7, #56	; 0x38
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10d      	bne.n	80047b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d14d      	bne.n	8004840 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f807 	bl	80057bc <xTaskPriorityDisinherit>
 80047ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	e043      	b.n	8004840 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d119      	bne.n	80047f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6858      	ldr	r0, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	461a      	mov	r2, r3
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	f002 f841 	bl	8006850 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d32b      	bcc.n	8004840 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	e026      	b.n	8004840 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68d8      	ldr	r0, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	461a      	mov	r2, r3
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	f002 f827 	bl	8006850 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	425b      	negs	r3, r3
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d207      	bcs.n	800482e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	425b      	negs	r3, r3
 8004828:	441a      	add	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d105      	bne.n	8004840 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3b01      	subs	r3, #1
 800483e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004848:	697b      	ldr	r3, [r7, #20]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d018      	beq.n	8004896 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	d303      	bcc.n	8004886 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68d9      	ldr	r1, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	461a      	mov	r2, r3
 8004890:	6838      	ldr	r0, [r7, #0]
 8004892:	f001 ffdd 	bl	8006850 <memcpy>
	}
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048a6:	f001 fcb9 	bl	800621c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048b2:	e011      	b.n	80048d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fda7 	bl	8005414 <xTaskRemoveFromEventList>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048cc:	f000 fe7a 	bl	80055c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dce9      	bgt.n	80048b4 <prvUnlockQueue+0x16>
 80048e0:	e000      	b.n	80048e4 <prvUnlockQueue+0x46>
					break;
 80048e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	22ff      	movs	r2, #255	; 0xff
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 fcc4 	bl	8006278 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048f0:	f001 fc94 	bl	800621c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048fc:	e011      	b.n	8004922 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d012      	beq.n	800492c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3310      	adds	r3, #16
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fd82 	bl	8005414 <xTaskRemoveFromEventList>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004916:	f000 fe55 	bl	80055c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800491a:	7bbb      	ldrb	r3, [r7, #14]
 800491c:	3b01      	subs	r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004926:	2b00      	cmp	r3, #0
 8004928:	dce9      	bgt.n	80048fe <prvUnlockQueue+0x60>
 800492a:	e000      	b.n	800492e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800492c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004936:	f001 fc9f 	bl	8006278 <vPortExitCritical>
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800494a:	f001 fc67 	bl	800621c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	e001      	b.n	8004960 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004960:	f001 fc8a 	bl	8006278 <vPortExitCritical>

	return xReturn;
 8004964:	68fb      	ldr	r3, [r7, #12]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004976:	f001 fc51 	bl	800621c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	429a      	cmp	r2, r3
 8004984:	d102      	bne.n	800498c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e001      	b.n	8004990 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004990:	f001 fc72 	bl	8006278 <vPortExitCritical>

	return xReturn;
 8004994:	68fb      	ldr	r3, [r7, #12]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e014      	b.n	80049da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049b0:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <vQueueAddToRegistry+0x4c>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049bc:	490b      	ldr	r1, [pc, #44]	; (80049ec <vQueueAddToRegistry+0x4c>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <vQueueAddToRegistry+0x4c>)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049d2:	e005      	b.n	80049e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b07      	cmp	r3, #7
 80049de:	d9e7      	bls.n	80049b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	20004cbc 	.word	0x20004cbc

080049f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a00:	f001 fc0c 	bl	800621c <vPortEnterCritical>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d103      	bne.n	8004a1a <vQueueWaitForMessageRestricted+0x2a>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d103      	bne.n	8004a30 <vQueueWaitForMessageRestricted+0x40>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a30:	f001 fc22 	bl	8006278 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3324      	adds	r3, #36	; 0x24
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fcbb 	bl	80053c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7ff ff27 	bl	800489e <prvUnlockQueue>
	}
 8004a50:	bf00      	nop
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08e      	sub	sp, #56	; 0x38
 8004a5c:	af04      	add	r7, sp, #16
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <xTaskCreateStatic+0x28>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e7fe      	b.n	8004a7e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <xTaskCreateStatic+0x42>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e7fe      	b.n	8004a98 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a9a:	235c      	movs	r3, #92	; 0x5c
 8004a9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8004aa2:	d009      	beq.n	8004ab8 <xTaskCreateStatic+0x60>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e7fe      	b.n	8004ab6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ab8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01e      	beq.n	8004afe <xTaskCreateStatic+0xa6>
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01b      	beq.n	8004afe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f850 	bl	8004b96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004af8:	f000 f8dc 	bl	8004cb4 <prvAddNewTaskToReadyList>
 8004afc:	e001      	b.n	8004b02 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b02:	697b      	ldr	r3, [r7, #20]
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	; 0x30
 8004b10:	af04      	add	r7, sp, #16
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 fc95 	bl	8006450 <pvPortMalloc>
 8004b26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b2e:	205c      	movs	r0, #92	; 0x5c
 8004b30:	f001 fc8e 	bl	8006450 <pvPortMalloc>
 8004b34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
 8004b42:	e005      	b.n	8004b50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b44:	6978      	ldr	r0, [r7, #20]
 8004b46:	f001 fd45 	bl	80065d4 <vPortFree>
 8004b4a:	e001      	b.n	8004b50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d017      	beq.n	8004b86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9303      	str	r3, [sp, #12]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f80e 	bl	8004b96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b7a:	69f8      	ldr	r0, [r7, #28]
 8004b7c:	f000 f89a 	bl	8004cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b80:	2301      	movs	r3, #1
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e002      	b.n	8004b8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b088      	sub	sp, #32
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	461a      	mov	r2, r3
 8004bae:	21a5      	movs	r1, #165	; 0xa5
 8004bb0:	f001 fe59 	bl	8006866 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f023 0307 	bic.w	r3, r3, #7
 8004bcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <prvInitialiseNewTask+0x56>
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e7fe      	b.n	8004bea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01f      	beq.n	8004c32 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e012      	b.n	8004c1e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	7819      	ldrb	r1, [r3, #0]
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	3334      	adds	r3, #52	; 0x34
 8004c08:	460a      	mov	r2, r1
 8004c0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2b0f      	cmp	r3, #15
 8004c22:	d9e9      	bls.n	8004bf8 <prvInitialiseNewTask+0x62>
 8004c24:	e000      	b.n	8004c28 <prvInitialiseNewTask+0x92>
			{
				break;
 8004c26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c30:	e003      	b.n	8004c3a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	2b37      	cmp	r3, #55	; 0x37
 8004c3e:	d901      	bls.n	8004c44 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c40:	2337      	movs	r3, #55	; 0x37
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2200      	movs	r2, #0
 8004c54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff f8d6 	bl	8003e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	3318      	adds	r3, #24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff f8d1 	bl	8003e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	2200      	movs	r2, #0
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	69b8      	ldr	r0, [r7, #24]
 8004c94:	f001 f998 	bl	8005fc8 <pxPortInitialiseStack>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004caa:	bf00      	nop
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cbc:	f001 faae 	bl	800621c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <prvAddNewTaskToReadyList+0xc4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <prvAddNewTaskToReadyList+0xc4>)
 8004cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cd8:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <prvAddNewTaskToReadyList+0xc4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d110      	bne.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ce0:	f000 fc94 	bl	800560c <prvInitialiseTaskLists>
 8004ce4:	e00d      	b.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <prvAddNewTaskToReadyList+0xcc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cee:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d802      	bhi.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <prvAddNewTaskToReadyList+0xd0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <prvAddNewTaskToReadyList+0xd0>)
 8004d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <prvAddNewTaskToReadyList+0xd0>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <prvAddNewTaskToReadyList+0xd4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d903      	bls.n	8004d28 <prvAddNewTaskToReadyList+0x74>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <prvAddNewTaskToReadyList+0xd4>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <prvAddNewTaskToReadyList+0xd8>)
 8004d36:	441a      	add	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7ff f871 	bl	8003e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d44:	f001 fa98 	bl	8006278 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <prvAddNewTaskToReadyList+0xcc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d207      	bcs.n	8004d6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <prvAddNewTaskToReadyList+0xdc>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000cc4 	.word	0x20000cc4
 8004d7c:	200007f0 	.word	0x200007f0
 8004d80:	20000cd0 	.word	0x20000cd0
 8004d84:	20000ce0 	.word	0x20000ce0
 8004d88:	20000ccc 	.word	0x20000ccc
 8004d8c:	200007f4 	.word	0x200007f4
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <vTaskDelayUntil+0x28>
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e7fe      	b.n	8004dba <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <vTaskDelayUntil+0x42>
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	e7fe      	b.n	8004dd4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <vTaskDelayUntil+0xe8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <vTaskDelayUntil+0x5e>
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e7fe      	b.n	8004df0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004df2:	f000 f8e1 	bl	8004fb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <vTaskDelayUntil+0xec>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	4413      	add	r3, r2
 8004e04:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d20b      	bcs.n	8004e28 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d211      	bcs.n	8004e3e <vTaskDelayUntil+0xaa>
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90d      	bls.n	8004e3e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	e00a      	b.n	8004e3e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d303      	bcc.n	8004e3a <vTaskDelayUntil+0xa6>
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d901      	bls.n	8004e3e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fd1e 	bl	8005894 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004e58:	f000 f8bc 	bl	8004fd4 <xTaskResumeAll>
 8004e5c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <vTaskDelayUntil+0xf0>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e74:	bf00      	nop
 8004e76:	3728      	adds	r7, #40	; 0x28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000cec 	.word	0x20000cec
 8004e80:	20000cc8 	.word	0x20000cc8
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <vTaskDelay+0x60>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <vTaskDelay+0x2e>
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	e7fe      	b.n	8004eb4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004eb6:	f000 f87f 	bl	8004fb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eba:	2100      	movs	r1, #0
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fce9 	bl	8005894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ec2:	f000 f887 	bl	8004fd4 <xTaskResumeAll>
 8004ec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <vTaskDelay+0x64>)
 8004ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000cec 	.word	0x20000cec
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004efe:	463a      	mov	r2, r7
 8004f00:	1d39      	adds	r1, r7, #4
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe ff2c 	bl	8003d64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	9202      	str	r2, [sp, #8]
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	2300      	movs	r3, #0
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	4920      	ldr	r1, [pc, #128]	; (8004fa0 <vTaskStartScheduler+0xb0>)
 8004f20:	4820      	ldr	r0, [pc, #128]	; (8004fa4 <vTaskStartScheduler+0xb4>)
 8004f22:	f7ff fd99 	bl	8004a58 <xTaskCreateStatic>
 8004f26:	4602      	mov	r2, r0
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <vTaskStartScheduler+0xb8>)
 8004f2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <vTaskStartScheduler+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e001      	b.n	8004f3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d102      	bne.n	8004f4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f44:	f000 fcfa 	bl	800593c <xTimerCreateTimerTask>
 8004f48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d115      	bne.n	8004f7c <vTaskStartScheduler+0x8c>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <vTaskStartScheduler+0xbc>)
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <vTaskStartScheduler+0xc0>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f70:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <vTaskStartScheduler+0xc4>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f76:	f001 f8b3 	bl	80060e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f7a:	e00d      	b.n	8004f98 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	d109      	bne.n	8004f98 <vTaskStartScheduler+0xa8>
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e7fe      	b.n	8004f96 <vTaskStartScheduler+0xa6>
}
 8004f98:	bf00      	nop
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	08007120 	.word	0x08007120
 8004fa4:	080055dd 	.word	0x080055dd
 8004fa8:	20000ce8 	.word	0x20000ce8
 8004fac:	20000ce4 	.word	0x20000ce4
 8004fb0:	20000cd0 	.word	0x20000cd0
 8004fb4:	20000cc8 	.word	0x20000cc8

08004fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <vTaskSuspendAll+0x18>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <vTaskSuspendAll+0x18>)
 8004fc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000cec 	.word	0x20000cec

08004fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fe2:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <xTaskResumeAll+0x114>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <xTaskResumeAll+0x2a>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	e7fe      	b.n	8004ffc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ffe:	f001 f90d 	bl	800621c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005002:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <xTaskResumeAll+0x114>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3b01      	subs	r3, #1
 8005008:	4a37      	ldr	r2, [pc, #220]	; (80050e8 <xTaskResumeAll+0x114>)
 800500a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <xTaskResumeAll+0x114>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d162      	bne.n	80050da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005014:	4b35      	ldr	r3, [pc, #212]	; (80050ec <xTaskResumeAll+0x118>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05e      	beq.n	80050da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501c:	e02f      	b.n	800507e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <xTaskResumeAll+0x11c>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3318      	adds	r3, #24
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe ff58 	bl	8003ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe ff53 	bl	8003ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <xTaskResumeAll+0x120>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d903      	bls.n	800504e <xTaskResumeAll+0x7a>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <xTaskResumeAll+0x120>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <xTaskResumeAll+0x124>)
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fe fede 	bl	8003e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	4b23      	ldr	r3, [pc, #140]	; (80050fc <xTaskResumeAll+0x128>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <xTaskResumeAll+0x12c>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507e:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <xTaskResumeAll+0x11c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1cb      	bne.n	800501e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800508c:	f000 fb58 	bl	8005740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005090:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <xTaskResumeAll+0x130>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800509c:	f000 f858 	bl	8005150 <xTaskIncrementTick>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <xTaskResumeAll+0x12c>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f1      	bne.n	800509c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80050b8:	4b12      	ldr	r3, [pc, #72]	; (8005104 <xTaskResumeAll+0x130>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <xTaskResumeAll+0x12c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050c6:	2301      	movs	r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xTaskResumeAll+0x134>)
 80050cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050da:	f001 f8cd 	bl	8006278 <vPortExitCritical>

	return xAlreadyYielded;
 80050de:	68bb      	ldr	r3, [r7, #8]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000cec 	.word	0x20000cec
 80050ec:	20000cc4 	.word	0x20000cc4
 80050f0:	20000c84 	.word	0x20000c84
 80050f4:	20000ccc 	.word	0x20000ccc
 80050f8:	200007f4 	.word	0x200007f4
 80050fc:	200007f0 	.word	0x200007f0
 8005100:	20000cd8 	.word	0x20000cd8
 8005104:	20000cd4 	.word	0x20000cd4
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <xTaskGetTickCount+0x1c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005118:	687b      	ldr	r3, [r7, #4]
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000cc8 	.word	0x20000cc8

0800512c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005132:	f001 f94f 	bl	80063d4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <xTaskGetTickCountFromISR+0x20>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005140:	683b      	ldr	r3, [r7, #0]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000cc8 	.word	0x20000cc8

08005150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515a:	4b4e      	ldr	r3, [pc, #312]	; (8005294 <xTaskIncrementTick+0x144>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 8088 	bne.w	8005274 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005164:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <xTaskIncrementTick+0x148>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800516c:	4a4a      	ldr	r2, [pc, #296]	; (8005298 <xTaskIncrementTick+0x148>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11f      	bne.n	80051b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005178:	4b48      	ldr	r3, [pc, #288]	; (800529c <xTaskIncrementTick+0x14c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <xTaskIncrementTick+0x46>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	e7fe      	b.n	8005194 <xTaskIncrementTick+0x44>
 8005196:	4b41      	ldr	r3, [pc, #260]	; (800529c <xTaskIncrementTick+0x14c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <xTaskIncrementTick+0x150>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a3e      	ldr	r2, [pc, #248]	; (800529c <xTaskIncrementTick+0x14c>)
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4a3e      	ldr	r2, [pc, #248]	; (80052a0 <xTaskIncrementTick+0x150>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <xTaskIncrementTick+0x154>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	4a3c      	ldr	r2, [pc, #240]	; (80052a4 <xTaskIncrementTick+0x154>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	f000 fac4 	bl	8005740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051b8:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <xTaskIncrementTick+0x158>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d349      	bcc.n	8005256 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c2:	4b36      	ldr	r3, [pc, #216]	; (800529c <xTaskIncrementTick+0x14c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051cc:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <xTaskIncrementTick+0x158>)
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	601a      	str	r2, [r3, #0]
					break;
 80051d4:	e03f      	b.n	8005256 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d6:	4b31      	ldr	r3, [pc, #196]	; (800529c <xTaskIncrementTick+0x14c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d203      	bcs.n	80051f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051ee:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <xTaskIncrementTick+0x158>)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051f4:	e02f      	b.n	8005256 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fe70 	bl	8003ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3318      	adds	r3, #24
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fe67 	bl	8003ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	4b25      	ldr	r3, [pc, #148]	; (80052ac <xTaskIncrementTick+0x15c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d903      	bls.n	8005226 <xTaskIncrementTick+0xd6>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	4a22      	ldr	r2, [pc, #136]	; (80052ac <xTaskIncrementTick+0x15c>)
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <xTaskIncrementTick+0x160>)
 8005234:	441a      	add	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7fe fdf2 	bl	8003e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <xTaskIncrementTick+0x164>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d3b8      	bcc.n	80051c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005254:	e7b5      	b.n	80051c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005256:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <xTaskIncrementTick+0x164>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525c:	4914      	ldr	r1, [pc, #80]	; (80052b0 <xTaskIncrementTick+0x160>)
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d907      	bls.n	800527e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e004      	b.n	800527e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <xTaskIncrementTick+0x168>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <xTaskIncrementTick+0x168>)
 800527c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <xTaskIncrementTick+0x16c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005286:	2301      	movs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000cec 	.word	0x20000cec
 8005298:	20000cc8 	.word	0x20000cc8
 800529c:	20000c7c 	.word	0x20000c7c
 80052a0:	20000c80 	.word	0x20000c80
 80052a4:	20000cdc 	.word	0x20000cdc
 80052a8:	20000ce4 	.word	0x20000ce4
 80052ac:	20000ccc 	.word	0x20000ccc
 80052b0:	200007f4 	.word	0x200007f4
 80052b4:	200007f0 	.word	0x200007f0
 80052b8:	20000cd4 	.word	0x20000cd4
 80052bc:	20000cd8 	.word	0x20000cd8

080052c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <vTaskSwitchContext+0xa4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <vTaskSwitchContext+0xa8>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052d4:	e040      	b.n	8005358 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <vTaskSwitchContext+0xa8>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <vTaskSwitchContext+0xac>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e00f      	b.n	8005304 <vTaskSwitchContext+0x44>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <vTaskSwitchContext+0x3e>
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	e7fe      	b.n	80052fc <vTaskSwitchContext+0x3c>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3b01      	subs	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	491a      	ldr	r1, [pc, #104]	; (8005370 <vTaskSwitchContext+0xb0>)
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0e5      	beq.n	80052e4 <vTaskSwitchContext+0x24>
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4a13      	ldr	r2, [pc, #76]	; (8005370 <vTaskSwitchContext+0xb0>)
 8005324:	4413      	add	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	3308      	adds	r3, #8
 800533a:	429a      	cmp	r2, r3
 800533c:	d104      	bne.n	8005348 <vTaskSwitchContext+0x88>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	605a      	str	r2, [r3, #4]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <vTaskSwitchContext+0xb4>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4a06      	ldr	r2, [pc, #24]	; (800536c <vTaskSwitchContext+0xac>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000cec 	.word	0x20000cec
 8005368:	20000cd8 	.word	0x20000cd8
 800536c:	20000ccc 	.word	0x20000ccc
 8005370:	200007f4 	.word	0x200007f4
 8005374:	200007f0 	.word	0x200007f0

08005378 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <vTaskPlaceOnEventList+0x24>
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e7fe      	b.n	800539a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <vTaskPlaceOnEventList+0x44>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3318      	adds	r3, #24
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fe fd62 	bl	8003e6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053aa:	2101      	movs	r1, #1
 80053ac:	6838      	ldr	r0, [r7, #0]
 80053ae:	f000 fa71 	bl	8005894 <prvAddCurrentTaskToDelayedList>
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200007f0 	.word	0x200007f0

080053c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <vTaskPlaceOnEventListRestricted+0x26>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e7fe      	b.n	80053e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <vTaskPlaceOnEventListRestricted+0x50>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3318      	adds	r3, #24
 80053ec:	4619      	mov	r1, r3
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fe fd19 	bl	8003e26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	68b8      	ldr	r0, [r7, #8]
 8005404:	f000 fa46 	bl	8005894 <prvAddCurrentTaskToDelayedList>
	}
 8005408:	bf00      	nop
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	200007f0 	.word	0x200007f0

08005414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <xTaskRemoveFromEventList+0x2a>
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e7fe      	b.n	800543c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3318      	adds	r3, #24
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe fd4c 	bl	8003ee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <xTaskRemoveFromEventList+0xac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11d      	bne.n	800548c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fd43 	bl	8003ee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545e:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <xTaskRemoveFromEventList+0xb0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d903      	bls.n	800546e <xTaskRemoveFromEventList+0x5a>
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <xTaskRemoveFromEventList+0xb0>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <xTaskRemoveFromEventList+0xb4>)
 800547c:	441a      	add	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7fe fcce 	bl	8003e26 <vListInsertEnd>
 800548a:	e005      	b.n	8005498 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	3318      	adds	r3, #24
 8005490:	4619      	mov	r1, r3
 8005492:	480e      	ldr	r0, [pc, #56]	; (80054cc <xTaskRemoveFromEventList+0xb8>)
 8005494:	f7fe fcc7 	bl	8003e26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <xTaskRemoveFromEventList+0xbc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d905      	bls.n	80054b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <xTaskRemoveFromEventList+0xc0>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e001      	b.n	80054b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054b6:	697b      	ldr	r3, [r7, #20]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000cec 	.word	0x20000cec
 80054c4:	20000ccc 	.word	0x20000ccc
 80054c8:	200007f4 	.word	0x200007f4
 80054cc:	20000c84 	.word	0x20000c84
 80054d0:	200007f0 	.word	0x200007f0
 80054d4:	20000cd8 	.word	0x20000cd8

080054d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <vTaskInternalSetTimeOutState+0x24>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <vTaskInternalSetTimeOutState+0x28>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	605a      	str	r2, [r3, #4]
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000cdc 	.word	0x20000cdc
 8005500:	20000cc8 	.word	0x20000cc8

08005504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d109      	bne.n	8005528 <xTaskCheckForTimeOut+0x24>
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e7fe      	b.n	8005526 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <xTaskCheckForTimeOut+0x3e>
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e7fe      	b.n	8005540 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005542:	f000 fe6b 	bl	800621c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005546:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <xTaskCheckForTimeOut+0xb8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d102      	bne.n	8005566 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e023      	b.n	80055ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <xTaskCheckForTimeOut+0xbc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d007      	beq.n	8005582 <xTaskCheckForTimeOut+0x7e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	e015      	b.n	80055ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	429a      	cmp	r2, r3
 800558a:	d20b      	bcs.n	80055a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff9d 	bl	80054d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e004      	b.n	80055ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f000 fe63 	bl	8006278 <vPortExitCritical>

	return xReturn;
 80055b2:	69fb      	ldr	r3, [r7, #28]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000cc8 	.word	0x20000cc8
 80055c0:	20000cdc 	.word	0x20000cdc

080055c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <vTaskMissedYield+0x14>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	bf00      	nop
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	20000cd8 	.word	0x20000cd8

080055dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055e4:	f000 f852 	bl	800568c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055e8:	4b06      	ldr	r3, [pc, #24]	; (8005604 <prvIdleTask+0x28>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d9f9      	bls.n	80055e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <prvIdleTask+0x2c>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005600:	e7f0      	b.n	80055e4 <prvIdleTask+0x8>
 8005602:	bf00      	nop
 8005604:	200007f4 	.word	0x200007f4
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	e00c      	b.n	8005632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <prvInitialiseTaskLists+0x60>)
 8005624:	4413      	add	r3, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fbd0 	bl	8003dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3301      	adds	r3, #1
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b37      	cmp	r3, #55	; 0x37
 8005636:	d9ef      	bls.n	8005618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005638:	480d      	ldr	r0, [pc, #52]	; (8005670 <prvInitialiseTaskLists+0x64>)
 800563a:	f7fe fbc7 	bl	8003dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800563e:	480d      	ldr	r0, [pc, #52]	; (8005674 <prvInitialiseTaskLists+0x68>)
 8005640:	f7fe fbc4 	bl	8003dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005644:	480c      	ldr	r0, [pc, #48]	; (8005678 <prvInitialiseTaskLists+0x6c>)
 8005646:	f7fe fbc1 	bl	8003dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800564a:	480c      	ldr	r0, [pc, #48]	; (800567c <prvInitialiseTaskLists+0x70>)
 800564c:	f7fe fbbe 	bl	8003dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005650:	480b      	ldr	r0, [pc, #44]	; (8005680 <prvInitialiseTaskLists+0x74>)
 8005652:	f7fe fbbb 	bl	8003dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <prvInitialiseTaskLists+0x78>)
 8005658:	4a05      	ldr	r2, [pc, #20]	; (8005670 <prvInitialiseTaskLists+0x64>)
 800565a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvInitialiseTaskLists+0x7c>)
 800565e:	4a05      	ldr	r2, [pc, #20]	; (8005674 <prvInitialiseTaskLists+0x68>)
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200007f4 	.word	0x200007f4
 8005670:	20000c54 	.word	0x20000c54
 8005674:	20000c68 	.word	0x20000c68
 8005678:	20000c84 	.word	0x20000c84
 800567c:	20000c98 	.word	0x20000c98
 8005680:	20000cb0 	.word	0x20000cb0
 8005684:	20000c7c 	.word	0x20000c7c
 8005688:	20000c80 	.word	0x20000c80

0800568c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005692:	e019      	b.n	80056c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005694:	f000 fdc2 	bl	800621c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <prvCheckTasksWaitingTermination+0x4c>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fc1b 	bl	8003ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <prvCheckTasksWaitingTermination+0x50>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <prvCheckTasksWaitingTermination+0x50>)
 80056b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056be:	f000 fddb 	bl	8006278 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f80e 	bl	80056e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e1      	bne.n	8005694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000c98 	.word	0x20000c98
 80056dc:	20000cc4 	.word	0x20000cc4
 80056e0:	20000cac 	.word	0x20000cac

080056e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d108      	bne.n	8005708 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 ff6a 	bl	80065d4 <vPortFree>
				vPortFree( pxTCB );
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 ff67 	bl	80065d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005706:	e017      	b.n	8005738 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800570e:	2b01      	cmp	r3, #1
 8005710:	d103      	bne.n	800571a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 ff5e 	bl	80065d4 <vPortFree>
	}
 8005718:	e00e      	b.n	8005738 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005720:	2b02      	cmp	r3, #2
 8005722:	d009      	beq.n	8005738 <prvDeleteTCB+0x54>
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e7fe      	b.n	8005736 <prvDeleteTCB+0x52>
	}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005746:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <prvResetNextTaskUnblockTime+0x38>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <prvResetNextTaskUnblockTime+0x3c>)
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005758:	e008      	b.n	800576c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <prvResetNextTaskUnblockTime+0x38>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <prvResetNextTaskUnblockTime+0x3c>)
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20000c7c 	.word	0x20000c7c
 800577c:	20000ce4 	.word	0x20000ce4

08005780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <xTaskGetSchedulerState+0x34>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800578e:	2301      	movs	r3, #1
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	e008      	b.n	80057a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <xTaskGetSchedulerState+0x38>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800579c:	2302      	movs	r3, #2
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	e001      	b.n	80057a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057a2:	2300      	movs	r3, #0
 80057a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057a6:	687b      	ldr	r3, [r7, #4]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000cd0 	.word	0x20000cd0
 80057b8:	20000cec 	.word	0x20000cec

080057bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d054      	beq.n	800587c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057d2:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <xTaskPriorityDisinherit+0xcc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d009      	beq.n	80057f0 <xTaskPriorityDisinherit+0x34>
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e7fe      	b.n	80057ee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <xTaskPriorityDisinherit+0x50>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	e7fe      	b.n	800580a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	429a      	cmp	r2, r3
 8005820:	d02c      	beq.n	800587c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d128      	bne.n	800587c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fb56 	bl	8003ee0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <xTaskPriorityDisinherit+0xd0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <xTaskPriorityDisinherit+0xa0>
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a0c      	ldr	r2, [pc, #48]	; (800588c <xTaskPriorityDisinherit+0xd0>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <xTaskPriorityDisinherit+0xd4>)
 800586a:	441a      	add	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fe fad7 	bl	8003e26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800587c:	697b      	ldr	r3, [r7, #20]
	}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200007f0 	.word	0x200007f0
 800588c:	20000ccc 	.word	0x20000ccc
 8005890:	200007f4 	.word	0x200007f4

08005894 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <prvAddCurrentTaskToDelayedList+0x90>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a4:	4b20      	ldr	r3, [pc, #128]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fb18 	bl	8003ee0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d10a      	bne.n	80058ce <prvAddCurrentTaskToDelayedList+0x3a>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058be:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4819      	ldr	r0, [pc, #100]	; (800592c <prvAddCurrentTaskToDelayedList+0x98>)
 80058c8:	f7fe faad 	bl	8003e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058cc:	e026      	b.n	800591c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d209      	bcs.n	80058fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fe fabb 	bl	8003e6e <vListInsert>
}
 80058f8:	e010      	b.n	800591c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7fe fab1 	bl	8003e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <prvAddCurrentTaskToDelayedList+0xa4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d202      	bcs.n	800591c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005916:	4a08      	ldr	r2, [pc, #32]	; (8005938 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000cc8 	.word	0x20000cc8
 8005928:	200007f0 	.word	0x200007f0
 800592c:	20000cb0 	.word	0x20000cb0
 8005930:	20000c80 	.word	0x20000c80
 8005934:	20000c7c 	.word	0x20000c7c
 8005938:	20000ce4 	.word	0x20000ce4

0800593c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005946:	f000 faff 	bl	8005f48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <xTimerCreateTimerTask+0x80>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d021      	beq.n	8005996 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800595a:	1d3a      	adds	r2, r7, #4
 800595c:	f107 0108 	add.w	r1, r7, #8
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fa17 	bl	8003d98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	9202      	str	r2, [sp, #8]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	2302      	movs	r3, #2
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	460a      	mov	r2, r1
 800597c:	4910      	ldr	r1, [pc, #64]	; (80059c0 <xTimerCreateTimerTask+0x84>)
 800597e:	4811      	ldr	r0, [pc, #68]	; (80059c4 <xTimerCreateTimerTask+0x88>)
 8005980:	f7ff f86a 	bl	8004a58 <xTaskCreateStatic>
 8005984:	4602      	mov	r2, r0
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <xTimerCreateTimerTask+0x8c>)
 8005988:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <xTimerCreateTimerTask+0x8c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005992:	2301      	movs	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <xTimerCreateTimerTask+0x74>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e7fe      	b.n	80059ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80059b0:	697b      	ldr	r3, [r7, #20]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000d20 	.word	0x20000d20
 80059c0:	08007128 	.word	0x08007128
 80059c4:	08005afd 	.word	0x08005afd
 80059c8:	20000d24 	.word	0x20000d24

080059cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <xTimerGenericCommand+0x2c>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	e7fe      	b.n	80059f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059f8:	4b19      	ldr	r3, [pc, #100]	; (8005a60 <xTimerGenericCommand+0x94>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02a      	beq.n	8005a56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b05      	cmp	r3, #5
 8005a10:	dc18      	bgt.n	8005a44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a12:	f7ff feb5 	bl	8005780 <xTaskGetSchedulerState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d109      	bne.n	8005a30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a1c:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <xTimerGenericCommand+0x94>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	f107 0110 	add.w	r1, r7, #16
 8005a24:	2300      	movs	r3, #0
 8005a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a28:	f7fe fbc2 	bl	80041b0 <xQueueGenericSend>
 8005a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a2e:	e012      	b.n	8005a56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <xTimerGenericCommand+0x94>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	f107 0110 	add.w	r1, r7, #16
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f7fe fbb8 	bl	80041b0 <xQueueGenericSend>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24
 8005a42:	e008      	b.n	8005a56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <xTimerGenericCommand+0x94>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	f107 0110 	add.w	r1, r7, #16
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	f7fe fca8 	bl	80043a4 <xQueueGenericSendFromISR>
 8005a54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3728      	adds	r7, #40	; 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000d20 	.word	0x20000d20

08005a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6e:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <prvProcessExpiredTimer+0x94>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fa2f 	bl	8003ee0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d021      	beq.n	8005ad4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	699a      	ldr	r2, [r3, #24]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	18d1      	adds	r1, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	6978      	ldr	r0, [r7, #20]
 8005a9e:	f000 f8d1 	bl	8005c44 <prvInsertTimerInActiveList>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01e      	beq.n	8005ae6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7ff ff8a 	bl	80059cc <xTimerGenericCommand>
 8005ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d112      	bne.n	8005ae6 <prvProcessExpiredTimer+0x82>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e7fe      	b.n	8005ad2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	4798      	blx	r3
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000d18 	.word	0x20000d18

08005afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b04:	f107 0308 	add.w	r3, r7, #8
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 f857 	bl	8005bbc <prvGetNextExpireTime>
 8005b0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4619      	mov	r1, r3
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f803 	bl	8005b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b1a:	f000 f8d5 	bl	8005cc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b1e:	e7f1      	b.n	8005b04 <prvTimerTask+0x8>

08005b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b2a:	f7ff fa45 	bl	8004fb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b2e:	f107 0308 	add.w	r3, r7, #8
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f866 	bl	8005c04 <prvSampleTimeNow>
 8005b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d130      	bne.n	8005ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <prvProcessTimerOrBlockTask+0x3c>
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d806      	bhi.n	8005b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b4e:	f7ff fa41 	bl	8004fd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff85 	bl	8005a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b5a:	e024      	b.n	8005ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b62:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <prvProcessTimerOrBlockTask+0x90>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <prvProcessTimerOrBlockTask+0x50>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <prvProcessTimerOrBlockTask+0x52>
 8005b70:	2300      	movs	r3, #0
 8005b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <prvProcessTimerOrBlockTask+0x94>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f7fe ff35 	bl	80049f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b86:	f7ff fa25 	bl	8004fd4 <xTaskResumeAll>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b90:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <prvProcessTimerOrBlockTask+0x98>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
}
 8005ba0:	e001      	b.n	8005ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ba2:	f7ff fa17 	bl	8004fd4 <xTaskResumeAll>
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000d1c 	.word	0x20000d1c
 8005bb4:	20000d20 	.word	0x20000d20
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <prvGetNextExpireTime+0x44>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <prvGetNextExpireTime+0x16>
 8005bce:	2201      	movs	r2, #1
 8005bd0:	e000      	b.n	8005bd4 <prvGetNextExpireTime+0x18>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <prvGetNextExpireTime+0x44>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e001      	b.n	8005bf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000d18 	.word	0x20000d18

08005c04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c0c:	f7ff fa7e 	bl	800510c <xTaskGetTickCount>
 8005c10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <prvSampleTimeNow+0x3c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d205      	bcs.n	8005c28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c1c:	f000 f930 	bl	8005e80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c2e:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <prvSampleTimeNow+0x3c>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000d28 	.word	0x20000d28

08005c44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d812      	bhi.n	8005c90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d302      	bcc.n	8005c7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e01b      	b.n	8005cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c7e:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <prvInsertTimerInActiveList+0x7c>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3304      	adds	r3, #4
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f7fe f8f0 	bl	8003e6e <vListInsert>
 8005c8e:	e012      	b.n	8005cb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d206      	bcs.n	8005ca6 <prvInsertTimerInActiveList+0x62>
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e007      	b.n	8005cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ca6:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <prvInsertTimerInActiveList+0x80>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7fe f8dc 	bl	8003e6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cb6:	697b      	ldr	r3, [r7, #20]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20000d1c 	.word	0x20000d1c
 8005cc4:	20000d18 	.word	0x20000d18

08005cc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cce:	e0c6      	b.n	8005e5e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da17      	bge.n	8005d06 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	3304      	adds	r3, #4
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <prvProcessReceivedCommands+0x2e>
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	e7fe      	b.n	8005cf4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfc:	6850      	ldr	r0, [r2, #4]
 8005cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d00:	6892      	ldr	r2, [r2, #8]
 8005d02:	4611      	mov	r1, r2
 8005d04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f2c0 80a7 	blt.w	8005e5c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe f8de 	bl	8003ee0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d24:	463b      	mov	r3, r7
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff ff6c 	bl	8005c04 <prvSampleTimeNow>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	f200 8094 	bhi.w	8005e5e <prvProcessReceivedCommands+0x196>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <prvProcessReceivedCommands+0x74>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d65 	.word	0x08005d65
 8005d48:	08005dd7 	.word	0x08005dd7
 8005d4c:	08005deb 	.word	0x08005deb
 8005d50:	08005e33 	.word	0x08005e33
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d65 	.word	0x08005d65
 8005d5c:	08005dd7 	.word	0x08005dd7
 8005d60:	08005deb 	.word	0x08005deb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	18d1      	adds	r1, r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d84:	f7ff ff5e 	bl	8005c44 <prvInsertTimerInActiveList>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d067      	beq.n	8005e5e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d05c      	beq.n	8005e5e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	441a      	add	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db6:	f7ff fe09 	bl	80059cc <xTimerGenericCommand>
 8005dba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d14d      	bne.n	8005e5e <prvProcessReceivedCommands+0x196>
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e7fe      	b.n	8005dd4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005de8:	e039      	b.n	8005e5e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <prvProcessReceivedCommands+0x156>
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e7fe      	b.n	8005e1c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	18d1      	adds	r1, r2, r3
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2c:	f7ff ff0a 	bl	8005c44 <prvInsertTimerInActiveList>
					break;
 8005e30:	e015      	b.n	8005e5e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e42:	f000 fbc7 	bl	80065d4 <vPortFree>
 8005e46:	e00a      	b.n	8005e5e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e5a:	e000      	b.n	8005e5e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <prvProcessReceivedCommands+0x1b4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1d39      	adds	r1, r7, #4
 8005e64:	2200      	movs	r2, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fb30 	bl	80044cc <xQueueReceive>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f47f af2e 	bne.w	8005cd0 <prvProcessReceivedCommands+0x8>
	}
}
 8005e74:	bf00      	nop
 8005e76:	3730      	adds	r7, #48	; 0x30
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000d20 	.word	0x20000d20

08005e80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e86:	e047      	b.n	8005f18 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e88:	4b2d      	ldr	r3, [pc, #180]	; (8005f40 <prvSwitchTimerLists+0xc0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e92:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <prvSwitchTimerLists+0xc0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe f81d 	bl	8003ee0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02d      	beq.n	8005f18 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d90e      	bls.n	8005eec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eda:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <prvSwitchTimerLists+0xc0>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7fd ffc2 	bl	8003e6e <vListInsert>
 8005eea:	e015      	b.n	8005f18 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005eec:	2300      	movs	r3, #0
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fd68 	bl	80059cc <xTimerGenericCommand>
 8005efc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <prvSwitchTimerLists+0x98>
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	e7fe      	b.n	8005f16 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f18:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <prvSwitchTimerLists+0xc0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1b2      	bne.n	8005e88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvSwitchTimerLists+0xc0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <prvSwitchTimerLists+0xc4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <prvSwitchTimerLists+0xc0>)
 8005f2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <prvSwitchTimerLists+0xc4>)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	6013      	str	r3, [r2, #0]
}
 8005f36:	bf00      	nop
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000d18 	.word	0x20000d18
 8005f44:	20000d1c 	.word	0x20000d1c

08005f48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f4e:	f000 f965 	bl	800621c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d120      	bne.n	8005f9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f5a:	4814      	ldr	r0, [pc, #80]	; (8005fac <prvCheckForValidListAndQueue+0x64>)
 8005f5c:	f7fd ff36 	bl	8003dcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f60:	4813      	ldr	r0, [pc, #76]	; (8005fb0 <prvCheckForValidListAndQueue+0x68>)
 8005f62:	f7fd ff33 	bl	8003dcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f66:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <prvCheckForValidListAndQueue+0x6c>)
 8005f68:	4a10      	ldr	r2, [pc, #64]	; (8005fac <prvCheckForValidListAndQueue+0x64>)
 8005f6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f6c:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <prvCheckForValidListAndQueue+0x70>)
 8005f6e:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <prvCheckForValidListAndQueue+0x68>)
 8005f70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f72:	2300      	movs	r3, #0
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <prvCheckForValidListAndQueue+0x74>)
 8005f78:	4a11      	ldr	r2, [pc, #68]	; (8005fc0 <prvCheckForValidListAndQueue+0x78>)
 8005f7a:	2110      	movs	r1, #16
 8005f7c:	200a      	movs	r0, #10
 8005f7e:	f7fe f841 	bl	8004004 <xQueueGenericCreateStatic>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f86:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	490b      	ldr	r1, [pc, #44]	; (8005fc4 <prvCheckForValidListAndQueue+0x7c>)
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fd02 	bl	80049a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f9c:	f000 f96c 	bl	8006278 <vPortExitCritical>
}
 8005fa0:	bf00      	nop
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000d20 	.word	0x20000d20
 8005fac:	20000cf0 	.word	0x20000cf0
 8005fb0:	20000d04 	.word	0x20000d04
 8005fb4:	20000d18 	.word	0x20000d18
 8005fb8:	20000d1c 	.word	0x20000d1c
 8005fbc:	20000dcc 	.word	0x20000dcc
 8005fc0:	20000d2c 	.word	0x20000d2c
 8005fc4:	08007130 	.word	0x08007130

08005fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <pxPortInitialiseStack+0x64>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b14      	subs	r3, #20
 8006002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3b04      	subs	r3, #4
 800600e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f06f 0202 	mvn.w	r2, #2
 8006016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3b20      	subs	r3, #32
 800601c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	08006031 	.word	0x08006031

08006030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <prvTaskExitError+0x50>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d009      	beq.n	8006058 <prvTaskExitError+0x28>
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	e7fe      	b.n	8006056 <prvTaskExitError+0x26>
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800606a:	bf00      	nop
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0fc      	beq.n	800606c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	200000ac 	.word	0x200000ac
	...

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060da:	bf00      	nop
 80060dc:	e000ed08 	.word	0xe000ed08

080060e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060e6:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <xPortStartScheduler+0x118>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a44      	ldr	r2, [pc, #272]	; (80061fc <xPortStartScheduler+0x11c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d109      	bne.n	8006104 <xPortStartScheduler+0x24>
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	e7fe      	b.n	8006102 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006104:	4b3c      	ldr	r3, [pc, #240]	; (80061f8 <xPortStartScheduler+0x118>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a3d      	ldr	r2, [pc, #244]	; (8006200 <xPortStartScheduler+0x120>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d109      	bne.n	8006122 <xPortStartScheduler+0x42>
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e7fe      	b.n	8006120 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006122:	4b38      	ldr	r3, [pc, #224]	; (8006204 <xPortStartScheduler+0x124>)
 8006124:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b30      	ldr	r3, [pc, #192]	; (8006208 <xPortStartScheduler+0x128>)
 8006148:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800614a:	4b30      	ldr	r3, [pc, #192]	; (800620c <xPortStartScheduler+0x12c>)
 800614c:	2207      	movs	r2, #7
 800614e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006150:	e009      	b.n	8006166 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006152:	4b2e      	ldr	r3, [pc, #184]	; (800620c <xPortStartScheduler+0x12c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a2c      	ldr	r2, [pc, #176]	; (800620c <xPortStartScheduler+0x12c>)
 800615a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d0ef      	beq.n	8006152 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006172:	4b26      	ldr	r3, [pc, #152]	; (800620c <xPortStartScheduler+0x12c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1c3 0307 	rsb	r3, r3, #7
 800617a:	2b04      	cmp	r3, #4
 800617c:	d009      	beq.n	8006192 <xPortStartScheduler+0xb2>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	e7fe      	b.n	8006190 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <xPortStartScheduler+0x12c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	4a1c      	ldr	r2, [pc, #112]	; (800620c <xPortStartScheduler+0x12c>)
 800619a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <xPortStartScheduler+0x12c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061a4:	4a19      	ldr	r2, [pc, #100]	; (800620c <xPortStartScheduler+0x12c>)
 80061a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061b0:	4b17      	ldr	r3, [pc, #92]	; (8006210 <xPortStartScheduler+0x130>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a16      	ldr	r2, [pc, #88]	; (8006210 <xPortStartScheduler+0x130>)
 80061b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061bc:	4b14      	ldr	r3, [pc, #80]	; (8006210 <xPortStartScheduler+0x130>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a13      	ldr	r2, [pc, #76]	; (8006210 <xPortStartScheduler+0x130>)
 80061c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061c8:	f000 f8d6 	bl	8006378 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <xPortStartScheduler+0x134>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061d2:	f000 f8f5 	bl	80063c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061d6:	4b10      	ldr	r3, [pc, #64]	; (8006218 <xPortStartScheduler+0x138>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a0f      	ldr	r2, [pc, #60]	; (8006218 <xPortStartScheduler+0x138>)
 80061dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061e2:	f7ff ff69 	bl	80060b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061e6:	f7ff f86b 	bl	80052c0 <vTaskSwitchContext>
	prvTaskExitError();
 80061ea:	f7ff ff21 	bl	8006030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	e000ed00 	.word	0xe000ed00
 80061fc:	410fc271 	.word	0x410fc271
 8006200:	410fc270 	.word	0x410fc270
 8006204:	e000e400 	.word	0xe000e400
 8006208:	20000e1c 	.word	0x20000e1c
 800620c:	20000e20 	.word	0x20000e20
 8006210:	e000ed20 	.word	0xe000ed20
 8006214:	200000ac 	.word	0x200000ac
 8006218:	e000ef34 	.word	0xe000ef34

0800621c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006234:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <vPortEnterCritical+0x54>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <vPortEnterCritical+0x54>)
 800623c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <vPortEnterCritical+0x54>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10e      	bne.n	8006264 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <vPortEnterCritical+0x58>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <vPortEnterCritical+0x48>
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	e7fe      	b.n	8006262 <vPortEnterCritical+0x46>
	}
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	200000ac 	.word	0x200000ac
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <vPortExitCritical+0x4c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <vPortExitCritical+0x22>
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	e7fe      	b.n	8006298 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <vPortExitCritical+0x4c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3b01      	subs	r3, #1
 80062a0:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <vPortExitCritical+0x4c>)
 80062a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <vPortExitCritical+0x4c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <vPortExitCritical+0x3e>
 80062ac:	2300      	movs	r3, #0
 80062ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	200000ac 	.word	0x200000ac
	...

080062d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062d0:	f3ef 8009 	mrs	r0, PSP
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <pxCurrentTCBConst>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f01e 0f10 	tst.w	lr, #16
 80062e0:	bf08      	it	eq
 80062e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062f4:	f380 8811 	msr	BASEPRI, r0
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f7fe ffde 	bl	80052c0 <vTaskSwitchContext>
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f380 8811 	msr	BASEPRI, r0
 800630c:	bc09      	pop	{r0, r3}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006316:	f01e 0f10 	tst.w	lr, #16
 800631a:	bf08      	it	eq
 800631c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006320:	f380 8809 	msr	PSP, r0
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst>:
 8006330:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006350:	f7fe fefe 	bl	8005150 <xTaskIncrementTick>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <xPortSysTickHandler+0x3c>)
 800635c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <vPortSetupTimerInterrupt+0x34>)
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortSetupTimerInterrupt+0x38>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <vPortSetupTimerInterrupt+0x3c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <vPortSetupTimerInterrupt+0x40>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	099b      	lsrs	r3, r3, #6
 8006394:	4a09      	ldr	r2, [pc, #36]	; (80063bc <vPortSetupTimerInterrupt+0x44>)
 8006396:	3b01      	subs	r3, #1
 8006398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800639a:	4b04      	ldr	r3, [pc, #16]	; (80063ac <vPortSetupTimerInterrupt+0x34>)
 800639c:	2207      	movs	r2, #7
 800639e:	601a      	str	r2, [r3, #0]
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	e000e010 	.word	0xe000e010
 80063b0:	e000e018 	.word	0xe000e018
 80063b4:	200000a0 	.word	0x200000a0
 80063b8:	10624dd3 	.word	0x10624dd3
 80063bc:	e000e014 	.word	0xe000e014

080063c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063d0 <vPortEnableVFP+0x10>
 80063c4:	6801      	ldr	r1, [r0, #0]
 80063c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ca:	6001      	str	r1, [r0, #0]
 80063cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063ce:	bf00      	nop
 80063d0:	e000ed88 	.word	0xe000ed88

080063d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063da:	f3ef 8305 	mrs	r3, IPSR
 80063de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d913      	bls.n	800640e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063e6:	4a16      	ldr	r2, [pc, #88]	; (8006440 <vPortValidateInterruptPriority+0x6c>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063f0:	4b14      	ldr	r3, [pc, #80]	; (8006444 <vPortValidateInterruptPriority+0x70>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	7afa      	ldrb	r2, [r7, #11]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d209      	bcs.n	800640e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	e7fe      	b.n	800640c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800640e:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <vPortValidateInterruptPriority+0x74>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <vPortValidateInterruptPriority+0x78>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d909      	bls.n	8006432 <vPortValidateInterruptPriority+0x5e>
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	e7fe      	b.n	8006430 <vPortValidateInterruptPriority+0x5c>
	}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	e000e3f0 	.word	0xe000e3f0
 8006444:	20000e1c 	.word	0x20000e1c
 8006448:	e000ed0c 	.word	0xe000ed0c
 800644c:	20000e20 	.word	0x20000e20

08006450 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800645c:	f7fe fdac 	bl	8004fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006460:	4b57      	ldr	r3, [pc, #348]	; (80065c0 <pvPortMalloc+0x170>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006468:	f000 f90c 	bl	8006684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800646c:	4b55      	ldr	r3, [pc, #340]	; (80065c4 <pvPortMalloc+0x174>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 808c 	bne.w	8006592 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01c      	beq.n	80064ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d013      	beq.n	80064ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	3308      	adds	r3, #8
 800649a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <pvPortMalloc+0x6a>
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e7fe      	b.n	80064b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d068      	beq.n	8006592 <pvPortMalloc+0x142>
 80064c0:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <pvPortMalloc+0x178>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d863      	bhi.n	8006592 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ca:	4b40      	ldr	r3, [pc, #256]	; (80065cc <pvPortMalloc+0x17c>)
 80064cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ce:	4b3f      	ldr	r3, [pc, #252]	; (80065cc <pvPortMalloc+0x17c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d4:	e004      	b.n	80064e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d903      	bls.n	80064f2 <pvPortMalloc+0xa2>
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f1      	bne.n	80064d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064f2:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <pvPortMalloc+0x170>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d04a      	beq.n	8006592 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2208      	movs	r2, #8
 8006502:	4413      	add	r3, r2
 8006504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1ad2      	subs	r2, r2, r3
 8006516:	2308      	movs	r3, #8
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	429a      	cmp	r2, r3
 800651c:	d91e      	bls.n	800655c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800651e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <pvPortMalloc+0xf4>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	e7fe      	b.n	8006542 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006556:	69b8      	ldr	r0, [r7, #24]
 8006558:	f000 f8f6 	bl	8006748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <pvPortMalloc+0x178>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <pvPortMalloc+0x178>)
 8006568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <pvPortMalloc+0x178>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <pvPortMalloc+0x180>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d203      	bcs.n	800657e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <pvPortMalloc+0x178>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <pvPortMalloc+0x180>)
 800657c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <pvPortMalloc+0x174>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	431a      	orrs	r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006592:	f7fe fd1f 	bl	8004fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <pvPortMalloc+0x164>
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e7fe      	b.n	80065b2 <pvPortMalloc+0x162>
	return pvReturn;
 80065b4:	69fb      	ldr	r3, [r7, #28]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3728      	adds	r7, #40	; 0x28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20004a2c 	.word	0x20004a2c
 80065c4:	20004a38 	.word	0x20004a38
 80065c8:	20004a30 	.word	0x20004a30
 80065cc:	20004a24 	.word	0x20004a24
 80065d0:	20004a34 	.word	0x20004a34

080065d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d046      	beq.n	8006674 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e6:	2308      	movs	r3, #8
 80065e8:	425b      	negs	r3, r3
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <vPortFree+0xa8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <vPortFree+0x42>
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e7fe      	b.n	8006614 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <vPortFree+0x5e>
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	e7fe      	b.n	8006630 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <vPortFree+0xa8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d019      	beq.n	8006674 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d115      	bne.n	8006674 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <vPortFree+0xa8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe fcae 	bl	8004fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <vPortFree+0xac>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a06      	ldr	r2, [pc, #24]	; (8006680 <vPortFree+0xac>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f86c 	bl	8006748 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006670:	f7fe fcb0 	bl	8004fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006674:	bf00      	nop
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20004a38 	.word	0x20004a38
 8006680:	20004a30 	.word	0x20004a30

08006684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800668a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800668e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <prvHeapInit+0xac>)
 8006692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3307      	adds	r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a1f      	ldr	r2, [pc, #124]	; (8006730 <prvHeapInit+0xac>)
 80066b4:	4413      	add	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <prvHeapInit+0xb0>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <prvHeapInit+0xb0>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066d0:	2208      	movs	r2, #8
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <prvHeapInit+0xb4>)
 80066e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066e6:	4b14      	ldr	r3, [pc, #80]	; (8006738 <prvHeapInit+0xb4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <prvHeapInit+0xb4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <prvHeapInit+0xb4>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <prvHeapInit+0xb8>)
 8006712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <prvHeapInit+0xbc>)
 800671a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <prvHeapInit+0xc0>)
 800671e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000e24 	.word	0x20000e24
 8006734:	20004a24 	.word	0x20004a24
 8006738:	20004a2c 	.word	0x20004a2c
 800673c:	20004a34 	.word	0x20004a34
 8006740:	20004a30 	.word	0x20004a30
 8006744:	20004a38 	.word	0x20004a38

08006748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <prvInsertBlockIntoFreeList+0xac>)
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e002      	b.n	800675c <prvInsertBlockIntoFreeList+0x14>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d8f7      	bhi.n	8006756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	d108      	bne.n	800678a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	441a      	add	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d118      	bne.n	80067d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <prvInsertBlockIntoFreeList+0xb0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d00d      	beq.n	80067c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	441a      	add	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e008      	b.n	80067d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <prvInsertBlockIntoFreeList+0xb0>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e003      	b.n	80067d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d002      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20004a24 	.word	0x20004a24
 80067f8:	20004a2c 	.word	0x20004a2c

080067fc <__errno>:
 80067fc:	4b01      	ldr	r3, [pc, #4]	; (8006804 <__errno+0x8>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	200000b0 	.word	0x200000b0

08006808 <__libc_init_array>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4e0d      	ldr	r6, [pc, #52]	; (8006840 <__libc_init_array+0x38>)
 800680c:	4c0d      	ldr	r4, [pc, #52]	; (8006844 <__libc_init_array+0x3c>)
 800680e:	1ba4      	subs	r4, r4, r6
 8006810:	10a4      	asrs	r4, r4, #2
 8006812:	2500      	movs	r5, #0
 8006814:	42a5      	cmp	r5, r4
 8006816:	d109      	bne.n	800682c <__libc_init_array+0x24>
 8006818:	4e0b      	ldr	r6, [pc, #44]	; (8006848 <__libc_init_array+0x40>)
 800681a:	4c0c      	ldr	r4, [pc, #48]	; (800684c <__libc_init_array+0x44>)
 800681c:	f000 fc28 	bl	8007070 <_init>
 8006820:	1ba4      	subs	r4, r4, r6
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	2500      	movs	r5, #0
 8006826:	42a5      	cmp	r5, r4
 8006828:	d105      	bne.n	8006836 <__libc_init_array+0x2e>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006830:	4798      	blx	r3
 8006832:	3501      	adds	r5, #1
 8006834:	e7ee      	b.n	8006814 <__libc_init_array+0xc>
 8006836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800683a:	4798      	blx	r3
 800683c:	3501      	adds	r5, #1
 800683e:	e7f2      	b.n	8006826 <__libc_init_array+0x1e>
 8006840:	08007280 	.word	0x08007280
 8006844:	08007280 	.word	0x08007280
 8006848:	08007280 	.word	0x08007280
 800684c:	08007284 	.word	0x08007284

08006850 <memcpy>:
 8006850:	b510      	push	{r4, lr}
 8006852:	1e43      	subs	r3, r0, #1
 8006854:	440a      	add	r2, r1
 8006856:	4291      	cmp	r1, r2
 8006858:	d100      	bne.n	800685c <memcpy+0xc>
 800685a:	bd10      	pop	{r4, pc}
 800685c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006864:	e7f7      	b.n	8006856 <memcpy+0x6>

08006866 <memset>:
 8006866:	4402      	add	r2, r0
 8006868:	4603      	mov	r3, r0
 800686a:	4293      	cmp	r3, r2
 800686c:	d100      	bne.n	8006870 <memset+0xa>
 800686e:	4770      	bx	lr
 8006870:	f803 1b01 	strb.w	r1, [r3], #1
 8006874:	e7f9      	b.n	800686a <memset+0x4>
	...

08006878 <_free_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4605      	mov	r5, r0
 800687c:	2900      	cmp	r1, #0
 800687e:	d045      	beq.n	800690c <_free_r+0x94>
 8006880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006884:	1f0c      	subs	r4, r1, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	bfb8      	it	lt
 800688a:	18e4      	addlt	r4, r4, r3
 800688c:	f000 f8cc 	bl	8006a28 <__malloc_lock>
 8006890:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <_free_r+0x98>)
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	4610      	mov	r0, r2
 8006896:	b933      	cbnz	r3, 80068a6 <_free_r+0x2e>
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	6014      	str	r4, [r2, #0]
 800689c:	4628      	mov	r0, r5
 800689e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a2:	f000 b8c2 	b.w	8006a2a <__malloc_unlock>
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	d90c      	bls.n	80068c4 <_free_r+0x4c>
 80068aa:	6821      	ldr	r1, [r4, #0]
 80068ac:	1862      	adds	r2, r4, r1
 80068ae:	4293      	cmp	r3, r2
 80068b0:	bf04      	itt	eq
 80068b2:	681a      	ldreq	r2, [r3, #0]
 80068b4:	685b      	ldreq	r3, [r3, #4]
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	bf04      	itt	eq
 80068ba:	1852      	addeq	r2, r2, r1
 80068bc:	6022      	streq	r2, [r4, #0]
 80068be:	6004      	str	r4, [r0, #0]
 80068c0:	e7ec      	b.n	800689c <_free_r+0x24>
 80068c2:	4613      	mov	r3, r2
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	b10a      	cbz	r2, 80068cc <_free_r+0x54>
 80068c8:	42a2      	cmp	r2, r4
 80068ca:	d9fa      	bls.n	80068c2 <_free_r+0x4a>
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	1858      	adds	r0, r3, r1
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d10b      	bne.n	80068ec <_free_r+0x74>
 80068d4:	6820      	ldr	r0, [r4, #0]
 80068d6:	4401      	add	r1, r0
 80068d8:	1858      	adds	r0, r3, r1
 80068da:	4282      	cmp	r2, r0
 80068dc:	6019      	str	r1, [r3, #0]
 80068de:	d1dd      	bne.n	800689c <_free_r+0x24>
 80068e0:	6810      	ldr	r0, [r2, #0]
 80068e2:	6852      	ldr	r2, [r2, #4]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	4401      	add	r1, r0
 80068e8:	6019      	str	r1, [r3, #0]
 80068ea:	e7d7      	b.n	800689c <_free_r+0x24>
 80068ec:	d902      	bls.n	80068f4 <_free_r+0x7c>
 80068ee:	230c      	movs	r3, #12
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	e7d3      	b.n	800689c <_free_r+0x24>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	1821      	adds	r1, r4, r0
 80068f8:	428a      	cmp	r2, r1
 80068fa:	bf04      	itt	eq
 80068fc:	6811      	ldreq	r1, [r2, #0]
 80068fe:	6852      	ldreq	r2, [r2, #4]
 8006900:	6062      	str	r2, [r4, #4]
 8006902:	bf04      	itt	eq
 8006904:	1809      	addeq	r1, r1, r0
 8006906:	6021      	streq	r1, [r4, #0]
 8006908:	605c      	str	r4, [r3, #4]
 800690a:	e7c7      	b.n	800689c <_free_r+0x24>
 800690c:	bd38      	pop	{r3, r4, r5, pc}
 800690e:	bf00      	nop
 8006910:	20004a3c 	.word	0x20004a3c

08006914 <_malloc_r>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	1ccd      	adds	r5, r1, #3
 8006918:	f025 0503 	bic.w	r5, r5, #3
 800691c:	3508      	adds	r5, #8
 800691e:	2d0c      	cmp	r5, #12
 8006920:	bf38      	it	cc
 8006922:	250c      	movcc	r5, #12
 8006924:	2d00      	cmp	r5, #0
 8006926:	4606      	mov	r6, r0
 8006928:	db01      	blt.n	800692e <_malloc_r+0x1a>
 800692a:	42a9      	cmp	r1, r5
 800692c:	d903      	bls.n	8006936 <_malloc_r+0x22>
 800692e:	230c      	movs	r3, #12
 8006930:	6033      	str	r3, [r6, #0]
 8006932:	2000      	movs	r0, #0
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	f000 f877 	bl	8006a28 <__malloc_lock>
 800693a:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <_malloc_r+0xac>)
 800693c:	6814      	ldr	r4, [r2, #0]
 800693e:	4621      	mov	r1, r4
 8006940:	b991      	cbnz	r1, 8006968 <_malloc_r+0x54>
 8006942:	4c20      	ldr	r4, [pc, #128]	; (80069c4 <_malloc_r+0xb0>)
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	b91b      	cbnz	r3, 8006950 <_malloc_r+0x3c>
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f83d 	bl	80069c8 <_sbrk_r>
 800694e:	6020      	str	r0, [r4, #0]
 8006950:	4629      	mov	r1, r5
 8006952:	4630      	mov	r0, r6
 8006954:	f000 f838 	bl	80069c8 <_sbrk_r>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d124      	bne.n	80069a6 <_malloc_r+0x92>
 800695c:	230c      	movs	r3, #12
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f862 	bl	8006a2a <__malloc_unlock>
 8006966:	e7e4      	b.n	8006932 <_malloc_r+0x1e>
 8006968:	680b      	ldr	r3, [r1, #0]
 800696a:	1b5b      	subs	r3, r3, r5
 800696c:	d418      	bmi.n	80069a0 <_malloc_r+0x8c>
 800696e:	2b0b      	cmp	r3, #11
 8006970:	d90f      	bls.n	8006992 <_malloc_r+0x7e>
 8006972:	600b      	str	r3, [r1, #0]
 8006974:	50cd      	str	r5, [r1, r3]
 8006976:	18cc      	adds	r4, r1, r3
 8006978:	4630      	mov	r0, r6
 800697a:	f000 f856 	bl	8006a2a <__malloc_unlock>
 800697e:	f104 000b 	add.w	r0, r4, #11
 8006982:	1d23      	adds	r3, r4, #4
 8006984:	f020 0007 	bic.w	r0, r0, #7
 8006988:	1ac3      	subs	r3, r0, r3
 800698a:	d0d3      	beq.n	8006934 <_malloc_r+0x20>
 800698c:	425a      	negs	r2, r3
 800698e:	50e2      	str	r2, [r4, r3]
 8006990:	e7d0      	b.n	8006934 <_malloc_r+0x20>
 8006992:	428c      	cmp	r4, r1
 8006994:	684b      	ldr	r3, [r1, #4]
 8006996:	bf16      	itet	ne
 8006998:	6063      	strne	r3, [r4, #4]
 800699a:	6013      	streq	r3, [r2, #0]
 800699c:	460c      	movne	r4, r1
 800699e:	e7eb      	b.n	8006978 <_malloc_r+0x64>
 80069a0:	460c      	mov	r4, r1
 80069a2:	6849      	ldr	r1, [r1, #4]
 80069a4:	e7cc      	b.n	8006940 <_malloc_r+0x2c>
 80069a6:	1cc4      	adds	r4, r0, #3
 80069a8:	f024 0403 	bic.w	r4, r4, #3
 80069ac:	42a0      	cmp	r0, r4
 80069ae:	d005      	beq.n	80069bc <_malloc_r+0xa8>
 80069b0:	1a21      	subs	r1, r4, r0
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f808 	bl	80069c8 <_sbrk_r>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d0cf      	beq.n	800695c <_malloc_r+0x48>
 80069bc:	6025      	str	r5, [r4, #0]
 80069be:	e7db      	b.n	8006978 <_malloc_r+0x64>
 80069c0:	20004a3c 	.word	0x20004a3c
 80069c4:	20004a40 	.word	0x20004a40

080069c8 <_sbrk_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4c06      	ldr	r4, [pc, #24]	; (80069e4 <_sbrk_r+0x1c>)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4605      	mov	r5, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	f7fa ffba 	bl	800194c <_sbrk>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_sbrk_r+0x1a>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_sbrk_r+0x1a>
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20004cfc 	.word	0x20004cfc

080069e8 <siprintf>:
 80069e8:	b40e      	push	{r1, r2, r3}
 80069ea:	b500      	push	{lr}
 80069ec:	b09c      	sub	sp, #112	; 0x70
 80069ee:	ab1d      	add	r3, sp, #116	; 0x74
 80069f0:	9002      	str	r0, [sp, #8]
 80069f2:	9006      	str	r0, [sp, #24]
 80069f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069f8:	4809      	ldr	r0, [pc, #36]	; (8006a20 <siprintf+0x38>)
 80069fa:	9107      	str	r1, [sp, #28]
 80069fc:	9104      	str	r1, [sp, #16]
 80069fe:	4909      	ldr	r1, [pc, #36]	; (8006a24 <siprintf+0x3c>)
 8006a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a04:	9105      	str	r1, [sp, #20]
 8006a06:	6800      	ldr	r0, [r0, #0]
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	a902      	add	r1, sp, #8
 8006a0c:	f000 f868 	bl	8006ae0 <_svfiprintf_r>
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	b01c      	add	sp, #112	; 0x70
 8006a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a1c:	b003      	add	sp, #12
 8006a1e:	4770      	bx	lr
 8006a20:	200000b0 	.word	0x200000b0
 8006a24:	ffff0208 	.word	0xffff0208

08006a28 <__malloc_lock>:
 8006a28:	4770      	bx	lr

08006a2a <__malloc_unlock>:
 8006a2a:	4770      	bx	lr

08006a2c <__ssputs_r>:
 8006a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	688e      	ldr	r6, [r1, #8]
 8006a32:	429e      	cmp	r6, r3
 8006a34:	4682      	mov	sl, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	4690      	mov	r8, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	d837      	bhi.n	8006aae <__ssputs_r+0x82>
 8006a3e:	898a      	ldrh	r2, [r1, #12]
 8006a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a44:	d031      	beq.n	8006aaa <__ssputs_r+0x7e>
 8006a46:	6825      	ldr	r5, [r4, #0]
 8006a48:	6909      	ldr	r1, [r1, #16]
 8006a4a:	1a6f      	subs	r7, r5, r1
 8006a4c:	6965      	ldr	r5, [r4, #20]
 8006a4e:	2302      	movs	r3, #2
 8006a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a54:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a58:	f109 0301 	add.w	r3, r9, #1
 8006a5c:	443b      	add	r3, r7
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	bf38      	it	cc
 8006a62:	461d      	movcc	r5, r3
 8006a64:	0553      	lsls	r3, r2, #21
 8006a66:	d530      	bpl.n	8006aca <__ssputs_r+0x9e>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f7ff ff53 	bl	8006914 <_malloc_r>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	b950      	cbnz	r0, 8006a88 <__ssputs_r+0x5c>
 8006a72:	230c      	movs	r3, #12
 8006a74:	f8ca 3000 	str.w	r3, [sl]
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a88:	463a      	mov	r2, r7
 8006a8a:	6921      	ldr	r1, [r4, #16]
 8006a8c:	f7ff fee0 	bl	8006850 <memcpy>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	6126      	str	r6, [r4, #16]
 8006a9e:	6165      	str	r5, [r4, #20]
 8006aa0:	443e      	add	r6, r7
 8006aa2:	1bed      	subs	r5, r5, r7
 8006aa4:	6026      	str	r6, [r4, #0]
 8006aa6:	60a5      	str	r5, [r4, #8]
 8006aa8:	464e      	mov	r6, r9
 8006aaa:	454e      	cmp	r6, r9
 8006aac:	d900      	bls.n	8006ab0 <__ssputs_r+0x84>
 8006aae:	464e      	mov	r6, r9
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	f000 fa93 	bl	8006fe0 <memmove>
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	1b9b      	subs	r3, r3, r6
 8006abe:	60a3      	str	r3, [r4, #8]
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	441e      	add	r6, r3
 8006ac4:	6026      	str	r6, [r4, #0]
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e7dc      	b.n	8006a84 <__ssputs_r+0x58>
 8006aca:	462a      	mov	r2, r5
 8006acc:	f000 faa1 	bl	8007012 <_realloc_r>
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d1e2      	bne.n	8006a9c <__ssputs_r+0x70>
 8006ad6:	6921      	ldr	r1, [r4, #16]
 8006ad8:	4650      	mov	r0, sl
 8006ada:	f7ff fecd 	bl	8006878 <_free_r>
 8006ade:	e7c8      	b.n	8006a72 <__ssputs_r+0x46>

08006ae0 <_svfiprintf_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	461d      	mov	r5, r3
 8006ae6:	898b      	ldrh	r3, [r1, #12]
 8006ae8:	061f      	lsls	r7, r3, #24
 8006aea:	b09d      	sub	sp, #116	; 0x74
 8006aec:	4680      	mov	r8, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	4616      	mov	r6, r2
 8006af2:	d50f      	bpl.n	8006b14 <_svfiprintf_r+0x34>
 8006af4:	690b      	ldr	r3, [r1, #16]
 8006af6:	b96b      	cbnz	r3, 8006b14 <_svfiprintf_r+0x34>
 8006af8:	2140      	movs	r1, #64	; 0x40
 8006afa:	f7ff ff0b 	bl	8006914 <_malloc_r>
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	6120      	str	r0, [r4, #16]
 8006b02:	b928      	cbnz	r0, 8006b10 <_svfiprintf_r+0x30>
 8006b04:	230c      	movs	r3, #12
 8006b06:	f8c8 3000 	str.w	r3, [r8]
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	e0c8      	b.n	8006ca2 <_svfiprintf_r+0x1c2>
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	6163      	str	r3, [r4, #20]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9309      	str	r3, [sp, #36]	; 0x24
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b1e:	2330      	movs	r3, #48	; 0x30
 8006b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b24:	9503      	str	r5, [sp, #12]
 8006b26:	f04f 0b01 	mov.w	fp, #1
 8006b2a:	4637      	mov	r7, r6
 8006b2c:	463d      	mov	r5, r7
 8006b2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b32:	b10b      	cbz	r3, 8006b38 <_svfiprintf_r+0x58>
 8006b34:	2b25      	cmp	r3, #37	; 0x25
 8006b36:	d13e      	bne.n	8006bb6 <_svfiprintf_r+0xd6>
 8006b38:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b3c:	d00b      	beq.n	8006b56 <_svfiprintf_r+0x76>
 8006b3e:	4653      	mov	r3, sl
 8006b40:	4632      	mov	r2, r6
 8006b42:	4621      	mov	r1, r4
 8006b44:	4640      	mov	r0, r8
 8006b46:	f7ff ff71 	bl	8006a2c <__ssputs_r>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	f000 80a4 	beq.w	8006c98 <_svfiprintf_r+0x1b8>
 8006b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b52:	4453      	add	r3, sl
 8006b54:	9309      	str	r3, [sp, #36]	; 0x24
 8006b56:	783b      	ldrb	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 809d 	beq.w	8006c98 <_svfiprintf_r+0x1b8>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b70:	931a      	str	r3, [sp, #104]	; 0x68
 8006b72:	462f      	mov	r7, r5
 8006b74:	2205      	movs	r2, #5
 8006b76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b7a:	4850      	ldr	r0, [pc, #320]	; (8006cbc <_svfiprintf_r+0x1dc>)
 8006b7c:	f7f9 fb30 	bl	80001e0 <memchr>
 8006b80:	9b04      	ldr	r3, [sp, #16]
 8006b82:	b9d0      	cbnz	r0, 8006bba <_svfiprintf_r+0xda>
 8006b84:	06d9      	lsls	r1, r3, #27
 8006b86:	bf44      	itt	mi
 8006b88:	2220      	movmi	r2, #32
 8006b8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b8e:	071a      	lsls	r2, r3, #28
 8006b90:	bf44      	itt	mi
 8006b92:	222b      	movmi	r2, #43	; 0x2b
 8006b94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b98:	782a      	ldrb	r2, [r5, #0]
 8006b9a:	2a2a      	cmp	r2, #42	; 0x2a
 8006b9c:	d015      	beq.n	8006bca <_svfiprintf_r+0xea>
 8006b9e:	9a07      	ldr	r2, [sp, #28]
 8006ba0:	462f      	mov	r7, r5
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	250a      	movs	r5, #10
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bac:	3b30      	subs	r3, #48	; 0x30
 8006bae:	2b09      	cmp	r3, #9
 8006bb0:	d94d      	bls.n	8006c4e <_svfiprintf_r+0x16e>
 8006bb2:	b1b8      	cbz	r0, 8006be4 <_svfiprintf_r+0x104>
 8006bb4:	e00f      	b.n	8006bd6 <_svfiprintf_r+0xf6>
 8006bb6:	462f      	mov	r7, r5
 8006bb8:	e7b8      	b.n	8006b2c <_svfiprintf_r+0x4c>
 8006bba:	4a40      	ldr	r2, [pc, #256]	; (8006cbc <_svfiprintf_r+0x1dc>)
 8006bbc:	1a80      	subs	r0, r0, r2
 8006bbe:	fa0b f000 	lsl.w	r0, fp, r0
 8006bc2:	4318      	orrs	r0, r3
 8006bc4:	9004      	str	r0, [sp, #16]
 8006bc6:	463d      	mov	r5, r7
 8006bc8:	e7d3      	b.n	8006b72 <_svfiprintf_r+0x92>
 8006bca:	9a03      	ldr	r2, [sp, #12]
 8006bcc:	1d11      	adds	r1, r2, #4
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	9103      	str	r1, [sp, #12]
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	db01      	blt.n	8006bda <_svfiprintf_r+0xfa>
 8006bd6:	9207      	str	r2, [sp, #28]
 8006bd8:	e004      	b.n	8006be4 <_svfiprintf_r+0x104>
 8006bda:	4252      	negs	r2, r2
 8006bdc:	f043 0302 	orr.w	r3, r3, #2
 8006be0:	9207      	str	r2, [sp, #28]
 8006be2:	9304      	str	r3, [sp, #16]
 8006be4:	783b      	ldrb	r3, [r7, #0]
 8006be6:	2b2e      	cmp	r3, #46	; 0x2e
 8006be8:	d10c      	bne.n	8006c04 <_svfiprintf_r+0x124>
 8006bea:	787b      	ldrb	r3, [r7, #1]
 8006bec:	2b2a      	cmp	r3, #42	; 0x2a
 8006bee:	d133      	bne.n	8006c58 <_svfiprintf_r+0x178>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	1d1a      	adds	r2, r3, #4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	9203      	str	r2, [sp, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfb8      	it	lt
 8006bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c00:	3702      	adds	r7, #2
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	4d2e      	ldr	r5, [pc, #184]	; (8006cc0 <_svfiprintf_r+0x1e0>)
 8006c06:	7839      	ldrb	r1, [r7, #0]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f7f9 fae8 	bl	80001e0 <memchr>
 8006c10:	b138      	cbz	r0, 8006c22 <_svfiprintf_r+0x142>
 8006c12:	2340      	movs	r3, #64	; 0x40
 8006c14:	1b40      	subs	r0, r0, r5
 8006c16:	fa03 f000 	lsl.w	r0, r3, r0
 8006c1a:	9b04      	ldr	r3, [sp, #16]
 8006c1c:	4303      	orrs	r3, r0
 8006c1e:	3701      	adds	r7, #1
 8006c20:	9304      	str	r3, [sp, #16]
 8006c22:	7839      	ldrb	r1, [r7, #0]
 8006c24:	4827      	ldr	r0, [pc, #156]	; (8006cc4 <_svfiprintf_r+0x1e4>)
 8006c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c2a:	2206      	movs	r2, #6
 8006c2c:	1c7e      	adds	r6, r7, #1
 8006c2e:	f7f9 fad7 	bl	80001e0 <memchr>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d038      	beq.n	8006ca8 <_svfiprintf_r+0x1c8>
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <_svfiprintf_r+0x1e8>)
 8006c38:	bb13      	cbnz	r3, 8006c80 <_svfiprintf_r+0x1a0>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	3307      	adds	r3, #7
 8006c3e:	f023 0307 	bic.w	r3, r3, #7
 8006c42:	3308      	adds	r3, #8
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	444b      	add	r3, r9
 8006c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4c:	e76d      	b.n	8006b2a <_svfiprintf_r+0x4a>
 8006c4e:	fb05 3202 	mla	r2, r5, r2, r3
 8006c52:	2001      	movs	r0, #1
 8006c54:	460f      	mov	r7, r1
 8006c56:	e7a6      	b.n	8006ba6 <_svfiprintf_r+0xc6>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	3701      	adds	r7, #1
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	250a      	movs	r5, #10
 8006c62:	4638      	mov	r0, r7
 8006c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c68:	3a30      	subs	r2, #48	; 0x30
 8006c6a:	2a09      	cmp	r2, #9
 8006c6c:	d903      	bls.n	8006c76 <_svfiprintf_r+0x196>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0c8      	beq.n	8006c04 <_svfiprintf_r+0x124>
 8006c72:	9105      	str	r1, [sp, #20]
 8006c74:	e7c6      	b.n	8006c04 <_svfiprintf_r+0x124>
 8006c76:	fb05 2101 	mla	r1, r5, r1, r2
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	e7f0      	b.n	8006c62 <_svfiprintf_r+0x182>
 8006c80:	ab03      	add	r3, sp, #12
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4622      	mov	r2, r4
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <_svfiprintf_r+0x1ec>)
 8006c88:	a904      	add	r1, sp, #16
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f3af 8000 	nop.w
 8006c90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c94:	4681      	mov	r9, r0
 8006c96:	d1d6      	bne.n	8006c46 <_svfiprintf_r+0x166>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	065b      	lsls	r3, r3, #25
 8006c9c:	f53f af35 	bmi.w	8006b0a <_svfiprintf_r+0x2a>
 8006ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca2:	b01d      	add	sp, #116	; 0x74
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	ab03      	add	r3, sp, #12
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4622      	mov	r2, r4
 8006cae:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <_svfiprintf_r+0x1ec>)
 8006cb0:	a904      	add	r1, sp, #16
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f000 f882 	bl	8006dbc <_printf_i>
 8006cb8:	e7ea      	b.n	8006c90 <_svfiprintf_r+0x1b0>
 8006cba:	bf00      	nop
 8006cbc:	08007244 	.word	0x08007244
 8006cc0:	0800724a 	.word	0x0800724a
 8006cc4:	0800724e 	.word	0x0800724e
 8006cc8:	00000000 	.word	0x00000000
 8006ccc:	08006a2d 	.word	0x08006a2d

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4691      	mov	r9, r2
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	f8c9 3000 	str.w	r3, [r9]
 8006cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	b112      	cbz	r2, 8006cfa <_printf_common+0x2a>
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	f8c9 3000 	str.w	r3, [r9]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d04:	3302      	addmi	r3, #2
 8006d06:	f8c9 3000 	strmi.w	r3, [r9]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	f015 0506 	ands.w	r5, r5, #6
 8006d10:	d107      	bne.n	8006d22 <_printf_common+0x52>
 8006d12:	f104 0a19 	add.w	sl, r4, #25
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	f8d9 2000 	ldr.w	r2, [r9]
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	42ab      	cmp	r3, r5
 8006d20:	dc28      	bgt.n	8006d74 <_printf_common+0xa4>
 8006d22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	3300      	adds	r3, #0
 8006d2a:	bf18      	it	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	0692      	lsls	r2, r2, #26
 8006d30:	d42d      	bmi.n	8006d8e <_printf_common+0xbe>
 8006d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d36:	4639      	mov	r1, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	47c0      	blx	r8
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d020      	beq.n	8006d82 <_printf_common+0xb2>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	68e5      	ldr	r5, [r4, #12]
 8006d44:	f8d9 2000 	ldr.w	r2, [r9]
 8006d48:	f003 0306 	and.w	r3, r3, #6
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	bf08      	it	eq
 8006d50:	1aad      	subeq	r5, r5, r2
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	6922      	ldr	r2, [r4, #16]
 8006d56:	bf0c      	ite	eq
 8006d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d5c:	2500      	movne	r5, #0
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	bfc4      	itt	gt
 8006d62:	1a9b      	subgt	r3, r3, r2
 8006d64:	18ed      	addgt	r5, r5, r3
 8006d66:	f04f 0900 	mov.w	r9, #0
 8006d6a:	341a      	adds	r4, #26
 8006d6c:	454d      	cmp	r5, r9
 8006d6e:	d11a      	bne.n	8006da6 <_printf_common+0xd6>
 8006d70:	2000      	movs	r0, #0
 8006d72:	e008      	b.n	8006d86 <_printf_common+0xb6>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4652      	mov	r2, sl
 8006d78:	4639      	mov	r1, r7
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d103      	bne.n	8006d8a <_printf_common+0xba>
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295
 8006d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	e7c3      	b.n	8006d16 <_printf_common+0x46>
 8006d8e:	18e1      	adds	r1, r4, r3
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	2030      	movs	r0, #48	; 0x30
 8006d94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d98:	4422      	add	r2, r4
 8006d9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006da2:	3302      	adds	r3, #2
 8006da4:	e7c5      	b.n	8006d32 <_printf_common+0x62>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4622      	mov	r2, r4
 8006daa:	4639      	mov	r1, r7
 8006dac:	4630      	mov	r0, r6
 8006dae:	47c0      	blx	r8
 8006db0:	3001      	adds	r0, #1
 8006db2:	d0e6      	beq.n	8006d82 <_printf_common+0xb2>
 8006db4:	f109 0901 	add.w	r9, r9, #1
 8006db8:	e7d8      	b.n	8006d6c <_printf_common+0x9c>
	...

08006dbc <_printf_i>:
 8006dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	7e09      	ldrb	r1, [r1, #24]
 8006dc8:	b085      	sub	sp, #20
 8006dca:	296e      	cmp	r1, #110	; 0x6e
 8006dcc:	4617      	mov	r7, r2
 8006dce:	4606      	mov	r6, r0
 8006dd0:	4698      	mov	r8, r3
 8006dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd4:	f000 80b3 	beq.w	8006f3e <_printf_i+0x182>
 8006dd8:	d822      	bhi.n	8006e20 <_printf_i+0x64>
 8006dda:	2963      	cmp	r1, #99	; 0x63
 8006ddc:	d036      	beq.n	8006e4c <_printf_i+0x90>
 8006dde:	d80a      	bhi.n	8006df6 <_printf_i+0x3a>
 8006de0:	2900      	cmp	r1, #0
 8006de2:	f000 80b9 	beq.w	8006f58 <_printf_i+0x19c>
 8006de6:	2958      	cmp	r1, #88	; 0x58
 8006de8:	f000 8083 	beq.w	8006ef2 <_printf_i+0x136>
 8006dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006df4:	e032      	b.n	8006e5c <_printf_i+0xa0>
 8006df6:	2964      	cmp	r1, #100	; 0x64
 8006df8:	d001      	beq.n	8006dfe <_printf_i+0x42>
 8006dfa:	2969      	cmp	r1, #105	; 0x69
 8006dfc:	d1f6      	bne.n	8006dec <_printf_i+0x30>
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	0605      	lsls	r5, r0, #24
 8006e04:	f103 0104 	add.w	r1, r3, #4
 8006e08:	d52a      	bpl.n	8006e60 <_printf_i+0xa4>
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	da03      	bge.n	8006e1a <_printf_i+0x5e>
 8006e12:	222d      	movs	r2, #45	; 0x2d
 8006e14:	425b      	negs	r3, r3
 8006e16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e1a:	486f      	ldr	r0, [pc, #444]	; (8006fd8 <_printf_i+0x21c>)
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	e039      	b.n	8006e94 <_printf_i+0xd8>
 8006e20:	2973      	cmp	r1, #115	; 0x73
 8006e22:	f000 809d 	beq.w	8006f60 <_printf_i+0x1a4>
 8006e26:	d808      	bhi.n	8006e3a <_printf_i+0x7e>
 8006e28:	296f      	cmp	r1, #111	; 0x6f
 8006e2a:	d020      	beq.n	8006e6e <_printf_i+0xb2>
 8006e2c:	2970      	cmp	r1, #112	; 0x70
 8006e2e:	d1dd      	bne.n	8006dec <_printf_i+0x30>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	f043 0320 	orr.w	r3, r3, #32
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	e003      	b.n	8006e42 <_printf_i+0x86>
 8006e3a:	2975      	cmp	r1, #117	; 0x75
 8006e3c:	d017      	beq.n	8006e6e <_printf_i+0xb2>
 8006e3e:	2978      	cmp	r1, #120	; 0x78
 8006e40:	d1d4      	bne.n	8006dec <_printf_i+0x30>
 8006e42:	2378      	movs	r3, #120	; 0x78
 8006e44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e48:	4864      	ldr	r0, [pc, #400]	; (8006fdc <_printf_i+0x220>)
 8006e4a:	e055      	b.n	8006ef8 <_printf_i+0x13c>
 8006e4c:	6813      	ldr	r3, [r2, #0]
 8006e4e:	1d19      	adds	r1, r3, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6011      	str	r1, [r2, #0]
 8006e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e08c      	b.n	8006f7a <_printf_i+0x1be>
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6011      	str	r1, [r2, #0]
 8006e64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e68:	bf18      	it	ne
 8006e6a:	b21b      	sxthne	r3, r3
 8006e6c:	e7cf      	b.n	8006e0e <_printf_i+0x52>
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	6825      	ldr	r5, [r4, #0]
 8006e72:	1d18      	adds	r0, r3, #4
 8006e74:	6010      	str	r0, [r2, #0]
 8006e76:	0628      	lsls	r0, r5, #24
 8006e78:	d501      	bpl.n	8006e7e <_printf_i+0xc2>
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	e002      	b.n	8006e84 <_printf_i+0xc8>
 8006e7e:	0668      	lsls	r0, r5, #25
 8006e80:	d5fb      	bpl.n	8006e7a <_printf_i+0xbe>
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	4854      	ldr	r0, [pc, #336]	; (8006fd8 <_printf_i+0x21c>)
 8006e86:	296f      	cmp	r1, #111	; 0x6f
 8006e88:	bf14      	ite	ne
 8006e8a:	220a      	movne	r2, #10
 8006e8c:	2208      	moveq	r2, #8
 8006e8e:	2100      	movs	r1, #0
 8006e90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e94:	6865      	ldr	r5, [r4, #4]
 8006e96:	60a5      	str	r5, [r4, #8]
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	f2c0 8095 	blt.w	8006fc8 <_printf_i+0x20c>
 8006e9e:	6821      	ldr	r1, [r4, #0]
 8006ea0:	f021 0104 	bic.w	r1, r1, #4
 8006ea4:	6021      	str	r1, [r4, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d13d      	bne.n	8006f26 <_printf_i+0x16a>
 8006eaa:	2d00      	cmp	r5, #0
 8006eac:	f040 808e 	bne.w	8006fcc <_printf_i+0x210>
 8006eb0:	4665      	mov	r5, ip
 8006eb2:	2a08      	cmp	r2, #8
 8006eb4:	d10b      	bne.n	8006ece <_printf_i+0x112>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	07db      	lsls	r3, r3, #31
 8006eba:	d508      	bpl.n	8006ece <_printf_i+0x112>
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	6862      	ldr	r2, [r4, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	bfde      	ittt	le
 8006ec4:	2330      	movle	r3, #48	; 0x30
 8006ec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ece:	ebac 0305 	sub.w	r3, ip, r5
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	f8cd 8000 	str.w	r8, [sp]
 8006ed8:	463b      	mov	r3, r7
 8006eda:	aa03      	add	r2, sp, #12
 8006edc:	4621      	mov	r1, r4
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7ff fef6 	bl	8006cd0 <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d14d      	bne.n	8006f84 <_printf_i+0x1c8>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b005      	add	sp, #20
 8006eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ef2:	4839      	ldr	r0, [pc, #228]	; (8006fd8 <_printf_i+0x21c>)
 8006ef4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ef8:	6813      	ldr	r3, [r2, #0]
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	1d1d      	adds	r5, r3, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6015      	str	r5, [r2, #0]
 8006f02:	060a      	lsls	r2, r1, #24
 8006f04:	d50b      	bpl.n	8006f1e <_printf_i+0x162>
 8006f06:	07ca      	lsls	r2, r1, #31
 8006f08:	bf44      	itt	mi
 8006f0a:	f041 0120 	orrmi.w	r1, r1, #32
 8006f0e:	6021      	strmi	r1, [r4, #0]
 8006f10:	b91b      	cbnz	r3, 8006f1a <_printf_i+0x15e>
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	f022 0220 	bic.w	r2, r2, #32
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	e7b7      	b.n	8006e8e <_printf_i+0xd2>
 8006f1e:	064d      	lsls	r5, r1, #25
 8006f20:	bf48      	it	mi
 8006f22:	b29b      	uxthmi	r3, r3
 8006f24:	e7ef      	b.n	8006f06 <_printf_i+0x14a>
 8006f26:	4665      	mov	r5, ip
 8006f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f2c:	fb02 3311 	mls	r3, r2, r1, r3
 8006f30:	5cc3      	ldrb	r3, [r0, r3]
 8006f32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f36:	460b      	mov	r3, r1
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	d1f5      	bne.n	8006f28 <_printf_i+0x16c>
 8006f3c:	e7b9      	b.n	8006eb2 <_printf_i+0xf6>
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	6825      	ldr	r5, [r4, #0]
 8006f42:	6961      	ldr	r1, [r4, #20]
 8006f44:	1d18      	adds	r0, r3, #4
 8006f46:	6010      	str	r0, [r2, #0]
 8006f48:	0628      	lsls	r0, r5, #24
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	d501      	bpl.n	8006f52 <_printf_i+0x196>
 8006f4e:	6019      	str	r1, [r3, #0]
 8006f50:	e002      	b.n	8006f58 <_printf_i+0x19c>
 8006f52:	066a      	lsls	r2, r5, #25
 8006f54:	d5fb      	bpl.n	8006f4e <_printf_i+0x192>
 8006f56:	8019      	strh	r1, [r3, #0]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	4665      	mov	r5, ip
 8006f5e:	e7b9      	b.n	8006ed4 <_printf_i+0x118>
 8006f60:	6813      	ldr	r3, [r2, #0]
 8006f62:	1d19      	adds	r1, r3, #4
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	681d      	ldr	r5, [r3, #0]
 8006f68:	6862      	ldr	r2, [r4, #4]
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7f9 f937 	bl	80001e0 <memchr>
 8006f72:	b108      	cbz	r0, 8006f78 <_printf_i+0x1bc>
 8006f74:	1b40      	subs	r0, r0, r5
 8006f76:	6060      	str	r0, [r4, #4]
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f82:	e7a7      	b.n	8006ed4 <_printf_i+0x118>
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	462a      	mov	r2, r5
 8006f88:	4639      	mov	r1, r7
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	47c0      	blx	r8
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d0aa      	beq.n	8006ee8 <_printf_i+0x12c>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	079b      	lsls	r3, r3, #30
 8006f96:	d413      	bmi.n	8006fc0 <_printf_i+0x204>
 8006f98:	68e0      	ldr	r0, [r4, #12]
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	4298      	cmp	r0, r3
 8006f9e:	bfb8      	it	lt
 8006fa0:	4618      	movlt	r0, r3
 8006fa2:	e7a3      	b.n	8006eec <_printf_i+0x130>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	464a      	mov	r2, r9
 8006fa8:	4639      	mov	r1, r7
 8006faa:	4630      	mov	r0, r6
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d09a      	beq.n	8006ee8 <_printf_i+0x12c>
 8006fb2:	3501      	adds	r5, #1
 8006fb4:	68e3      	ldr	r3, [r4, #12]
 8006fb6:	9a03      	ldr	r2, [sp, #12]
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	42ab      	cmp	r3, r5
 8006fbc:	dcf2      	bgt.n	8006fa4 <_printf_i+0x1e8>
 8006fbe:	e7eb      	b.n	8006f98 <_printf_i+0x1dc>
 8006fc0:	2500      	movs	r5, #0
 8006fc2:	f104 0919 	add.w	r9, r4, #25
 8006fc6:	e7f5      	b.n	8006fb4 <_printf_i+0x1f8>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1ac      	bne.n	8006f26 <_printf_i+0x16a>
 8006fcc:	7803      	ldrb	r3, [r0, #0]
 8006fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd6:	e76c      	b.n	8006eb2 <_printf_i+0xf6>
 8006fd8:	08007255 	.word	0x08007255
 8006fdc:	08007266 	.word	0x08007266

08006fe0 <memmove>:
 8006fe0:	4288      	cmp	r0, r1
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	eb01 0302 	add.w	r3, r1, r2
 8006fe8:	d807      	bhi.n	8006ffa <memmove+0x1a>
 8006fea:	1e42      	subs	r2, r0, #1
 8006fec:	4299      	cmp	r1, r3
 8006fee:	d00a      	beq.n	8007006 <memmove+0x26>
 8006ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ff8:	e7f8      	b.n	8006fec <memmove+0xc>
 8006ffa:	4283      	cmp	r3, r0
 8006ffc:	d9f5      	bls.n	8006fea <memmove+0xa>
 8006ffe:	1881      	adds	r1, r0, r2
 8007000:	1ad2      	subs	r2, r2, r3
 8007002:	42d3      	cmn	r3, r2
 8007004:	d100      	bne.n	8007008 <memmove+0x28>
 8007006:	bd10      	pop	{r4, pc}
 8007008:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800700c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007010:	e7f7      	b.n	8007002 <memmove+0x22>

08007012 <_realloc_r>:
 8007012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007014:	4607      	mov	r7, r0
 8007016:	4614      	mov	r4, r2
 8007018:	460e      	mov	r6, r1
 800701a:	b921      	cbnz	r1, 8007026 <_realloc_r+0x14>
 800701c:	4611      	mov	r1, r2
 800701e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007022:	f7ff bc77 	b.w	8006914 <_malloc_r>
 8007026:	b922      	cbnz	r2, 8007032 <_realloc_r+0x20>
 8007028:	f7ff fc26 	bl	8006878 <_free_r>
 800702c:	4625      	mov	r5, r4
 800702e:	4628      	mov	r0, r5
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007032:	f000 f814 	bl	800705e <_malloc_usable_size_r>
 8007036:	42a0      	cmp	r0, r4
 8007038:	d20f      	bcs.n	800705a <_realloc_r+0x48>
 800703a:	4621      	mov	r1, r4
 800703c:	4638      	mov	r0, r7
 800703e:	f7ff fc69 	bl	8006914 <_malloc_r>
 8007042:	4605      	mov	r5, r0
 8007044:	2800      	cmp	r0, #0
 8007046:	d0f2      	beq.n	800702e <_realloc_r+0x1c>
 8007048:	4631      	mov	r1, r6
 800704a:	4622      	mov	r2, r4
 800704c:	f7ff fc00 	bl	8006850 <memcpy>
 8007050:	4631      	mov	r1, r6
 8007052:	4638      	mov	r0, r7
 8007054:	f7ff fc10 	bl	8006878 <_free_r>
 8007058:	e7e9      	b.n	800702e <_realloc_r+0x1c>
 800705a:	4635      	mov	r5, r6
 800705c:	e7e7      	b.n	800702e <_realloc_r+0x1c>

0800705e <_malloc_usable_size_r>:
 800705e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007062:	1f18      	subs	r0, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	bfbc      	itt	lt
 8007068:	580b      	ldrlt	r3, [r1, r0]
 800706a:	18c0      	addlt	r0, r0, r3
 800706c:	4770      	bx	lr
	...

08007070 <_init>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr

0800707c <_fini>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr
