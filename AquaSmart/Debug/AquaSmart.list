
AquaSmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b4  080078b4  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078bc  080078bc  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080078c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000114  080079d8  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  080079d8  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019962  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034c4  00000000  00000000  00039aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  0003cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  0003e060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a78  00000000  00000000  0003efb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010018  00000000  00000000  00058a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094b33  00000000  00000000  00068a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd57b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  000fd5f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007690 	.word	0x08007690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	08007690 	.word	0x08007690

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000588:	2101      	movs	r1, #1
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f80d 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6858      	ldr	r0, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	f002 fba1 	bl	8002ce4 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6958      	ldr	r0, [r3, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	b299      	uxth	r1, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	f002 fb8a 	bl	8002ce4 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005e0:	2101      	movs	r1, #1
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffe1 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	f002 fb75 	bl	8002ce4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f855 	bl	80006aa <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6858      	ldr	r0, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	2201      	movs	r2, #1
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fb69 	bl	8002ce4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 f849 	bl	80006aa <SX1278_hw_DelayMs>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800062c:	2100      	movs	r1, #0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ffbb 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6998      	ldr	r0, [r3, #24]
 8000638:	1cf9      	adds	r1, r7, #3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	2201      	movs	r2, #1
 8000640:	f002 fffc 	bl	800363c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000644:	bf00      	nop
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4618      	mov	r0, r3
 800064c:	f003 facc 	bl	8003be8 <HAL_SPI_GetState>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1f7      	bne.n	8000646 <SX1278_hw_SPICommand+0x26>
		;
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af02      	add	r7, sp, #8
 8000664:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800066e:	2100      	movs	r1, #0
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff9a 	bl	80005aa <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6998      	ldr	r0, [r3, #24]
 800067a:	f107 020e 	add.w	r2, r7, #14
 800067e:	f107 010f 	add.w	r1, r7, #15
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	f003 f90b 	bl	80038a4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800068e:	bf00      	nop
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4618      	mov	r0, r3
 8000696:	f003 faa7 	bl	8003be8 <HAL_SPI_GetState>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1f7      	bne.n	8000690 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fd1c 	bl	80020f0 <HAL_Delay>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	4610      	mov	r0, r2
 80006d6:	f002 faed 	bl	8002cb4 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff8c 	bl	8000620 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffa6 	bl	800065e <SX1278_hw_SPIReadByte>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff44 	bl	80005aa <SX1278_hw_SetNSS>
	return tmp;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
 8000738:	4613      	mov	r3, r2
 800073a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff31 	bl	80005aa <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff ff62 	bl	8000620 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	78ba      	ldrb	r2, [r7, #2]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5b 	bl	8000620 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff1a 	bl	80005aa <SX1278_hw_SetNSS>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 800077e:	b590      	push	{r4, r7, lr}
 8000780:	b087      	sub	sp, #28
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	461a      	mov	r2, r3
 800078a:	460b      	mov	r3, r1
 800078c:	72fb      	strb	r3, [r7, #11]
 800078e:	4613      	mov	r3, r2
 8000790:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000792:	7abb      	ldrb	r3, [r7, #10]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d927      	bls.n	80007e8 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff03 	bl	80005aa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7afa      	ldrb	r2, [r7, #11]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff37 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e00c      	b.n	80007d2 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6819      	ldr	r1, [r3, #0]
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	18d4      	adds	r4, r2, r3
 80007c2:	4608      	mov	r0, r1
 80007c4:	f7ff ff4b 	bl	800065e <SX1278_hw_SPIReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
 80007d2:	7dfa      	ldrb	r2, [r7, #23]
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3ee      	bcc.n	80007b8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fee2 	bl	80005aa <SX1278_hw_SetNSS>
 80007e6:	e000      	b.n	80007ea <SX1278_SPIBurstRead+0x6c>
		return;
 80007e8:	bf00      	nop
	}
}
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	72fb      	strb	r3, [r7, #11]
 8000800:	4613      	mov	r3, r2
 8000802:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000804:	7abb      	ldrb	r3, [r7, #10]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d929      	bls.n	800085e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feca 	bl	80005aa <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	4610      	mov	r0, r2
 8000826:	f7ff fefb 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	75fb      	strb	r3, [r7, #23]
 800082e:	e00b      	b.n	8000848 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f7ff feef 	bl	8000620 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	3301      	adds	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	7abb      	ldrb	r3, [r7, #10]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3ef      	bcc.n	8000830 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fea7 	bl	80005aa <SX1278_hw_SetNSS>
 800085c:	e000      	b.n	8000860 <SX1278_SPIBurstWrite+0x70>
		return;
 800085e:	bf00      	nop
	}
}
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af02      	add	r7, sp, #8
 800086c:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7919      	ldrb	r1, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795a      	ldrb	r2, [r3, #5]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7998      	ldrb	r0, [r3, #6]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	79db      	ldrb	r3, [r3, #7]
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4603      	mov	r3, r0
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f804 	bl	8000890 <SX1278_config>
			module->LoRa_BW);
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f8aa 	bl	8000a04 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80008b0:	200f      	movs	r0, #15
 80008b2:	f7ff fefa 	bl	80006aa <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f8b4 	bl	8000a24 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80008bc:	78fa      	ldrb	r2, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <SX1278_config+0x144>)
 80008c6:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80008c8:	2303      	movs	r3, #3
 80008ca:	2106      	movs	r1, #6
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff8f 	bl	80007f0 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80008d2:	78bb      	ldrb	r3, [r7, #2]
 80008d4:	4a40      	ldr	r2, [pc, #256]	; (80009d8 <SX1278_config+0x148>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	461a      	mov	r2, r3
 80008da:	2109      	movs	r1, #9
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff25 	bl	800072c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80008e2:	220b      	movs	r2, #11
 80008e4:	210b      	movs	r1, #11
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff20 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80008ec:	2223      	movs	r2, #35	; 0x23
 80008ee:	210c      	movs	r1, #12
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff1b 	bl	800072c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	4a38      	ldr	r2, [pc, #224]	; (80009dc <SX1278_config+0x14c>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	2b06      	cmp	r3, #6
 80008fe:	d131      	bne.n	8000964 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000900:	7e3b      	ldrb	r3, [r7, #24]
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <SX1278_config+0x150>)
 8000904:	5cd3      	ldrb	r3, [r2, r3]
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800090a:	3303      	adds	r3, #3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	211d      	movs	r1, #29
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff0a 	bl	800072c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000918:	787b      	ldrb	r3, [r7, #1]
 800091a:	4a30      	ldr	r2, [pc, #192]	; (80009dc <SX1278_config+0x14c>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000922:	3307      	adds	r3, #7
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	211e      	movs	r1, #30
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fefe 	bl	800072c <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000930:	2131      	movs	r1, #49	; 0x31
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fedb 	bl	80006ee <SX1278_SPIRead>
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0305 	orr.w	r3, r3, #5
 800094a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	461a      	mov	r2, r3
 8000950:	2131      	movs	r1, #49	; 0x31
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff feea 	bl	800072c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000958:	220c      	movs	r2, #12
 800095a:	2137      	movs	r1, #55	; 0x37
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fee5 	bl	800072c <SX1278_SPIWrite>
 8000962:	e017      	b.n	8000994 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000964:	7e3b      	ldrb	r3, [r7, #24]
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <SX1278_config+0x150>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800096e:	3302      	adds	r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	211d      	movs	r1, #29
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fed8 	bl	800072c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800097c:	787b      	ldrb	r3, [r7, #1]
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <SX1278_config+0x14c>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000986:	3307      	adds	r3, #7
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	211e      	movs	r1, #30
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fecc 	bl	800072c <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000994:	22ff      	movs	r2, #255	; 0xff
 8000996:	211f      	movs	r1, #31
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fec7 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fec2 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80009a8:	220c      	movs	r2, #12
 80009aa:	2121      	movs	r1, #33	; 0x21
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff febd 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80009b2:	2201      	movs	r2, #1
 80009b4:	2141      	movs	r1, #65	; 0x41
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff feb8 	bl	800072c <SX1278_SPIWrite>
	module->readBytes = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f80d 	bl	80009e4 <SX1278_standby>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08007758 	.word	0x08007758
 80009d8:	0800775c 	.word	0x0800775c
 80009dc:	08007760 	.word	0x08007760
 80009e0:	08007768 	.word	0x08007768

080009e4 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80009ec:	2209      	movs	r2, #9
 80009ee:	2101      	movs	r1, #1
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fe9b 	bl	800072c <SX1278_SPIWrite>
	module->status = STANDBY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	725a      	strb	r2, [r3, #9]
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	2101      	movs	r1, #1
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fe8b 	bl	800072c <SX1278_SPIWrite>
	module->status = SLEEP;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	725a      	strb	r2, [r3, #9]
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000a2c:	2288      	movs	r2, #136	; 0x88
 8000a2e:	2101      	movs	r1, #1
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fe7b 	bl	800072c <SX1278_SPIWrite>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	2112      	movs	r1, #18
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe6e 	bl	800072c <SX1278_SPIWrite>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	460b      	mov	r3, r1
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	7afa      	ldrb	r2, [r7, #11]
 8000a6a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fefa 	bl	8000866 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000a72:	2284      	movs	r2, #132	; 0x84
 8000a74:	214d      	movs	r1, #77	; 0x4d
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fe58 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	2124      	movs	r1, #36	; 0x24
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fe53 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f7ff fe4e 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a90:	223f      	movs	r2, #63	; 0x3f
 8000a92:	2111      	movs	r1, #17
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe49 	bl	800072c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff ffcf 	bl	8000a3e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2122      	movs	r1, #34	; 0x22
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fe40 	bl	800072c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000aac:	210f      	movs	r1, #15
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fe1d 	bl	80006ee <SX1278_SPIRead>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	461a      	mov	r2, r3
 8000abc:	210d      	movs	r1, #13
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe34 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ac4:	228d      	movs	r2, #141	; 0x8d
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fe2f 	bl	800072c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000ad6:	2118      	movs	r1, #24
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe08 	bl	80006ee <SX1278_SPIRead>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d104      	bne.n	8000af2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2203      	movs	r2, #3
 8000aec:	725a      	strb	r2, [r3, #9]
			return 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e013      	b.n	8000b1a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d109      	bne.n	8000b12 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd68 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff feac 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e003      	b.n	8000b1a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fdc9 	bl	80006aa <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000b18:	e7dd      	b.n	8000ad6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fdc6 	bl	80006c0 <SX1278_hw_GetDIO0>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d030      	beq.n	8000b9c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	330a      	adds	r3, #10
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f006 f99e 	bl	8006e86 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdce 	bl	80006ee <SX1278_SPIRead>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	210d      	movs	r1, #13
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fde5 	bl	800072c <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	799b      	ldrb	r3, [r3, #6]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7a1b      	ldrb	r3, [r3, #8]
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e005      	b.n	8000b7e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000b72:	2113      	movs	r1, #19
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fdba 	bl	80006ee <SX1278_SPIRead>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f103 020a 	add.w	r2, r3, #10
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2100      	movs	r1, #0
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fdf8 	bl	800077e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7bfa      	ldrb	r2, [r7, #15]
 8000b92:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff51 	bl	8000a3e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fe51 	bl	8000866 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000bc4:	2287      	movs	r2, #135	; 0x87
 8000bc6:	214d      	movs	r1, #77	; 0x4d
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fdaf 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2124      	movs	r1, #36	; 0x24
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fdaa 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000bd8:	2241      	movs	r2, #65	; 0x41
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fda5 	bl	800072c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff2b 	bl	8000a3e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000be8:	22f7      	movs	r2, #247	; 0xf7
 8000bea:	2111      	movs	r1, #17
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fd9d 	bl	800072c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2122      	movs	r1, #34	; 0x22
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fd97 	bl	800072c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000bfe:	210e      	movs	r1, #14
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff fd74 	bl	80006ee <SX1278_SPIRead>
 8000c06:	4603      	mov	r3, r0
 8000c08:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	210d      	movs	r1, #13
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fd8b 	bl	800072c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000c16:	2122      	movs	r1, #34	; 0x22
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fd68 	bl	80006ee <SX1278_SPIRead>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000c22:	7dba      	ldrb	r2, [r7, #22]
 8000c24:	7afb      	ldrb	r3, [r7, #11]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d104      	bne.n	8000c34 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	725a      	strb	r2, [r3, #9]
			return 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e00e      	b.n	8000c52 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1ea      	bne.n	8000c16 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcc7 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fe0b 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000c50:	2300      	movs	r3, #0
		}
	}
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fdbd 	bl	80007f0 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000c76:	228b      	movs	r2, #139	; 0x8b
 8000c78:	2101      	movs	r1, #1
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fd56 	bl	800072c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd1b 	bl	80006c0 <SX1278_hw_GetDIO0>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00b      	beq.n	8000ca8 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000c90:	2112      	movs	r1, #18
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fd2b 	bl	80006ee <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fed0 	bl	8000a3e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fea0 	bl	80009e4 <SX1278_standby>
			return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e013      	b.n	8000cd0 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc8d 	bl	80005d8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fdd1 	bl	8000866 <SX1278_defaultConfig>
			return 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e003      	b.n	8000cd0 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fcee 	bl	80006aa <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000cce:	e7d7      	b.n	8000c80 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	70fb      	strb	r3, [r7, #3]
 8000cea:	460b      	mov	r3, r1
 8000cec:	70bb      	strb	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc42 	bl	8000580 <SX1278_hw_init>
	module->frequency = frequency;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	78ba      	ldrb	r2, [r7, #2]
 8000d06:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	787a      	ldrb	r2, [r7, #1]
 8000d0c:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7c3a      	ldrb	r2, [r7, #16]
 8000d12:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fda3 	bl	8000866 <SX1278_defaultConfig>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d003      	beq.n	8000d4a <SX1278_read+0x22>
		length = module->readBytes;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000d48:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	330a      	adds	r3, #10
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f006 f88c 	bl	8006e70 <memcpy>
	rxBuf[length] = '\0';
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <MX_ADC1_Init+0x9c>)
 8000d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <MX_ADC1_Init+0xa0>)
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000dd6:	f001 f9ad 	bl	8002134 <HAL_ADC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de0:	f000 ff34 	bl	8001c4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_ADC1_Init+0x98>)
 8000df6:	f001 fac7 	bl	8002388 <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e00:	f000 ff24 	bl	8001c4c <Error_Handler>
  }

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20004a44 	.word	0x20004a44
 8000e10:	40012000 	.word	0x40012000
 8000e14:	0f000001 	.word	0x0f000001

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0x7c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d127      	bne.n	8000e8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8000e72:	2306      	movs	r3, #6
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_ADC_MspInit+0x84>)
 8000e86:	f001 fd93 	bl	80029b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012000 	.word	0x40012000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e01c      	b.n	8000f0e <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d113      	bne.n	8000f08 <fsm_fire+0x44>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	4798      	blx	r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00c      	beq.n	8000f18 <fsm_fire+0x54>
        t->out(this);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
      break;
 8000f06:	e007      	b.n	8000f18 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dade      	bge.n	8000ed4 <fsm_fire+0x10>
    }
  }
}
 8000f16:	e000      	b.n	8000f1a <fsm_fire+0x56>
      break;
 8000f18:	bf00      	nop
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <data_saved>:
	  Process,
	  Saving,
	  Sleeping
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <error>:

int error (fsm_t* this) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <error+0x26>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	889a      	ldrh	r2, [r3, #4]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d901      	bls.n	8000f62 <error+0x2a>
		return 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <error+0x2c>
	else return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <no_error>:

int no_error (fsm_t* this) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	889b      	ldrh	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <no_error+0x2a>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	889a      	ldrh	r2, [r3, #4]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d801      	bhi.n	8000f9a <no_error+0x2a>
		return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <no_error+0x2c>
	else return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d008      	beq.n	8000fd4 <timer_sleep+0x2c>
 8000fc2:	f001 f889 	bl	80020d8 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d301      	bcc.n	8000fd4 <timer_sleep+0x2c>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <timer_sleep+0x2e>
	else return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <timer_adc>:

int timer_adc (fsm_t* this) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick()>250); /*Timer to ensure ADC setup*/
 8000fe6:	f001 f877 	bl	80020d8 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2bfa      	cmp	r3, #250	; 0xfa
 8000fee:	bf8c      	ite	hi
 8000ff0:	2301      	movhi	r3, #1
 8000ff2:	2300      	movls	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <timer_setup>:

int timer_setup (fsm_t* this) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8001010:	f001 f862 	bl	80020d8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	429a      	cmp	r2, r3
 800101c:	bf8c      	ite	hi
 800101e:	2301      	movhi	r3, #1
 8001020:	2300      	movls	r3, #0
 8001022:	b2db      	uxtb	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <warned>:

int warned (fsm_t* this) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	2b01      	cmp	r3, #1
 8001044:	bfd4      	ite	le
 8001046:	2301      	movle	r3, #1
 8001048:	2300      	movgt	r3, #0
 800104a:	b2db      	uxtb	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <timer_measure>:
		return 1;
	else return 0;
}


int timer_measure (fsm_t* this) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	60bb      	str	r3, [r7, #8]

	if(config->measure_count>=(config->measure_average))
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	7f1b      	ldrb	r3, [r3, #28]
 800106e:	b29a      	uxth	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001074:	429a      	cmp	r2, r3
 8001076:	d301      	bcc.n	800107c <timer_measure+0x24>
	return 0;
 8001078:	2300      	movs	r3, #0
 800107a:	e009      	b.n	8001090 <timer_measure+0x38>
	else return (HAL_GetTick()>=(config->measure_timer));
 800107c:	f001 f82c 	bl	80020d8 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	bf2c      	ite	cs
 800108a:	2301      	movcs	r3, #1
 800108c:	2300      	movcc	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <warning_limit>:

int warning_limit (fsm_t* this) {
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	bfcc      	ite	gt
 80010b2:	2301      	movgt	r3, #1
 80010b4:	2300      	movle	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <measuring>:

void measuring (fsm_t* this) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	data = HAL_ADC_GetValue(&hadc1);
 80010da:	480f      	ldr	r0, [pc, #60]	; (8001118 <measuring+0x54>)
 80010dc:	f001 f947 	bl	800236e <HAL_ADC_GetValue>
 80010e0:	4603      	mov	r3, r0
 80010e2:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	885a      	ldrh	r2, [r3, #2]
 80010e8:	8afb      	ldrh	r3, [r7, #22]
 80010ea:	4413      	add	r3, r2
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	7f1b      	ldrb	r3, [r3, #28]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 80010fe:	f000 ffeb 	bl	80020d8 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20004a44 	.word	0x20004a44

0800111c <process_data>:

void process_data (fsm_t* this) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	885a      	ldrh	r2, [r3, #2]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <process_data+0x50>)
 8001138:	f001 f8e6 	bl	8002308 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	889a      	ldrh	r2, [r3, #4]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001144:	429a      	cmp	r2, r3
 8001146:	d809      	bhi.n	800115c <process_data+0x40>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	889a      	ldrh	r2, [r3, #4]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001150:	429a      	cmp	r2, r3
 8001152:	d303      	bcc.n	800115c <process_data+0x40>
	{
		config->alarm = 0;
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2200      	movs	r2, #0
 8001158:	719a      	strb	r2, [r3, #6]
 800115a:	e002      	b.n	8001162 <process_data+0x46>
	}
	else
	{
		config->alarm = 1;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2201      	movs	r2, #1
 8001160:	719a      	strb	r2, [r3, #6]
	}

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20004a44 	.word	0x20004a44

08001170 <alert>:
void alert (fsm_t* this) {
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	615a      	str	r2, [r3, #20]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <sleep>:

void sleep (fsm_t* this) { // led orange
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 80011aa:	f000 ff95 	bl	80020d8 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80011b4:	4413      	add	r3, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <sleep+0x5c>)
 80011c6:	f001 fd8d 	bl	8002ce4 <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2201      	movs	r2, #1
 80011ce:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2200      	movs	r2, #0
 80011d4:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	dd03      	ble.n	80011e6 <sleep+0x4e>
	{
		config->error = 1;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2201      	movs	r2, #1
 80011e2:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = 0;
	}
}
 80011e4:	e002      	b.n	80011ec <sleep+0x54>
		config->error = 0;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2200      	movs	r2, #0
 80011ea:	71da      	strb	r2, [r3, #7]
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <init_adc>:

void init_adc (fsm_t* this) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <init_adc+0x28>)
 8001202:	f001 f881 	bl	8002308 <HAL_ADC_Stop>

	adc_timer = HAL_GetTick() + 1000;
 8001206:	f000 ff67 	bl	80020d8 <HAL_GetTick>
 800120a:	4603      	mov	r3, r0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b18      	subs	r3, #24
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <init_adc+0x2c>)
 8001214:	701a      	strb	r2, [r3, #0]

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20004a44 	.word	0x20004a44
 8001224:	20004a8d 	.word	0x20004a8d

08001228 <setting_up>:


void setting_up (fsm_t* this) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2200      	movs	r2, #0
 800123e:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2200      	movs	r2, #0
 800124a:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2200      	movs	r2, #0
 8001250:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 8001252:	f000 ff41 	bl	80020d8 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800125c:	4413      	add	r3, r2
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001268:	2201      	movs	r2, #1
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <setting_up+0x64>)
 800126e:	f001 fd39 	bl	8002ce4 <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <setting_up+0x68>)
 8001274:	f000 ffa2 	bl	80021bc <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2201      	movs	r2, #1
 800127c:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2200      	movs	r2, #0
 8001282:	725a      	strb	r2, [r3, #9]
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020c00 	.word	0x40020c00
 8001290:	20004a44 	.word	0x20004a44

08001294 <save_data>:

void save_data (fsm_t* this)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	61fb      	str	r3, [r7, #28]
	sensor_t* config = punt->param;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	61bb      	str	r3, [r7, #24]

	data2save.Device_ID = config->Device_ID;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	8bdb      	ldrh	r3, [r3, #30]
 80012aa:	81bb      	strh	r3, [r7, #12]
	data2save.Sensor_ID = config->Sensor_ID;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b2:	73bb      	strb	r3, [r7, #14]
	data2save.alarm = config->alarm;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	799b      	ldrb	r3, [r3, #6]
 80012b8:	74bb      	strb	r3, [r7, #18]
	data2save.error = config->error;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	79db      	ldrb	r3, [r3, #7]
 80012be:	74fb      	strb	r3, [r7, #19]
	data2save.measure = config->data_average;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	823b      	strh	r3, [r7, #16]
	data2save.threshold_H = config->threshold_H;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	82fb      	strh	r3, [r7, #22]
	data2save.threshold_L = config->threshold_L;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012d0:	82bb      	strh	r3, [r7, #20]
//	data2save.timestamp =

	save_new_data(data2save);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012da:	f000 fbfd 	bl	8001ad8 <save_new_data>
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 80012f2:	4905      	ldr	r1, [pc, #20]	; (8001308 <fsm_sensor_init+0x20>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fdd3 	bl	8000ea0 <fsm_init>
  f->param = c;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	609a      	str	r2, [r3, #8]
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000

0800130c <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t Device_ID, uint8_t Sensor_ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4603      	mov	r3, r0
 800131c:	817b      	strh	r3, [r7, #10]
 800131e:	460b      	mov	r3, r1
 8001320:	727b      	strb	r3, [r7, #9]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	809a      	strh	r2, [r3, #4]
	sensor->alarm = 0;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	719a      	strb	r2, [r3, #6]
	sensor->error = 0;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->Device_ID = Device_ID;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	897a      	ldrh	r2, [r7, #10]
 8001372:	83da      	strh	r2, [r3, #30]
	sensor->Sensor_ID = Sensor_ID;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7a7a      	ldrb	r2, [r7, #9]
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->supply_Pin = supply_Pin;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	88fa      	ldrh	r2, [r7, #6]
 8001380:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->adc_channel = adc_channel;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	7e3a      	ldrb	r2, [r7, #24]
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->threshold_L = threshold_L;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8bba      	ldrh	r2, [r7, #28]
 800138e:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_H = threshold_H;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8c3a      	ldrh	r2, [r7, #32]
 8001394:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->threshold_Max = threshold_Max;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->setup_period = setup_period;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013a0:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->sleep_period = sleep_period;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80013a6:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_period = measure_period;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013ac:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->measure_average = measure_average;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013b2:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a42      	ldr	r2, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <MX_GPIO_Init+0x128>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a34      	ldr	r2, [pc, #208]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <MX_GPIO_Init+0x128>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_GPIO_Init+0x128>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <MX_GPIO_Init+0x12c>)
 800144c:	f001 fc4a 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2102      	movs	r1, #2
 8001454:	4826      	ldr	r0, [pc, #152]	; (80014f0 <MX_GPIO_Init+0x130>)
 8001456:	f001 fc45 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin|LD6_Pin|Sensor1_Supply_Pin 
 800145a:	2200      	movs	r2, #0
 800145c:	f24d 0142 	movw	r1, #53314	; 0xd042
 8001460:	4824      	ldr	r0, [pc, #144]	; (80014f4 <MX_GPIO_Init+0x134>)
 8001462:	f001 fc3f 	bl	8002ce4 <HAL_GPIO_WritePin>
                          |Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146c:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_GPIO_Init+0x134>)
 800146e:	f001 fc39 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001472:	2310      	movs	r3, #16
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_GPIO_Init+0x12c>)
 800148a:	f001 fa91 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 800148e:	2305      	movs	r3, #5
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_GPIO_Init+0x130>)
 80014a2:	f001 fa85 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80014a6:	2302      	movs	r3, #2
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <MX_GPIO_Init+0x130>)
 80014be:	f001 fa77 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80014c2:	f24f 0342 	movw	r3, #61506	; 0xf042
 80014c6:	617b      	str	r3, [r7, #20]
                          |Sensor1_Supply_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_GPIO_Init+0x134>)
 80014dc:	f001 fa68 	bl	80029b0 <HAL_GPIO_Init>

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020c00 	.word	0x40020c00

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f000 fd85 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f879 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001506:	f7ff ff5b 	bl	80013c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800150a:	f000 fc41 	bl	8001d90 <MX_SPI1_Init>
  MX_ADC1_Init();
 800150e:	f7ff fc31 	bl	8000d74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <main+0xac>)
 8001514:	2134      	movs	r1, #52	; 0x34
 8001516:	2001      	movs	r0, #1
 8001518:	f002 fdce 	bl	80040b8 <osMessageQueueNew>
 800151c:	4602      	mov	r2, r0
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <main+0xb0>)
 8001520:	601a      	str	r2, [r3, #0]


  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor2_attributes);
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <main+0xb4>)
 8001524:	2134      	movs	r1, #52	; 0x34
 8001526:	2001      	movs	r0, #1
 8001528:	f002 fdc6 	bl	80040b8 <osMessageQueueNew>
 800152c:	4602      	mov	r2, r0
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <main+0xb8>)
 8001530:	601a      	str	r2, [r3, #0]

  /* creation of myQueueDataSaved */
  myQueueDataSavedHandle = osMessageQueueNew (2, sizeof(t_bool), &myQueueDataSaved_attributes);
 8001532:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <main+0xbc>)
 8001534:	2101      	movs	r1, #1
 8001536:	2002      	movs	r0, #2
 8001538:	f002 fdbe 	bl	80040b8 <osMessageQueueNew>
 800153c:	4602      	mov	r2, r0
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <main+0xc0>)
 8001540:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001542:	f002 fc13 	bl	8003d6c <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001546:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <main+0xc4>)
 8001548:	2100      	movs	r1, #0
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <main+0xc8>)
 800154c:	f002 fca0 	bl	8003e90 <osThreadNew>
 8001550:	4602      	mov	r2, r0
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <main+0xcc>)
 8001554:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <main+0xd0>)
 800155c:	4619      	mov	r1, r3
 800155e:	481b      	ldr	r0, [pc, #108]	; (80015cc <main+0xd4>)
 8001560:	f002 fc96 	bl	8003e90 <osThreadNew>
 8001564:	4602      	mov	r2, r0
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <main+0xd8>)
 8001568:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <main+0xdc>)
 800156c:	2100      	movs	r1, #0
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <main+0xe0>)
 8001570:	f002 fc8e 	bl	8003e90 <osThreadNew>
 8001574:	4602      	mov	r2, r0
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <main+0xe4>)
 8001578:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 800157a:	463b      	mov	r3, r7
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <main+0xe8>)
 800157e:	4619      	mov	r1, r3
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <main+0xec>)
 8001582:	f002 fc85 	bl	8003e90 <osThreadNew>
 8001586:	4602      	mov	r2, r0
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <main+0xf0>)
 800158a:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <main+0xf4>)
 800158e:	2100      	movs	r1, #0
 8001590:	4817      	ldr	r0, [pc, #92]	; (80015f0 <main+0xf8>)
 8001592:	f002 fc7d 	bl	8003e90 <osThreadNew>
 8001596:	4602      	mov	r2, r0
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <main+0xfc>)
 800159a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  /* Start scheduler */
  osKernelStart();
 800159c:	f002 fc1a 	bl	8003dd4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <main+0xa8>
 80015a2:	bf00      	nop
 80015a4:	08007828 	.word	0x08007828
 80015a8:	20004bbc 	.word	0x20004bbc
 80015ac:	08007840 	.word	0x08007840
 80015b0:	20004a9c 	.word	0x20004a9c
 80015b4:	08007858 	.word	0x08007858
 80015b8:	20004aa8 	.word	0x20004aa8
 80015bc:	08007774 	.word	0x08007774
 80015c0:	080016c9 	.word	0x080016c9
 80015c4:	20004a94 	.word	0x20004a94
 80015c8:	08007798 	.word	0x08007798
 80015cc:	080016d9 	.word	0x080016d9
 80015d0:	20004aa4 	.word	0x20004aa4
 80015d4:	080077bc 	.word	0x080077bc
 80015d8:	08001809 	.word	0x08001809
 80015dc:	20004a90 	.word	0x20004a90
 80015e0:	080077e0 	.word	0x080077e0
 80015e4:	08001895 	.word	0x08001895
 80015e8:	20004bc0 	.word	0x20004bc0
 80015ec:	08007804 	.word	0x08007804
 80015f0:	080019c5 	.word	0x080019c5
 80015f4:	20004aac 	.word	0x20004aac

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fc3d 	bl	8006e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <SystemClock_Config+0xc8>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <SystemClock_Config+0xc8>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <SystemClock_Config+0xc8>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <SystemClock_Config+0xcc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <SystemClock_Config+0xcc>)
 8001642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <SystemClock_Config+0xcc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001654:	2301      	movs	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165e:	2302      	movs	r3, #2
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001668:	2304      	movs	r3, #4
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800166c:	2348      	movs	r3, #72	; 0x48
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001670:	2302      	movs	r3, #2
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001674:	2303      	movs	r3, #3
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fb4b 	bl	8002d18 <HAL_RCC_OscConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001688:	f000 fae0 	bl	8001c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168c:	230f      	movs	r3, #15
 800168e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001690:	2302      	movs	r3, #2
 8001692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2102      	movs	r1, #2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fda5 	bl	80031f8 <HAL_RCC_ClockConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016b4:	f000 faca 	bl	8001c4c <Error_Handler>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3750      	adds	r7, #80	; 0x50
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000

080016c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 // MX_USB_HOST_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f002 fc83 	bl	8003fdc <osDelay>
 80016d6:	e7fb      	b.n	80016d0 <StartDefaultTask+0x8>

080016d8 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09e      	sub	sp, #120	; 0x78
 80016dc:	af08      	add	r7, sp, #32
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor1;
	t_bool sensor1_measured = FALSE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	76fb      	strb	r3, [r7, #27]

	ADC_ChannelConfTypeDef sConfig = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor1, ID_Device, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 80016fa:	f107 001c 	add.w	r0, r7, #28
 80016fe:	2304      	movs	r3, #4
 8001700:	9307      	str	r3, [sp, #28]
 8001702:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001706:	9306      	str	r3, [sp, #24]
 8001708:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800170c:	9305      	str	r3, [sp, #20]
 800170e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001712:	9304      	str	r3, [sp, #16]
 8001714:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2301      	movs	r3, #1
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2302      	movs	r3, #2
 800172c:	2201      	movs	r2, #1
 800172e:	2101      	movs	r1, #1
 8001730:	f7ff fdec 	bl	800130c <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800173c:	f7ff fdd4 	bl	80012e8 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8001740:	f002 fb7e 	bl	8003e40 <osKernelGetTickCount>
 8001744:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {

	/*Select ADC Channel 1*/

	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b04      	cmp	r3, #4
 800174c:	dc2c      	bgt.n	80017a8 <StartTaskSensor1+0xd0>
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <StartTaskSensor1+0x11c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d128      	bne.n	80017a8 <StartTaskSensor1+0xd0>
	{
		sensor1_ON = TRUE;
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <StartTaskSensor1+0x120>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		sConfig.Channel = ADC_CHANNEL_1;
 800175c:	2301      	movs	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	4619      	mov	r1, r3
 800176e:	4823      	ldr	r0, [pc, #140]	; (80017fc <StartTaskSensor1+0x124>)
 8001770:	f000 fe0a 	bl	8002388 <HAL_ADC_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <StartTaskSensor1+0xa6>
		{
			Error_Handler();
 800177a:	f000 fa67 	bl	8001c4c <Error_Handler>
		}
		fsm_fire(&(fsm_s1->fsm));
 800177e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb9f 	bl	8000ec4 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <StartTaskSensor1+0x128>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	2300      	movs	r3, #0
 8001790:	2200      	movs	r2, #0
 8001792:	f002 fd17 	bl	80041c4 <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <StartTaskSensor1+0x12c>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	f107 011b 	add.w	r1, r7, #27
 800179e:	2300      	movs	r3, #0
 80017a0:	2200      	movs	r2, #0
 80017a2:	f002 fd0f 	bl	80041c4 <osMessageQueuePut>
 80017a6:	e002      	b.n	80017ae <StartTaskSensor1+0xd6>

	}
	else sensor1_ON = FALSE;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <StartTaskSensor1+0x120>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]

	if(fsm_s1->fsm.current_state > 4)
 80017ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	dd15      	ble.n	80017e2 <StartTaskSensor1+0x10a>
	{
		sensor1_measured = TRUE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	76fb      	strb	r3, [r7, #27]
		fsm_fire(&(fsm_s1->fsm));
 80017ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb81 	bl	8000ec4 <fsm_fire>
		osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <StartTaskSensor1+0x128>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	2300      	movs	r3, #0
 80017cc:	2200      	movs	r2, #0
 80017ce:	f002 fcf9 	bl	80041c4 <osMessageQueuePut>
		osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor1_measured, 0, 0);
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <StartTaskSensor1+0x12c>)
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f107 011b 	add.w	r1, r7, #27
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	f002 fcf1 	bl	80041c4 <osMessageQueuePut>
	}
	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80017e8:	657b      	str	r3, [r7, #84]	; 0x54
    osDelayUntil(tDelay);
 80017ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80017ec:	f002 fc24 	bl	8004038 <osDelayUntil>
	if(fsm_s1->fsm.current_state <= 4 && sensor2_ON == FALSE)
 80017f0:	e7a9      	b.n	8001746 <StartTaskSensor1+0x6e>
 80017f2:	bf00      	nop
 80017f4:	20004a98 	.word	0x20004a98
 80017f8:	20004aa0 	.word	0x20004aa0
 80017fc:	20004a44 	.word	0x20004a44
 8001800:	20004bbc 	.word	0x20004bbc
 8001804:	20004aa8 	.word	0x20004aa8

08001808 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
  uint32_t tDelay = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  uint8_t master;
  t_bool sensor1_state = FALSE;
 8001814:	2300      	movs	r3, #0
 8001816:	727b      	strb	r3, [r7, #9]
  t_bool sensor2_state = FALSE;
 8001818:	2300      	movs	r3, #0
 800181a:	723b      	strb	r3, [r7, #8]

  tDelay = osKernelGetTickCount();
 800181c:	f002 fb10 	bl	8003e40 <osKernelGetTickCount>
 8001820:	60f8      	str	r0, [r7, #12]


	/*master 1 for all devices, 0 for GW*/
	master = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	72bb      	strb	r3, [r7, #10]

	Lora_inicio(master);  //0 es esclavo, 1 es maestro
 8001826:	7abb      	ldrb	r3, [r7, #10]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f967 	bl	8001afc <Lora_inicio>

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <StartTaskLoRa+0x88>)
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f107 0109 	add.w	r1, r7, #9
 8001836:	2300      	movs	r3, #0
 8001838:	2200      	movs	r2, #0
 800183a:	f002 fd37 	bl	80042ac <osMessageQueueGet>
	osMessageQueueGet(myQueueDataSavedHandle, &sensor2_state, 0, 0);
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <StartTaskLoRa+0x88>)
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	2300      	movs	r3, #0
 8001848:	2200      	movs	r2, #0
 800184a:	f002 fd2f 	bl	80042ac <osMessageQueueGet>
	if (master == 1)
 800184e:	7abb      	ldrb	r3, [r7, #10]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d111      	bne.n	8001878 <StartTaskLoRa+0x70>
	{
		if(sensor1_state && sensor2_state)
 8001854:	7a7b      	ldrb	r3, [r7, #9]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d010      	beq.n	800187c <StartTaskLoRa+0x74>
 800185a:	7a3b      	ldrb	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00d      	beq.n	800187c <StartTaskLoRa+0x74>
	//	if(sensor1_state)
		{
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	e004      	b.n	8001870 <StartTaskLoRa+0x68>
			{
				Lora_envia();
 8001866:	f000 f9b3 	bl	8001bd0 <Lora_envia>
			for(uint8_t i = 0; i<NUMBER_OF_SENSORS; i++)
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	3301      	adds	r3, #1
 800186e:	72fb      	strb	r3, [r7, #11]
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d9f7      	bls.n	8001866 <StartTaskLoRa+0x5e>
 8001876:	e001      	b.n	800187c <StartTaskLoRa+0x74>
			}
		}
	}
	else
	{
		Lora_recibe();
 8001878:	f000 f992 	bl	8001ba0 <Lora_recibe>
	}
	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001882:	3310      	adds	r3, #16
 8001884:	60fb      	str	r3, [r7, #12]
	osDelayUntil(tDelay);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f002 fbd6 	bl	8004038 <osDelayUntil>
	osMessageQueueGet(myQueueDataSavedHandle, &sensor1_state, 0, 0);
 800188c:	e7cf      	b.n	800182e <StartTaskLoRa+0x26>
 800188e:	bf00      	nop
 8001890:	20004aa8 	.word	0x20004aa8

08001894 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09e      	sub	sp, #120	; 0x78
 8001898:	af08      	add	r7, sp, #32
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor2;
	t_bool sensor2_measured = FALSE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	76fb      	strb	r3, [r7, #27]

	ADC_ChannelConfTypeDef sConfig = {0};
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]

	fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor2, ID_Device, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 80018b6:	f107 001c 	add.w	r0, r7, #28
 80018ba:	2304      	movs	r3, #4
 80018bc:	9307      	str	r3, [sp, #28]
 80018be:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80018c2:	9306      	str	r3, [sp, #24]
 80018c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80018c8:	9305      	str	r3, [sp, #20]
 80018ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ce:	9304      	str	r3, [sp, #16]
 80018d0:	f44f 7361 	mov.w	r3, #900	; 0x384
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	f240 23ee 	movw	r3, #750	; 0x2ee
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2302      	movs	r3, #2
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2340      	movs	r3, #64	; 0x40
 80018e8:	2202      	movs	r2, #2
 80018ea:	2101      	movs	r1, #1
 80018ec:	f7ff fd0e 	bl	800130c <sensor_initialization>
	fsm_sensor_init(fsm_s2, &sensor2);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80018f8:	f7ff fcf6 	bl	80012e8 <fsm_sensor_init>

	tDelay = osKernelGetTickCount();
 80018fc:	f002 faa0 	bl	8003e40 <osKernelGetTickCount>
 8001900:	6578      	str	r0, [r7, #84]	; 0x54
	/* Infinite loop */
	/* Infinite loop */
	for(;;)
	{
		/*Select ADC Channel 2*/
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 8001902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b04      	cmp	r3, #4
 8001908:	dc2c      	bgt.n	8001964 <StartTaskSensor2+0xd0>
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <StartTaskSensor2+0x11c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d128      	bne.n	8001964 <StartTaskSensor2+0xd0>
		{
			sensor2_ON = TRUE;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <StartTaskSensor2+0x120>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_2;
 8001918:	2302      	movs	r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4619      	mov	r1, r3
 800192a:	4823      	ldr	r0, [pc, #140]	; (80019b8 <StartTaskSensor2+0x124>)
 800192c:	f000 fd2c 	bl	8002388 <HAL_ADC_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <StartTaskSensor2+0xa6>
			{
				Error_Handler();
 8001936:	f000 f989 	bl	8001c4c <Error_Handler>
			}
			fsm_fire(&(fsm_s2->fsm));
 800193a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fac1 	bl	8000ec4 <fsm_fire>
			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <StartTaskSensor2+0x128>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001948:	6899      	ldr	r1, [r3, #8]
 800194a:	2300      	movs	r3, #0
 800194c:	2200      	movs	r2, #0
 800194e:	f002 fc39 	bl	80041c4 <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <StartTaskSensor2+0x12c>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	f107 011b 	add.w	r1, r7, #27
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	f002 fc31 	bl	80041c4 <osMessageQueuePut>
 8001962:	e002      	b.n	800196a <StartTaskSensor2+0xd6>
		}
		else sensor2_ON = FALSE;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <StartTaskSensor2+0x120>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]

		if(fsm_s2->fsm.current_state > 4)
 800196a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b04      	cmp	r3, #4
 8001970:	dd15      	ble.n	800199e <StartTaskSensor2+0x10a>
		{
			sensor2_measured = TRUE;
 8001972:	2301      	movs	r3, #1
 8001974:	76fb      	strb	r3, [r7, #27]
			fsm_fire(&(fsm_s2->fsm));
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff faa3 	bl	8000ec4 <fsm_fire>

			osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <StartTaskSensor2+0x128>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001984:	6899      	ldr	r1, [r3, #8]
 8001986:	2300      	movs	r3, #0
 8001988:	2200      	movs	r2, #0
 800198a:	f002 fc1b 	bl	80041c4 <osMessageQueuePut>
			osMessageQueuePut(myQueueDataSavedHandle, (t_bool*) &sensor2_measured, 0, 0);
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <StartTaskSensor2+0x12c>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f107 011b 	add.w	r1, r7, #27
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	f002 fc13 	bl	80041c4 <osMessageQueuePut>
		}

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 800199e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019a4:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(tDelay);
 80019a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019a8:	f002 fb46 	bl	8004038 <osDelayUntil>
		if(fsm_s2->fsm.current_state <= 4 && sensor1_ON == FALSE)
 80019ac:	e7a9      	b.n	8001902 <StartTaskSensor2+0x6e>
 80019ae:	bf00      	nop
 80019b0:	20004aa0 	.word	0x20004aa0
 80019b4:	20004a98 	.word	0x20004a98
 80019b8:	20004a44 	.word	0x20004a44
 80019bc:	20004a9c 	.word	0x20004a9c
 80019c0:	20004aa8 	.word	0x20004aa8

080019c4 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b09e      	sub	sp, #120	; 0x78
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 80019d0:	f002 fa36 	bl	8003e40 <osKernelGetTickCount>
 80019d4:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <StartTaskLEDs+0x108>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019de:	2300      	movs	r3, #0
 80019e0:	2200      	movs	r2, #0
 80019e2:	f002 fc63 	bl	80042ac <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 80019e6:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <StartTaskLEDs+0x10c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f107 010c 	add.w	r1, r7, #12
 80019ee:	2300      	movs	r3, #0
 80019f0:	2200      	movs	r2, #0
 80019f2:	f002 fc5b 	bl	80042ac <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 80019f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d002      	beq.n	8001a04 <StartTaskLEDs+0x40>
 80019fe:	7d3b      	ldrb	r3, [r7, #20]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10c      	bne.n	8001a1e <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0a:	4832      	ldr	r0, [pc, #200]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a0c:	f001 f96a 	bl	8002ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a16:	482f      	ldr	r0, [pc, #188]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a18:	f001 f964 	bl	8002ce4 <HAL_GPIO_WritePin>
 8001a1c:	e039      	b.n	8001a92 <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 8001a1e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d129      	bne.n	8001a7a <StartTaskLEDs+0xb6>
 8001a26:	7d7b      	ldrb	r3, [r7, #21]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d126      	bne.n	8001a7a <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	4828      	ldr	r0, [pc, #160]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a34:	f001 f956 	bl	8002ce4 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d002      	beq.n	8001a46 <StartTaskLEDs+0x82>
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10c      	bne.n	8001a60 <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4c:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a4e:	f001 f949 	bl	8002ce4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a58:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a5a:	f001 f943 	bl	8002ce4 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001a5e:	e018      	b.n	8001a92 <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a66:	481b      	ldr	r0, [pc, #108]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a68:	f001 f93c 	bl	8002ce4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a72:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a74:	f001 f936 	bl	8002ce4 <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001a78:	e00b      	b.n	8001a92 <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a80:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a82:	f001 f92f 	bl	8002ce4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a8c:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001a8e:	f001 f929 	bl	8002ce4 <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001a92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d002      	beq.n	8001aa0 <StartTaskLEDs+0xdc>
 8001a9a:	7cbb      	ldrb	r3, [r7, #18]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <StartTaskLEDs+0xea>
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa6:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001aa8:	f001 f91c 	bl	8002ce4 <HAL_GPIO_WritePin>
 8001aac:	e005      	b.n	8001aba <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <StartTaskLEDs+0x110>)
 8001ab6:	f001 f915 	bl	8002ce4 <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001abc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ac0:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 8001ac2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ac4:	f002 fab8 	bl	8004038 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001ac8:	e785      	b.n	80019d6 <StartTaskLEDs+0x12>
 8001aca:	bf00      	nop
 8001acc:	20004bbc 	.word	0x20004bbc
 8001ad0:	20004a9c 	.word	0x20004a9c
 8001ad4:	40020c00 	.word	0x40020c00

08001ad8 <save_new_data>:
  }
  /* USER CODE END StartTaskLEDs */
}

void save_new_data(sensor_buf_t data)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ringbuf_put(&data_ring_buff, data);
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <save_new_data+0x20>)
 8001aea:	f000 f8b6 	bl	8001c5a <ringbuf_put>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20004be0 	.word	0x20004be0

08001afc <Lora_inicio>:

void Lora_inicio(int init){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
	int ret;
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <Lora_inicio+0x90>)
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <Lora_inicio+0x94>)
 8001b08:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <Lora_inicio+0x90>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <Lora_inicio+0x90>)
 8001b12:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <Lora_inicio+0x98>)
 8001b14:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <Lora_inicio+0x90>)
 8001b18:	2210      	movs	r2, #16
 8001b1a:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <Lora_inicio+0x90>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <Lora_inicio+0x94>)
 8001b20:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <Lora_inicio+0x90>)
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <Lora_inicio+0x90>)
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <Lora_inicio+0x9c>)
 8001b2c:	619a      	str	r2, [r3, #24]
	SX1278.readBytes=0;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <Lora_inicio+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278.rxBuffer[0]=0;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <Lora_inicio+0xa0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	729a      	strb	r2, [r3, #10]
	SX1278.hw = &SX1278_hw;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <Lora_inicio+0xa0>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <Lora_inicio+0x90>)
 8001b40:	601a      	str	r2, [r3, #0]

	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8001b42:	230a      	movs	r3, #10
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2303      	movs	r3, #3
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4812      	ldr	r0, [pc, #72]	; (8001b9c <Lora_inicio+0xa0>)
 8001b52:	f7ff f8c1 	bl	8000cd8 <SX1278_begin>
			SX1278_LORA_BW_20_8KHZ, 10);
	while (ret!=1){
 8001b56:	e011      	b.n	8001b7c <Lora_inicio+0x80>
		if (init == 1) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <Lora_inicio+0x72>
			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001b5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b62:	2110      	movs	r1, #16
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <Lora_inicio+0xa0>)
 8001b66:	f7ff f820 	bl	8000baa <SX1278_LoRaEntryTx>
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	e006      	b.n	8001b7c <Lora_inicio+0x80>
		} else {
			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000); //tiene que valer 1
 8001b6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b72:	2110      	movs	r1, #16
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <Lora_inicio+0xa0>)
 8001b76:	f7fe ff6f 	bl	8000a58 <SX1278_LoRaEntryRx>
 8001b7a:	60f8      	str	r0, [r7, #12]
	while (ret!=1){
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d1ea      	bne.n	8001b58 <Lora_inicio+0x5c>
		}
	}
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20004bc4 	.word	0x20004bc4
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020000 	.word	0x40020000
 8001b98:	20004c60 	.word	0x20004c60
 8001b9c:	20004ab0 	.word	0x20004ab0

08001ba0 <Lora_recibe>:
void Lora_recibe(void){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b092      	sub	sp, #72	; 0x48
 8001ba4:	af00      	add	r7, sp, #0
	int ret;
	char buffer[64];
	ret = SX1278_LoRaRxPacket(&SX1278);
 8001ba6:	4809      	ldr	r0, [pc, #36]	; (8001bcc <Lora_recibe+0x2c>)
 8001ba8:	f7fe ffbb 	bl	8000b22 <SX1278_LoRaRxPacket>
 8001bac:	4603      	mov	r3, r0
 8001bae:	647b      	str	r3, [r7, #68]	; 0x44
	if (ret > 0) {
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dd06      	ble.n	8001bc4 <Lora_recibe+0x24>
		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8001bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <Lora_recibe+0x2c>)
 8001bc0:	f7ff f8b2 	bl	8000d28 <SX1278_read>
	}
}
 8001bc4:	bf00      	nop
 8001bc6:	3748      	adds	r7, #72	; 0x48
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20004ab0 	.word	0x20004ab0

08001bd0 <Lora_envia>:
void Lora_envia(void){
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	b09d      	sub	sp, #116	; 0x74
 8001bd4:	af06      	add	r7, sp, #24
	int ret;
	char buffer[64];
	int message_length;
	sensor_buf_t data;

	data = ringbuf_get(&data_ring_buff);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4919      	ldr	r1, [pc, #100]	; (8001c40 <Lora_envia+0x70>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f8a0 	bl	8001d20 <ringbuf_get>

	message_length = sprintf(buffer, "AquaSmart %d %d %d %d %d %d %d\n", data.Device_ID, data.Sensor_ID, data.measure, data.alarm, data.error, data.threshold_L, data.threshold_H);
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	461e      	mov	r6, r3
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	469c      	mov	ip, r3
 8001be8:	893b      	ldrh	r3, [r7, #8]
 8001bea:	7aba      	ldrb	r2, [r7, #10]
 8001bec:	7af9      	ldrb	r1, [r7, #11]
 8001bee:	89b8      	ldrh	r0, [r7, #12]
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	89f8      	ldrh	r0, [r7, #14]
 8001bf4:	4605      	mov	r5, r0
 8001bf6:	f107 0010 	add.w	r0, r7, #16
 8001bfa:	9504      	str	r5, [sp, #16]
 8001bfc:	9403      	str	r4, [sp, #12]
 8001bfe:	9102      	str	r1, [sp, #8]
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4663      	mov	r3, ip
 8001c06:	4632      	mov	r2, r6
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <Lora_envia+0x74>)
 8001c0a:	f005 f9fd 	bl	8007008 <siprintf>
 8001c0e:	6578      	str	r0, [r7, #84]	; 0x54
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <Lora_envia+0x78>)
 8001c1c:	f7fe ffc5 	bl	8000baa <SX1278_LoRaEntryTx>
 8001c20:	6538      	str	r0, [r7, #80]	; 0x50
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 2000);
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	f107 0110 	add.w	r1, r7, #16
 8001c2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <Lora_envia+0x78>)
 8001c30:	f7ff f813 	bl	8000c5a <SX1278_LoRaTxPacket>
 8001c34:	6538      	str	r0, [r7, #80]	; 0x50
}
 8001c36:	bf00      	nop
 8001c38:	375c      	adds	r7, #92	; 0x5c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20004be0 	.word	0x20004be0
 8001c44:	08007720 	.word	0x08007720
 8001c48:	20004ab0 	.word	0x20004ab0

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <ringbuf_put>:
  _this->tail = 0;
}

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001c5a:	b490      	push	{r4, r7}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	4638      	mov	r0, r7
 8001c64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if((NEXT(_this->head) != 0) && (NEXT(_this->head)!= _this->tail)){
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d023      	beq.n	8001cb8 <ringbuf_put+0x5e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d01e      	beq.n	8001cb8 <ringbuf_put+0x5e>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	d01a      	beq.n	8001cb8 <ringbuf_put+0x5e>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d013      	beq.n	8001cb8 <ringbuf_put+0x5e>
  _this->buf[_this->head] = item;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	461c      	mov	r4, r3
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _this->head++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	679a      	str	r2, [r3, #120]	; 0x78
 8001cb6:	e02e      	b.n	8001d16 <ringbuf_put+0xbc>
  }
  else
  {
	  _this->buf[_this->head] = item;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	461c      	mov	r4, r3
 8001cca:	463b      	mov	r3, r7
 8001ccc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(NEXT(_this->head) == _this->tail)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d016      	beq.n	8001d0a <ringbuf_put+0xb0>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d10f      	bne.n	8001d0a <ringbuf_put+0xb0>
	  {
		  _this->head = _this->tail;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = NEXT(_this->tail);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	d003      	beq.n	8001d02 <ringbuf_put+0xa8>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cfe:	3301      	adds	r3, #1
 8001d00:	e000      	b.n	8001d04 <ringbuf_put+0xaa>
 8001d02:	2300      	movs	r3, #0
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001d08:	e005      	b.n	8001d16 <ringbuf_put+0xbc>
	  }
	  else
	  {
		  _this->head = 0;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	679a      	str	r2, [r3, #120]	; 0x78
		  _this->tail = RBUF_SIZE - 2; /*Full buffer, reload.*/
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2208      	movs	r2, #8
 8001d14:	67da      	str	r2, [r3, #124]	; 0x7c
	  }
  }
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc90      	pop	{r4, r7}
 8001d1e:	4770      	bx	lr

08001d20 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001d20:	b490      	push	{r4, r7}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d01e      	beq.n	8001d74 <ringbuf_get+0x54>
	{
		item = _this->buf[_this->tail];
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	18ca      	adds	r2, r1, r3
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (NEXT(_this->tail) != 0)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d00a      	beq.n	8001d6e <ringbuf_get+0x4e>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <ringbuf_get+0x4e>
		{
			_this->tail++;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d6c:	e002      	b.n	8001d74 <ringbuf_get+0x54>
		}
		else
		{
			_this->tail = 0;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	67da      	str	r2, [r3, #124]	; 0x7c
		}
    }
	return item;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	461c      	mov	r4, r3
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d7e:	6020      	str	r0, [r4, #0]
 8001d80:	6061      	str	r1, [r4, #4]
 8001d82:	60a2      	str	r2, [r4, #8]
}
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc90      	pop	{r4, r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <MX_SPI1_Init+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001ddc:	220a      	movs	r2, #10
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_SPI1_Init+0x64>)
 8001de2:	f001 fbc7 	bl	8003574 <HAL_SPI_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dec:	f7ff ff2e 	bl	8001c4c <Error_Handler>
  }

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20004c60 	.word	0x20004c60
 8001df8:	40013000 	.word	0x40013000

08001dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_SPI_MspInit+0x84>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12b      	bne.n	8001e76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_SPI_MspInit+0x88>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_SPI_MspInit+0x88>)
 8001e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_SPI_MspInit+0x88>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_SPI_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_SPI_MspInit+0x88>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_SPI_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e56:	23e0      	movs	r3, #224	; 0xe0
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e62:	2302      	movs	r3, #2
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e66:	2305      	movs	r3, #5
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_SPI_MspInit+0x8c>)
 8001e72:	f000 fd9d 	bl	80029b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40013000 	.word	0x40013000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_MspInit+0x54>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_MspInit+0x54>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x54>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_MspInit+0x54>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_MspInit+0x54>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_MspInit+0x54>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	210f      	movs	r1, #15
 8001ece:	f06f 0001 	mvn.w	r0, #1
 8001ed2:	f000 fd44 	bl	800295e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 f8c8 	bl	80020b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f20:	f003 ff44 	bl	8005dac <xTaskGetSchedulerState>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f2a:	f004 fd15 	bl	8006958 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_sbrk+0x50>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x16>
		heap_end = &end;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <_sbrk+0x50>)
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <_sbrk+0x54>)
 8001f48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <_sbrk+0x50>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <_sbrk+0x50>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	466a      	mov	r2, sp
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d907      	bls.n	8001f6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f5e:	f004 ff5d 	bl	8006e1c <__errno>
 8001f62:	4602      	mov	r2, r0
 8001f64:	230c      	movs	r3, #12
 8001f66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	e006      	b.n	8001f7c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <_sbrk+0x50>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <_sbrk+0x50>)
 8001f78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000130 	.word	0x20000130
 8001f88:	20004d00 	.word	0x20004d00

08001f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <SystemInit+0x28>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <SystemInit+0x28>)
 8001f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SystemInit+0x28>)
 8001fa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fbe:	e003      	b.n	8001fc8 <LoopCopyDataInit>

08001fc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fc6:	3104      	adds	r1, #4

08001fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fc8:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fd0:	d3f6      	bcc.n	8001fc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fd4:	e002      	b.n	8001fdc <LoopFillZerobss>

08001fd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fd8:	f842 3b04 	str.w	r3, [r2], #4

08001fdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fe0:	d3f9      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fe2:	f7ff ffd3 	bl	8001f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f004 ff1f 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff fa85 	bl	80014f8 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ff4:	080078c4 	.word	0x080078c4
  ldr  r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ffc:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 8002000:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 8002004:	20004d00 	.word	0x20004d00

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 fc87 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff ff24 	bl	8001e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fc91 	bl	8002996 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 fc67 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200000a0 	.word	0x200000a0
 80020a8:	200000a8 	.word	0x200000a8
 80020ac:	200000a4 	.word	0x200000a4

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200000a8 	.word	0x200000a8
 80020d4:	20004cb8 	.word	0x20004cb8

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20004cb8 	.word	0x20004cb8

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_Delay+0x40>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200000a8 	.word	0x200000a8

08002134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e033      	b.n	80021b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fe60 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800217a:	f023 0302 	bic.w	r3, r3, #2
 800217e:	f043 0202 	orr.w	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa30 	bl	80025ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
 80021a2:	e001      	b.n	80021a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Start+0x1a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e08a      	b.n	80022ec <HAL_ADC_Start+0x130>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d018      	beq.n	800221e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_ADC_Start+0x13c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <HAL_ADC_Start+0x140>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9a      	lsrs	r2, r3, #18
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002210:	e002      	b.n	8002218 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3b01      	subs	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f9      	bne.n	8002212 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d15e      	bne.n	80022ea <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226a:	d106      	bne.n	800227a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	f023 0206 	bic.w	r2, r3, #6
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44
 8002278:	e002      	b.n	8002280 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_ADC_Start+0x144>)
 800228a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002294:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11c      	bne.n	80022ea <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	e013      	b.n	80022ea <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <HAL_ADC_Start+0x148>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10e      	bne.n	80022ea <HAL_ADC_Start+0x12e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022e8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	200000a0 	.word	0x200000a0
 80022fc:	431bde83 	.word	0x431bde83
 8002300:	40012300 	.word	0x40012300
 8002304:	40012000 	.word	0x40012000

08002308 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_Stop+0x16>
 800231a:	2302      	movs	r3, #2
 800231c:	e021      	b.n	8002362 <HAL_ADC_Stop+0x5a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1c>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e113      	b.n	80025cc <HAL_ADC_ConfigChannel+0x244>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	d925      	bls.n	8002400 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4403      	add	r3, r0
 80023f2:	3b1e      	subs	r3, #30
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e022      	b.n	8002446 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	2207      	movs	r2, #7
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4403      	add	r3, r0
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d824      	bhi.n	8002498 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b05      	subs	r3, #5
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b05      	subs	r3, #5
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
 8002496:	e04c      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d824      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b23      	subs	r3, #35	; 0x23
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b23      	subs	r3, #35	; 0x23
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	e023      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b41      	subs	r3, #65	; 0x41
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b41      	subs	r3, #65	; 0x41
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_ADC_ConfigChannel+0x250>)
 8002534:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a28      	ldr	r2, [pc, #160]	; (80025dc <HAL_ADC_ConfigChannel+0x254>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10f      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d8>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d10b      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_ADC_ConfigChannel+0x254>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d12b      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_ADC_ConfigChannel+0x258>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_ADC_ConfigChannel+0x1f4>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b11      	cmp	r3, #17
 800257a:	d122      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_ADC_ConfigChannel+0x258>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_ADC_ConfigChannel+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_ADC_ConfigChannel+0x260>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	0c9a      	lsrs	r2, r3, #18
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b4:	e002      	b.n	80025bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40012300 	.word	0x40012300
 80025dc:	40012000 	.word	0x40012000
 80025e0:	10000012 	.word	0x10000012
 80025e4:	200000a0 	.word	0x200000a0
 80025e8:	431bde83 	.word	0x431bde83

080025ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f4:	4b79      	ldr	r3, [pc, #484]	; (80027dc <ADC_Init+0x1f0>)
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	021a      	lsls	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <ADC_Init+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e00f      	b.n	80026ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0202 	bic.w	r2, r2, #2
 80026f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
 8002704:	005a      	lsls	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002726:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	035a      	lsls	r2, r3, #13
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e007      	b.n	8002760 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	3b01      	subs	r3, #1
 800277c:	051a      	lsls	r2, r3, #20
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027a2:	025a      	lsls	r2, r3, #9
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	029a      	lsls	r2, r3, #10
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	0f000001 	.word	0x0f000001

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff47 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff5c 	bl	800282c <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffb0 	bl	8002904 <SysTick_Config>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e159      	b.n	8002c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8148 	bne.w	8002c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00b      	beq.n	8002a0a <HAL_GPIO_Init+0x5a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029fe:	2b11      	cmp	r3, #17
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0xfc>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a2 	beq.w	8002c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_GPIO_Init+0x2e4>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_GPIO_Init+0x2e4>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_GPIO_Init+0x2e4>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a51      	ldr	r2, [pc, #324]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a47      	ldr	r2, [pc, #284]	; (8002ca0 <HAL_GPIO_Init+0x2f0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x1fe>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a46      	ldr	r2, [pc, #280]	; (8002ca4 <HAL_GPIO_Init+0x2f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x1fa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_GPIO_Init+0x2f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x1f6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a44      	ldr	r2, [pc, #272]	; (8002cac <HAL_GPIO_Init+0x2fc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x1f2>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc4:	4934      	ldr	r1, [pc, #208]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c74:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f aea2 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3724      	adds	r7, #36	; 0x24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	e001      	b.n	8002cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	619a      	str	r2, [r3, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e25b      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d075      	beq.n	8002e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d36:	4ba3      	ldr	r3, [pc, #652]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d00c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4ba0      	ldr	r3, [pc, #640]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d112      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4b9d      	ldr	r3, [pc, #628]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	4b99      	ldr	r3, [pc, #612]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05b      	beq.n	8002e20 <HAL_RCC_OscConfig+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d157      	bne.n	8002e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e236      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x74>
 8002d7e:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a90      	ldr	r2, [pc, #576]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x98>
 8002d96:	4b8b      	ldr	r3, [pc, #556]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a8a      	ldr	r2, [pc, #552]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a87      	ldr	r2, [pc, #540]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002db0:	4b84      	ldr	r3, [pc, #528]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a83      	ldr	r2, [pc, #524]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b81      	ldr	r3, [pc, #516]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a80      	ldr	r2, [pc, #512]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f982 	bl	80020d8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff f97e 	bl	80020d8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1fb      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xc0>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff f96e 	bl	80020d8 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e00:	f7ff f96a 	bl	80020d8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1e7      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0xe8>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d063      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3a:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d11c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x152>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e1bb      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4952      	ldr	r1, [pc, #328]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	e03a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCC_OscConfig+0x2b0>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7ff f923 	bl	80020d8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff f91f 	bl	80020d8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e19c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4940      	ldr	r1, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x2b0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7ff f902 	bl	80020d8 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7ff f8fe 	bl	80020d8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e17b      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d030      	beq.n	8002f64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff f8e2 	bl	80020d8 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f18:	f7ff f8de 	bl	80020d8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e15b      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x200>
 8002f36:	e015      	b.n	8002f64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x2b4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7ff f8cb 	bl	80020d8 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f46:	f7ff f8c7 	bl	80020d8 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e144      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a0 	beq.w	80030b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d121      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_RCC_OscConfig+0x2b8>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fba:	f7ff f88d 	bl	80020d8 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	e011      	b.n	8002fe6 <HAL_RCC_OscConfig+0x2ce>
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	42470000 	.word	0x42470000
 8002fcc:	42470e80 	.word	0x42470e80
 8002fd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd4:	f7ff f880 	bl	80020d8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0fd      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b81      	ldr	r3, [pc, #516]	; (80031ec <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x2f0>
 8002ffa:	4b7d      	ldr	r3, [pc, #500]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x32a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x312>
 8003010:	4b77      	ldr	r3, [pc, #476]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a76      	ldr	r2, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	4b74      	ldr	r3, [pc, #464]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a73      	ldr	r2, [pc, #460]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x32a>
 800302a:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a70      	ldr	r2, [pc, #448]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	4b6e      	ldr	r3, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	4a6d      	ldr	r2, [pc, #436]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304a:	f7ff f845 	bl	80020d8 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7ff f841 	bl	80020d8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0bc      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ee      	beq.n	8003052 <HAL_RCC_OscConfig+0x33a>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7ff f82f 	bl	80020d8 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7ff f82b 	bl	80020d8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0a6      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	4b56      	ldr	r3, [pc, #344]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b52      	ldr	r3, [pc, #328]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a51      	ldr	r2, [pc, #324]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8092 	beq.w	80031e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d05c      	beq.n	8003182 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d141      	bne.n	8003154 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <HAL_RCC_OscConfig+0x4dc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe ffff 	bl	80020d8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe fffb 	bl	80020d8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e078      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	019b      	lsls	r3, r3, #6
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	3b01      	subs	r3, #1
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	4933      	ldr	r1, [pc, #204]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003126:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_RCC_OscConfig+0x4dc>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe ffd4 	bl	80020d8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe ffd0 	bl	80020d8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e04d      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x41c>
 8003152:	e045      	b.n	80031e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x4dc>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fe ffbd 	bl	80020d8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe ffb9 	bl	80020d8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e036      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x44a>
 8003180:	e02e      	b.n	80031e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e029      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_RCC_OscConfig+0x4d8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11c      	bne.n	80031dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b6:	4013      	ands	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10d      	bne.n	80031dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40007000 	.word	0x40007000
 80031f0:	40023800 	.word	0x40023800
 80031f4:	42470060 	.word	0x42470060

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fef6 	bl	80020d8 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fef2 	bl	80020d8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4601      	mov	r1, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	fa21 f303 	lsr.w	r3, r1, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fe56 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08007870 	.word	0x08007870
 80033bc:	200000a0 	.word	0x200000a0
 80033c0:	200000a4 	.word	0x200000a4

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	2300      	movs	r3, #0
 80033d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d007      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x32>
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d008      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x38>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 80b4 	bne.w	8003558 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4b5e      	ldr	r3, [pc, #376]	; (800356c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033f2:	60bb      	str	r3, [r7, #8]
       break;
 80033f4:	e0b3      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f6:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80033f8:	60bb      	str	r3, [r7, #8]
      break;
 80033fa:	e0b0      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4b58      	ldr	r3, [pc, #352]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04a      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4b55      	ldr	r3, [pc, #340]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	ea03 0501 	and.w	r5, r3, r1
 8003428:	ea04 0602 	and.w	r6, r4, r2
 800342c:	4629      	mov	r1, r5
 800342e:	4632      	mov	r2, r6
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f04f 0400 	mov.w	r4, #0
 8003438:	0154      	lsls	r4, r2, #5
 800343a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800343e:	014b      	lsls	r3, r1, #5
 8003440:	4619      	mov	r1, r3
 8003442:	4622      	mov	r2, r4
 8003444:	1b49      	subs	r1, r1, r5
 8003446:	eb62 0206 	sbc.w	r2, r2, r6
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0194      	lsls	r4, r2, #6
 8003454:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	eb64 0402 	sbc.w	r4, r4, r2
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	460b      	mov	r3, r1
 8003472:	4614      	mov	r4, r2
 8003474:	195b      	adds	r3, r3, r5
 8003476:	eb44 0406 	adc.w	r4, r4, r6
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	0262      	lsls	r2, r4, #9
 8003484:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003488:	0259      	lsls	r1, r3, #9
 800348a:	460b      	mov	r3, r1
 800348c:	4614      	mov	r4, r2
 800348e:	4618      	mov	r0, r3
 8003490:	4621      	mov	r1, r4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f04f 0400 	mov.w	r4, #0
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	f7fc fef0 	bl	8000280 <__aeabi_uldivmod>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e049      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a8:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	ea03 0501 	and.w	r5, r3, r1
 80034be:	ea04 0602 	and.w	r6, r4, r2
 80034c2:	4629      	mov	r1, r5
 80034c4:	4632      	mov	r2, r6
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f04f 0400 	mov.w	r4, #0
 80034ce:	0154      	lsls	r4, r2, #5
 80034d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034d4:	014b      	lsls	r3, r1, #5
 80034d6:	4619      	mov	r1, r3
 80034d8:	4622      	mov	r2, r4
 80034da:	1b49      	subs	r1, r1, r5
 80034dc:	eb62 0206 	sbc.w	r2, r2, r6
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	0194      	lsls	r4, r2, #6
 80034ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	1a5b      	subs	r3, r3, r1
 80034f2:	eb64 0402 	sbc.w	r4, r4, r2
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	460b      	mov	r3, r1
 8003508:	4614      	mov	r4, r2
 800350a:	195b      	adds	r3, r3, r5
 800350c:	eb44 0406 	adc.w	r4, r4, r6
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	02a2      	lsls	r2, r4, #10
 800351a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800351e:	0299      	lsls	r1, r3, #10
 8003520:	460b      	mov	r3, r1
 8003522:	4614      	mov	r4, r2
 8003524:	4618      	mov	r0, r3
 8003526:	4621      	mov	r1, r4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	f7fc fea5 	bl	8000280 <__aeabi_uldivmod>
 8003536:	4603      	mov	r3, r0
 8003538:	460c      	mov	r4, r1
 800353a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	3301      	adds	r3, #1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	60bb      	str	r3, [r7, #8]
      break;
 8003556:	e002      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800355a:	60bb      	str	r3, [r7, #8]
      break;
 800355c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355e:	68bb      	ldr	r3, [r7, #8]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	00f42400 	.word	0x00f42400
 8003570:	007a1200 	.word	0x007a1200

08003574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e056      	b.n	8003634 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fc2b 	bl	8001dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	ea42 0103 	orr.w	r1, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	f003 0104 	and.w	r1, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003622:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_SPI_Transmit+0x22>
 800365a:	2302      	movs	r3, #2
 800365c:	e11e      	b.n	800389c <HAL_SPI_Transmit+0x260>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003666:	f7fe fd37 	bl	80020d8 <HAL_GetTick>
 800366a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003680:	e103      	b.n	800388a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x52>
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003692:	e0fa      	b.n	800388a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2203      	movs	r2, #3
 8003698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036da:	d107      	bne.n	80036ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d007      	beq.n	800370a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003712:	d14b      	bne.n	80037ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0xe6>
 800371c:	8afb      	ldrh	r3, [r7, #22]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d13e      	bne.n	80037a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	881a      	ldrh	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003746:	e02b      	b.n	80037a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d112      	bne.n	800377c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	86da      	strh	r2, [r3, #54]	; 0x36
 800377a:	e011      	b.n	80037a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377c:	f7fe fcac 	bl	80020d8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d803      	bhi.n	8003794 <HAL_SPI_Transmit+0x158>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x15e>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800379e:	e074      	b.n	800388a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ce      	bne.n	8003748 <HAL_SPI_Transmit+0x10c>
 80037aa:	e04c      	b.n	8003846 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Transmit+0x17e>
 80037b4:	8afb      	ldrh	r3, [r7, #22]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d140      	bne.n	800383c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037e0:	e02c      	b.n	800383c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d113      	bne.n	8003818 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	86da      	strh	r2, [r3, #54]	; 0x36
 8003816:	e011      	b.n	800383c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003818:	f7fe fc5e 	bl	80020d8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d803      	bhi.n	8003830 <HAL_SPI_Transmit+0x1f4>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d102      	bne.n	8003836 <HAL_SPI_Transmit+0x1fa>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	77fb      	strb	r3, [r7, #31]
          goto error;
 800383a:	e026      	b.n	800388a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1cd      	bne.n	80037e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fa44 	bl	8003cd8 <SPI_EndRxTxTransaction>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e000      	b.n	800388a <HAL_SPI_Transmit+0x24e>
  }

error:
 8003888:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800389a:	7ffb      	ldrb	r3, [r7, #31]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3720      	adds	r7, #32
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038b2:	2301      	movs	r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x26>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e18a      	b.n	8003be0 <HAL_SPI_TransmitReceive+0x33c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d2:	f7fe fc01 	bl	80020d8 <HAL_GetTick>
 80038d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038e8:	887b      	ldrh	r3, [r7, #2]
 80038ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d00f      	beq.n	8003914 <HAL_SPI_TransmitReceive+0x70>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fa:	d107      	bne.n	800390c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <HAL_SPI_TransmitReceive+0x68>
 8003904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003908:	2b04      	cmp	r3, #4
 800390a:	d003      	beq.n	8003914 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003912:	e15b      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_SPI_TransmitReceive+0x82>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_TransmitReceive+0x82>
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800392c:	e14e      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b04      	cmp	r3, #4
 8003938:	d003      	beq.n	8003942 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2205      	movs	r2, #5
 800393e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	887a      	ldrh	r2, [r7, #2]
 8003952:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	887a      	ldrh	r2, [r7, #2]
 800396a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d007      	beq.n	8003996 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d178      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x10a>
 80039a8:	8b7b      	ldrh	r3, [r7, #26]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d166      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d2:	e053      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d11b      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x176>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d016      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x176>
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d113      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d119      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x1b8>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d014      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a5c:	f7fe fb3c 	bl	80020d8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d807      	bhi.n	8003a7c <HAL_SPI_TransmitReceive+0x1d8>
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a7a:	e0a7      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1a6      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x130>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1a1      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x130>
 8003a90:	e07c      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x1fc>
 8003a9a:	8b7b      	ldrh	r3, [r7, #26]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d16b      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac6:	e057      	b.n	8003b78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d11c      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x26c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_SPI_TransmitReceive+0x26c>
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d114      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d119      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x2ae>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d014      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b52:	f7fe fac1 	bl	80020d8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_TransmitReceive+0x2c6>
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x2cc>
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b76:	e029      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1a2      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x224>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d19d      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f8a1 	bl	8003cd8 <SPI_EndRxTxTransaction>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d006      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ba8:	e010      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	e000      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3730      	adds	r7, #48	; 0x30
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c14:	e04c      	b.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d048      	beq.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fa5b 	bl	80020d8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d902      	bls.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d13d      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4c:	d111      	bne.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	d004      	beq.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c60:	d107      	bne.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d10f      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e00f      	b.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d1a3      	bne.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <SPI_EndRxTxTransaction+0x7c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <SPI_EndRxTxTransaction+0x80>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0d5b      	lsrs	r3, r3, #21
 8003cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d112      	bne.n	8003d2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ff78 	bl	8003c04 <SPI_WaitFlagStateUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e00f      	b.n	8003d4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d0f2      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x52>
 8003d44:	e000      	b.n	8003d48 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d46:	bf00      	nop
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200000a0 	.word	0x200000a0
 8003d58:	165e9f81 	.word	0x165e9f81

08003d5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d72:	f3ef 8305 	mrs	r3, IPSR
 8003d76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d82:	607b      	str	r3, [r7, #4]
  return(result);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <osKernelInitialize+0x3a>
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <osKernelInitialize+0x64>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d103      	bne.n	8003da6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d9e:	f06f 0305 	mvn.w	r3, #5
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	e00c      	b.n	8003dc0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <osKernelInitialize+0x64>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d105      	bne.n	8003dba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <osKernelInitialize+0x64>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e002      	b.n	8003dc0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000134 	.word	0x20000134

08003dd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dda:	f3ef 8305 	mrs	r3, IPSR
 8003dde:	60bb      	str	r3, [r7, #8]
  return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dea:	607b      	str	r3, [r7, #4]
  return(result);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003df2:	f3ef 8311 	mrs	r3, BASEPRI
 8003df6:	603b      	str	r3, [r7, #0]
  return(result);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <osKernelStart+0x3a>
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <osKernelStart+0x68>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d103      	bne.n	8003e0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e06:	f06f 0305 	mvn.w	r3, #5
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e010      	b.n	8003e30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <osKernelStart+0x68>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d109      	bne.n	8003e2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e16:	f7ff ffa1 	bl	8003d5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <osKernelStart+0x68>)
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e20:	f001 fb7c 	bl	800551c <vTaskStartScheduler>
      stat = osOK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e002      	b.n	8003e30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000134 	.word	0x20000134

08003e40 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e46:	f3ef 8305 	mrs	r3, IPSR
 8003e4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e52:	f3ef 8310 	mrs	r3, PRIMASK
 8003e56:	607b      	str	r3, [r7, #4]
  return(result);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e62:	603b      	str	r3, [r7, #0]
  return(result);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <osKernelGetTickCount+0x3a>
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <osKernelGetTickCount+0x4c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d103      	bne.n	8003e7a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8003e72:	f001 fc71 	bl	8005758 <xTaskGetTickCountFromISR>
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	e002      	b.n	8003e80 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8003e7a:	f001 fc5d 	bl	8005738 <xTaskGetTickCount>
 8003e7e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000134 	.word	0x20000134

08003e90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b090      	sub	sp, #64	; 0x40
 8003e94:	af04      	add	r7, sp, #16
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea0:	f3ef 8305 	mrs	r3, IPSR
 8003ea4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ea6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 808f 	bne.w	8003fcc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eae:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eba:	f3ef 8311 	mrs	r3, BASEPRI
 8003ebe:	617b      	str	r3, [r7, #20]
  return(result);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <osThreadNew+0x3e>
 8003ec6:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <osThreadNew+0x148>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d07e      	beq.n	8003fcc <osThreadNew+0x13c>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d07b      	beq.n	8003fcc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003ed8:	2318      	movs	r3, #24
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d045      	beq.n	8003f78 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <osThreadNew+0x6a>
        name = attr->name;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <osThreadNew+0x90>
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	2b38      	cmp	r3, #56	; 0x38
 8003f12:	d805      	bhi.n	8003f20 <osThreadNew+0x90>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <osThreadNew+0x94>
        return (NULL);
 8003f20:	2300      	movs	r3, #0
 8003f22:	e054      	b.n	8003fce <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <osThreadNew+0xca>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b5b      	cmp	r3, #91	; 0x5b
 8003f42:	d90a      	bls.n	8003f5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <osThreadNew+0xca>
        mem = 1;
 8003f54:	2301      	movs	r3, #1
 8003f56:	623b      	str	r3, [r7, #32]
 8003f58:	e010      	b.n	8003f7c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10c      	bne.n	8003f7c <osThreadNew+0xec>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <osThreadNew+0xec>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <osThreadNew+0xec>
          mem = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	e001      	b.n	8003f7c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d110      	bne.n	8003fa4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f8a:	9202      	str	r2, [sp, #8]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f001 f873 	bl	8005084 <xTaskCreateStatic>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e013      	b.n	8003fcc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d110      	bne.n	8003fcc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	f107 0310 	add.w	r3, r7, #16
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f001 f8bb 	bl	8005138 <xTaskCreate>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d001      	beq.n	8003fcc <osThreadNew+0x13c>
          hTask = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fcc:	693b      	ldr	r3, [r7, #16]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3730      	adds	r7, #48	; 0x30
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000134 	.word	0x20000134

08003fdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe4:	f3ef 8305 	mrs	r3, IPSR
 8003fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10f      	bne.n	8004010 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8004000:	60bb      	str	r3, [r7, #8]
  return(result);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <osDelay+0x3c>
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <osDelay+0x58>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d103      	bne.n	8004018 <osDelay+0x3c>
    stat = osErrorISR;
 8004010:	f06f 0305 	mvn.w	r3, #5
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e007      	b.n	8004028 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 fa46 	bl	80054b4 <vTaskDelay>
    }
  }

  return (stat);
 8004028:	697b      	ldr	r3, [r7, #20]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000134 	.word	0x20000134

08004038 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004040:	f3ef 8305 	mrs	r3, IPSR
 8004044:	617b      	str	r3, [r7, #20]
  return(result);
 8004046:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10f      	bne.n	800406c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	613b      	str	r3, [r7, #16]
  return(result);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004058:	f3ef 8311 	mrs	r3, BASEPRI
 800405c:	60fb      	str	r3, [r7, #12]
  return(result);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <osDelayUntil+0x3c>
 8004064:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <osDelayUntil+0x7c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d103      	bne.n	8004074 <osDelayUntil+0x3c>
    stat = osErrorISR;
 800406c:	f06f 0305 	mvn.w	r3, #5
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e019      	b.n	80040a8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8004078:	f001 fb5e 	bl	8005738 <xTaskGetTickCount>
 800407c:	4603      	mov	r3, r0
 800407e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <osDelayUntil+0x6a>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	db06      	blt.n	80040a2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8004094:	f107 0308 	add.w	r3, r7, #8
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f990 	bl	80053c0 <vTaskDelayUntil>
 80040a0:	e002      	b.n	80040a8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80040a2:	f06f 0303 	mvn.w	r3, #3
 80040a6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80040a8:	69fb      	ldr	r3, [r7, #28]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000134 	.word	0x20000134

080040b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c8:	f3ef 8305 	mrs	r3, IPSR
 80040cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80040ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d170      	bne.n	80041b6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d4:	f3ef 8310 	mrs	r3, PRIMASK
 80040d8:	617b      	str	r3, [r7, #20]
  return(result);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040e0:	f3ef 8311 	mrs	r3, BASEPRI
 80040e4:	613b      	str	r3, [r7, #16]
  return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <osMessageQueueNew+0x3c>
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <osMessageQueueNew+0x108>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d060      	beq.n	80041b6 <osMessageQueueNew+0xfe>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d05d      	beq.n	80041b6 <osMessageQueueNew+0xfe>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05a      	beq.n	80041b6 <osMessageQueueNew+0xfe>
    mem = -1;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d029      	beq.n	8004160 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <osMessageQueueNew+0x82>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b4f      	cmp	r3, #79	; 0x4f
 800411a:	d90e      	bls.n	800413a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <osMessageQueueNew+0x82>
        mem = 1;
 8004134:	2301      	movs	r3, #1
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	e014      	b.n	8004164 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <osMessageQueueNew+0xac>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10c      	bne.n	8004164 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <osMessageQueueNew+0xac>
          mem = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	e001      	b.n	8004164 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10c      	bne.n	8004184 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	460b      	mov	r3, r1
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa58 	bl	8004630 <xQueueGenericCreateStatic>
 8004180:	6278      	str	r0, [r7, #36]	; 0x24
 8004182:	e008      	b.n	8004196 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800418a:	2200      	movs	r2, #0
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fac1 	bl	8004716 <xQueueGenericCreate>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <osMessageQueueNew+0xf2>
        name = attr->name;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e001      	b.n	80041ae <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80041ae:	69f9      	ldr	r1, [r7, #28]
 80041b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b2:	f000 ff0b 	bl	8004fcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3728      	adds	r7, #40	; 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000134 	.word	0x20000134

080041c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041dc:	f3ef 8305 	mrs	r3, IPSR
 80041e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041e2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10f      	bne.n	8004208 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f4:	f3ef 8311 	mrs	r3, BASEPRI
 80041f8:	617b      	str	r3, [r7, #20]
  return(result);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02c      	beq.n	800425a <osMessageQueuePut+0x96>
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <osMessageQueuePut+0xe0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d128      	bne.n	800425a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <osMessageQueuePut+0x56>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <osMessageQueuePut+0x56>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800421a:	f06f 0303 	mvn.w	r3, #3
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004220:	e039      	b.n	8004296 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004226:	f107 0210 	add.w	r2, r7, #16
 800422a:	2300      	movs	r3, #0
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	6a38      	ldr	r0, [r7, #32]
 8004230:	f000 fbce 	bl	80049d0 <xQueueGenericSendFromISR>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d003      	beq.n	8004242 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800423a:	f06f 0302 	mvn.w	r3, #2
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004240:	e029      	b.n	8004296 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d026      	beq.n	8004296 <osMessageQueuePut+0xd2>
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <osMessageQueuePut+0xe4>)
 800424a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004258:	e01d      	b.n	8004296 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <osMessageQueuePut+0xa2>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004266:	f06f 0303 	mvn.w	r3, #3
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
 800426c:	e014      	b.n	8004298 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800426e:	2300      	movs	r3, #0
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	6a38      	ldr	r0, [r7, #32]
 8004276:	f000 fab1 	bl	80047dc <xQueueGenericSend>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	d00b      	beq.n	8004298 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004286:	f06f 0301 	mvn.w	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
 800428c:	e004      	b.n	8004298 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800428e:	f06f 0302 	mvn.w	r3, #2
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	e000      	b.n	8004298 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004296:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800429a:	4618      	mov	r0, r3
 800429c:	3728      	adds	r7, #40	; 0x28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000134 	.word	0x20000134
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c2:	f3ef 8305 	mrs	r3, IPSR
 80042c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80042c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ce:	f3ef 8310 	mrs	r3, PRIMASK
 80042d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042da:	f3ef 8311 	mrs	r3, BASEPRI
 80042de:	617b      	str	r3, [r7, #20]
  return(result);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d02c      	beq.n	8004340 <osMessageQueueGet+0x94>
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <osMessageQueueGet+0xdc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d128      	bne.n	8004340 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <osMessageQueueGet+0x54>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <osMessageQueueGet+0x54>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004300:	f06f 0303 	mvn.w	r3, #3
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004306:	e038      	b.n	800437a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	461a      	mov	r2, r3
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	6a38      	ldr	r0, [r7, #32]
 8004316:	f000 fccb 	bl	8004cb0 <xQueueReceiveFromISR>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d003      	beq.n	8004328 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004320:	f06f 0302 	mvn.w	r3, #2
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004326:	e028      	b.n	800437a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d025      	beq.n	800437a <osMessageQueueGet+0xce>
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <osMessageQueueGet+0xe0>)
 8004330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800433e:	e01c      	b.n	800437a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <osMessageQueueGet+0xa0>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800434c:	f06f 0303 	mvn.w	r3, #3
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e013      	b.n	800437c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	6a38      	ldr	r0, [r7, #32]
 800435a:	f000 fbcd 	bl	8004af8 <xQueueReceive>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d00b      	beq.n	800437c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800436a:	f06f 0301 	mvn.w	r3, #1
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
 8004370:	e004      	b.n	800437c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004372:	f06f 0302 	mvn.w	r3, #2
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	e000      	b.n	800437c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800437a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800437e:	4618      	mov	r0, r3
 8004380:	3728      	adds	r7, #40	; 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000134 	.word	0x20000134
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <vApplicationGetIdleTaskMemory+0x2c>)
 80043a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <vApplicationGetIdleTaskMemory+0x30>)
 80043a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	601a      	str	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000138 	.word	0x20000138
 80043c0:	20000194 	.word	0x20000194

080043c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80043d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4a06      	ldr	r2, [pc, #24]	; (80043f4 <vApplicationGetTimerTaskMemory+0x30>)
 80043da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	20000394 	.word	0x20000394
 80043f4:	200003f0 	.word	0x200003f0

080043f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f103 0208 	add.w	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f103 0208 	add.w	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f103 0208 	add.w	r2, r3, #8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	601a      	str	r2, [r3, #0]
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d103      	bne.n	80044ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e00c      	b.n	80044d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3308      	adds	r3, #8
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e002      	b.n	80044c8 <vListInsert+0x2e>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d2f6      	bcs.n	80044c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6892      	ldr	r2, [r2, #8]
 8004522:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6852      	ldr	r2, [r2, #4]
 800452c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d103      	bne.n	8004540 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	1e5a      	subs	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	e7fe      	b.n	8004586 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004588:	f002 f958 	bl	800683c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	441a      	add	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	3b01      	subs	r3, #1
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	441a      	add	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	22ff      	movs	r2, #255	; 0xff
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d114      	bne.n	8004608 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01a      	beq.n	800461c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3310      	adds	r3, #16
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fa28 	bl	8005a40 <xTaskRemoveFromEventList>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d012      	beq.n	800461c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <xQueueGenericReset+0xcc>)
 80045f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	e009      	b.n	800461c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3310      	adds	r3, #16
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fef3 	bl	80043f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff feee 	bl	80043f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800461c:	f002 f93c 	bl	8006898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004620:	2301      	movs	r3, #1
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08e      	sub	sp, #56	; 0x38
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <xQueueGenericCreateStatic+0x28>
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
 8004656:	e7fe      	b.n	8004656 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <xQueueGenericCreateStatic+0x42>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e7fe      	b.n	8004670 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <xQueueGenericCreateStatic+0x4e>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <xQueueGenericCreateStatic+0x52>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <xQueueGenericCreateStatic+0x54>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <xQueueGenericCreateStatic+0x6c>
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	e7fe      	b.n	800469a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <xQueueGenericCreateStatic+0x78>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xQueueGenericCreateStatic+0x7c>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <xQueueGenericCreateStatic+0x7e>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <xQueueGenericCreateStatic+0x96>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046c6:	2350      	movs	r3, #80	; 0x50
 80046c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b50      	cmp	r3, #80	; 0x50
 80046ce:	d009      	beq.n	80046e4 <xQueueGenericCreateStatic+0xb4>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e7fe      	b.n	80046e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f844 	bl	8004794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800470e:	4618      	mov	r0, r3
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004716:	b580      	push	{r7, lr}
 8004718:	b08a      	sub	sp, #40	; 0x28
 800471a:	af02      	add	r7, sp, #8
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	4613      	mov	r3, r2
 8004722:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <xQueueGenericCreate+0x28>
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	e7fe      	b.n	800473c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e004      	b.n	8004754 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3350      	adds	r3, #80	; 0x50
 8004758:	4618      	mov	r0, r3
 800475a:	f002 f989 	bl	8006a70 <pvPortMalloc>
 800475e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	3350      	adds	r3, #80	; 0x50
 800476e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004778:	79fa      	ldrb	r2, [r7, #7]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f805 	bl	8004794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800478a:	69bb      	ldr	r3, [r7, #24]
	}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047c2:	2101      	movs	r1, #1
 80047c4:	69b8      	ldr	r0, [r7, #24]
 80047c6:	f7ff fecb 	bl	8004560 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	; 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ea:	2300      	movs	r3, #0
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <xQueueGenericSend+0x30>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
 800480a:	e7fe      	b.n	800480a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <xQueueGenericSend+0x3e>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <xQueueGenericSend+0x42>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <xQueueGenericSend+0x44>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <xQueueGenericSend+0x5c>
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	e7fe      	b.n	8004836 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x6a>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <xQueueGenericSend+0x6e>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueGenericSend+0x70>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <xQueueGenericSend+0x88>
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	e7fe      	b.n	8004862 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004864:	f001 faa2 	bl	8005dac <xTaskGetSchedulerState>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <xQueueGenericSend+0x98>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <xQueueGenericSend+0x9c>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <xQueueGenericSend+0x9e>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <xQueueGenericSend+0xb6>
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e7fe      	b.n	8004890 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004892:	f001 ffd3 	bl	800683c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <xQueueGenericSend+0xcc>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d129      	bne.n	80048fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ae:	f000 fa7c 	bl	8004daa <prvCopyDataToQueue>
 80048b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d010      	beq.n	80048de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 f8bd 	bl	8005a40 <xTaskRemoveFromEventList>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048cc:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <xQueueGenericSend+0x1f0>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	e00a      	b.n	80048f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048e4:	4b39      	ldr	r3, [pc, #228]	; (80049cc <xQueueGenericSend+0x1f0>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048f4:	f001 ffd0 	bl	8006898 <vPortExitCritical>
				return pdPASS;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e063      	b.n	80049c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004902:	f001 ffc9 	bl	8006898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004906:	2300      	movs	r3, #0
 8004908:	e05c      	b.n	80049c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	4618      	mov	r0, r3
 8004916:	f001 f8f5 	bl	8005b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800491e:	f001 ffbb 	bl	8006898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004922:	f000 fe5f 	bl	80055e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004926:	f001 ff89 	bl	800683c <vPortEnterCritical>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004930:	b25b      	sxtb	r3, r3
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d103      	bne.n	8004940 <xQueueGenericSend+0x164>
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004946:	b25b      	sxtb	r3, r3
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d103      	bne.n	8004956 <xQueueGenericSend+0x17a>
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004956:	f001 ff9f 	bl	8006898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800495a:	1d3a      	adds	r2, r7, #4
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f8e4 	bl	8005b30 <xTaskCheckForTimeOut>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d124      	bne.n	80049b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800496e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004970:	f000 fb13 	bl	8004f9a <prvIsQueueFull>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d018      	beq.n	80049ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	3310      	adds	r3, #16
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f001 f80e 	bl	80059a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800498a:	f000 fa9e 	bl	8004eca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800498e:	f000 fe37 	bl	8005600 <xTaskResumeAll>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f af7c 	bne.w	8004892 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <xQueueGenericSend+0x1f0>)
 800499c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	e772      	b.n	8004892 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ae:	f000 fa8c 	bl	8004eca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049b2:	f000 fe25 	bl	8005600 <xTaskResumeAll>
 80049b6:	e76c      	b.n	8004892 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ba:	f000 fa86 	bl	8004eca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049be:	f000 fe1f 	bl	8005600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3738      	adds	r7, #56	; 0x38
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08e      	sub	sp, #56	; 0x38
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <xQueueGenericSendFromISR+0x2c>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	e7fe      	b.n	80049fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSendFromISR+0x3a>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <xQueueGenericSendFromISR+0x3e>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <xQueueGenericSendFromISR+0x40>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <xQueueGenericSendFromISR+0x58>
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	623b      	str	r3, [r7, #32]
 8004a26:	e7fe      	b.n	8004a26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSendFromISR+0x66>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <xQueueGenericSendFromISR+0x6a>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericSendFromISR+0x6c>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <xQueueGenericSendFromISR+0x84>
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e7fe      	b.n	8004a52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a54:	f001 ffce 	bl	80069f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a58:	f3ef 8211 	mrs	r2, BASEPRI
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61ba      	str	r2, [r7, #24]
 8004a6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <xQueueGenericSendFromISR+0xb6>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d12c      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a96:	f000 f988 	bl	8004daa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d112      	bne.n	8004aca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d016      	beq.n	8004ada <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	3324      	adds	r3, #36	; 0x24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ffc5 	bl	8005a40 <xTaskRemoveFromEventList>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00e      	beq.n	8004ada <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e007      	b.n	8004ada <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ace:	3301      	adds	r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	b25a      	sxtb	r2, r3
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ada:	2301      	movs	r3, #1
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ade:	e001      	b.n	8004ae4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3738      	adds	r7, #56	; 0x38
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08c      	sub	sp, #48	; 0x30
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <xQueueReceive+0x2e>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	e7fe      	b.n	8004b24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <xQueueReceive+0x3c>
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueReceive+0x40>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueReceive+0x42>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <xQueueReceive+0x5a>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e7fe      	b.n	8004b50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b52:	f001 f92b 	bl	8005dac <xTaskGetSchedulerState>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <xQueueReceive+0x6a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <xQueueReceive+0x6e>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueReceive+0x70>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <xQueueReceive+0x88>
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e7fe      	b.n	8004b7e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b80:	f001 fe5c 	bl	800683c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01f      	beq.n	8004bd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b94:	f000 f973 	bl	8004e7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1e5a      	subs	r2, r3, #1
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00f      	beq.n	8004bc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	3310      	adds	r3, #16
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 ff47 	bl	8005a40 <xTaskRemoveFromEventList>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bb8:	4b3c      	ldr	r3, [pc, #240]	; (8004cac <xQueueReceive+0x1b4>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bc8:	f001 fe66 	bl	8006898 <vPortExitCritical>
				return pdPASS;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e069      	b.n	8004ca4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd6:	f001 fe5f 	bl	8006898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e062      	b.n	8004ca4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 ff8b 	bl	8005b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bf2:	f001 fe51 	bl	8006898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bf6:	f000 fcf5 	bl	80055e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bfa:	f001 fe1f 	bl	800683c <vPortEnterCritical>
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d103      	bne.n	8004c14 <xQueueReceive+0x11c>
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d103      	bne.n	8004c2a <xQueueReceive+0x132>
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c2a:	f001 fe35 	bl	8006898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c2e:	1d3a      	adds	r2, r7, #4
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 ff7a 	bl	8005b30 <xTaskCheckForTimeOut>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d123      	bne.n	8004c8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c44:	f000 f993 	bl	8004f6e <prvIsQueueEmpty>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d017      	beq.n	8004c7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	3324      	adds	r3, #36	; 0x24
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fea4 	bl	80059a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5e:	f000 f934 	bl	8004eca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c62:	f000 fccd 	bl	8005600 <xTaskResumeAll>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d189      	bne.n	8004b80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <xQueueReceive+0x1b4>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	e780      	b.n	8004b80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c80:	f000 f923 	bl	8004eca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c84:	f000 fcbc 	bl	8005600 <xTaskResumeAll>
 8004c88:	e77a      	b.n	8004b80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8c:	f000 f91d 	bl	8004eca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c90:	f000 fcb6 	bl	8005600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c96:	f000 f96a 	bl	8004f6e <prvIsQueueEmpty>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f43f af6f 	beq.w	8004b80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ca2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3730      	adds	r7, #48	; 0x30
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <xQueueReceiveFromISR+0x2a>
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	e7fe      	b.n	8004cd8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <xQueueReceiveFromISR+0x38>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <xQueueReceiveFromISR+0x3c>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <xQueueReceiveFromISR+0x3e>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <xQueueReceiveFromISR+0x56>
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e7fe      	b.n	8004d04 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d06:	f001 fe75 	bl	80069f4 <vPortValidateInterruptPriority>
	__asm volatile
 8004d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61ba      	str	r2, [r7, #24]
 8004d20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02f      	beq.n	8004d92 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d40:	f000 f89d 	bl	8004e7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d112      	bne.n	8004d7c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	3310      	adds	r3, #16
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fe6c 	bl	8005a40 <xTaskRemoveFromEventList>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e007      	b.n	8004d8c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d80:	3301      	adds	r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	b25a      	sxtb	r2, r3
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d90:	e001      	b.n	8004d96 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3738      	adds	r7, #56	; 0x38
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d14d      	bne.n	8004e6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 f807 	bl	8005de8 <xTaskPriorityDisinherit>
 8004dda:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	e043      	b.n	8004e6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d119      	bne.n	8004e1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6858      	ldr	r0, [r3, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	461a      	mov	r2, r3
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	f002 f83b 	bl	8006e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d32b      	bcc.n	8004e6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	e026      	b.n	8004e6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68d8      	ldr	r0, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	461a      	mov	r2, r3
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	f002 f821 	bl	8006e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	425b      	negs	r3, r3
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d207      	bcs.n	8004e5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	425b      	negs	r3, r3
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d105      	bne.n	8004e6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e74:	697b      	ldr	r3, [r7, #20]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d018      	beq.n	8004ec2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	441a      	add	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d303      	bcc.n	8004eb2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68d9      	ldr	r1, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6838      	ldr	r0, [r7, #0]
 8004ebe:	f001 ffd7 	bl	8006e70 <memcpy>
	}
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ed2:	f001 fcb3 	bl	800683c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004edc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ede:	e011      	b.n	8004f04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3324      	adds	r3, #36	; 0x24
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fda7 	bl	8005a40 <xTaskRemoveFromEventList>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ef8:	f000 fe7a 	bl	8005bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dce9      	bgt.n	8004ee0 <prvUnlockQueue+0x16>
 8004f0c:	e000      	b.n	8004f10 <prvUnlockQueue+0x46>
					break;
 8004f0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	22ff      	movs	r2, #255	; 0xff
 8004f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f18:	f001 fcbe 	bl	8006898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f1c:	f001 fc8e 	bl	800683c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f28:	e011      	b.n	8004f4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3310      	adds	r3, #16
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fd82 	bl	8005a40 <xTaskRemoveFromEventList>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f42:	f000 fe55 	bl	8005bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f46:	7bbb      	ldrb	r3, [r7, #14]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dce9      	bgt.n	8004f2a <prvUnlockQueue+0x60>
 8004f56:	e000      	b.n	8004f5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f62:	f001 fc99 	bl	8006898 <vPortExitCritical>
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f76:	f001 fc61 	bl	800683c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f82:	2301      	movs	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e001      	b.n	8004f8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f8c:	f001 fc84 	bl	8006898 <vPortExitCritical>

	return xReturn;
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa2:	f001 fc4b 	bl	800683c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d102      	bne.n	8004fb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e001      	b.n	8004fbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fbc:	f001 fc6c 	bl	8006898 <vPortExitCritical>

	return xReturn;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e014      	b.n	8005006 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fdc:	4a0e      	ldr	r2, [pc, #56]	; (8005018 <vQueueAddToRegistry+0x4c>)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fe8:	490b      	ldr	r1, [pc, #44]	; (8005018 <vQueueAddToRegistry+0x4c>)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <vQueueAddToRegistry+0x4c>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ffe:	e005      	b.n	800500c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b07      	cmp	r3, #7
 800500a:	d9e7      	bls.n	8004fdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	20004cbc 	.word	0x20004cbc

0800501c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800502c:	f001 fc06 	bl	800683c <vPortEnterCritical>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <vQueueWaitForMessageRestricted+0x2a>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800504c:	b25b      	sxtb	r3, r3
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d103      	bne.n	800505c <vQueueWaitForMessageRestricted+0x40>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800505c:	f001 fc1c 	bl	8006898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fcbb 	bl	80059ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f7ff ff27 	bl	8004eca <prvUnlockQueue>
	}
 800507c:	bf00      	nop
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af04      	add	r7, sp, #16
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <xTaskCreateStatic+0x28>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	e7fe      	b.n	80050aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <xTaskCreateStatic+0x42>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e7fe      	b.n	80050c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050c6:	235c      	movs	r3, #92	; 0x5c
 80050c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b5c      	cmp	r3, #92	; 0x5c
 80050ce:	d009      	beq.n	80050e4 <xTaskCreateStatic+0x60>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e7fe      	b.n	80050e2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01e      	beq.n	800512a <xTaskCreateStatic+0xa6>
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01b      	beq.n	800512a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005104:	2300      	movs	r3, #0
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f850 	bl	80051c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005124:	f000 f8dc 	bl	80052e0 <prvAddNewTaskToReadyList>
 8005128:	e001      	b.n	800512e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800512e:	697b      	ldr	r3, [r7, #20]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	; 0x30
 800513c:	af04      	add	r7, sp, #16
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fc8f 	bl	8006a70 <pvPortMalloc>
 8005152:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800515a:	205c      	movs	r0, #92	; 0x5c
 800515c:	f001 fc88 	bl	8006a70 <pvPortMalloc>
 8005160:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
 800516e:	e005      	b.n	800517c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005170:	6978      	ldr	r0, [r7, #20]
 8005172:	f001 fd3f 	bl	8006bf4 <vPortFree>
 8005176:	e001      	b.n	800517c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d017      	beq.n	80051b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	2300      	movs	r3, #0
 800518e:	9303      	str	r3, [sp, #12]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	9302      	str	r3, [sp, #8]
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f80e 	bl	80051c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051a6:	69f8      	ldr	r0, [r7, #28]
 80051a8:	f000 f89a 	bl	80052e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e002      	b.n	80051b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051b8:	69bb      	ldr	r3, [r7, #24]
	}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b088      	sub	sp, #32
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	461a      	mov	r2, r3
 80051da:	21a5      	movs	r1, #165	; 0xa5
 80051dc:	f001 fe53 	bl	8006e86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051ea:	3b01      	subs	r3, #1
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f023 0307 	bic.w	r3, r3, #7
 80051f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <prvInitialiseNewTask+0x56>
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e7fe      	b.n	8005216 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01f      	beq.n	800525e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	e012      	b.n	800524a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	7819      	ldrb	r1, [r3, #0]
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	3334      	adds	r3, #52	; 0x34
 8005234:	460a      	mov	r2, r1
 8005236:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d006      	beq.n	8005252 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b0f      	cmp	r3, #15
 800524e:	d9e9      	bls.n	8005224 <prvInitialiseNewTask+0x62>
 8005250:	e000      	b.n	8005254 <prvInitialiseNewTask+0x92>
			{
				break;
 8005252:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525c:	e003      	b.n	8005266 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	2b37      	cmp	r3, #55	; 0x37
 800526a:	d901      	bls.n	8005270 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800526c:	2337      	movs	r3, #55	; 0x37
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2200      	movs	r2, #0
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff f8d6 	bl	8004438 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	3318      	adds	r3, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff f8d1 	bl	8004438 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	2200      	movs	r2, #0
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	69b8      	ldr	r0, [r7, #24]
 80052c0:	f001 f998 	bl	80065f4 <pxPortInitialiseStack>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d6:	bf00      	nop
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052e8:	f001 faa8 	bl	800683c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052ec:	4b2d      	ldr	r3, [pc, #180]	; (80053a4 <prvAddNewTaskToReadyList+0xc4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <prvAddNewTaskToReadyList+0xc4>)
 80052f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052f6:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <prvAddNewTaskToReadyList+0xc8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052fe:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <prvAddNewTaskToReadyList+0xc8>)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <prvAddNewTaskToReadyList+0xc4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d110      	bne.n	800532e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800530c:	f000 fc94 	bl	8005c38 <prvInitialiseTaskLists>
 8005310:	e00d      	b.n	800532e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005312:	4b26      	ldr	r3, [pc, #152]	; (80053ac <prvAddNewTaskToReadyList+0xcc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800531a:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <prvAddNewTaskToReadyList+0xc8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d802      	bhi.n	800532e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005328:	4a1f      	ldr	r2, [pc, #124]	; (80053a8 <prvAddNewTaskToReadyList+0xc8>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <prvAddNewTaskToReadyList+0xd0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3301      	adds	r3, #1
 8005334:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <prvAddNewTaskToReadyList+0xd0>)
 8005336:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005338:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <prvAddNewTaskToReadyList+0xd0>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <prvAddNewTaskToReadyList+0xd4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <prvAddNewTaskToReadyList+0x74>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <prvAddNewTaskToReadyList+0xd4>)
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <prvAddNewTaskToReadyList+0xd8>)
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f7ff f871 	bl	8004452 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005370:	f001 fa92 	bl	8006898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <prvAddNewTaskToReadyList+0xcc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00e      	beq.n	800539a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <prvAddNewTaskToReadyList+0xc8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	429a      	cmp	r2, r3
 8005388:	d207      	bcs.n	800539a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <prvAddNewTaskToReadyList+0xdc>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000cc4 	.word	0x20000cc4
 80053a8:	200007f0 	.word	0x200007f0
 80053ac:	20000cd0 	.word	0x20000cd0
 80053b0:	20000ce0 	.word	0x20000ce0
 80053b4:	20000ccc 	.word	0x20000ccc
 80053b8:	200007f4 	.word	0x200007f4
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <vTaskDelayUntil+0x28>
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e7fe      	b.n	80053e6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <vTaskDelayUntil+0x42>
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e7fe      	b.n	8005400 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <vTaskDelayUntil+0xe8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <vTaskDelayUntil+0x5e>
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e7fe      	b.n	800541c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800541e:	f000 f8e1 	bl	80055e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <vTaskDelayUntil+0xec>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	429a      	cmp	r2, r3
 800543a:	d20b      	bcs.n	8005454 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	429a      	cmp	r2, r3
 8005444:	d211      	bcs.n	800546a <vTaskDelayUntil+0xaa>
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	429a      	cmp	r2, r3
 800544c:	d90d      	bls.n	800546a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800544e:	2301      	movs	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e00a      	b.n	800546a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	429a      	cmp	r2, r3
 800545c:	d303      	bcc.n	8005466 <vTaskDelayUntil+0xa6>
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	429a      	cmp	r2, r3
 8005464:	d901      	bls.n	800546a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005466:	2301      	movs	r3, #1
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fd1e 	bl	8005ec0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005484:	f000 f8bc 	bl	8005600 <xTaskResumeAll>
 8005488:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d107      	bne.n	80054a0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <vTaskDelayUntil+0xf0>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054a0:	bf00      	nop
 80054a2:	3728      	adds	r7, #40	; 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000cec 	.word	0x20000cec
 80054ac:	20000cc8 	.word	0x20000cc8
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054c6:	4b13      	ldr	r3, [pc, #76]	; (8005514 <vTaskDelay+0x60>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <vTaskDelay+0x2e>
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	e7fe      	b.n	80054e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80054e2:	f000 f87f 	bl	80055e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054e6:	2100      	movs	r1, #0
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fce9 	bl	8005ec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054ee:	f000 f887 	bl	8005600 <xTaskResumeAll>
 80054f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <vTaskDelay+0x64>)
 80054fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000cec 	.word	0x20000cec
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800552a:	463a      	mov	r2, r7
 800552c:	1d39      	adds	r1, r7, #4
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe ff2c 	bl	8004390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	9202      	str	r2, [sp, #8]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	460a      	mov	r2, r1
 800554a:	4920      	ldr	r1, [pc, #128]	; (80055cc <vTaskStartScheduler+0xb0>)
 800554c:	4820      	ldr	r0, [pc, #128]	; (80055d0 <vTaskStartScheduler+0xb4>)
 800554e:	f7ff fd99 	bl	8005084 <xTaskCreateStatic>
 8005552:	4602      	mov	r2, r0
 8005554:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <vTaskStartScheduler+0xb8>)
 8005556:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <vTaskStartScheduler+0xb8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e001      	b.n	800556a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d102      	bne.n	8005576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005570:	f000 fcfa 	bl	8005f68 <xTimerCreateTimerTask>
 8005574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d115      	bne.n	80055a8 <vTaskStartScheduler+0x8c>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <vTaskStartScheduler+0xbc>)
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <vTaskStartScheduler+0xc0>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <vTaskStartScheduler+0xc4>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055a2:	f001 f8ad 	bl	8006700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055a6:	e00d      	b.n	80055c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d109      	bne.n	80055c4 <vTaskStartScheduler+0xa8>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e7fe      	b.n	80055c2 <vTaskStartScheduler+0xa6>
}
 80055c4:	bf00      	nop
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	08007740 	.word	0x08007740
 80055d0:	08005c09 	.word	0x08005c09
 80055d4:	20000ce8 	.word	0x20000ce8
 80055d8:	20000ce4 	.word	0x20000ce4
 80055dc:	20000cd0 	.word	0x20000cd0
 80055e0:	20000cc8 	.word	0x20000cc8

080055e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <vTaskSuspendAll+0x18>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a03      	ldr	r2, [pc, #12]	; (80055fc <vTaskSuspendAll+0x18>)
 80055f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80055f2:	bf00      	nop
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	20000cec 	.word	0x20000cec

08005600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800560e:	4b41      	ldr	r3, [pc, #260]	; (8005714 <xTaskResumeAll+0x114>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <xTaskResumeAll+0x2a>
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	e7fe      	b.n	8005628 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800562a:	f001 f907 	bl	800683c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800562e:	4b39      	ldr	r3, [pc, #228]	; (8005714 <xTaskResumeAll+0x114>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3b01      	subs	r3, #1
 8005634:	4a37      	ldr	r2, [pc, #220]	; (8005714 <xTaskResumeAll+0x114>)
 8005636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <xTaskResumeAll+0x114>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d162      	bne.n	8005706 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005640:	4b35      	ldr	r3, [pc, #212]	; (8005718 <xTaskResumeAll+0x118>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d05e      	beq.n	8005706 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005648:	e02f      	b.n	80056aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564a:	4b34      	ldr	r3, [pc, #208]	; (800571c <xTaskResumeAll+0x11c>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3318      	adds	r3, #24
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe ff58 	bl	800450c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3304      	adds	r3, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe ff53 	bl	800450c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	4b2d      	ldr	r3, [pc, #180]	; (8005720 <xTaskResumeAll+0x120>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d903      	bls.n	800567a <xTaskResumeAll+0x7a>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <xTaskResumeAll+0x120>)
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4a27      	ldr	r2, [pc, #156]	; (8005724 <xTaskResumeAll+0x124>)
 8005688:	441a      	add	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fe fede 	bl	8004452 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	4b23      	ldr	r3, [pc, #140]	; (8005728 <xTaskResumeAll+0x128>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056a4:	4b21      	ldr	r3, [pc, #132]	; (800572c <xTaskResumeAll+0x12c>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056aa:	4b1c      	ldr	r3, [pc, #112]	; (800571c <xTaskResumeAll+0x11c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1cb      	bne.n	800564a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056b8:	f000 fb58 	bl	8005d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056bc:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <xTaskResumeAll+0x130>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056c8:	f000 f858 	bl	800577c <xTaskIncrementTick>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056d2:	4b16      	ldr	r3, [pc, #88]	; (800572c <xTaskResumeAll+0x12c>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f1      	bne.n	80056c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <xTaskResumeAll+0x130>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <xTaskResumeAll+0x12c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056f6:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <xTaskResumeAll+0x134>)
 80056f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005706:	f001 f8c7 	bl	8006898 <vPortExitCritical>

	return xAlreadyYielded;
 800570a:	68bb      	ldr	r3, [r7, #8]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000cec 	.word	0x20000cec
 8005718:	20000cc4 	.word	0x20000cc4
 800571c:	20000c84 	.word	0x20000c84
 8005720:	20000ccc 	.word	0x20000ccc
 8005724:	200007f4 	.word	0x200007f4
 8005728:	200007f0 	.word	0x200007f0
 800572c:	20000cd8 	.word	0x20000cd8
 8005730:	20000cd4 	.word	0x20000cd4
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <xTaskGetTickCount+0x1c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005744:	687b      	ldr	r3, [r7, #4]
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000cc8 	.word	0x20000cc8

08005758 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800575e:	f001 f949 	bl	80069f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005766:	4b04      	ldr	r3, [pc, #16]	; (8005778 <xTaskGetTickCountFromISR+0x20>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800576c:	683b      	ldr	r3, [r7, #0]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000cc8 	.word	0x20000cc8

0800577c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005786:	4b4e      	ldr	r3, [pc, #312]	; (80058c0 <xTaskIncrementTick+0x144>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 8088 	bne.w	80058a0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005790:	4b4c      	ldr	r3, [pc, #304]	; (80058c4 <xTaskIncrementTick+0x148>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005798:	4a4a      	ldr	r2, [pc, #296]	; (80058c4 <xTaskIncrementTick+0x148>)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d11f      	bne.n	80057e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a4:	4b48      	ldr	r3, [pc, #288]	; (80058c8 <xTaskIncrementTick+0x14c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <xTaskIncrementTick+0x46>
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	e7fe      	b.n	80057c0 <xTaskIncrementTick+0x44>
 80057c2:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <xTaskIncrementTick+0x14c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	4b40      	ldr	r3, [pc, #256]	; (80058cc <xTaskIncrementTick+0x150>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3e      	ldr	r2, [pc, #248]	; (80058c8 <xTaskIncrementTick+0x14c>)
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	4a3e      	ldr	r2, [pc, #248]	; (80058cc <xTaskIncrementTick+0x150>)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <xTaskIncrementTick+0x154>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4a3c      	ldr	r2, [pc, #240]	; (80058d0 <xTaskIncrementTick+0x154>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	f000 fac4 	bl	8005d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <xTaskIncrementTick+0x158>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d349      	bcc.n	8005882 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ee:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <xTaskIncrementTick+0x14c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <xTaskIncrementTick+0x158>)
 80057fa:	f04f 32ff 	mov.w	r2, #4294967295
 80057fe:	601a      	str	r2, [r3, #0]
					break;
 8005800:	e03f      	b.n	8005882 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005802:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <xTaskIncrementTick+0x14c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d203      	bcs.n	8005822 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800581a:	4a2e      	ldr	r2, [pc, #184]	; (80058d4 <xTaskIncrementTick+0x158>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005820:	e02f      	b.n	8005882 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3304      	adds	r3, #4
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fe70 	bl	800450c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe fe67 	bl	800450c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <xTaskIncrementTick+0x15c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d903      	bls.n	8005852 <xTaskIncrementTick+0xd6>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <xTaskIncrementTick+0x15c>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <xTaskIncrementTick+0x160>)
 8005860:	441a      	add	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7fe fdf2 	bl	8004452 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <xTaskIncrementTick+0x164>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	429a      	cmp	r2, r3
 800587a:	d3b8      	bcc.n	80057ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005880:	e7b5      	b.n	80057ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <xTaskIncrementTick+0x164>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	4914      	ldr	r1, [pc, #80]	; (80058dc <xTaskIncrementTick+0x160>)
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d907      	bls.n	80058aa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e004      	b.n	80058aa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058a0:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <xTaskIncrementTick+0x168>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <xTaskIncrementTick+0x168>)
 80058a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <xTaskIncrementTick+0x16c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058b6:	697b      	ldr	r3, [r7, #20]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000cec 	.word	0x20000cec
 80058c4:	20000cc8 	.word	0x20000cc8
 80058c8:	20000c7c 	.word	0x20000c7c
 80058cc:	20000c80 	.word	0x20000c80
 80058d0:	20000cdc 	.word	0x20000cdc
 80058d4:	20000ce4 	.word	0x20000ce4
 80058d8:	20000ccc 	.word	0x20000ccc
 80058dc:	200007f4 	.word	0x200007f4
 80058e0:	200007f0 	.word	0x200007f0
 80058e4:	20000cd4 	.word	0x20000cd4
 80058e8:	20000cd8 	.word	0x20000cd8

080058ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058f2:	4b27      	ldr	r3, [pc, #156]	; (8005990 <vTaskSwitchContext+0xa4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <vTaskSwitchContext+0xa8>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005900:	e040      	b.n	8005984 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <vTaskSwitchContext+0xa8>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005908:	4b23      	ldr	r3, [pc, #140]	; (8005998 <vTaskSwitchContext+0xac>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e00f      	b.n	8005930 <vTaskSwitchContext+0x44>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <vTaskSwitchContext+0x3e>
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	e7fe      	b.n	8005928 <vTaskSwitchContext+0x3c>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3b01      	subs	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	491a      	ldr	r1, [pc, #104]	; (800599c <vTaskSwitchContext+0xb0>)
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0e5      	beq.n	8005910 <vTaskSwitchContext+0x24>
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <vTaskSwitchContext+0xb0>)
 8005950:	4413      	add	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	3308      	adds	r3, #8
 8005966:	429a      	cmp	r2, r3
 8005968:	d104      	bne.n	8005974 <vTaskSwitchContext+0x88>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <vTaskSwitchContext+0xb4>)
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4a06      	ldr	r2, [pc, #24]	; (8005998 <vTaskSwitchContext+0xac>)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6013      	str	r3, [r2, #0]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000cec 	.word	0x20000cec
 8005994:	20000cd8 	.word	0x20000cd8
 8005998:	20000ccc 	.word	0x20000ccc
 800599c:	200007f4 	.word	0x200007f4
 80059a0:	200007f0 	.word	0x200007f0

080059a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <vTaskPlaceOnEventList+0x24>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e7fe      	b.n	80059c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <vTaskPlaceOnEventList+0x44>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3318      	adds	r3, #24
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fe fd62 	bl	800449a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d6:	2101      	movs	r1, #1
 80059d8:	6838      	ldr	r0, [r7, #0]
 80059da:	f000 fa71 	bl	8005ec0 <prvAddCurrentTaskToDelayedList>
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200007f0 	.word	0x200007f0

080059ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <vTaskPlaceOnEventListRestricted+0x26>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e7fe      	b.n	8005a10 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <vTaskPlaceOnEventListRestricted+0x50>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3318      	adds	r3, #24
 8005a18:	4619      	mov	r1, r3
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7fe fd19 	bl	8004452 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f000 fa46 	bl	8005ec0 <prvAddCurrentTaskToDelayedList>
	}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200007f0 	.word	0x200007f0

08005a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <xTaskRemoveFromEventList+0x2a>
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e7fe      	b.n	8005a68 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fd4c 	bl	800450c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <xTaskRemoveFromEventList+0xac>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11d      	bne.n	8005ab8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fd43 	bl	800450c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <xTaskRemoveFromEventList+0xb0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d903      	bls.n	8005a9a <xTaskRemoveFromEventList+0x5a>
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <xTaskRemoveFromEventList+0xb0>)
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <xTaskRemoveFromEventList+0xb4>)
 8005aa8:	441a      	add	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f7fe fcce 	bl	8004452 <vListInsertEnd>
 8005ab6:	e005      	b.n	8005ac4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	3318      	adds	r3, #24
 8005abc:	4619      	mov	r1, r3
 8005abe:	480e      	ldr	r0, [pc, #56]	; (8005af8 <xTaskRemoveFromEventList+0xb8>)
 8005ac0:	f7fe fcc7 	bl	8004452 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <xTaskRemoveFromEventList+0xbc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d905      	bls.n	8005ade <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <xTaskRemoveFromEventList+0xc0>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e001      	b.n	8005ae2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ae2:	697b      	ldr	r3, [r7, #20]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20000cec 	.word	0x20000cec
 8005af0:	20000ccc 	.word	0x20000ccc
 8005af4:	200007f4 	.word	0x200007f4
 8005af8:	20000c84 	.word	0x20000c84
 8005afc:	200007f0 	.word	0x200007f0
 8005b00:	20000cd8 	.word	0x20000cd8

08005b04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <vTaskInternalSetTimeOutState+0x24>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <vTaskInternalSetTimeOutState+0x28>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	605a      	str	r2, [r3, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000cdc 	.word	0x20000cdc
 8005b2c:	20000cc8 	.word	0x20000cc8

08005b30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <xTaskCheckForTimeOut+0x24>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	e7fe      	b.n	8005b52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <xTaskCheckForTimeOut+0x3e>
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e7fe      	b.n	8005b6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b6e:	f000 fe65 	bl	800683c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b72:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <xTaskCheckForTimeOut+0xb8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d102      	bne.n	8005b92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	e023      	b.n	8005bda <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <xTaskCheckForTimeOut+0xbc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d007      	beq.n	8005bae <xTaskCheckForTimeOut+0x7e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e015      	b.n	8005bda <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d20b      	bcs.n	8005bd0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff9d 	bl	8005b04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	e004      	b.n	8005bda <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bda:	f000 fe5d 	bl	8006898 <vPortExitCritical>

	return xReturn;
 8005bde:	69fb      	ldr	r3, [r7, #28]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000cc8 	.word	0x20000cc8
 8005bec:	20000cdc 	.word	0x20000cdc

08005bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <vTaskMissedYield+0x14>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	20000cd8 	.word	0x20000cd8

08005c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c10:	f000 f852 	bl	8005cb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <prvIdleTask+0x28>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d9f9      	bls.n	8005c10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <prvIdleTask+0x2c>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c2c:	e7f0      	b.n	8005c10 <prvIdleTask+0x8>
 8005c2e:	bf00      	nop
 8005c30:	200007f4 	.word	0x200007f4
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	e00c      	b.n	8005c5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <prvInitialiseTaskLists+0x60>)
 8005c50:	4413      	add	r3, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fbd0 	bl	80043f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b37      	cmp	r3, #55	; 0x37
 8005c62:	d9ef      	bls.n	8005c44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c64:	480d      	ldr	r0, [pc, #52]	; (8005c9c <prvInitialiseTaskLists+0x64>)
 8005c66:	f7fe fbc7 	bl	80043f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c6a:	480d      	ldr	r0, [pc, #52]	; (8005ca0 <prvInitialiseTaskLists+0x68>)
 8005c6c:	f7fe fbc4 	bl	80043f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c70:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <prvInitialiseTaskLists+0x6c>)
 8005c72:	f7fe fbc1 	bl	80043f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c76:	480c      	ldr	r0, [pc, #48]	; (8005ca8 <prvInitialiseTaskLists+0x70>)
 8005c78:	f7fe fbbe 	bl	80043f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c7c:	480b      	ldr	r0, [pc, #44]	; (8005cac <prvInitialiseTaskLists+0x74>)
 8005c7e:	f7fe fbbb 	bl	80043f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c82:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <prvInitialiseTaskLists+0x78>)
 8005c84:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <prvInitialiseTaskLists+0x64>)
 8005c86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvInitialiseTaskLists+0x7c>)
 8005c8a:	4a05      	ldr	r2, [pc, #20]	; (8005ca0 <prvInitialiseTaskLists+0x68>)
 8005c8c:	601a      	str	r2, [r3, #0]
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	200007f4 	.word	0x200007f4
 8005c9c:	20000c54 	.word	0x20000c54
 8005ca0:	20000c68 	.word	0x20000c68
 8005ca4:	20000c84 	.word	0x20000c84
 8005ca8:	20000c98 	.word	0x20000c98
 8005cac:	20000cb0 	.word	0x20000cb0
 8005cb0:	20000c7c 	.word	0x20000c7c
 8005cb4:	20000c80 	.word	0x20000c80

08005cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cbe:	e019      	b.n	8005cf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cc0:	f000 fdbc 	bl	800683c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <prvCheckTasksWaitingTermination+0x4c>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe fc1b 	bl	800450c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <prvCheckTasksWaitingTermination+0x50>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <prvCheckTasksWaitingTermination+0x50>)
 8005cde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <prvCheckTasksWaitingTermination+0x54>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <prvCheckTasksWaitingTermination+0x54>)
 8005ce8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cea:	f000 fdd5 	bl	8006898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f80e 	bl	8005d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <prvCheckTasksWaitingTermination+0x54>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e1      	bne.n	8005cc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000c98 	.word	0x20000c98
 8005d08:	20000cc4 	.word	0x20000cc4
 8005d0c:	20000cac 	.word	0x20000cac

08005d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d108      	bne.n	8005d34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 ff64 	bl	8006bf4 <vPortFree>
				vPortFree( pxTCB );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 ff61 	bl	8006bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d32:	e017      	b.n	8005d64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d103      	bne.n	8005d46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 ff58 	bl	8006bf4 <vPortFree>
	}
 8005d44:	e00e      	b.n	8005d64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d009      	beq.n	8005d64 <prvDeleteTCB+0x54>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e7fe      	b.n	8005d62 <prvDeleteTCB+0x52>
	}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d84:	e008      	b.n	8005d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	20000c7c 	.word	0x20000c7c
 8005da8:	20000ce4 	.word	0x20000ce4

08005dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <xTaskGetSchedulerState+0x34>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e008      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <xTaskGetSchedulerState+0x38>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e001      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dd2:	687b      	ldr	r3, [r7, #4]
	}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000cd0 	.word	0x20000cd0
 8005de4:	20000cec 	.word	0x20000cec

08005de8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d054      	beq.n	8005ea8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dfe:	4b2d      	ldr	r3, [pc, #180]	; (8005eb4 <xTaskPriorityDisinherit+0xcc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d009      	beq.n	8005e1c <xTaskPriorityDisinherit+0x34>
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e7fe      	b.n	8005e1a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <xTaskPriorityDisinherit+0x50>
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	e7fe      	b.n	8005e36 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	1e5a      	subs	r2, r3, #1
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d02c      	beq.n	8005ea8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d128      	bne.n	8005ea8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fb56 	bl	800450c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <xTaskPriorityDisinherit+0xd0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d903      	bls.n	8005e88 <xTaskPriorityDisinherit+0xa0>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <xTaskPriorityDisinherit+0xd0>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <xTaskPriorityDisinherit+0xd4>)
 8005e96:	441a      	add	r2, r3
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fad7 	bl	8004452 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ea8:	697b      	ldr	r3, [r7, #20]
	}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200007f0 	.word	0x200007f0
 8005eb8:	20000ccc 	.word	0x20000ccc
 8005ebc:	200007f4 	.word	0x200007f4

08005ec0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eca:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed0:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fb18 	bl	800450c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee2:	d10a      	bne.n	8005efa <prvAddCurrentTaskToDelayedList+0x3a>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4819      	ldr	r0, [pc, #100]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ef4:	f7fe faad 	bl	8004452 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ef8:	e026      	b.n	8005f48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4413      	add	r3, r2
 8005f00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d209      	bcs.n	8005f26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f7fe fabb 	bl	800449a <vListInsert>
}
 8005f24:	e010      	b.n	8005f48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7fe fab1 	bl	800449a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d202      	bcs.n	8005f48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f42:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6013      	str	r3, [r2, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000cc8 	.word	0x20000cc8
 8005f54:	200007f0 	.word	0x200007f0
 8005f58:	20000cb0 	.word	0x20000cb0
 8005f5c:	20000c80 	.word	0x20000c80
 8005f60:	20000c7c 	.word	0x20000c7c
 8005f64:	20000ce4 	.word	0x20000ce4

08005f68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f72:	f000 faff 	bl	8006574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f76:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <xTimerCreateTimerTask+0x80>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d021      	beq.n	8005fc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f86:	1d3a      	adds	r2, r7, #4
 8005f88:	f107 0108 	add.w	r1, r7, #8
 8005f8c:	f107 030c 	add.w	r3, r7, #12
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fa17 	bl	80043c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	9202      	str	r2, [sp, #8]
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	4910      	ldr	r1, [pc, #64]	; (8005fec <xTimerCreateTimerTask+0x84>)
 8005faa:	4811      	ldr	r0, [pc, #68]	; (8005ff0 <xTimerCreateTimerTask+0x88>)
 8005fac:	f7ff f86a 	bl	8005084 <xTaskCreateStatic>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <xTimerCreateTimerTask+0x8c>)
 8005fb4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <xTimerCreateTimerTask+0x8c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d109      	bne.n	8005fdc <xTimerCreateTimerTask+0x74>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	e7fe      	b.n	8005fda <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005fdc:	697b      	ldr	r3, [r7, #20]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000d20 	.word	0x20000d20
 8005fec:	08007748 	.word	0x08007748
 8005ff0:	08006129 	.word	0x08006129
 8005ff4:	20000d24 	.word	0x20000d24

08005ff8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <xTimerGenericCommand+0x2c>
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	e7fe      	b.n	8006022 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006024:	4b19      	ldr	r3, [pc, #100]	; (800608c <xTimerGenericCommand+0x94>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d02a      	beq.n	8006082 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b05      	cmp	r3, #5
 800603c:	dc18      	bgt.n	8006070 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800603e:	f7ff feb5 	bl	8005dac <xTaskGetSchedulerState>
 8006042:	4603      	mov	r3, r0
 8006044:	2b02      	cmp	r3, #2
 8006046:	d109      	bne.n	800605c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006048:	4b10      	ldr	r3, [pc, #64]	; (800608c <xTimerGenericCommand+0x94>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	f107 0110 	add.w	r1, r7, #16
 8006050:	2300      	movs	r3, #0
 8006052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006054:	f7fe fbc2 	bl	80047dc <xQueueGenericSend>
 8006058:	6278      	str	r0, [r7, #36]	; 0x24
 800605a:	e012      	b.n	8006082 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <xTimerGenericCommand+0x94>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	f107 0110 	add.w	r1, r7, #16
 8006064:	2300      	movs	r3, #0
 8006066:	2200      	movs	r2, #0
 8006068:	f7fe fbb8 	bl	80047dc <xQueueGenericSend>
 800606c:	6278      	str	r0, [r7, #36]	; 0x24
 800606e:	e008      	b.n	8006082 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <xTimerGenericCommand+0x94>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	f107 0110 	add.w	r1, r7, #16
 8006078:	2300      	movs	r3, #0
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	f7fe fca8 	bl	80049d0 <xQueueGenericSendFromISR>
 8006080:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	; 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000d20 	.word	0x20000d20

08006090 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af02      	add	r7, sp, #8
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800609a:	4b22      	ldr	r3, [pc, #136]	; (8006124 <prvProcessExpiredTimer+0x94>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fa2f 	bl	800450c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d021      	beq.n	8006100 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	18d1      	adds	r1, r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	6978      	ldr	r0, [r7, #20]
 80060ca:	f000 f8d1 	bl	8006270 <prvInsertTimerInActiveList>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01e      	beq.n	8006112 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060d4:	2300      	movs	r3, #0
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	2100      	movs	r1, #0
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	f7ff ff8a 	bl	8005ff8 <xTimerGenericCommand>
 80060e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d112      	bne.n	8006112 <prvProcessExpiredTimer+0x82>
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e7fe      	b.n	80060fe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	b2da      	uxtb	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	6978      	ldr	r0, [r7, #20]
 8006118:	4798      	blx	r3
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000d18 	.word	0x20000d18

08006128 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006130:	f107 0308 	add.w	r3, r7, #8
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f857 	bl	80061e8 <prvGetNextExpireTime>
 800613a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4619      	mov	r1, r3
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f803 	bl	800614c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006146:	f000 f8d5 	bl	80062f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800614a:	e7f1      	b.n	8006130 <prvTimerTask+0x8>

0800614c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006156:	f7ff fa45 	bl	80055e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f866 	bl	8006230 <prvSampleTimeNow>
 8006164:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d130      	bne.n	80061ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <prvProcessTimerOrBlockTask+0x3c>
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	429a      	cmp	r2, r3
 8006178:	d806      	bhi.n	8006188 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800617a:	f7ff fa41 	bl	8005600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ff85 	bl	8006090 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006186:	e024      	b.n	80061d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <prvProcessTimerOrBlockTask+0x90>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <prvProcessTimerOrBlockTask+0x50>
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <prvProcessTimerOrBlockTask+0x52>
 800619c:	2300      	movs	r3, #0
 800619e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <prvProcessTimerOrBlockTask+0x94>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fe ff35 	bl	800501c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061b2:	f7ff fa25 	bl	8005600 <xTaskResumeAll>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvProcessTimerOrBlockTask+0x98>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
}
 80061cc:	e001      	b.n	80061d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061ce:	f7ff fa17 	bl	8005600 <xTaskResumeAll>
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000d1c 	.word	0x20000d1c
 80061e0:	20000d20 	.word	0x20000d20
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061f0:	4b0e      	ldr	r3, [pc, #56]	; (800622c <prvGetNextExpireTime+0x44>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <prvGetNextExpireTime+0x16>
 80061fa:	2201      	movs	r2, #1
 80061fc:	e000      	b.n	8006200 <prvGetNextExpireTime+0x18>
 80061fe:	2200      	movs	r2, #0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <prvGetNextExpireTime+0x44>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e001      	b.n	800621c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000d18 	.word	0x20000d18

08006230 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006238:	f7ff fa7e 	bl	8005738 <xTaskGetTickCount>
 800623c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <prvSampleTimeNow+0x3c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d205      	bcs.n	8006254 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006248:	f000 f930 	bl	80064ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e002      	b.n	800625a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800625a:	4a04      	ldr	r2, [pc, #16]	; (800626c <prvSampleTimeNow+0x3c>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006260:	68fb      	ldr	r3, [r7, #12]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000d28 	.word	0x20000d28

08006270 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d812      	bhi.n	80062bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e01b      	b.n	80062e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062aa:	4b10      	ldr	r3, [pc, #64]	; (80062ec <prvInsertTimerInActiveList+0x7c>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7fe f8f0 	bl	800449a <vListInsert>
 80062ba:	e012      	b.n	80062e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d206      	bcs.n	80062d2 <prvInsertTimerInActiveList+0x62>
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062cc:	2301      	movs	r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	e007      	b.n	80062e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <prvInsertTimerInActiveList+0x80>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7fe f8dc 	bl	800449a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062e2:	697b      	ldr	r3, [r7, #20]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20000d1c 	.word	0x20000d1c
 80062f0:	20000d18 	.word	0x20000d18

080062f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08e      	sub	sp, #56	; 0x38
 80062f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062fa:	e0c6      	b.n	800648a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da17      	bge.n	8006332 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	3304      	adds	r3, #4
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <prvProcessReceivedCommands+0x2e>
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e7fe      	b.n	8006320 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006328:	6850      	ldr	r0, [r2, #4]
 800632a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632c:	6892      	ldr	r2, [r2, #8]
 800632e:	4611      	mov	r1, r2
 8006330:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f2c0 80a7 	blt.w	8006488 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	3304      	adds	r3, #4
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe f8de 	bl	800450c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006350:	463b      	mov	r3, r7
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff ff6c 	bl	8006230 <prvSampleTimeNow>
 8006358:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b09      	cmp	r3, #9
 800635e:	f200 8094 	bhi.w	800648a <prvProcessReceivedCommands+0x196>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <prvProcessReceivedCommands+0x74>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	08006391 	.word	0x08006391
 800636c:	08006391 	.word	0x08006391
 8006370:	08006391 	.word	0x08006391
 8006374:	08006403 	.word	0x08006403
 8006378:	08006417 	.word	0x08006417
 800637c:	0800645f 	.word	0x0800645f
 8006380:	08006391 	.word	0x08006391
 8006384:	08006391 	.word	0x08006391
 8006388:	08006403 	.word	0x08006403
 800638c:	08006417 	.word	0x08006417
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	18d1      	adds	r1, r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b0:	f7ff ff5e 	bl	8006270 <prvInsertTimerInActiveList>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d067      	beq.n	800648a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d05c      	beq.n	800648a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	441a      	add	r2, r3
 80063d8:	2300      	movs	r3, #0
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	2300      	movs	r3, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e2:	f7ff fe09 	bl	8005ff8 <xTimerGenericCommand>
 80063e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d14d      	bne.n	800648a <prvProcessReceivedCommands+0x196>
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	e7fe      	b.n	8006400 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006414:	e039      	b.n	800648a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <prvProcessReceivedCommands+0x156>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e7fe      	b.n	8006448 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	18d1      	adds	r1, r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006458:	f7ff ff0a 	bl	8006270 <prvInsertTimerInActiveList>
					break;
 800645c:	e015      	b.n	800648a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800646c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646e:	f000 fbc1 	bl	8006bf4 <vPortFree>
 8006472:	e00a      	b.n	800648a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006486:	e000      	b.n	800648a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006488:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <prvProcessReceivedCommands+0x1b4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	1d39      	adds	r1, r7, #4
 8006490:	2200      	movs	r2, #0
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fb30 	bl	8004af8 <xQueueReceive>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	f47f af2e 	bne.w	80062fc <prvProcessReceivedCommands+0x8>
	}
}
 80064a0:	bf00      	nop
 80064a2:	3730      	adds	r7, #48	; 0x30
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000d20 	.word	0x20000d20

080064ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064b2:	e047      	b.n	8006544 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b4:	4b2d      	ldr	r3, [pc, #180]	; (800656c <prvSwitchTimerLists+0xc0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064be:	4b2b      	ldr	r3, [pc, #172]	; (800656c <prvSwitchTimerLists+0xc0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f81d 	bl	800450c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02d      	beq.n	8006544 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90e      	bls.n	8006518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006506:	4b19      	ldr	r3, [pc, #100]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fd ffc2 	bl	800449a <vListInsert>
 8006516:	e015      	b.n	8006544 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2100      	movs	r1, #0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fd68 	bl	8005ff8 <xTimerGenericCommand>
 8006528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <prvSwitchTimerLists+0x98>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	e7fe      	b.n	8006542 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006544:	4b09      	ldr	r3, [pc, #36]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1b2      	bne.n	80064b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800654e:	4b07      	ldr	r3, [pc, #28]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvSwitchTimerLists+0xc4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a04      	ldr	r2, [pc, #16]	; (800656c <prvSwitchTimerLists+0xc0>)
 800655a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800655c:	4a04      	ldr	r2, [pc, #16]	; (8006570 <prvSwitchTimerLists+0xc4>)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	6013      	str	r3, [r2, #0]
}
 8006562:	bf00      	nop
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000d18 	.word	0x20000d18
 8006570:	20000d1c 	.word	0x20000d1c

08006574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800657a:	f000 f95f 	bl	800683c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d120      	bne.n	80065c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006586:	4814      	ldr	r0, [pc, #80]	; (80065d8 <prvCheckForValidListAndQueue+0x64>)
 8006588:	f7fd ff36 	bl	80043f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800658c:	4813      	ldr	r0, [pc, #76]	; (80065dc <prvCheckForValidListAndQueue+0x68>)
 800658e:	f7fd ff33 	bl	80043f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <prvCheckForValidListAndQueue+0x6c>)
 8006594:	4a10      	ldr	r2, [pc, #64]	; (80065d8 <prvCheckForValidListAndQueue+0x64>)
 8006596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <prvCheckForValidListAndQueue+0x70>)
 800659a:	4a10      	ldr	r2, [pc, #64]	; (80065dc <prvCheckForValidListAndQueue+0x68>)
 800659c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800659e:	2300      	movs	r3, #0
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <prvCheckForValidListAndQueue+0x74>)
 80065a4:	4a11      	ldr	r2, [pc, #68]	; (80065ec <prvCheckForValidListAndQueue+0x78>)
 80065a6:	2110      	movs	r1, #16
 80065a8:	200a      	movs	r0, #10
 80065aa:	f7fe f841 	bl	8004630 <xQueueGenericCreateStatic>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <prvCheckForValidListAndQueue+0x7c>)
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fd02 	bl	8004fcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065c8:	f000 f966 	bl	8006898 <vPortExitCritical>
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000d20 	.word	0x20000d20
 80065d8:	20000cf0 	.word	0x20000cf0
 80065dc:	20000d04 	.word	0x20000d04
 80065e0:	20000d18 	.word	0x20000d18
 80065e4:	20000d1c 	.word	0x20000d1c
 80065e8:	20000dcc 	.word	0x20000dcc
 80065ec:	20000d2c 	.word	0x20000d2c
 80065f0:	08007750 	.word	0x08007750

080065f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b04      	subs	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b04      	subs	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <pxPortInitialiseStack+0x64>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b14      	subs	r3, #20
 800662e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f06f 0202 	mvn.w	r2, #2
 8006642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b20      	subs	r3, #32
 8006648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	0800665d 	.word	0x0800665d

0800665c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <prvTaskExitError+0x50>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d009      	beq.n	8006684 <prvTaskExitError+0x28>
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e7fe      	b.n	8006682 <prvTaskExitError+0x26>
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006696:	bf00      	nop
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0fc      	beq.n	8006698 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	200000ac 	.word	0x200000ac

080066b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <pxCurrentTCBConst2>)
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	6808      	ldr	r0, [r1, #0]
 80066b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	f380 8809 	msr	PSP, r0
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	4770      	bx	lr
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst2>:
 80066d0:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066d8:	4808      	ldr	r0, [pc, #32]	; (80066fc <prvPortStartFirstTask+0x24>)
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f380 8808 	msr	MSP, r0
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8814 	msr	CONTROL, r0
 80066ea:	b662      	cpsie	i
 80066ec:	b661      	cpsie	f
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	df00      	svc	0
 80066f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066fa:	bf00      	nop
 80066fc:	e000ed08 	.word	0xe000ed08

08006700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006706:	4b44      	ldr	r3, [pc, #272]	; (8006818 <xPortStartScheduler+0x118>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a44      	ldr	r2, [pc, #272]	; (800681c <xPortStartScheduler+0x11c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d109      	bne.n	8006724 <xPortStartScheduler+0x24>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e7fe      	b.n	8006722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006724:	4b3c      	ldr	r3, [pc, #240]	; (8006818 <xPortStartScheduler+0x118>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <xPortStartScheduler+0x120>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d109      	bne.n	8006742 <xPortStartScheduler+0x42>
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e7fe      	b.n	8006740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006742:	4b38      	ldr	r3, [pc, #224]	; (8006824 <xPortStartScheduler+0x124>)
 8006744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	22ff      	movs	r2, #255	; 0xff
 8006752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006764:	b2da      	uxtb	r2, r3
 8006766:	4b30      	ldr	r3, [pc, #192]	; (8006828 <xPortStartScheduler+0x128>)
 8006768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800676a:	4b30      	ldr	r3, [pc, #192]	; (800682c <xPortStartScheduler+0x12c>)
 800676c:	2207      	movs	r2, #7
 800676e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006770:	e009      	b.n	8006786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006772:	4b2e      	ldr	r3, [pc, #184]	; (800682c <xPortStartScheduler+0x12c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3b01      	subs	r3, #1
 8006778:	4a2c      	ldr	r2, [pc, #176]	; (800682c <xPortStartScheduler+0x12c>)
 800677a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d0ef      	beq.n	8006772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006792:	4b26      	ldr	r3, [pc, #152]	; (800682c <xPortStartScheduler+0x12c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f1c3 0307 	rsb	r3, r3, #7
 800679a:	2b04      	cmp	r3, #4
 800679c:	d009      	beq.n	80067b2 <xPortStartScheduler+0xb2>
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	e7fe      	b.n	80067b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067b2:	4b1e      	ldr	r3, [pc, #120]	; (800682c <xPortStartScheduler+0x12c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <xPortStartScheduler+0x12c>)
 80067ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <xPortStartScheduler+0x12c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c4:	4a19      	ldr	r2, [pc, #100]	; (800682c <xPortStartScheduler+0x12c>)
 80067c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <xPortStartScheduler+0x130>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a16      	ldr	r2, [pc, #88]	; (8006830 <xPortStartScheduler+0x130>)
 80067d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067dc:	4b14      	ldr	r3, [pc, #80]	; (8006830 <xPortStartScheduler+0x130>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a13      	ldr	r2, [pc, #76]	; (8006830 <xPortStartScheduler+0x130>)
 80067e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067e8:	f000 f8d6 	bl	8006998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <xPortStartScheduler+0x134>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067f2:	f000 f8f5 	bl	80069e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067f6:	4b10      	ldr	r3, [pc, #64]	; (8006838 <xPortStartScheduler+0x138>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <xPortStartScheduler+0x138>)
 80067fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006802:	f7ff ff69 	bl	80066d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006806:	f7ff f871 	bl	80058ec <vTaskSwitchContext>
	prvTaskExitError();
 800680a:	f7ff ff27 	bl	800665c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed00 	.word	0xe000ed00
 800681c:	410fc271 	.word	0x410fc271
 8006820:	410fc270 	.word	0x410fc270
 8006824:	e000e400 	.word	0xe000e400
 8006828:	20000e1c 	.word	0x20000e1c
 800682c:	20000e20 	.word	0x20000e20
 8006830:	e000ed20 	.word	0xe000ed20
 8006834:	200000ac 	.word	0x200000ac
 8006838:	e000ef34 	.word	0xe000ef34

0800683c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <vPortEnterCritical+0x54>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <vPortEnterCritical+0x54>)
 800685c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <vPortEnterCritical+0x54>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10e      	bne.n	8006884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <vPortEnterCritical+0x58>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <vPortEnterCritical+0x48>
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	603b      	str	r3, [r7, #0]
 8006882:	e7fe      	b.n	8006882 <vPortEnterCritical+0x46>
	}
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200000ac 	.word	0x200000ac
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <vPortExitCritical+0x4c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <vPortExitCritical+0x22>
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	e7fe      	b.n	80068b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80068ba:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <vPortExitCritical+0x4c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3b01      	subs	r3, #1
 80068c0:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <vPortExitCritical+0x4c>)
 80068c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068c4:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <vPortExitCritical+0x4c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <vPortExitCritical+0x3e>
 80068cc:	2300      	movs	r3, #0
 80068ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	200000ac 	.word	0x200000ac
	...

080068f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068f0:	f3ef 8009 	mrs	r0, PSP
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	4b15      	ldr	r3, [pc, #84]	; (8006950 <pxCurrentTCBConst>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	f01e 0f10 	tst.w	lr, #16
 8006900:	bf08      	it	eq
 8006902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690a:	6010      	str	r0, [r2, #0]
 800690c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006914:	f380 8811 	msr	BASEPRI, r0
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f7fe ffe4 	bl	80058ec <vTaskSwitchContext>
 8006924:	f04f 0000 	mov.w	r0, #0
 8006928:	f380 8811 	msr	BASEPRI, r0
 800692c:	bc09      	pop	{r0, r3}
 800692e:	6819      	ldr	r1, [r3, #0]
 8006930:	6808      	ldr	r0, [r1, #0]
 8006932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006936:	f01e 0f10 	tst.w	lr, #16
 800693a:	bf08      	it	eq
 800693c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006940:	f380 8809 	msr	PSP, r0
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	f3af 8000 	nop.w

08006950 <pxCurrentTCBConst>:
 8006950:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006970:	f7fe ff04 	bl	800577c <xTaskIncrementTick>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <xPortSysTickHandler+0x3c>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <vPortSetupTimerInterrupt+0x34>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <vPortSetupTimerInterrupt+0x38>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <vPortSetupTimerInterrupt+0x3c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <vPortSetupTimerInterrupt+0x40>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	099b      	lsrs	r3, r3, #6
 80069b4:	4a09      	ldr	r2, [pc, #36]	; (80069dc <vPortSetupTimerInterrupt+0x44>)
 80069b6:	3b01      	subs	r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ba:	4b04      	ldr	r3, [pc, #16]	; (80069cc <vPortSetupTimerInterrupt+0x34>)
 80069bc:	2207      	movs	r2, #7
 80069be:	601a      	str	r2, [r3, #0]
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	e000e010 	.word	0xe000e010
 80069d0:	e000e018 	.word	0xe000e018
 80069d4:	200000a0 	.word	0x200000a0
 80069d8:	10624dd3 	.word	0x10624dd3
 80069dc:	e000e014 	.word	0xe000e014

080069e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069f0 <vPortEnableVFP+0x10>
 80069e4:	6801      	ldr	r1, [r0, #0]
 80069e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ea:	6001      	str	r1, [r0, #0]
 80069ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069ee:	bf00      	nop
 80069f0:	e000ed88 	.word	0xe000ed88

080069f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069fa:	f3ef 8305 	mrs	r3, IPSR
 80069fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b0f      	cmp	r3, #15
 8006a04:	d913      	bls.n	8006a2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <vPortValidateInterruptPriority+0x6c>)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a10:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <vPortValidateInterruptPriority+0x70>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	7afa      	ldrb	r2, [r7, #11]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d209      	bcs.n	8006a2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	e7fe      	b.n	8006a2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <vPortValidateInterruptPriority+0x74>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <vPortValidateInterruptPriority+0x78>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d909      	bls.n	8006a52 <vPortValidateInterruptPriority+0x5e>
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	e7fe      	b.n	8006a50 <vPortValidateInterruptPriority+0x5c>
	}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	e000e3f0 	.word	0xe000e3f0
 8006a64:	20000e1c 	.word	0x20000e1c
 8006a68:	e000ed0c 	.word	0xe000ed0c
 8006a6c:	20000e20 	.word	0x20000e20

08006a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a7c:	f7fe fdb2 	bl	80055e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a80:	4b57      	ldr	r3, [pc, #348]	; (8006be0 <pvPortMalloc+0x170>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a88:	f000 f90c 	bl	8006ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a8c:	4b55      	ldr	r3, [pc, #340]	; (8006be4 <pvPortMalloc+0x174>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 808c 	bne.w	8006bb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01c      	beq.n	8006ada <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d013      	beq.n	8006ada <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f023 0307 	bic.w	r3, r3, #7
 8006ab8:	3308      	adds	r3, #8
 8006aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <pvPortMalloc+0x6a>
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e7fe      	b.n	8006ad8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d068      	beq.n	8006bb2 <pvPortMalloc+0x142>
 8006ae0:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <pvPortMalloc+0x178>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d863      	bhi.n	8006bb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aea:	4b40      	ldr	r3, [pc, #256]	; (8006bec <pvPortMalloc+0x17c>)
 8006aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006aee:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <pvPortMalloc+0x17c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006af4:	e004      	b.n	8006b00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d903      	bls.n	8006b12 <pvPortMalloc+0xa2>
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f1      	bne.n	8006af6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b12:	4b33      	ldr	r3, [pc, #204]	; (8006be0 <pvPortMalloc+0x170>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d04a      	beq.n	8006bb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	4413      	add	r3, r2
 8006b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1ad2      	subs	r2, r2, r3
 8006b36:	2308      	movs	r3, #8
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d91e      	bls.n	8006b7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4413      	add	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <pvPortMalloc+0xf4>
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	1ad2      	subs	r2, r2, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b76:	69b8      	ldr	r0, [r7, #24]
 8006b78:	f000 f8f6 	bl	8006d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <pvPortMalloc+0x178>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <pvPortMalloc+0x178>)
 8006b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <pvPortMalloc+0x178>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b18      	ldr	r3, [pc, #96]	; (8006bf0 <pvPortMalloc+0x180>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d203      	bcs.n	8006b9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <pvPortMalloc+0x178>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a15      	ldr	r2, [pc, #84]	; (8006bf0 <pvPortMalloc+0x180>)
 8006b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4b10      	ldr	r3, [pc, #64]	; (8006be4 <pvPortMalloc+0x174>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bb2:	f7fe fd25 	bl	8005600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <pvPortMalloc+0x164>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e7fe      	b.n	8006bd2 <pvPortMalloc+0x162>
	return pvReturn;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3728      	adds	r7, #40	; 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20004a2c 	.word	0x20004a2c
 8006be4:	20004a38 	.word	0x20004a38
 8006be8:	20004a30 	.word	0x20004a30
 8006bec:	20004a24 	.word	0x20004a24
 8006bf0:	20004a34 	.word	0x20004a34

08006bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d046      	beq.n	8006c94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c06:	2308      	movs	r3, #8
 8006c08:	425b      	negs	r3, r3
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	4b20      	ldr	r3, [pc, #128]	; (8006c9c <vPortFree+0xa8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <vPortFree+0x42>
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e7fe      	b.n	8006c34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <vPortFree+0x5e>
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	e7fe      	b.n	8006c50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <vPortFree+0xa8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d019      	beq.n	8006c94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d115      	bne.n	8006c94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <vPortFree+0xa8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c78:	f7fe fcb4 	bl	80055e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vPortFree+0xac>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4413      	add	r3, r2
 8006c86:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <vPortFree+0xac>)
 8006c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f000 f86c 	bl	8006d68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c90:	f7fe fcb6 	bl	8005600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c94:	bf00      	nop
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20004a38 	.word	0x20004a38
 8006ca0:	20004a30 	.word	0x20004a30

08006ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cb0:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <prvHeapInit+0xac>)
 8006cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3307      	adds	r3, #7
 8006cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <prvHeapInit+0xac>)
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <prvHeapInit+0xb0>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <prvHeapInit+0xb0>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0307 	bic.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <prvHeapInit+0xb4>)
 8006d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <prvHeapInit+0xb4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <prvHeapInit+0xb4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvHeapInit+0xb4>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <prvHeapInit+0xb8>)
 8006d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <prvHeapInit+0xbc>)
 8006d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <prvHeapInit+0xc0>)
 8006d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	20000e24 	.word	0x20000e24
 8006d54:	20004a24 	.word	0x20004a24
 8006d58:	20004a2c 	.word	0x20004a2c
 8006d5c:	20004a34 	.word	0x20004a34
 8006d60:	20004a30 	.word	0x20004a30
 8006d64:	20004a38 	.word	0x20004a38

08006d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d70:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <prvInsertBlockIntoFreeList+0xac>)
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e002      	b.n	8006d7c <prvInsertBlockIntoFreeList+0x14>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d8f7      	bhi.n	8006d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4413      	add	r3, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d108      	bne.n	8006daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	441a      	add	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d118      	bne.n	8006df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d00d      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e008      	b.n	8006df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006de6:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <prvInsertBlockIntoFreeList+0xb0>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e003      	b.n	8006df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d002      	beq.n	8006e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20004a24 	.word	0x20004a24
 8006e18:	20004a2c 	.word	0x20004a2c

08006e1c <__errno>:
 8006e1c:	4b01      	ldr	r3, [pc, #4]	; (8006e24 <__errno+0x8>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	200000b0 	.word	0x200000b0

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4e0d      	ldr	r6, [pc, #52]	; (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1ba4      	subs	r4, r4, r6
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2500      	movs	r5, #0
 8006e34:	42a5      	cmp	r5, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4e0b      	ldr	r6, [pc, #44]	; (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	; (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f000 fc28 	bl	8007690 <_init>
 8006e40:	1ba4      	subs	r4, r4, r6
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2500      	movs	r5, #0
 8006e46:	42a5      	cmp	r5, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e50:	4798      	blx	r3
 8006e52:	3501      	adds	r5, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e5a:	4798      	blx	r3
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	080078bc 	.word	0x080078bc
 8006e64:	080078bc 	.word	0x080078bc
 8006e68:	080078bc 	.word	0x080078bc
 8006e6c:	080078c0 	.word	0x080078c0

08006e70 <memcpy>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	1e43      	subs	r3, r0, #1
 8006e74:	440a      	add	r2, r1
 8006e76:	4291      	cmp	r1, r2
 8006e78:	d100      	bne.n	8006e7c <memcpy+0xc>
 8006e7a:	bd10      	pop	{r4, pc}
 8006e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e84:	e7f7      	b.n	8006e76 <memcpy+0x6>

08006e86 <memset>:
 8006e86:	4402      	add	r2, r0
 8006e88:	4603      	mov	r3, r0
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d100      	bne.n	8006e90 <memset+0xa>
 8006e8e:	4770      	bx	lr
 8006e90:	f803 1b01 	strb.w	r1, [r3], #1
 8006e94:	e7f9      	b.n	8006e8a <memset+0x4>
	...

08006e98 <_free_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	d045      	beq.n	8006f2c <_free_r+0x94>
 8006ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea4:	1f0c      	subs	r4, r1, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfb8      	it	lt
 8006eaa:	18e4      	addlt	r4, r4, r3
 8006eac:	f000 f8cc 	bl	8007048 <__malloc_lock>
 8006eb0:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <_free_r+0x98>)
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	b933      	cbnz	r3, 8006ec6 <_free_r+0x2e>
 8006eb8:	6063      	str	r3, [r4, #4]
 8006eba:	6014      	str	r4, [r2, #0]
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec2:	f000 b8c2 	b.w	800704a <__malloc_unlock>
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	d90c      	bls.n	8006ee4 <_free_r+0x4c>
 8006eca:	6821      	ldr	r1, [r4, #0]
 8006ecc:	1862      	adds	r2, r4, r1
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	bf04      	itt	eq
 8006ed2:	681a      	ldreq	r2, [r3, #0]
 8006ed4:	685b      	ldreq	r3, [r3, #4]
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	bf04      	itt	eq
 8006eda:	1852      	addeq	r2, r2, r1
 8006edc:	6022      	streq	r2, [r4, #0]
 8006ede:	6004      	str	r4, [r0, #0]
 8006ee0:	e7ec      	b.n	8006ebc <_free_r+0x24>
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	b10a      	cbz	r2, 8006eec <_free_r+0x54>
 8006ee8:	42a2      	cmp	r2, r4
 8006eea:	d9fa      	bls.n	8006ee2 <_free_r+0x4a>
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	1858      	adds	r0, r3, r1
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d10b      	bne.n	8006f0c <_free_r+0x74>
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	1858      	adds	r0, r3, r1
 8006efa:	4282      	cmp	r2, r0
 8006efc:	6019      	str	r1, [r3, #0]
 8006efe:	d1dd      	bne.n	8006ebc <_free_r+0x24>
 8006f00:	6810      	ldr	r0, [r2, #0]
 8006f02:	6852      	ldr	r2, [r2, #4]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	4401      	add	r1, r0
 8006f08:	6019      	str	r1, [r3, #0]
 8006f0a:	e7d7      	b.n	8006ebc <_free_r+0x24>
 8006f0c:	d902      	bls.n	8006f14 <_free_r+0x7c>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	e7d3      	b.n	8006ebc <_free_r+0x24>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	1821      	adds	r1, r4, r0
 8006f18:	428a      	cmp	r2, r1
 8006f1a:	bf04      	itt	eq
 8006f1c:	6811      	ldreq	r1, [r2, #0]
 8006f1e:	6852      	ldreq	r2, [r2, #4]
 8006f20:	6062      	str	r2, [r4, #4]
 8006f22:	bf04      	itt	eq
 8006f24:	1809      	addeq	r1, r1, r0
 8006f26:	6021      	streq	r1, [r4, #0]
 8006f28:	605c      	str	r4, [r3, #4]
 8006f2a:	e7c7      	b.n	8006ebc <_free_r+0x24>
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	20004a3c 	.word	0x20004a3c

08006f34 <_malloc_r>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	1ccd      	adds	r5, r1, #3
 8006f38:	f025 0503 	bic.w	r5, r5, #3
 8006f3c:	3508      	adds	r5, #8
 8006f3e:	2d0c      	cmp	r5, #12
 8006f40:	bf38      	it	cc
 8006f42:	250c      	movcc	r5, #12
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	4606      	mov	r6, r0
 8006f48:	db01      	blt.n	8006f4e <_malloc_r+0x1a>
 8006f4a:	42a9      	cmp	r1, r5
 8006f4c:	d903      	bls.n	8006f56 <_malloc_r+0x22>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	2000      	movs	r0, #0
 8006f54:	bd70      	pop	{r4, r5, r6, pc}
 8006f56:	f000 f877 	bl	8007048 <__malloc_lock>
 8006f5a:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <_malloc_r+0xac>)
 8006f5c:	6814      	ldr	r4, [r2, #0]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	b991      	cbnz	r1, 8006f88 <_malloc_r+0x54>
 8006f62:	4c20      	ldr	r4, [pc, #128]	; (8006fe4 <_malloc_r+0xb0>)
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	b91b      	cbnz	r3, 8006f70 <_malloc_r+0x3c>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f000 f83d 	bl	8006fe8 <_sbrk_r>
 8006f6e:	6020      	str	r0, [r4, #0]
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 f838 	bl	8006fe8 <_sbrk_r>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d124      	bne.n	8006fc6 <_malloc_r+0x92>
 8006f7c:	230c      	movs	r3, #12
 8006f7e:	6033      	str	r3, [r6, #0]
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 f862 	bl	800704a <__malloc_unlock>
 8006f86:	e7e4      	b.n	8006f52 <_malloc_r+0x1e>
 8006f88:	680b      	ldr	r3, [r1, #0]
 8006f8a:	1b5b      	subs	r3, r3, r5
 8006f8c:	d418      	bmi.n	8006fc0 <_malloc_r+0x8c>
 8006f8e:	2b0b      	cmp	r3, #11
 8006f90:	d90f      	bls.n	8006fb2 <_malloc_r+0x7e>
 8006f92:	600b      	str	r3, [r1, #0]
 8006f94:	50cd      	str	r5, [r1, r3]
 8006f96:	18cc      	adds	r4, r1, r3
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 f856 	bl	800704a <__malloc_unlock>
 8006f9e:	f104 000b 	add.w	r0, r4, #11
 8006fa2:	1d23      	adds	r3, r4, #4
 8006fa4:	f020 0007 	bic.w	r0, r0, #7
 8006fa8:	1ac3      	subs	r3, r0, r3
 8006faa:	d0d3      	beq.n	8006f54 <_malloc_r+0x20>
 8006fac:	425a      	negs	r2, r3
 8006fae:	50e2      	str	r2, [r4, r3]
 8006fb0:	e7d0      	b.n	8006f54 <_malloc_r+0x20>
 8006fb2:	428c      	cmp	r4, r1
 8006fb4:	684b      	ldr	r3, [r1, #4]
 8006fb6:	bf16      	itet	ne
 8006fb8:	6063      	strne	r3, [r4, #4]
 8006fba:	6013      	streq	r3, [r2, #0]
 8006fbc:	460c      	movne	r4, r1
 8006fbe:	e7eb      	b.n	8006f98 <_malloc_r+0x64>
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	6849      	ldr	r1, [r1, #4]
 8006fc4:	e7cc      	b.n	8006f60 <_malloc_r+0x2c>
 8006fc6:	1cc4      	adds	r4, r0, #3
 8006fc8:	f024 0403 	bic.w	r4, r4, #3
 8006fcc:	42a0      	cmp	r0, r4
 8006fce:	d005      	beq.n	8006fdc <_malloc_r+0xa8>
 8006fd0:	1a21      	subs	r1, r4, r0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 f808 	bl	8006fe8 <_sbrk_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d0cf      	beq.n	8006f7c <_malloc_r+0x48>
 8006fdc:	6025      	str	r5, [r4, #0]
 8006fde:	e7db      	b.n	8006f98 <_malloc_r+0x64>
 8006fe0:	20004a3c 	.word	0x20004a3c
 8006fe4:	20004a40 	.word	0x20004a40

08006fe8 <_sbrk_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4c06      	ldr	r4, [pc, #24]	; (8007004 <_sbrk_r+0x1c>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4605      	mov	r5, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	f7fa ff9e 	bl	8001f34 <_sbrk>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_sbrk_r+0x1a>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_sbrk_r+0x1a>
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20004cfc 	.word	0x20004cfc

08007008 <siprintf>:
 8007008:	b40e      	push	{r1, r2, r3}
 800700a:	b500      	push	{lr}
 800700c:	b09c      	sub	sp, #112	; 0x70
 800700e:	ab1d      	add	r3, sp, #116	; 0x74
 8007010:	9002      	str	r0, [sp, #8]
 8007012:	9006      	str	r0, [sp, #24]
 8007014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007018:	4809      	ldr	r0, [pc, #36]	; (8007040 <siprintf+0x38>)
 800701a:	9107      	str	r1, [sp, #28]
 800701c:	9104      	str	r1, [sp, #16]
 800701e:	4909      	ldr	r1, [pc, #36]	; (8007044 <siprintf+0x3c>)
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	9105      	str	r1, [sp, #20]
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	a902      	add	r1, sp, #8
 800702c:	f000 f868 	bl	8007100 <_svfiprintf_r>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	b01c      	add	sp, #112	; 0x70
 8007038:	f85d eb04 	ldr.w	lr, [sp], #4
 800703c:	b003      	add	sp, #12
 800703e:	4770      	bx	lr
 8007040:	200000b0 	.word	0x200000b0
 8007044:	ffff0208 	.word	0xffff0208

08007048 <__malloc_lock>:
 8007048:	4770      	bx	lr

0800704a <__malloc_unlock>:
 800704a:	4770      	bx	lr

0800704c <__ssputs_r>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	688e      	ldr	r6, [r1, #8]
 8007052:	429e      	cmp	r6, r3
 8007054:	4682      	mov	sl, r0
 8007056:	460c      	mov	r4, r1
 8007058:	4690      	mov	r8, r2
 800705a:	4699      	mov	r9, r3
 800705c:	d837      	bhi.n	80070ce <__ssputs_r+0x82>
 800705e:	898a      	ldrh	r2, [r1, #12]
 8007060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007064:	d031      	beq.n	80070ca <__ssputs_r+0x7e>
 8007066:	6825      	ldr	r5, [r4, #0]
 8007068:	6909      	ldr	r1, [r1, #16]
 800706a:	1a6f      	subs	r7, r5, r1
 800706c:	6965      	ldr	r5, [r4, #20]
 800706e:	2302      	movs	r3, #2
 8007070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007074:	fb95 f5f3 	sdiv	r5, r5, r3
 8007078:	f109 0301 	add.w	r3, r9, #1
 800707c:	443b      	add	r3, r7
 800707e:	429d      	cmp	r5, r3
 8007080:	bf38      	it	cc
 8007082:	461d      	movcc	r5, r3
 8007084:	0553      	lsls	r3, r2, #21
 8007086:	d530      	bpl.n	80070ea <__ssputs_r+0x9e>
 8007088:	4629      	mov	r1, r5
 800708a:	f7ff ff53 	bl	8006f34 <_malloc_r>
 800708e:	4606      	mov	r6, r0
 8007090:	b950      	cbnz	r0, 80070a8 <__ssputs_r+0x5c>
 8007092:	230c      	movs	r3, #12
 8007094:	f8ca 3000 	str.w	r3, [sl]
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a8:	463a      	mov	r2, r7
 80070aa:	6921      	ldr	r1, [r4, #16]
 80070ac:	f7ff fee0 	bl	8006e70 <memcpy>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	6126      	str	r6, [r4, #16]
 80070be:	6165      	str	r5, [r4, #20]
 80070c0:	443e      	add	r6, r7
 80070c2:	1bed      	subs	r5, r5, r7
 80070c4:	6026      	str	r6, [r4, #0]
 80070c6:	60a5      	str	r5, [r4, #8]
 80070c8:	464e      	mov	r6, r9
 80070ca:	454e      	cmp	r6, r9
 80070cc:	d900      	bls.n	80070d0 <__ssputs_r+0x84>
 80070ce:	464e      	mov	r6, r9
 80070d0:	4632      	mov	r2, r6
 80070d2:	4641      	mov	r1, r8
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	f000 fa93 	bl	8007600 <memmove>
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	1b9b      	subs	r3, r3, r6
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	441e      	add	r6, r3
 80070e4:	6026      	str	r6, [r4, #0]
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7dc      	b.n	80070a4 <__ssputs_r+0x58>
 80070ea:	462a      	mov	r2, r5
 80070ec:	f000 faa1 	bl	8007632 <_realloc_r>
 80070f0:	4606      	mov	r6, r0
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1e2      	bne.n	80070bc <__ssputs_r+0x70>
 80070f6:	6921      	ldr	r1, [r4, #16]
 80070f8:	4650      	mov	r0, sl
 80070fa:	f7ff fecd 	bl	8006e98 <_free_r>
 80070fe:	e7c8      	b.n	8007092 <__ssputs_r+0x46>

08007100 <_svfiprintf_r>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	461d      	mov	r5, r3
 8007106:	898b      	ldrh	r3, [r1, #12]
 8007108:	061f      	lsls	r7, r3, #24
 800710a:	b09d      	sub	sp, #116	; 0x74
 800710c:	4680      	mov	r8, r0
 800710e:	460c      	mov	r4, r1
 8007110:	4616      	mov	r6, r2
 8007112:	d50f      	bpl.n	8007134 <_svfiprintf_r+0x34>
 8007114:	690b      	ldr	r3, [r1, #16]
 8007116:	b96b      	cbnz	r3, 8007134 <_svfiprintf_r+0x34>
 8007118:	2140      	movs	r1, #64	; 0x40
 800711a:	f7ff ff0b 	bl	8006f34 <_malloc_r>
 800711e:	6020      	str	r0, [r4, #0]
 8007120:	6120      	str	r0, [r4, #16]
 8007122:	b928      	cbnz	r0, 8007130 <_svfiprintf_r+0x30>
 8007124:	230c      	movs	r3, #12
 8007126:	f8c8 3000 	str.w	r3, [r8]
 800712a:	f04f 30ff 	mov.w	r0, #4294967295
 800712e:	e0c8      	b.n	80072c2 <_svfiprintf_r+0x1c2>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	6163      	str	r3, [r4, #20]
 8007134:	2300      	movs	r3, #0
 8007136:	9309      	str	r3, [sp, #36]	; 0x24
 8007138:	2320      	movs	r3, #32
 800713a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800713e:	2330      	movs	r3, #48	; 0x30
 8007140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007144:	9503      	str	r5, [sp, #12]
 8007146:	f04f 0b01 	mov.w	fp, #1
 800714a:	4637      	mov	r7, r6
 800714c:	463d      	mov	r5, r7
 800714e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007152:	b10b      	cbz	r3, 8007158 <_svfiprintf_r+0x58>
 8007154:	2b25      	cmp	r3, #37	; 0x25
 8007156:	d13e      	bne.n	80071d6 <_svfiprintf_r+0xd6>
 8007158:	ebb7 0a06 	subs.w	sl, r7, r6
 800715c:	d00b      	beq.n	8007176 <_svfiprintf_r+0x76>
 800715e:	4653      	mov	r3, sl
 8007160:	4632      	mov	r2, r6
 8007162:	4621      	mov	r1, r4
 8007164:	4640      	mov	r0, r8
 8007166:	f7ff ff71 	bl	800704c <__ssputs_r>
 800716a:	3001      	adds	r0, #1
 800716c:	f000 80a4 	beq.w	80072b8 <_svfiprintf_r+0x1b8>
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	4453      	add	r3, sl
 8007174:	9309      	str	r3, [sp, #36]	; 0x24
 8007176:	783b      	ldrb	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 809d 	beq.w	80072b8 <_svfiprintf_r+0x1b8>
 800717e:	2300      	movs	r3, #0
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007190:	931a      	str	r3, [sp, #104]	; 0x68
 8007192:	462f      	mov	r7, r5
 8007194:	2205      	movs	r2, #5
 8007196:	f817 1b01 	ldrb.w	r1, [r7], #1
 800719a:	4850      	ldr	r0, [pc, #320]	; (80072dc <_svfiprintf_r+0x1dc>)
 800719c:	f7f9 f820 	bl	80001e0 <memchr>
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	b9d0      	cbnz	r0, 80071da <_svfiprintf_r+0xda>
 80071a4:	06d9      	lsls	r1, r3, #27
 80071a6:	bf44      	itt	mi
 80071a8:	2220      	movmi	r2, #32
 80071aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071ae:	071a      	lsls	r2, r3, #28
 80071b0:	bf44      	itt	mi
 80071b2:	222b      	movmi	r2, #43	; 0x2b
 80071b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071b8:	782a      	ldrb	r2, [r5, #0]
 80071ba:	2a2a      	cmp	r2, #42	; 0x2a
 80071bc:	d015      	beq.n	80071ea <_svfiprintf_r+0xea>
 80071be:	9a07      	ldr	r2, [sp, #28]
 80071c0:	462f      	mov	r7, r5
 80071c2:	2000      	movs	r0, #0
 80071c4:	250a      	movs	r5, #10
 80071c6:	4639      	mov	r1, r7
 80071c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071cc:	3b30      	subs	r3, #48	; 0x30
 80071ce:	2b09      	cmp	r3, #9
 80071d0:	d94d      	bls.n	800726e <_svfiprintf_r+0x16e>
 80071d2:	b1b8      	cbz	r0, 8007204 <_svfiprintf_r+0x104>
 80071d4:	e00f      	b.n	80071f6 <_svfiprintf_r+0xf6>
 80071d6:	462f      	mov	r7, r5
 80071d8:	e7b8      	b.n	800714c <_svfiprintf_r+0x4c>
 80071da:	4a40      	ldr	r2, [pc, #256]	; (80072dc <_svfiprintf_r+0x1dc>)
 80071dc:	1a80      	subs	r0, r0, r2
 80071de:	fa0b f000 	lsl.w	r0, fp, r0
 80071e2:	4318      	orrs	r0, r3
 80071e4:	9004      	str	r0, [sp, #16]
 80071e6:	463d      	mov	r5, r7
 80071e8:	e7d3      	b.n	8007192 <_svfiprintf_r+0x92>
 80071ea:	9a03      	ldr	r2, [sp, #12]
 80071ec:	1d11      	adds	r1, r2, #4
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	db01      	blt.n	80071fa <_svfiprintf_r+0xfa>
 80071f6:	9207      	str	r2, [sp, #28]
 80071f8:	e004      	b.n	8007204 <_svfiprintf_r+0x104>
 80071fa:	4252      	negs	r2, r2
 80071fc:	f043 0302 	orr.w	r3, r3, #2
 8007200:	9207      	str	r2, [sp, #28]
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	783b      	ldrb	r3, [r7, #0]
 8007206:	2b2e      	cmp	r3, #46	; 0x2e
 8007208:	d10c      	bne.n	8007224 <_svfiprintf_r+0x124>
 800720a:	787b      	ldrb	r3, [r7, #1]
 800720c:	2b2a      	cmp	r3, #42	; 0x2a
 800720e:	d133      	bne.n	8007278 <_svfiprintf_r+0x178>
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	9203      	str	r2, [sp, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfb8      	it	lt
 800721c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007220:	3702      	adds	r7, #2
 8007222:	9305      	str	r3, [sp, #20]
 8007224:	4d2e      	ldr	r5, [pc, #184]	; (80072e0 <_svfiprintf_r+0x1e0>)
 8007226:	7839      	ldrb	r1, [r7, #0]
 8007228:	2203      	movs	r2, #3
 800722a:	4628      	mov	r0, r5
 800722c:	f7f8 ffd8 	bl	80001e0 <memchr>
 8007230:	b138      	cbz	r0, 8007242 <_svfiprintf_r+0x142>
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	1b40      	subs	r0, r0, r5
 8007236:	fa03 f000 	lsl.w	r0, r3, r0
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	4303      	orrs	r3, r0
 800723e:	3701      	adds	r7, #1
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	7839      	ldrb	r1, [r7, #0]
 8007244:	4827      	ldr	r0, [pc, #156]	; (80072e4 <_svfiprintf_r+0x1e4>)
 8007246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724a:	2206      	movs	r2, #6
 800724c:	1c7e      	adds	r6, r7, #1
 800724e:	f7f8 ffc7 	bl	80001e0 <memchr>
 8007252:	2800      	cmp	r0, #0
 8007254:	d038      	beq.n	80072c8 <_svfiprintf_r+0x1c8>
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <_svfiprintf_r+0x1e8>)
 8007258:	bb13      	cbnz	r3, 80072a0 <_svfiprintf_r+0x1a0>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	3307      	adds	r3, #7
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	3308      	adds	r3, #8
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	444b      	add	r3, r9
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	e76d      	b.n	800714a <_svfiprintf_r+0x4a>
 800726e:	fb05 3202 	mla	r2, r5, r2, r3
 8007272:	2001      	movs	r0, #1
 8007274:	460f      	mov	r7, r1
 8007276:	e7a6      	b.n	80071c6 <_svfiprintf_r+0xc6>
 8007278:	2300      	movs	r3, #0
 800727a:	3701      	adds	r7, #1
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	4619      	mov	r1, r3
 8007280:	250a      	movs	r5, #10
 8007282:	4638      	mov	r0, r7
 8007284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007288:	3a30      	subs	r2, #48	; 0x30
 800728a:	2a09      	cmp	r2, #9
 800728c:	d903      	bls.n	8007296 <_svfiprintf_r+0x196>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0c8      	beq.n	8007224 <_svfiprintf_r+0x124>
 8007292:	9105      	str	r1, [sp, #20]
 8007294:	e7c6      	b.n	8007224 <_svfiprintf_r+0x124>
 8007296:	fb05 2101 	mla	r1, r5, r1, r2
 800729a:	2301      	movs	r3, #1
 800729c:	4607      	mov	r7, r0
 800729e:	e7f0      	b.n	8007282 <_svfiprintf_r+0x182>
 80072a0:	ab03      	add	r3, sp, #12
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4622      	mov	r2, r4
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <_svfiprintf_r+0x1ec>)
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	4640      	mov	r0, r8
 80072ac:	f3af 8000 	nop.w
 80072b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072b4:	4681      	mov	r9, r0
 80072b6:	d1d6      	bne.n	8007266 <_svfiprintf_r+0x166>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	065b      	lsls	r3, r3, #25
 80072bc:	f53f af35 	bmi.w	800712a <_svfiprintf_r+0x2a>
 80072c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c2:	b01d      	add	sp, #116	; 0x74
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	ab03      	add	r3, sp, #12
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4622      	mov	r2, r4
 80072ce:	4b07      	ldr	r3, [pc, #28]	; (80072ec <_svfiprintf_r+0x1ec>)
 80072d0:	a904      	add	r1, sp, #16
 80072d2:	4640      	mov	r0, r8
 80072d4:	f000 f882 	bl	80073dc <_printf_i>
 80072d8:	e7ea      	b.n	80072b0 <_svfiprintf_r+0x1b0>
 80072da:	bf00      	nop
 80072dc:	08007880 	.word	0x08007880
 80072e0:	08007886 	.word	0x08007886
 80072e4:	0800788a 	.word	0x0800788a
 80072e8:	00000000 	.word	0x00000000
 80072ec:	0800704d 	.word	0x0800704d

080072f0 <_printf_common>:
 80072f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	4691      	mov	r9, r2
 80072f6:	461f      	mov	r7, r3
 80072f8:	688a      	ldr	r2, [r1, #8]
 80072fa:	690b      	ldr	r3, [r1, #16]
 80072fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007300:	4293      	cmp	r3, r2
 8007302:	bfb8      	it	lt
 8007304:	4613      	movlt	r3, r2
 8007306:	f8c9 3000 	str.w	r3, [r9]
 800730a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800730e:	4606      	mov	r6, r0
 8007310:	460c      	mov	r4, r1
 8007312:	b112      	cbz	r2, 800731a <_printf_common+0x2a>
 8007314:	3301      	adds	r3, #1
 8007316:	f8c9 3000 	str.w	r3, [r9]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	0699      	lsls	r1, r3, #26
 800731e:	bf42      	ittt	mi
 8007320:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007324:	3302      	addmi	r3, #2
 8007326:	f8c9 3000 	strmi.w	r3, [r9]
 800732a:	6825      	ldr	r5, [r4, #0]
 800732c:	f015 0506 	ands.w	r5, r5, #6
 8007330:	d107      	bne.n	8007342 <_printf_common+0x52>
 8007332:	f104 0a19 	add.w	sl, r4, #25
 8007336:	68e3      	ldr	r3, [r4, #12]
 8007338:	f8d9 2000 	ldr.w	r2, [r9]
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	42ab      	cmp	r3, r5
 8007340:	dc28      	bgt.n	8007394 <_printf_common+0xa4>
 8007342:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	3300      	adds	r3, #0
 800734a:	bf18      	it	ne
 800734c:	2301      	movne	r3, #1
 800734e:	0692      	lsls	r2, r2, #26
 8007350:	d42d      	bmi.n	80073ae <_printf_common+0xbe>
 8007352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007356:	4639      	mov	r1, r7
 8007358:	4630      	mov	r0, r6
 800735a:	47c0      	blx	r8
 800735c:	3001      	adds	r0, #1
 800735e:	d020      	beq.n	80073a2 <_printf_common+0xb2>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	68e5      	ldr	r5, [r4, #12]
 8007364:	f8d9 2000 	ldr.w	r2, [r9]
 8007368:	f003 0306 	and.w	r3, r3, #6
 800736c:	2b04      	cmp	r3, #4
 800736e:	bf08      	it	eq
 8007370:	1aad      	subeq	r5, r5, r2
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	6922      	ldr	r2, [r4, #16]
 8007376:	bf0c      	ite	eq
 8007378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800737c:	2500      	movne	r5, #0
 800737e:	4293      	cmp	r3, r2
 8007380:	bfc4      	itt	gt
 8007382:	1a9b      	subgt	r3, r3, r2
 8007384:	18ed      	addgt	r5, r5, r3
 8007386:	f04f 0900 	mov.w	r9, #0
 800738a:	341a      	adds	r4, #26
 800738c:	454d      	cmp	r5, r9
 800738e:	d11a      	bne.n	80073c6 <_printf_common+0xd6>
 8007390:	2000      	movs	r0, #0
 8007392:	e008      	b.n	80073a6 <_printf_common+0xb6>
 8007394:	2301      	movs	r3, #1
 8007396:	4652      	mov	r2, sl
 8007398:	4639      	mov	r1, r7
 800739a:	4630      	mov	r0, r6
 800739c:	47c0      	blx	r8
 800739e:	3001      	adds	r0, #1
 80073a0:	d103      	bne.n	80073aa <_printf_common+0xba>
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295
 80073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073aa:	3501      	adds	r5, #1
 80073ac:	e7c3      	b.n	8007336 <_printf_common+0x46>
 80073ae:	18e1      	adds	r1, r4, r3
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	2030      	movs	r0, #48	; 0x30
 80073b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073b8:	4422      	add	r2, r4
 80073ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073c2:	3302      	adds	r3, #2
 80073c4:	e7c5      	b.n	8007352 <_printf_common+0x62>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4622      	mov	r2, r4
 80073ca:	4639      	mov	r1, r7
 80073cc:	4630      	mov	r0, r6
 80073ce:	47c0      	blx	r8
 80073d0:	3001      	adds	r0, #1
 80073d2:	d0e6      	beq.n	80073a2 <_printf_common+0xb2>
 80073d4:	f109 0901 	add.w	r9, r9, #1
 80073d8:	e7d8      	b.n	800738c <_printf_common+0x9c>
	...

080073dc <_printf_i>:
 80073dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073e4:	460c      	mov	r4, r1
 80073e6:	7e09      	ldrb	r1, [r1, #24]
 80073e8:	b085      	sub	sp, #20
 80073ea:	296e      	cmp	r1, #110	; 0x6e
 80073ec:	4617      	mov	r7, r2
 80073ee:	4606      	mov	r6, r0
 80073f0:	4698      	mov	r8, r3
 80073f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073f4:	f000 80b3 	beq.w	800755e <_printf_i+0x182>
 80073f8:	d822      	bhi.n	8007440 <_printf_i+0x64>
 80073fa:	2963      	cmp	r1, #99	; 0x63
 80073fc:	d036      	beq.n	800746c <_printf_i+0x90>
 80073fe:	d80a      	bhi.n	8007416 <_printf_i+0x3a>
 8007400:	2900      	cmp	r1, #0
 8007402:	f000 80b9 	beq.w	8007578 <_printf_i+0x19c>
 8007406:	2958      	cmp	r1, #88	; 0x58
 8007408:	f000 8083 	beq.w	8007512 <_printf_i+0x136>
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007414:	e032      	b.n	800747c <_printf_i+0xa0>
 8007416:	2964      	cmp	r1, #100	; 0x64
 8007418:	d001      	beq.n	800741e <_printf_i+0x42>
 800741a:	2969      	cmp	r1, #105	; 0x69
 800741c:	d1f6      	bne.n	800740c <_printf_i+0x30>
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	6813      	ldr	r3, [r2, #0]
 8007422:	0605      	lsls	r5, r0, #24
 8007424:	f103 0104 	add.w	r1, r3, #4
 8007428:	d52a      	bpl.n	8007480 <_printf_i+0xa4>
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	da03      	bge.n	800743a <_printf_i+0x5e>
 8007432:	222d      	movs	r2, #45	; 0x2d
 8007434:	425b      	negs	r3, r3
 8007436:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800743a:	486f      	ldr	r0, [pc, #444]	; (80075f8 <_printf_i+0x21c>)
 800743c:	220a      	movs	r2, #10
 800743e:	e039      	b.n	80074b4 <_printf_i+0xd8>
 8007440:	2973      	cmp	r1, #115	; 0x73
 8007442:	f000 809d 	beq.w	8007580 <_printf_i+0x1a4>
 8007446:	d808      	bhi.n	800745a <_printf_i+0x7e>
 8007448:	296f      	cmp	r1, #111	; 0x6f
 800744a:	d020      	beq.n	800748e <_printf_i+0xb2>
 800744c:	2970      	cmp	r1, #112	; 0x70
 800744e:	d1dd      	bne.n	800740c <_printf_i+0x30>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	f043 0320 	orr.w	r3, r3, #32
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	e003      	b.n	8007462 <_printf_i+0x86>
 800745a:	2975      	cmp	r1, #117	; 0x75
 800745c:	d017      	beq.n	800748e <_printf_i+0xb2>
 800745e:	2978      	cmp	r1, #120	; 0x78
 8007460:	d1d4      	bne.n	800740c <_printf_i+0x30>
 8007462:	2378      	movs	r3, #120	; 0x78
 8007464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007468:	4864      	ldr	r0, [pc, #400]	; (80075fc <_printf_i+0x220>)
 800746a:	e055      	b.n	8007518 <_printf_i+0x13c>
 800746c:	6813      	ldr	r3, [r2, #0]
 800746e:	1d19      	adds	r1, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6011      	str	r1, [r2, #0]
 8007474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800747c:	2301      	movs	r3, #1
 800747e:	e08c      	b.n	800759a <_printf_i+0x1be>
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6011      	str	r1, [r2, #0]
 8007484:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007488:	bf18      	it	ne
 800748a:	b21b      	sxthne	r3, r3
 800748c:	e7cf      	b.n	800742e <_printf_i+0x52>
 800748e:	6813      	ldr	r3, [r2, #0]
 8007490:	6825      	ldr	r5, [r4, #0]
 8007492:	1d18      	adds	r0, r3, #4
 8007494:	6010      	str	r0, [r2, #0]
 8007496:	0628      	lsls	r0, r5, #24
 8007498:	d501      	bpl.n	800749e <_printf_i+0xc2>
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	e002      	b.n	80074a4 <_printf_i+0xc8>
 800749e:	0668      	lsls	r0, r5, #25
 80074a0:	d5fb      	bpl.n	800749a <_printf_i+0xbe>
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	4854      	ldr	r0, [pc, #336]	; (80075f8 <_printf_i+0x21c>)
 80074a6:	296f      	cmp	r1, #111	; 0x6f
 80074a8:	bf14      	ite	ne
 80074aa:	220a      	movne	r2, #10
 80074ac:	2208      	moveq	r2, #8
 80074ae:	2100      	movs	r1, #0
 80074b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b4:	6865      	ldr	r5, [r4, #4]
 80074b6:	60a5      	str	r5, [r4, #8]
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	f2c0 8095 	blt.w	80075e8 <_printf_i+0x20c>
 80074be:	6821      	ldr	r1, [r4, #0]
 80074c0:	f021 0104 	bic.w	r1, r1, #4
 80074c4:	6021      	str	r1, [r4, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d13d      	bne.n	8007546 <_printf_i+0x16a>
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	f040 808e 	bne.w	80075ec <_printf_i+0x210>
 80074d0:	4665      	mov	r5, ip
 80074d2:	2a08      	cmp	r2, #8
 80074d4:	d10b      	bne.n	80074ee <_printf_i+0x112>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	07db      	lsls	r3, r3, #31
 80074da:	d508      	bpl.n	80074ee <_printf_i+0x112>
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	6862      	ldr	r2, [r4, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bfde      	ittt	le
 80074e4:	2330      	movle	r3, #48	; 0x30
 80074e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ee:	ebac 0305 	sub.w	r3, ip, r5
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	f8cd 8000 	str.w	r8, [sp]
 80074f8:	463b      	mov	r3, r7
 80074fa:	aa03      	add	r2, sp, #12
 80074fc:	4621      	mov	r1, r4
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff fef6 	bl	80072f0 <_printf_common>
 8007504:	3001      	adds	r0, #1
 8007506:	d14d      	bne.n	80075a4 <_printf_i+0x1c8>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	b005      	add	sp, #20
 800750e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007512:	4839      	ldr	r0, [pc, #228]	; (80075f8 <_printf_i+0x21c>)
 8007514:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007518:	6813      	ldr	r3, [r2, #0]
 800751a:	6821      	ldr	r1, [r4, #0]
 800751c:	1d1d      	adds	r5, r3, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6015      	str	r5, [r2, #0]
 8007522:	060a      	lsls	r2, r1, #24
 8007524:	d50b      	bpl.n	800753e <_printf_i+0x162>
 8007526:	07ca      	lsls	r2, r1, #31
 8007528:	bf44      	itt	mi
 800752a:	f041 0120 	orrmi.w	r1, r1, #32
 800752e:	6021      	strmi	r1, [r4, #0]
 8007530:	b91b      	cbnz	r3, 800753a <_printf_i+0x15e>
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	f022 0220 	bic.w	r2, r2, #32
 8007538:	6022      	str	r2, [r4, #0]
 800753a:	2210      	movs	r2, #16
 800753c:	e7b7      	b.n	80074ae <_printf_i+0xd2>
 800753e:	064d      	lsls	r5, r1, #25
 8007540:	bf48      	it	mi
 8007542:	b29b      	uxthmi	r3, r3
 8007544:	e7ef      	b.n	8007526 <_printf_i+0x14a>
 8007546:	4665      	mov	r5, ip
 8007548:	fbb3 f1f2 	udiv	r1, r3, r2
 800754c:	fb02 3311 	mls	r3, r2, r1, r3
 8007550:	5cc3      	ldrb	r3, [r0, r3]
 8007552:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007556:	460b      	mov	r3, r1
 8007558:	2900      	cmp	r1, #0
 800755a:	d1f5      	bne.n	8007548 <_printf_i+0x16c>
 800755c:	e7b9      	b.n	80074d2 <_printf_i+0xf6>
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	6961      	ldr	r1, [r4, #20]
 8007564:	1d18      	adds	r0, r3, #4
 8007566:	6010      	str	r0, [r2, #0]
 8007568:	0628      	lsls	r0, r5, #24
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	d501      	bpl.n	8007572 <_printf_i+0x196>
 800756e:	6019      	str	r1, [r3, #0]
 8007570:	e002      	b.n	8007578 <_printf_i+0x19c>
 8007572:	066a      	lsls	r2, r5, #25
 8007574:	d5fb      	bpl.n	800756e <_printf_i+0x192>
 8007576:	8019      	strh	r1, [r3, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	4665      	mov	r5, ip
 800757e:	e7b9      	b.n	80074f4 <_printf_i+0x118>
 8007580:	6813      	ldr	r3, [r2, #0]
 8007582:	1d19      	adds	r1, r3, #4
 8007584:	6011      	str	r1, [r2, #0]
 8007586:	681d      	ldr	r5, [r3, #0]
 8007588:	6862      	ldr	r2, [r4, #4]
 800758a:	2100      	movs	r1, #0
 800758c:	4628      	mov	r0, r5
 800758e:	f7f8 fe27 	bl	80001e0 <memchr>
 8007592:	b108      	cbz	r0, 8007598 <_printf_i+0x1bc>
 8007594:	1b40      	subs	r0, r0, r5
 8007596:	6060      	str	r0, [r4, #4]
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	2300      	movs	r3, #0
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a2:	e7a7      	b.n	80074f4 <_printf_i+0x118>
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4639      	mov	r1, r7
 80075aa:	4630      	mov	r0, r6
 80075ac:	47c0      	blx	r8
 80075ae:	3001      	adds	r0, #1
 80075b0:	d0aa      	beq.n	8007508 <_printf_i+0x12c>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	079b      	lsls	r3, r3, #30
 80075b6:	d413      	bmi.n	80075e0 <_printf_i+0x204>
 80075b8:	68e0      	ldr	r0, [r4, #12]
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	4298      	cmp	r0, r3
 80075be:	bfb8      	it	lt
 80075c0:	4618      	movlt	r0, r3
 80075c2:	e7a3      	b.n	800750c <_printf_i+0x130>
 80075c4:	2301      	movs	r3, #1
 80075c6:	464a      	mov	r2, r9
 80075c8:	4639      	mov	r1, r7
 80075ca:	4630      	mov	r0, r6
 80075cc:	47c0      	blx	r8
 80075ce:	3001      	adds	r0, #1
 80075d0:	d09a      	beq.n	8007508 <_printf_i+0x12c>
 80075d2:	3501      	adds	r5, #1
 80075d4:	68e3      	ldr	r3, [r4, #12]
 80075d6:	9a03      	ldr	r2, [sp, #12]
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	42ab      	cmp	r3, r5
 80075dc:	dcf2      	bgt.n	80075c4 <_printf_i+0x1e8>
 80075de:	e7eb      	b.n	80075b8 <_printf_i+0x1dc>
 80075e0:	2500      	movs	r5, #0
 80075e2:	f104 0919 	add.w	r9, r4, #25
 80075e6:	e7f5      	b.n	80075d4 <_printf_i+0x1f8>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ac      	bne.n	8007546 <_printf_i+0x16a>
 80075ec:	7803      	ldrb	r3, [r0, #0]
 80075ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f6:	e76c      	b.n	80074d2 <_printf_i+0xf6>
 80075f8:	08007891 	.word	0x08007891
 80075fc:	080078a2 	.word	0x080078a2

08007600 <memmove>:
 8007600:	4288      	cmp	r0, r1
 8007602:	b510      	push	{r4, lr}
 8007604:	eb01 0302 	add.w	r3, r1, r2
 8007608:	d807      	bhi.n	800761a <memmove+0x1a>
 800760a:	1e42      	subs	r2, r0, #1
 800760c:	4299      	cmp	r1, r3
 800760e:	d00a      	beq.n	8007626 <memmove+0x26>
 8007610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007614:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007618:	e7f8      	b.n	800760c <memmove+0xc>
 800761a:	4283      	cmp	r3, r0
 800761c:	d9f5      	bls.n	800760a <memmove+0xa>
 800761e:	1881      	adds	r1, r0, r2
 8007620:	1ad2      	subs	r2, r2, r3
 8007622:	42d3      	cmn	r3, r2
 8007624:	d100      	bne.n	8007628 <memmove+0x28>
 8007626:	bd10      	pop	{r4, pc}
 8007628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800762c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007630:	e7f7      	b.n	8007622 <memmove+0x22>

08007632 <_realloc_r>:
 8007632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007634:	4607      	mov	r7, r0
 8007636:	4614      	mov	r4, r2
 8007638:	460e      	mov	r6, r1
 800763a:	b921      	cbnz	r1, 8007646 <_realloc_r+0x14>
 800763c:	4611      	mov	r1, r2
 800763e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007642:	f7ff bc77 	b.w	8006f34 <_malloc_r>
 8007646:	b922      	cbnz	r2, 8007652 <_realloc_r+0x20>
 8007648:	f7ff fc26 	bl	8006e98 <_free_r>
 800764c:	4625      	mov	r5, r4
 800764e:	4628      	mov	r0, r5
 8007650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007652:	f000 f814 	bl	800767e <_malloc_usable_size_r>
 8007656:	42a0      	cmp	r0, r4
 8007658:	d20f      	bcs.n	800767a <_realloc_r+0x48>
 800765a:	4621      	mov	r1, r4
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff fc69 	bl	8006f34 <_malloc_r>
 8007662:	4605      	mov	r5, r0
 8007664:	2800      	cmp	r0, #0
 8007666:	d0f2      	beq.n	800764e <_realloc_r+0x1c>
 8007668:	4631      	mov	r1, r6
 800766a:	4622      	mov	r2, r4
 800766c:	f7ff fc00 	bl	8006e70 <memcpy>
 8007670:	4631      	mov	r1, r6
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff fc10 	bl	8006e98 <_free_r>
 8007678:	e7e9      	b.n	800764e <_realloc_r+0x1c>
 800767a:	4635      	mov	r5, r6
 800767c:	e7e7      	b.n	800764e <_realloc_r+0x1c>

0800767e <_malloc_usable_size_r>:
 800767e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007682:	1f18      	subs	r0, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfbc      	itt	lt
 8007688:	580b      	ldrlt	r3, [r1, r0]
 800768a:	18c0      	addlt	r0, r0, r3
 800768c:	4770      	bx	lr
	...

08007690 <_init>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr

0800769c <_fini>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr
