
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d4  080089d4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089dc  080089dc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  080089e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  20000150  08008b34  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  08008b34  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cba3  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f64  00000000  00000000  0003cd23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  00040c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00041fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c7e  00000000  00000000  00043130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000141e6  00000000  00000000  00068dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf991  00000000  00000000  0007cf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  0014c9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000150 	.word	0x20000150
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089a0 	.word	0x080089a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000154 	.word	0x20000154
 80001c4:	080089a0 	.word	0x080089a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <timer_finished>:
}comm_state;



int timer_finished(fsm_t* this)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	return(HAL_GetTick() >= +LoRa_timer);
 80004d0:	f001 f90a 	bl	80016e8 <HAL_GetTick>
 80004d4:	4602      	mov	r2, r0
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <timer_finished+0x24>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	bf2c      	ite	cs
 80004de:	2301      	movcs	r3, #1
 80004e0:	2300      	movcc	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000184 	.word	0x20000184

080004f0 <send_data>:

void send_data(fsm_t* this)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	 sensor_buf_t data;

	 data = ringbuf_get(&data_ring_buff);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	4908      	ldr	r1, [pc, #32]	; (8000520 <send_data+0x30>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fe42 	bl	8001188 <ringbuf_get>
	 LoRa_timer = HAL_GetTick() + LoRa_period;
 8000504:	f001 f8f0 	bl	80016e8 <HAL_GetTick>
 8000508:	4602      	mov	r2, r0
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <send_data+0x34>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	461a      	mov	r2, r3
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <send_data+0x38>)
 8000514:	601a      	str	r2, [r3, #0]
	 /*
	  *
	  * LORA COMM.
	  *
	  * */
}
 8000516:	bf00      	nop
 8000518:	3728      	adds	r7, #40	; 0x28
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000018c 	.word	0x2000018c
 8000524:	20000188 	.word	0x20000188
 8000528:	20000184 	.word	0x20000184

0800052c <LoRa_initialization>:
	  { WAIT, timer_finished, WAIT, send_data},
	  {-1, NULL, -1, NULL },
};

fsm_t* LoRa_initialization(uint16_t period)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
	fsm_t* fsm_LoRa;
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 8000536:	210a      	movs	r1, #10
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <LoRa_initialization+0x3c>)
 800053a:	f000 fdbc 	bl	80010b6 <ringbuf_init>
	fsm_LoRa = fsm_new(send_wireless);
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <LoRa_initialization+0x40>)
 8000540:	f000 f838 	bl	80005b4 <fsm_new>
 8000544:	60f8      	str	r0, [r7, #12]
	LoRa_timer = HAL_GetTick() + period;
 8000546:	f001 f8cf 	bl	80016e8 <HAL_GetTick>
 800054a:	4602      	mov	r2, r0
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	4413      	add	r3, r2
 8000550:	461a      	mov	r2, r3
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <LoRa_initialization+0x44>)
 8000554:	601a      	str	r2, [r3, #0]
	LoRa_period = period;
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <LoRa_initialization+0x48>)
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	8013      	strh	r3, [r2, #0]

	return fsm_LoRa;
 800055c:	68fb      	ldr	r3, [r7, #12]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000018c 	.word	0x2000018c
 800056c:	20000000 	.word	0x20000000
 8000570:	20000184 	.word	0x20000184
 8000574:	20000188 	.word	0x20000188

08000578 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 8000578:	b084      	sub	sp, #16
 800057a:	b5b0      	push	{r4, r5, r7, lr}
 800057c:	b086      	sub	sp, #24
 800057e:	af06      	add	r7, sp, #24
 8000580:	f107 0410 	add.w	r4, r7, #16
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ringbuf_put(&data_ring_buff, data);
 8000588:	466d      	mov	r5, sp
 800058a:	f107 041c 	add.w	r4, r7, #28
 800058e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	602b      	str	r3, [r5, #0]
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <save_new_data+0x38>)
 800059e:	f000 fdab 	bl	80010f8 <ringbuf_put>
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005aa:	b004      	add	sp, #16
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000018c 	.word	0x2000018c

080005b4 <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80005bc:	2008      	movs	r0, #8
 80005be:	f008 f91d 	bl	80087fc <malloc>
 80005c2:	4603      	mov	r3, r0
 80005c4:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f000 f805 	bl	80005d8 <fsm_init>
  return this;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e01c      	b.n	8000646 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d113      	bne.n	8000640 <fsm_fire+0x44>
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	4798      	blx	r3
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00c      	beq.n	8000640 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
      if (t->out)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00c      	beq.n	8000650 <fsm_fire+0x54>
        t->out(this);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	4798      	blx	r3
      break;
 800063e:	e007      	b.n	8000650 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3310      	adds	r3, #16
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	dade      	bge.n	800060c <fsm_fire+0x10>
    }
  }
}
 800064e:	e000      	b.n	8000652 <fsm_fire+0x56>
      break;
 8000650:	bf00      	nop
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <data_saved>:
	  Saving,
	  Sleeping,
	  Setup
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <error>:

int error (fsm_t* this) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	889b      	ldrh	r3, [r3, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <error+0x26>
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	889a      	ldrh	r2, [r3, #4]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000692:	429a      	cmp	r2, r3
 8000694:	d901      	bls.n	800069a <error+0x2a>
		return 1;
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <error+0x2c>
	else return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <no_error>:

int no_error (fsm_t* this) {
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	889b      	ldrh	r3, [r3, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d007      	beq.n	80006d2 <no_error+0x2a>
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	889a      	ldrh	r2, [r3, #4]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d801      	bhi.n	80006d2 <no_error+0x2a>
		return 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <no_error+0x2c>
	else return 0;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>config->sleep_timer) return 1;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <timer_sleep+0x2c>
 80006fa:	f000 fff5 	bl	80016e8 <HAL_GetTick>
 80006fe:	4602      	mov	r2, r0
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d901      	bls.n	800070c <timer_sleep+0x2c>
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <timer_sleep+0x2e>
	else return 0;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <timer_setup>:

int timer_setup (fsm_t* this) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000728:	f000 ffde 	bl	80016e8 <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	429a      	cmp	r2, r3
 8000734:	bf8c      	ite	hi
 8000736:	2301      	movhi	r3, #1
 8000738:	2300      	movls	r3, #0
 800073a:	b2db      	uxtb	r3, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <timer_warning>:

int timer_warning (fsm_t* this) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->warning_timer);
 8000756:	f000 ffc7 	bl	80016e8 <HAL_GetTick>
 800075a:	4602      	mov	r2, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	bf8c      	ite	hi
 8000764:	2301      	movhi	r3, #1
 8000766:	2300      	movls	r3, #0
 8000768:	b2db      	uxtb	r3, r3
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <timer_measure>:

int timer_measure (fsm_t* this) {
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->measure_timer);
 8000784:	f000 ffb0 	bl	80016e8 <HAL_GetTick>
 8000788:	4602      	mov	r2, r0
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	429a      	cmp	r2, r3
 8000790:	bf8c      	ite	hi
 8000792:	2301      	movhi	r3, #1
 8000794:	2300      	movls	r3, #0
 8000796:	b2db      	uxtb	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <contador>:

int contador (fsm_t* this) {
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	60bb      	str	r3, [r7, #8]
	if(config->measure_count>=(config->measure_average))
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	7f1b      	ldrb	r3, [r3, #28]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80007bc:	429a      	cmp	r2, r3
 80007be:	d301      	bcc.n	80007c4 <contador+0x24>
		return 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <contador+0x26>
	else return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <warning_limit>:

int warning_limit (fsm_t* this) {
 80007d2:	b480      	push	{r7}
 80007d4:	b085      	sub	sp, #20
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	bfcc      	ite	gt
 80007ec:	2301      	movgt	r3, #1
 80007ee:	2300      	movle	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <measuring>:

void measuring (fsm_t* this) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8000808:	2300      	movs	r3, #0
 800080a:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	60fb      	str	r3, [r7, #12]

	data = HAL_ADC_GetValue(&hadc1);
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <measuring+0x60>)
 8000818:	f001 f8d1 	bl	80019be <HAL_ADC_GetValue>
 800081c:	4603      	mov	r3, r0
 800081e:	82fb      	strh	r3, [r7, #22]

	config->data_recovered = config->data_recovered + data;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	885a      	ldrh	r2, [r3, #2]
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	4413      	add	r3, r2
 8000828:	b29a      	uxth	r2, r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	7f1b      	ldrb	r3, [r3, #28]
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 800083a:	f000 ff55 	bl	80016e8 <HAL_GetTick>
 800083e:	4602      	mov	r2, r0
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000844:	4413      	add	r3, r2
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	619a      	str	r2, [r3, #24]

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <measuring+0x64>)
 8000854:	f001 fd8a 	bl	800236c <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200002d8 	.word	0x200002d8
 8000864:	40020c00 	.word	0x40020c00

08000868 <process_data>:

void process_data (fsm_t* this) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered/config->measure_count;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	885b      	ldrh	r3, [r3, #2]
 800087e:	461a      	mov	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	7f1b      	ldrb	r3, [r3, #28]
 8000884:	fb92 f3f3 	sdiv	r3, r2, r3
 8000888:	b29a      	uxth	r2, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 800088e:	4819      	ldr	r0, [pc, #100]	; (80008f4 <process_data+0x8c>)
 8000890:	f001 f862 	bl	8001958 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	4817      	ldr	r0, [pc, #92]	; (80008f8 <process_data+0x90>)
 800089c:	f001 fd66 	bl	800236c <HAL_GPIO_WritePin>

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	889a      	ldrh	r2, [r3, #4]
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d812      	bhi.n	80008d2 <process_data+0x6a>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	889a      	ldrh	r2, [r3, #4]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d30c      	bcc.n	80008d2 <process_data+0x6a>
	{
		config->alarm = 0;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2200      	movs	r2, #0
 80008bc:	719a      	strb	r2, [r3, #6]
		config->alarm = FALSE;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	2200      	movs	r2, #0
 80008c2:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <process_data+0x90>)
 80008cc:	f001 fd4e 	bl	800236c <HAL_GPIO_WritePin>
 80008d0:	e00b      	b.n	80008ea <process_data+0x82>
	}
	else
	{
		config->alarm = 1;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2201      	movs	r2, #1
 80008d6:	719a      	strb	r2, [r3, #6]
		config->alarm = TRUE;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2201      	movs	r2, #1
 80008dc:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <process_data+0x90>)
 80008e6:	f001 fd41 	bl	800236c <HAL_GPIO_WritePin>

	}

}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200002d8 	.word	0x200002d8
 80008f8:	40020c00 	.word	0x40020c00

080008fc <alert>:
void alert (fsm_t* this) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	615a      	str	r2, [r3, #20]
	config->warning_timer = HAL_GetTick()+config->warning_period;
 8000918:	f000 fee6 	bl	80016e8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000922:	4413      	add	r3, r2
 8000924:	461a      	mov	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	611a      	str	r2, [r3, #16]
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <sleep>:

void sleep (fsm_t* this) { // led orange
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 8000946:	f000 fecf 	bl	80016e8 <HAL_GetTick>
 800094a:	4602      	mov	r2, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000950:	4413      	add	r3, r2
 8000952:	461a      	mov	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	8c1b      	ldrh	r3, [r3, #32]
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4816      	ldr	r0, [pc, #88]	; (80009bc <sleep+0x88>)
 8000962:	f001 fd03 	bl	800236c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <sleep+0x88>)
 800096e:	f001 fcfd 	bl	800236c <HAL_GPIO_WritePin>

	if(config->warning_count >= 2)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	2b01      	cmp	r3, #1
 8000978:	dd0f      	ble.n	800099a <sleep+0x66>
	{
		config->error = TRUE;
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2201      	movs	r2, #1
 800097e:	71da      	strb	r2, [r3, #7]
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <sleep+0x88>)
 8000988:	f001 fcf0 	bl	800236c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <sleep+0x88>)
 8000994:	f001 fcea 	bl	800236c <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
	}
}
 8000998:	e00b      	b.n	80009b2 <sleep+0x7e>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <sleep+0x88>)
 80009a2:	f001 fce3 	bl	800236c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <sleep+0x88>)
 80009ae:	f001 fcdd 	bl	800236c <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <setting_up>:

void setting_up (fsm_t* this) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2200      	movs	r2, #0
 80009d6:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2200      	movs	r2, #0
 80009e2:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	2200      	movs	r2, #0
 80009e8:	809a      	strh	r2, [r3, #4]
	config->error = FALSE;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2200      	movs	r2, #0
 80009ee:	71da      	strb	r2, [r3, #7]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 80009f0:	f000 fe7a 	bl	80016e8 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009fa:	4413      	add	r3, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	8c1b      	ldrh	r3, [r3, #32]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <setting_up+0x6c>)
 8000a0c:	f001 fcae 	bl	800236c <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <setting_up+0x70>)
 8000a12:	f000 fedb 	bl	80017cc <HAL_ADC_Start>

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <setting_up+0x6c>)
 8000a1e:	f001 fca5 	bl	800236c <HAL_GPIO_WritePin>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	200002d8 	.word	0x200002d8

08000a34 <save_data>:

void save_data (fsm_t* this)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b091      	sub	sp, #68	; 0x44
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensor_t* config = punt->param;
 8000a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28

	data2save.ID = config->ID;
 8000a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a48:	8bdb      	ldrh	r3, [r3, #30]
 8000a4a:	813b      	strh	r3, [r7, #8]
	data2save.alarm = config->alarm;
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	799b      	ldrb	r3, [r3, #6]
 8000a50:	733b      	strb	r3, [r7, #12]
	data2save.error = config->error;
 8000a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a54:	79db      	ldrb	r3, [r3, #7]
 8000a56:	737b      	strb	r3, [r7, #13]
	data2save.measure = config->data_average;
 8000a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5a:	889b      	ldrh	r3, [r3, #4]
 8000a5c:	817b      	strh	r3, [r7, #10]
	data2save.threshold_H = config->threshold_H;
 8000a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a62:	823b      	strh	r3, [r7, #16]
	data2save.threshold_L = config->threshold_L;
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000a68:	81fb      	strh	r3, [r7, #14]
//	data2save.timestamp =

	save_new_data(data2save);
 8000a6a:	466c      	mov	r4, sp
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a7c:	f7ff fd7c 	bl	8000578 <save_new_data>
}
 8000a80:	bf00      	nop
 8000a82:	3734      	adds	r7, #52	; 0x34
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd90      	pop	{r4, r7, pc}

08000a88 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 8000a92:	4905      	ldr	r1, [pc, #20]	; (8000aa8 <fsm_sensor_init+0x20>)
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fd9f 	bl	80005d8 <fsm_init>
  f->param = c;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	609a      	str	r2, [r3, #8]
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000020 	.word	0x20000020

08000aac <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t ID, uint16_t supply_Pin, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t warning_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4603      	mov	r3, r0
 8000abc:	817b      	strh	r3, [r7, #10]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	813b      	strh	r3, [r7, #8]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	809a      	strh	r2, [r3, #4]
	sensor->alarm = FALSE;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2200      	movs	r2, #0
 8000adc:	719a      	strb	r2, [r3, #6]
	sensor->error = FALSE;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	71da      	strb	r2, [r3, #7]
	sensor->setup_timer = 0;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
	sensor->sleep_timer = 0;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
	sensor->warning_timer = 0;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2200      	movs	r2, #0
 8000b06:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->ID = ID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	897a      	ldrh	r2, [r7, #10]
 8000b0c:	83da      	strh	r2, [r3, #30]
	sensor->supply_Pin = supply_Pin;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	893a      	ldrh	r2, [r7, #8]
 8000b12:	841a      	strh	r2, [r3, #32]
	sensor->threshold_L = threshold_L;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->threshold_H = threshold_H;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	8b3a      	ldrh	r2, [r7, #24]
 8000b1e:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor->threshold_Max = threshold_Max;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	8bba      	ldrh	r2, [r7, #28]
 8000b24:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->setup_period = setup_period;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	8c3a      	ldrh	r2, [r7, #32]
 8000b2a:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->sleep_period = sleep_period;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b30:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->warning_period = warning_period;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b36:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->measure_period = measure_period;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_average = measure_average;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b42:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b09a      	sub	sp, #104	; 0x68
 8000b54:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f000 fd61 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 f83d 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f000 f9a5 	bl	8000eac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b62:	f000 f90f 	bl	8000d84 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b66:	f000 f93b 	bl	8000de0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b6a:	f000 f969 	bl	8000e40 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b6e:	f007 fb13 	bl	8008198 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000b72:	f000 f8b3 	bl	8000cdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fsm_LoRa = LoRa_initialization(LoRa_period);
 8000b76:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b7a:	f7ff fcd7 	bl	800052c <LoRa_initialization>
 8000b7e:	6478      	str	r0, [r7, #68]	; 0x44
  sensor_initialization(&sensor1, ID_ph_sensor, Sensor_Supply_Pin, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_warning_period, ph_sleep_period, ph_measure_period, ph_average);
 8000b80:	1d38      	adds	r0, r7, #4
 8000b82:	2304      	movs	r3, #4
 8000b84:	9306      	str	r3, [sp, #24]
 8000b86:	23c8      	movs	r3, #200	; 0xc8
 8000b88:	9305      	str	r3, [sp, #20]
 8000b8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b8e:	9304      	str	r3, [sp, #16]
 8000b90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b94:	9303      	str	r3, [sp, #12]
 8000b96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000bac:	2202      	movs	r2, #2
 8000bae:	2101      	movs	r1, #1
 8000bb0:	f7ff ff7c 	bl	8000aac <sensor_initialization>

  fsm_sensor_init(&fsm_s1, &sensor1);
 8000bb4:	1d3a      	adds	r2, r7, #4
 8000bb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff63 	bl	8000a88 <fsm_sensor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bc2:	f007 fb0f 	bl	80081e4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire(fsm_LoRa);
 8000bc6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000bc8:	f7ff fd18 	bl	80005fc <fsm_fire>
    fsm_fire(&fsm_s1.fsm);
 8000bcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd13 	bl	80005fc <fsm_fire>
    MX_USB_HOST_Process();
 8000bd6:	e7f4      	b.n	8000bc2 <main+0x72>

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b098      	sub	sp, #96	; 0x60
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be2:	2230      	movs	r2, #48	; 0x30
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fe18 	bl	800881c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <SystemClock_Config+0xfc>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <SystemClock_Config+0xfc>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <SystemClock_Config+0xfc>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <SystemClock_Config+0x100>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <SystemClock_Config+0x100>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <SystemClock_Config+0x100>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c46:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c56:	2308      	movs	r3, #8
 8000c58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c5a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c64:	2307      	movs	r3, #7
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe5f 	bl	8004930 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c78:	f000 fa16 	bl	80010a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2105      	movs	r1, #5
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 f8b8 	bl	8004e10 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ca6:	f000 f9ff 	bl	80010a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000caa:	2301      	movs	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 fa86 	bl	80051cc <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cc6:	f000 f9ef 	bl	80010a8 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3760      	adds	r7, #96	; 0x60
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40007000 	.word	0x40007000

08000cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000cf0:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <MX_ADC1_Init+0xa0>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000cf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000cfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <MX_ADC1_Init+0xa4>)
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d40:	f000 fd00 	bl	8001744 <HAL_ADC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d4a:	f000 f9ad 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_ADC1_Init+0x9c>)
 8000d60:	f000 fe3a 	bl	80019d8 <HAL_ADC_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d6a:	f000 f99d 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200002d8 	.word	0x200002d8
 8000d7c:	40012000 	.word	0x40012000
 8000d80:	0f000001 	.word	0x0f000001

08000d84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <MX_I2C1_Init+0x54>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x58>)
 8000d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000dc2:	f002 ffdd 	bl	8003d80 <HAL_I2C_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dcc:	f000 f96c 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000320 	.word	0x20000320
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	000186a0 	.word	0x000186a0

08000de0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <MX_I2S3_Init+0x58>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000e08:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <MX_I2S3_Init+0x5c>)
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2S3_Init+0x54>)
 8000e20:	f003 f8e6 	bl	8003ff0 <HAL_I2S_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e2a:	f000 f93d 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200003cc 	.word	0x200003cc
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	00017700 	.word	0x00017700

08000e40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e46:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <MX_SPI1_Init+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_SPI1_Init+0x64>)
 8000e92:	f004 fad9 	bl	8005448 <HAL_SPI_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e9c:	f000 f904 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000374 	.word	0x20000374
 8000ea8:	40013000 	.word	0x40013000

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b71      	ldr	r3, [pc, #452]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a70      	ldr	r2, [pc, #448]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b6e      	ldr	r3, [pc, #440]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a69      	ldr	r2, [pc, #420]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b67      	ldr	r3, [pc, #412]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a62      	ldr	r2, [pc, #392]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b60      	ldr	r3, [pc, #384]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b59      	ldr	r3, [pc, #356]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b55      	ldr	r3, [pc, #340]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a54      	ldr	r2, [pc, #336]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b52      	ldr	r3, [pc, #328]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b4e      	ldr	r3, [pc, #312]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a4d      	ldr	r2, [pc, #308]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4848      	ldr	r0, [pc, #288]	; (8001090 <MX_GPIO_Init+0x1e4>)
 8000f70:	f001 f9fc 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2101      	movs	r1, #1
 8000f78:	4846      	ldr	r0, [pc, #280]	; (8001094 <MX_GPIO_Init+0x1e8>)
 8000f7a:	f001 f9f7 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f24f 0112 	movw	r1, #61458	; 0xf012
 8000f84:	4844      	ldr	r0, [pc, #272]	; (8001098 <MX_GPIO_Init+0x1ec>)
 8000f86:	f001 f9f1 	bl	800236c <HAL_GPIO_WritePin>
                          |Sensor_Supply_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483b      	ldr	r0, [pc, #236]	; (8001090 <MX_GPIO_Init+0x1e4>)
 8000fa2:	f001 f849 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4835      	ldr	r0, [pc, #212]	; (8001094 <MX_GPIO_Init+0x1e8>)
 8000fbe:	f001 f83b 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	482d      	ldr	r0, [pc, #180]	; (8001094 <MX_GPIO_Init+0x1e8>)
 8000fde:	f001 f82b 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <MX_GPIO_Init+0x1f0>)
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <MX_GPIO_Init+0x1f4>)
 8000ff6:	f001 f81f 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4825      	ldr	r0, [pc, #148]	; (80010a4 <MX_GPIO_Init+0x1f8>)
 800100e:	f001 f813 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001024:	2305      	movs	r3, #5
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	481d      	ldr	r0, [pc, #116]	; (80010a4 <MX_GPIO_Init+0x1f8>)
 8001030:	f001 f802 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor_Supply_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001034:	f24f 0312 	movw	r3, #61458	; 0xf012
 8001038:	61fb      	str	r3, [r7, #28]
                          |Sensor_Supply_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <MX_GPIO_Init+0x1ec>)
 800104e:	f000 fff3 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001052:	2320      	movs	r3, #32
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_GPIO_Init+0x1ec>)
 8001066:	f000 ffe7 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800106a:	2302      	movs	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_GPIO_Init+0x1f0>)
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0x1e4>)
 800107e:	f000 ffdb 	bl	8002038 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	; 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40021000 	.word	0x40021000
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	10120000 	.word	0x10120000
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:A+1 //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <ringbuf_init+0x1c>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010d0:	d004      	beq.n	80010dc <ringbuf_init+0x26>

	 p=NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 80010d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010da:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  _this->tail = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 80010f8:	b084      	sub	sp, #16
 80010fa:	b4b0      	push	{r4, r5, r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	f107 001c 	add.w	r0, r7, #28
 8001106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(NEXT(_this->head) != 0){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001110:	2b09      	cmp	r3, #9
 8001112:	d01c      	beq.n	800114e <ringbuf_put+0x56>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800111a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111e:	d016      	beq.n	800114e <ringbuf_put+0x56>
  _this->buf[_this->head] = item;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	015b      	lsls	r3, r3, #5
 800112a:	4413      	add	r3, r2
 800112c:	461d      	mov	r5, r3
 800112e:	f107 041c 	add.w	r4, r7, #28
 8001132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001136:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800113a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800114c:	e016      	b.n	800117c <ringbuf_put+0x84>
  }
  else
  {
  _this->buf[_this->head] = item;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	015b      	lsls	r3, r3, #5
 8001158:	4413      	add	r3, r2
 800115a:	461d      	mov	r5, r3
 800115c:	f107 041c 	add.w	r4, r7, #28
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001168:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2209      	movs	r2, #9
 8001178:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  }
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bcb0      	pop	{r4, r5, r7}
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001188:	b4b0      	push	{r4, r5, r7}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119e:	429a      	cmp	r2, r3
 80011a0:	d025      	beq.n	80011ee <ringbuf_get+0x66>
	{
		item = _this->buf[_this->tail];
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	015b      	lsls	r3, r3, #5
 80011ac:	4413      	add	r3, r2
 80011ae:	f107 0408 	add.w	r4, r7, #8
 80011b2:	461d      	mov	r5, r3
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (NEXT(_this->tail) != 0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	d00d      	beq.n	80011e6 <ringbuf_get+0x5e>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d007      	beq.n	80011e6 <ringbuf_get+0x5e>
		{
			_this->tail++;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80011e4:	e003      	b.n	80011ee <ringbuf_get+0x66>
		}
		else
		{
			_this->tail = 0;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		}
    }
	return item;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	461d      	mov	r5, r3
 80011f2:	f107 0408 	add.w	r4, r7, #8
 80011f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	372c      	adds	r7, #44	; 0x2c
 8001206:	46bd      	mov	sp, r7
 8001208:	bcb0      	pop	{r4, r5, r7}
 800120a:	4770      	bx	lr

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_MspInit+0x4c>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_MspInit+0x4c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124a:	2007      	movs	r0, #7
 800124c:	f000 feb2 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_ADC_MspInit+0x7c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d127      	bne.n	80012ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_ADC_MspInit+0x80>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0x80>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_ADC_MspInit+0x80>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_ADC_MspInit+0x80>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_ADC_MspInit+0x80>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_ADC_MspInit+0x80>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_ADC_MspInit+0x84>)
 80012ca:	f000 feb5 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_I2C_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12c      	bne.n	8001360 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_I2C_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001322:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001334:	2304      	movs	r3, #4
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <HAL_I2C_MspInit+0x8c>)
 8001340:	f000 fe7a 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005400 	.word	0x40005400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a28      	ldr	r2, [pc, #160]	; (8001434 <HAL_I2S_MspInit+0xc0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d14a      	bne.n	800142c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_I2S_MspInit+0xc4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013ea:	2310      	movs	r3, #16
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fa:	2306      	movs	r3, #6
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <HAL_I2S_MspInit+0xc8>)
 8001406:	f000 fe17 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800140a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800141c:	2306      	movs	r3, #6
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <HAL_I2S_MspInit+0xcc>)
 8001428:	f000 fe06 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40003c00 	.word	0x40003c00
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020800 	.word	0x40020800

08001444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_SPI_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12b      	bne.n	80014be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_SPI_MspInit+0x88>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_SPI_MspInit+0x88>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_SPI_MspInit+0x88>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_SPI_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_SPI_MspInit+0x88>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_SPI_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800149e:	23e0      	movs	r3, #224	; 0xe0
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ae:	2305      	movs	r3, #5
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 80014ba:	f000 fdbd 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40013000 	.word	0x40013000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f8ca 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <OTG_FS_IRQHandler+0x10>)
 8001536:	f001 f9c1 	bl	80028bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200007f0 	.word	0x200007f0

08001544 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x50>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x16>
		heap_end = &end;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <_sbrk+0x50>)
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <_sbrk+0x54>)
 8001558:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <_sbrk+0x50>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <_sbrk+0x50>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	466a      	mov	r2, sp
 800156a:	4293      	cmp	r3, r2
 800156c:	d907      	bls.n	800157e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800156e:	f007 f91b 	bl	80087a8 <__errno>
 8001572:	4602      	mov	r2, r0
 8001574:	230c      	movs	r3, #12
 8001576:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	e006      	b.n	800158c <_sbrk+0x48>
	}

	heap_end += incr;
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <_sbrk+0x50>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a03      	ldr	r2, [pc, #12]	; (8001594 <_sbrk+0x50>)
 8001588:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000016c 	.word	0x2000016c
 8001598:	20000ab8 	.word	0x20000ab8

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <SystemInit+0x28>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <SystemInit+0x28>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SystemInit+0x28>)
 80015b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b6:	609a      	str	r2, [r3, #8]
#endif
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ce:	e003      	b.n	80015d8 <LoopCopyDataInit>

080015d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015d6:	3104      	adds	r1, #4

080015d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e0:	d3f6      	bcc.n	80015d0 <CopyDataInit>
  ldr  r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015e4:	e002      	b.n	80015ec <LoopFillZerobss>

080015e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015e8:	f842 3b04 	str.w	r3, [r2], #4

080015ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f0:	d3f9      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015f2:	f7ff ffd3 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f007 f8dd 	bl	80087b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff faa9 	bl	8000b50 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001600:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001604:	080089e4 	.word	0x080089e4
  ldr  r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800160c:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8001610:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8001614:	20000ab8 	.word	0x20000ab8

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 fcb5 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fddc 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fccd 	bl	800201e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 fc95 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000c0 	.word	0x200000c0
 80016b8:	200000c8 	.word	0x200000c8
 80016bc:	200000c4 	.word	0x200000c4

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200000c8 	.word	0x200000c8
 80016e4:	20000414 	.word	0x20000414

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000414 	.word	0x20000414

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_Delay+0x40>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000c8 	.word	0x200000c8

08001744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e033      	b.n	80017c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd7a 	bl	800125c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178a:	f023 0302 	bic.w	r3, r3, #2
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fa40 	bl	8001c1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
 80017b2:	e001      	b.n	80017b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Start+0x1a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e0a5      	b.n	8001932 <HAL_ADC_Start+0x166>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d018      	beq.n	800182e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_ADC_Start+0x174>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_ADC_Start+0x178>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9a      	lsrs	r2, r3, #18
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001820:	e002      	b.n	8001828 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d179      	bne.n	8001930 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001866:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187a:	d106      	bne.n	800188a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f023 0206 	bic.w	r2, r3, #6
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44
 8001888:	e002      	b.n	8001890 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_ADC_Start+0x17c>)
 800189a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d12a      	bne.n	8001908 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_ADC_Start+0x180>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d015      	beq.n	80018e8 <HAL_ADC_Start+0x11c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <HAL_ADC_Start+0x184>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_Start+0x106>
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_ADC_Start+0x17c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_ADC_Start+0x188>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d129      	bne.n	8001930 <HAL_ADC_Start+0x164>
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_ADC_Start+0x17c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d823      	bhi.n	8001930 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11c      	bne.n	8001930 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	e013      	b.n	8001930 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_ADC_Start+0x180>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d10e      	bne.n	8001930 <HAL_ADC_Start+0x164>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800192e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200000c0 	.word	0x200000c0
 8001944:	431bde83 	.word	0x431bde83
 8001948:	40012300 	.word	0x40012300
 800194c:	40012000 	.word	0x40012000
 8001950:	40012100 	.word	0x40012100
 8001954:	40012200 	.word	0x40012200

08001958 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ADC_Stop+0x16>
 800196a:	2302      	movs	r3, #2
 800196c:	e021      	b.n	80019b2 <HAL_ADC_Stop+0x5a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e105      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x228>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d925      	bls.n	8001a50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3b1e      	subs	r3, #30
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43da      	mvns	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	400a      	ands	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4403      	add	r3, r0
 8001a42:	3b1e      	subs	r3, #30
 8001a44:	409a      	lsls	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	e022      	b.n	8001a96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6919      	ldr	r1, [r3, #16]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	2207      	movs	r2, #7
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4403      	add	r3, r0
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d824      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b05      	subs	r3, #5
 8001ab0:	221f      	movs	r2, #31
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae6:	e04c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d824      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b23      	subs	r3, #35	; 0x23
 8001b02:	221f      	movs	r2, #31
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b23      	subs	r3, #35	; 0x23
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
 8001b38:	e023      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b41      	subs	r3, #65	; 0x41
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	3b41      	subs	r3, #65	; 0x41
 8001b76:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_ADC_ConfigChannel+0x234>)
 8001b84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_ADC_ConfigChannel+0x238>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b12      	cmp	r3, #18
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_ADC_ConfigChannel+0x238>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d123      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x1e6>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d111      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_ADC_ConfigChannel+0x23c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_ADC_ConfigChannel+0x240>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	0c9a      	lsrs	r2, r3, #18
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40012300 	.word	0x40012300
 8001c10:	40012000 	.word	0x40012000
 8001c14:	200000c0 	.word	0x200000c0
 8001c18:	431bde83 	.word	0x431bde83

08001c1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c24:	4b79      	ldr	r3, [pc, #484]	; (8001e0c <ADC_Init+0x1f0>)
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	021a      	lsls	r2, r3, #8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6899      	ldr	r1, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <ADC_Init+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e00f      	b.n	8001d1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0202 	bic.w	r2, r2, #2
 8001d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e1b      	ldrb	r3, [r3, #24]
 8001d34:	005a      	lsls	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	3b01      	subs	r3, #1
 8001d74:	035a      	lsls	r2, r3, #13
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	e007      	b.n	8001d90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	051a      	lsls	r2, r3, #20
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6899      	ldr	r1, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd2:	025a      	lsls	r2, r3, #9
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	029a      	lsls	r2, r3, #10
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	0f000001 	.word	0x0f000001

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e16b      	b.n	800232c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 815a 	bne.w	8002326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d00b      	beq.n	8002092 <HAL_GPIO_Init+0x5a>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002086:	2b11      	cmp	r3, #17
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b12      	cmp	r3, #18
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0xfc>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b12      	cmp	r3, #18
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80b4 	beq.w	8002326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_GPIO_Init+0x308>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <HAL_GPIO_Init+0x308>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_GPIO_Init+0x308>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_GPIO_Init+0x30c>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_GPIO_Init+0x310>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02b      	beq.n	800225e <HAL_GPIO_Init+0x226>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x314>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d025      	beq.n	800225a <HAL_GPIO_Init+0x222>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x318>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_GPIO_Init+0x31c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x320>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0x216>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x324>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_GPIO_Init+0x212>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_GPIO_Init+0x328>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x20a>
 800223e:	2307      	movs	r3, #7
 8002240:	e00e      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002242:	2308      	movs	r3, #8
 8002244:	e00c      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002246:	2306      	movs	r3, #6
 8002248:	e00a      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800224a:	2305      	movs	r3, #5
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800224e:	2304      	movs	r3, #4
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_GPIO_Init+0x30c>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227e:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_GPIO_Init+0x330>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a2:	4a31      	ldr	r2, [pc, #196]	; (8002368 <HAL_GPIO_Init+0x330>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_GPIO_Init+0x330>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_GPIO_Init+0x330>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_GPIO_Init+0x330>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_GPIO_Init+0x330>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_GPIO_Init+0x330>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_GPIO_Init+0x330>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f ae90 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	3724      	adds	r7, #36	; 0x24
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40021400 	.word	0x40021400
 8002360:	40021800 	.word	0x40021800
 8002364:	40021c00 	.word	0x40021c00
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800239e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a0:	b08f      	sub	sp, #60	; 0x3c
 80023a2:	af0a      	add	r7, sp, #40	; 0x28
 80023a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e054      	b.n	800245a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f005 ff42 	bl	8008254 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 f900 	bl	80055f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	687e      	ldr	r6, [r7, #4]
 80023fc:	466d      	mov	r5, sp
 80023fe:	f106 0410 	add.w	r4, r6, #16
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002412:	1d33      	adds	r3, r6, #4
 8002414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002416:	6838      	ldr	r0, [r7, #0]
 8002418:	f003 f87a 	bl	8005510 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f003 f8f7 	bl	8005616 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	687e      	ldr	r6, [r7, #4]
 8002430:	466d      	mov	r5, sp
 8002432:	f106 0410 	add.w	r4, r6, #16
 8002436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800243a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800243e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002442:	e885 0003 	stmia.w	r5, {r0, r1}
 8002446:	1d33      	adds	r3, r6, #4
 8002448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244a:	6838      	ldr	r0, [r7, #0]
 800244c:	f003 fa0a 	bl	8005864 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002462 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002462:	b590      	push	{r4, r7, lr}
 8002464:	b089      	sub	sp, #36	; 0x24
 8002466:	af04      	add	r7, sp, #16
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	4608      	mov	r0, r1
 800246c:	4611      	mov	r1, r2
 800246e:	461a      	mov	r2, r3
 8002470:	4603      	mov	r3, r0
 8002472:	70fb      	strb	r3, [r7, #3]
 8002474:	460b      	mov	r3, r1
 8002476:	70bb      	strb	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_HCD_HC_Init+0x28>
 8002486:	2302      	movs	r3, #2
 8002488:	e07f      	b.n	800258a <HAL_HCD_HC_Init+0x128>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	333d      	adds	r3, #61	; 0x3d
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	787a      	ldrb	r2, [r7, #1]
 80024b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3340      	adds	r3, #64	; 0x40
 80024ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024cc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	3339      	adds	r3, #57	; 0x39
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	333f      	adds	r3, #63	; 0x3f
 80024f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80024f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	78bb      	ldrb	r3, [r7, #2]
 80024fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002500:	b2d8      	uxtb	r0, r3
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	333a      	adds	r3, #58	; 0x3a
 8002510:	4602      	mov	r2, r0
 8002512:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da0a      	bge.n	8002532 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	333b      	adds	r3, #59	; 0x3b
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e009      	b.n	8002546 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	333b      	adds	r3, #59	; 0x3b
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	333c      	adds	r3, #60	; 0x3c
 8002556:	f897 2020 	ldrb.w	r2, [r7, #32]
 800255a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	787c      	ldrb	r4, [r7, #1]
 8002562:	78ba      	ldrb	r2, [r7, #2]
 8002564:	78f9      	ldrb	r1, [r7, #3]
 8002566:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4623      	mov	r3, r4
 8002578:	f003 faf6 	bl	8005b68 <USB_HC_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}

08002592 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_HCD_HC_Halt+0x1e>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e00f      	b.n	80025d0 <HAL_HCD_HC_Halt+0x3e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fd30 	bl	8006026 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	70fb      	strb	r3, [r7, #3]
 80025ea:	460b      	mov	r3, r1
 80025ec:	70bb      	strb	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	333b      	adds	r3, #59	; 0x3b
 8002602:	78ba      	ldrb	r2, [r7, #2]
 8002604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	333f      	adds	r3, #63	; 0x3f
 8002616:	787a      	ldrb	r2, [r7, #1]
 8002618:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800261a:	7c3b      	ldrb	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d114      	bne.n	800264a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	3342      	adds	r3, #66	; 0x42
 8002630:	2203      	movs	r2, #3
 8002632:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	333d      	adds	r3, #61	; 0x3d
 8002644:	7f3a      	ldrb	r2, [r7, #28]
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e009      	b.n	800265e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	3342      	adds	r3, #66	; 0x42
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800265e:	787b      	ldrb	r3, [r7, #1]
 8002660:	2b03      	cmp	r3, #3
 8002662:	f200 80d6 	bhi.w	8002812 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	080027fd 	.word	0x080027fd
 8002674:	080026e9 	.word	0x080026e9
 8002678:	08002773 	.word	0x08002773
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800267c:	7c3b      	ldrb	r3, [r7, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	f040 80c9 	bne.w	8002816 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002684:	78bb      	ldrb	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80c5 	bne.w	8002816 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800268c:	8b3b      	ldrh	r3, [r7, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	3351      	adds	r3, #81	; 0x51
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	3351      	adds	r3, #81	; 0x51
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3342      	adds	r3, #66	; 0x42
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026d0:	e0a1      	b.n	8002816 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	3342      	adds	r3, #66	; 0x42
 80026e2:	2202      	movs	r2, #2
 80026e4:	701a      	strb	r2, [r3, #0]
      break;
 80026e6:	e096      	b.n	8002816 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80026e8:	78bb      	ldrb	r3, [r7, #2]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d120      	bne.n	8002730 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	3351      	adds	r3, #81	; 0x51
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	3342      	adds	r3, #66	; 0x42
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002718:	e07e      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	3342      	adds	r3, #66	; 0x42
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
      break;
 800272e:	e073      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3350      	adds	r3, #80	; 0x50
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	3342      	adds	r3, #66	; 0x42
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
      break;
 800275a:	e05d      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	3342      	adds	r3, #66	; 0x42
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]
      break;
 8002770:	e052      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002772:	78bb      	ldrb	r3, [r7, #2]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d120      	bne.n	80027ba <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	3351      	adds	r3, #81	; 0x51
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3342      	adds	r3, #66	; 0x42
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027a2:	e039      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	3342      	adds	r3, #66	; 0x42
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]
      break;
 80027b8:	e02e      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	3350      	adds	r3, #80	; 0x50
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	3342      	adds	r3, #66	; 0x42
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
      break;
 80027e4:	e018      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	3342      	adds	r3, #66	; 0x42
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
      break;
 80027fa:	e00d      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3342      	adds	r3, #66	; 0x42
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
      break;
 8002810:	e002      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002816:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3344      	adds	r3, #68	; 0x44
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	8b39      	ldrh	r1, [r7, #24]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4403      	add	r3, r0
 800283c:	3348      	adds	r3, #72	; 0x48
 800283e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	334c      	adds	r3, #76	; 0x4c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3339      	adds	r3, #57	; 0x39
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	335d      	adds	r3, #93	; 0x5d
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	3338      	adds	r3, #56	; 0x38
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	18d1      	adds	r1, r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	f003 fa66 	bl	8005d7c <USB_HC_StartXfer>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop

080028bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 ff83 	bl	80057de <USB_GetMode>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 80ef 	bne.w	8002abe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 ff67 	bl	80057b8 <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80e5 	beq.w	8002abc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 ff5e 	bl	80057b8 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002906:	d104      	bne.n	8002912 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002910:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f002 ff4e 	bl	80057b8 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002926:	d104      	bne.n	8002932 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002930:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 ff3e 	bl	80057b8 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002946:	d104      	bne.n	8002952 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002950:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f002 ff2e 	bl	80057b8 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f002 ff20 	bl	80057b8 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002982:	d115      	bne.n	80029b0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800298c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f005 fcd6 	bl	8008350 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 f816 	bl	80059dc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 feff 	bl	80057b8 <USB_ReadInterrupts>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d102      	bne.n	80029cc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f001 f966 	bl	8003c98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 fef1 	bl	80057b8 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d106      	bne.n	80029ee <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f005 fc99 	bl	8008318 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2208      	movs	r2, #8
 80029ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f002 fee0 	bl	80057b8 <USB_ReadInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a02:	d138      	bne.n	8002a76 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fafb 	bl	8006004 <USB_HC_ReadInterrupt>
 8002a0e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e025      	b.n	8002a62 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a40:	d106      	bne.n	8002a50 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8cf 	bl	8002bec <HCD_HC_IN_IRQHandler>
 8002a4e:	e005      	b.n	8002a5c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fcfd 	bl	8003456 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3d4      	bcc.n	8002a16 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fe9c 	bl	80057b8 <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d101      	bne.n	8002a8e <HAL_HCD_IRQHandler+0x1d2>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_HCD_IRQHandler+0x1d4>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d014      	beq.n	8002abe <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0210 	bic.w	r2, r2, #16
 8002aa2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f001 f84b 	bl	8003b40 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0210 	orr.w	r2, r2, #16
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	e000      	b.n	8002abe <HAL_HCD_IRQHandler+0x202>
      return;
 8002abc:	bf00      	nop
    }
  }
}
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_HCD_Start+0x16>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e013      	b.n	8002b02 <HAL_HCD_Start+0x3e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fd73 	bl	80055d2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 ffd6 	bl	8005aa4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_HCD_Stop+0x16>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e00d      	b.n	8002b3c <HAL_HCD_Stop+0x32>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f003 fbb5 	bl	800629c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 ff7d 	bl	8005a50 <USB_ResetPort>
 8002b56:	4603      	mov	r3, r0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	335c      	adds	r3, #92	; 0x5c
 8002b7c:	781b      	ldrb	r3, [r3, #0]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	334c      	adds	r3, #76	; 0x4c
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 ffbf 	bl	8005b44 <USB_GetCurrentFrame>
 8002bc6:	4603      	mov	r3, r0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 ff9a 	bl	8005b16 <USB_GetHostSpeed>
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d119      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	0151      	lsls	r1, r2, #5
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	440a      	add	r2, r1
 8002c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	60d3      	str	r3, [r2, #12]
 8002c4e:	e0ce      	b.n	8002dee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d12c      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	335d      	adds	r3, #93	; 0x5d
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f9b3 	bl	8006026 <USB_HC_Halt>
 8002cc0:	e095      	b.n	8002dee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d109      	bne.n	8002cec <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	e080      	b.n	8002dee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d134      	bne.n	8002d6c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	335d      	adds	r3, #93	; 0x5d
 8002d32:	2205      	movs	r2, #5
 8002d34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	2310      	movs	r3, #16
 8002d46:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	2308      	movs	r3, #8
 8002d58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f95e 	bl	8006026 <USB_HC_Halt>
 8002d6a:	e040      	b.n	8002dee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d134      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	0151      	lsls	r1, r2, #5
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	440a      	add	r2, r1
 8002d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 f939 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	335d      	adds	r3, #93	; 0x5d
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e04:	d122      	bne.n	8002e4c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	0151      	lsls	r1, r2, #5
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	440a      	add	r2, r1
 8002e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 f8f8 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e48:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e4a:	e300      	b.n	800344e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80fd 	bne.w	800305e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3348      	adds	r3, #72	; 0x48
 8002e7c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	0159      	lsls	r1, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	440b      	add	r3, r1
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e90:	1ad1      	subs	r1, r2, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4403      	add	r3, r0
 8002ea0:	334c      	adds	r3, #76	; 0x4c
 8002ea2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	335d      	adds	r3, #93	; 0x5d
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3358      	adds	r3, #88	; 0x58
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2301      	movs	r3, #1
 8002edc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	333f      	adds	r3, #63	; 0x3f
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	333f      	adds	r3, #63	; 0x3f
 8002f04:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d121      	bne.n	8002f4e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	0151      	lsls	r1, r2, #5
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	440a      	add	r2, r1
 8002f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 f876 	bl	8006026 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	461a      	mov	r2, r3
 8002f48:	2310      	movs	r3, #16
 8002f4a:	6093      	str	r3, [r2, #8]
 8002f4c:	e070      	b.n	8003030 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	333f      	adds	r3, #63	; 0x3f
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d12a      	bne.n	8002fba <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	0151      	lsls	r1, r2, #5
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	440a      	add	r2, r1
 8002f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	335c      	adds	r3, #92	; 0x5c
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4601      	mov	r1, r0
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f005 f9da 	bl	800836c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fb8:	e03a      	b.n	8003030 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	333f      	adds	r3, #63	; 0x3f
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d12f      	bne.n	8003030 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	335c      	adds	r3, #92	; 0x5c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3350      	adds	r3, #80	; 0x50
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f083 0301 	eor.w	r3, r3, #1
 8002ffa:	b2d8      	uxtb	r0, r3
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	3350      	adds	r3, #80	; 0x50
 800300c:	4602      	mov	r2, r0
 800300e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	b2d8      	uxtb	r0, r3
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4601      	mov	r1, r0
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f005 f99e 	bl	800836c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3350      	adds	r3, #80	; 0x50
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2d8      	uxtb	r0, r3
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	3350      	adds	r3, #80	; 0x50
 8003058:	4602      	mov	r2, r0
 800305a:	701a      	strb	r2, [r3, #0]
}
 800305c:	e1f7      	b.n	800344e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	f040 811a 	bne.w	80032aa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	0151      	lsls	r1, r2, #5
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	440a      	add	r2, r1
 800308c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003090:	f023 0302 	bic.w	r3, r3, #2
 8003094:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	335d      	adds	r3, #93	; 0x5d
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10a      	bne.n	80030c2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	335c      	adds	r3, #92	; 0x5c
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e0d9      	b.n	8003276 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	335d      	adds	r3, #93	; 0x5d
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d10a      	bne.n	80030ee <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	335c      	adds	r3, #92	; 0x5c
 80030e8:	2205      	movs	r2, #5
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e0c3      	b.n	8003276 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	335d      	adds	r3, #93	; 0x5d
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d00a      	beq.n	800311a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	335d      	adds	r3, #93	; 0x5d
 8003114:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003116:	2b08      	cmp	r3, #8
 8003118:	d156      	bne.n	80031c8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	3358      	adds	r3, #88	; 0x58
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4403      	add	r3, r0
 800313c:	3358      	adds	r3, #88	; 0x58
 800313e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	3358      	adds	r3, #88	; 0x58
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d914      	bls.n	8003180 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3358      	adds	r3, #88	; 0x58
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	335c      	adds	r3, #92	; 0x5c
 800317a:	2204      	movs	r2, #4
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e009      	b.n	8003194 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e056      	b.n	8003276 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	335d      	adds	r3, #93	; 0x5d
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d123      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003208:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003210:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e027      	b.n	8003276 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	335d      	adds	r3, #93	; 0x5d
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b07      	cmp	r3, #7
 800323a:	d11c      	bne.n	8003276 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3358      	adds	r3, #88	; 0x58
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1c59      	adds	r1, r3, #1
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4403      	add	r3, r0
 800325e:	3358      	adds	r3, #88	; 0x58
 8003260:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	335c      	adds	r3, #92	; 0x5c
 8003272:	2204      	movs	r2, #4
 8003274:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	461a      	mov	r2, r3
 8003284:	2302      	movs	r3, #2
 8003286:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4601      	mov	r1, r0
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f005 f862 	bl	800836c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032a8:	e0d1      	b.n	800344e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d13e      	bne.n	800333e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	3358      	adds	r3, #88	; 0x58
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	1c59      	adds	r1, r3, #1
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4403      	add	r3, r0
 8003302:	3358      	adds	r3, #88	; 0x58
 8003304:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	335d      	adds	r3, #93	; 0x5d
 8003316:	2206      	movs	r2, #6
 8003318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fe7e 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	461a      	mov	r2, r3
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	6093      	str	r3, [r2, #8]
}
 800333c:	e087      	b.n	800344e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d17c      	bne.n	800344e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	333f      	adds	r3, #63	; 0x3f
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d122      	bne.n	80033b0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	3358      	adds	r3, #88	; 0x58
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	440a      	add	r2, r1
 8003394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f002 fe3c 	bl	8006026 <USB_HC_Halt>
 80033ae:	e045      	b.n	800343c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	333f      	adds	r3, #63	; 0x3f
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	333f      	adds	r3, #63	; 0x3f
 80033d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d12f      	bne.n	800343c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	3358      	adds	r3, #88	; 0x58
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d121      	bne.n	800343c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	335d      	adds	r3, #93	; 0x5d
 8003408:	2203      	movs	r2, #3
 800340a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	440a      	add	r2, r1
 8003422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003426:	f043 0302 	orr.w	r3, r3, #2
 800342a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fdf5 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	2310      	movs	r3, #16
 800344c:	6093      	str	r3, [r2, #8]
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d119      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	461a      	mov	r2, r3
 8003494:	2304      	movs	r3, #4
 8003496:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80034b8:	e33e      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d141      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2320      	movs	r3, #32
 80034e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	333d      	adds	r3, #61	; 0x3d
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	f040 831f 	bne.w	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	333d      	adds	r3, #61	; 0x3d
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	335c      	adds	r3, #92	; 0x5c
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	0151      	lsls	r1, r2, #5
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	440a      	add	r2, r1
 8003538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f002 fd6a 	bl	8006026 <USB_HC_Halt>
}
 8003552:	e2f1      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d13f      	bne.n	80035ea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	335d      	adds	r3, #93	; 0x5d
 800357a:	2204      	movs	r2, #4
 800357c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	333d      	adds	r3, #61	; 0x3d
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	3358      	adds	r3, #88	; 0x58
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 fd28 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	6093      	str	r3, [r2, #8]
}
 80035e8:	e2a6      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d122      	bne.n	8003648 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	440a      	add	r2, r1
 8003618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f002 fcfa 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003644:	6093      	str	r3, [r2, #8]
}
 8003646:	e277      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d135      	bne.n	80036ca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	440b      	add	r3, r1
 800366c:	3358      	adds	r3, #88	; 0x58
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	440a      	add	r2, r1
 8003688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fcc2 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	461a      	mov	r2, r3
 80036b0:	2301      	movs	r3, #1
 80036b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	335d      	adds	r3, #93	; 0x5d
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
}
 80036c8:	e236      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d12b      	bne.n	8003738 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2308      	movs	r3, #8
 80036f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	440a      	add	r2, r1
 8003708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fc82 	bl	8006026 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	335d      	adds	r3, #93	; 0x5d
 8003732:	2205      	movs	r2, #5
 8003734:	701a      	strb	r2, [r3, #0]
}
 8003736:	e1ff      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d155      	bne.n	80037fa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3358      	adds	r3, #88	; 0x58
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	335d      	adds	r3, #93	; 0x5d
 8003772:	2203      	movs	r2, #3
 8003774:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	333d      	adds	r3, #61	; 0x3d
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d114      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	440b      	add	r3, r1
 800379a:	333c      	adds	r3, #60	; 0x3c
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	440b      	add	r3, r1
 80037b0:	333d      	adds	r3, #61	; 0x3d
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	0151      	lsls	r1, r2, #5
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	440a      	add	r2, r1
 80037cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 fc20 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	461a      	mov	r2, r3
 80037f4:	2310      	movs	r3, #16
 80037f6:	6093      	str	r3, [r2, #8]
}
 80037f8:	e19e      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d12b      	bne.n	8003868 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	440a      	add	r2, r1
 8003826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f002 fbf3 	bl	8006026 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	335d      	adds	r3, #93	; 0x5d
 8003850:	2206      	movs	r2, #6
 8003852:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	6093      	str	r3, [r2, #8]
}
 8003866:	e167      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d135      	bne.n	80038ec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	440a      	add	r2, r1
 8003896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f002 fbbb 	bl	8006026 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038bc:	461a      	mov	r2, r3
 80038be:	2310      	movs	r3, #16
 80038c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	461a      	mov	r2, r3
 80038d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	335d      	adds	r3, #93	; 0x5d
 80038e6:	2208      	movs	r2, #8
 80038e8:	701a      	strb	r2, [r3, #0]
}
 80038ea:	e125      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	f040 811a 	bne.w	8003b38 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	440a      	add	r2, r1
 800391a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391e:	f023 0302 	bic.w	r3, r3, #2
 8003922:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	335d      	adds	r3, #93	; 0x5d
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d137      	bne.n	80039aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	440b      	add	r3, r1
 8003948:	335c      	adds	r3, #92	; 0x5c
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	333f      	adds	r3, #63	; 0x3f
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d00b      	beq.n	800397c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	333f      	adds	r3, #63	; 0x3f
 8003974:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003976:	2b03      	cmp	r3, #3
 8003978:	f040 80c5 	bne.w	8003b06 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	3351      	adds	r3, #81	; 0x51
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f083 0301 	eor.w	r3, r3, #1
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	440b      	add	r3, r1
 80039a2:	3351      	adds	r3, #81	; 0x51
 80039a4:	4602      	mov	r2, r0
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e0ad      	b.n	8003b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	335d      	adds	r3, #93	; 0x5d
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d10a      	bne.n	80039d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	335c      	adds	r3, #92	; 0x5c
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e097      	b.n	8003b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	440b      	add	r3, r1
 80039e4:	335d      	adds	r3, #93	; 0x5d
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d10a      	bne.n	8003a02 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	440b      	add	r3, r1
 80039fa:	335c      	adds	r3, #92	; 0x5c
 80039fc:	2202      	movs	r2, #2
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e081      	b.n	8003b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	335d      	adds	r3, #93	; 0x5d
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d10a      	bne.n	8003a2e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	440b      	add	r3, r1
 8003a26:	335c      	adds	r3, #92	; 0x5c
 8003a28:	2205      	movs	r2, #5
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	e06b      	b.n	8003b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	335d      	adds	r3, #93	; 0x5d
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d00a      	beq.n	8003a5a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	335d      	adds	r3, #93	; 0x5d
 8003a54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d155      	bne.n	8003b06 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	3358      	adds	r3, #88	; 0x58
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	1c59      	adds	r1, r3, #1
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4403      	add	r3, r0
 8003a7c:	3358      	adds	r3, #88	; 0x58
 8003a7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3358      	adds	r3, #88	; 0x58
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d914      	bls.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3358      	adds	r3, #88	; 0x58
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	335c      	adds	r3, #92	; 0x5c
 8003aba:	2204      	movs	r2, #4
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e009      	b.n	8003ad4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	335c      	adds	r3, #92	; 0x5c
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003aea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	461a      	mov	r2, r3
 8003b14:	2302      	movs	r3, #2
 8003b16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	b2d8      	uxtb	r0, r3
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4601      	mov	r1, r0
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f004 fc1a 	bl	800836c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b38:	bf00      	nop
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	0c5b      	lsrs	r3, r3, #17
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b74:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d003      	beq.n	8003b84 <HCD_RXQLVL_IRQHandler+0x44>
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	f000 8082 	beq.w	8003c86 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b82:	e083      	b.n	8003c8c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d07f      	beq.n	8003c8a <HCD_RXQLVL_IRQHandler+0x14a>
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	3344      	adds	r3, #68	; 0x44
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d074      	beq.n	8003c8a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3344      	adds	r3, #68	; 0x44
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	b292      	uxth	r2, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f001 fdd3 	bl	8005766 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	440b      	add	r3, r1
 8003bce:	3344      	adds	r3, #68	; 0x44
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	18d1      	adds	r1, r2, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4403      	add	r3, r0
 8003be4:	3344      	adds	r3, #68	; 0x44
 8003be6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	334c      	adds	r3, #76	; 0x4c
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	18d1      	adds	r1, r2, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4403      	add	r3, r0
 8003c0c:	334c      	adds	r3, #76	; 0x4c
 8003c0e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HCD_RXQLVL_IRQHandler+0x154>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d031      	beq.n	8003c8a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c44:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	3350      	adds	r3, #80	; 0x50
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f083 0301 	eor.w	r3, r3, #1
 8003c6e:	b2d8      	uxtb	r0, r3
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3350      	adds	r3, #80	; 0x50
 8003c80:	4602      	mov	r2, r0
 8003c82:	701a      	strb	r2, [r3, #0]
      break;
 8003c84:	e001      	b.n	8003c8a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003c8a:	bf00      	nop
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	1ff80000 	.word	0x1ff80000

08003c98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003cc4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d10b      	bne.n	8003ce8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d102      	bne.n	8003ce0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f004 fb2a 	bl	8008334 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d132      	bne.n	8003d58 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d126      	bne.n	8003d52 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d113      	bne.n	8003d34 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d16:	d106      	bne.n	8003d26 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fe5c 	bl	80059dc <USB_InitFSLSPClkSel>
 8003d24:	e011      	b.n	8003d4a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fe55 	bl	80059dc <USB_InitFSLSPClkSel>
 8003d32:	e00a      	b.n	8003d4a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d42:	461a      	mov	r2, r3
 8003d44:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d48:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f004 fb1c 	bl	8008388 <HAL_HCD_PortEnabled_Callback>
 8003d50:	e002      	b.n	8003d58 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f004 fb26 	bl	80083a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d103      	bne.n	8003d6a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f043 0320 	orr.w	r3, r3, #32
 8003d68:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d70:	461a      	mov	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6013      	str	r3, [r2, #0]
}
 8003d76:	bf00      	nop
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e11f      	b.n	8003fd2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd fa9c 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	; 0x24
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de4:	f001 f9de 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a7b      	ldr	r2, [pc, #492]	; (8003fdc <HAL_I2C_Init+0x25c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d807      	bhi.n	8003e04 <HAL_I2C_Init+0x84>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a7a      	ldr	r2, [pc, #488]	; (8003fe0 <HAL_I2C_Init+0x260>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	bf94      	ite	ls
 8003dfc:	2301      	movls	r3, #1
 8003dfe:	2300      	movhi	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e006      	b.n	8003e12 <HAL_I2C_Init+0x92>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a77      	ldr	r2, [pc, #476]	; (8003fe4 <HAL_I2C_Init+0x264>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bf94      	ite	ls
 8003e0c:	2301      	movls	r3, #1
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0db      	b.n	8003fd2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a72      	ldr	r2, [pc, #456]	; (8003fe8 <HAL_I2C_Init+0x268>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0c9b      	lsrs	r3, r3, #18
 8003e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a64      	ldr	r2, [pc, #400]	; (8003fdc <HAL_I2C_Init+0x25c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d802      	bhi.n	8003e54 <HAL_I2C_Init+0xd4>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3301      	adds	r3, #1
 8003e52:	e009      	b.n	8003e68 <HAL_I2C_Init+0xe8>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	4a63      	ldr	r2, [pc, #396]	; (8003fec <HAL_I2C_Init+0x26c>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	3301      	adds	r3, #1
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4956      	ldr	r1, [pc, #344]	; (8003fdc <HAL_I2C_Init+0x25c>)
 8003e84:	428b      	cmp	r3, r1
 8003e86:	d80d      	bhi.n	8003ea4 <HAL_I2C_Init+0x124>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e59      	subs	r1, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	bf38      	it	cc
 8003ea0:	2304      	movcc	r3, #4
 8003ea2:	e04f      	b.n	8003f44 <HAL_I2C_Init+0x1c4>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d111      	bne.n	8003ed0 <HAL_I2C_Init+0x150>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e58      	subs	r0, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e012      	b.n	8003ef6 <HAL_I2C_Init+0x176>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e58      	subs	r0, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	0099      	lsls	r1, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Init+0x17e>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e022      	b.n	8003f44 <HAL_I2C_Init+0x1c4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10e      	bne.n	8003f24 <HAL_I2C_Init+0x1a4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1e58      	subs	r0, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	440b      	add	r3, r1
 8003f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f22:	e00f      	b.n	8003f44 <HAL_I2C_Init+0x1c4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1e58      	subs	r0, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	0099      	lsls	r1, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	6809      	ldr	r1, [r1, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6911      	ldr	r1, [r2, #16]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68d2      	ldr	r2, [r2, #12]
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	000186a0 	.word	0x000186a0
 8003fe0:	001e847f 	.word	0x001e847f
 8003fe4:	003d08ff 	.word	0x003d08ff
 8003fe8:	431bde83 	.word	0x431bde83
 8003fec:	10624dd3 	.word	0x10624dd3

08003ff0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e128      	b.n	8004254 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a90      	ldr	r2, [pc, #576]	; (800425c <HAL_I2S_Init+0x26c>)
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fd f9a9 	bl	8001374 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004038:	f023 030f 	bic.w	r3, r3, #15
 800403c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2202      	movs	r2, #2
 8004044:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d060      	beq.n	8004110 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004056:	2310      	movs	r3, #16
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e001      	b.n	8004060 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800405c:	2320      	movs	r3, #32
 800405e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b20      	cmp	r3, #32
 8004066:	d802      	bhi.n	800406e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800406e:	2001      	movs	r0, #1
 8004070:	f001 f98e 	bl	8005390 <HAL_RCCEx_GetPeriphCLKFreq>
 8004074:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407e:	d125      	bne.n	80040cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	3305      	adds	r3, #5
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e01f      	b.n	80040ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	461a      	mov	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	3305      	adds	r3, #5
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e00e      	b.n	80040ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	461a      	mov	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	3305      	adds	r3, #5
 80040e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_I2S_Init+0x270>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	08db      	lsrs	r3, r3, #3
 80040f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e003      	b.n	8004118 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004110:	2302      	movs	r3, #2
 8004112:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d902      	bls.n	8004124 <HAL_I2S_Init+0x134>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2bff      	cmp	r3, #255	; 0xff
 8004122:	d907      	bls.n	8004134 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e08f      	b.n	8004254 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	ea42 0103 	orr.w	r1, r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	430a      	orrs	r2, r1
 8004146:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004152:	f023 030f 	bic.w	r3, r3, #15
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6851      	ldr	r1, [r2, #4]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6892      	ldr	r2, [r2, #8]
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6992      	ldr	r2, [r2, #24]
 800416a:	430a      	orrs	r2, r1
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d161      	bne.n	8004244 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a38      	ldr	r2, [pc, #224]	; (8004264 <HAL_I2S_Init+0x274>)
 8004184:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a37      	ldr	r2, [pc, #220]	; (8004268 <HAL_I2S_Init+0x278>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d101      	bne.n	8004194 <HAL_I2S_Init+0x1a4>
 8004190:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_I2S_Init+0x27c>)
 8004192:	e001      	b.n	8004198 <HAL_I2S_Init+0x1a8>
 8004194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	4932      	ldr	r1, [pc, #200]	; (8004268 <HAL_I2S_Init+0x278>)
 80041a0:	428a      	cmp	r2, r1
 80041a2:	d101      	bne.n	80041a8 <HAL_I2S_Init+0x1b8>
 80041a4:	4a31      	ldr	r2, [pc, #196]	; (800426c <HAL_I2S_Init+0x27c>)
 80041a6:	e001      	b.n	80041ac <HAL_I2S_Init+0x1bc>
 80041a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041b0:	f023 030f 	bic.w	r3, r3, #15
 80041b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <HAL_I2S_Init+0x278>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_I2S_Init+0x1d4>
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_I2S_Init+0x27c>)
 80041c2:	e001      	b.n	80041c8 <HAL_I2S_Init+0x1d8>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c8:	2202      	movs	r2, #2
 80041ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <HAL_I2S_Init+0x278>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_I2S_Init+0x1ea>
 80041d6:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_I2S_Init+0x27c>)
 80041d8:	e001      	b.n	80041de <HAL_I2S_Init+0x1ee>
 80041da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ea:	d003      	beq.n	80041f4 <HAL_I2S_Init+0x204>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80041f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	e001      	b.n	8004200 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	b299      	uxth	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004216:	4303      	orrs	r3, r0
 8004218:	b29b      	uxth	r3, r3
 800421a:	430b      	orrs	r3, r1
 800421c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800421e:	4313      	orrs	r3, r2
 8004220:	b29a      	uxth	r2, r3
 8004222:	897b      	ldrh	r3, [r7, #10]
 8004224:	4313      	orrs	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800422c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a0d      	ldr	r2, [pc, #52]	; (8004268 <HAL_I2S_Init+0x278>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <HAL_I2S_Init+0x24c>
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_I2S_Init+0x27c>)
 800423a:	e001      	b.n	8004240 <HAL_I2S_Init+0x250>
 800423c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004240:	897a      	ldrh	r2, [r7, #10]
 8004242:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	08004367 	.word	0x08004367
 8004260:	cccccccd 	.word	0xcccccccd
 8004264:	0800447d 	.word	0x0800447d
 8004268:	40003800 	.word	0x40003800
 800426c:	40003400 	.word	0x40003400

08004270 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c9a      	adds	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10e      	bne.n	8004300 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ffb8 	bl	8004270 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	b292      	uxth	r2, r2
 800431c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10e      	bne.n	800435e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800434e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff93 	bl	8004284 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b04      	cmp	r3, #4
 8004380:	d13a      	bne.n	80043f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d109      	bne.n	80043a0 <I2S_IRQHandler+0x3a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d102      	bne.n	80043a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ffb4 	bl	8004308 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d126      	bne.n	80043f8 <I2S_IRQHandler+0x92>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d11f      	bne.n	80043f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f043 0202 	orr.w	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ff50 	bl	8004298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b03      	cmp	r3, #3
 8004402:	d136      	bne.n	8004472 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d109      	bne.n	8004422 <I2S_IRQHandler+0xbc>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d102      	bne.n	8004422 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff45 	bl	80042ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b08      	cmp	r3, #8
 800442a:	d122      	bne.n	8004472 <I2S_IRQHandler+0x10c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d11b      	bne.n	8004472 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004448:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff13 	bl	8004298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4aa2      	ldr	r2, [pc, #648]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004496:	4ba2      	ldr	r3, [pc, #648]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004498:	e001      	b.n	800449e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800449a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a9b      	ldr	r2, [pc, #620]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044b4:	4b9a      	ldr	r3, [pc, #616]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044b6:	e001      	b.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c8:	d004      	beq.n	80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 8099 	bne.w	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d107      	bne.n	80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f925 	bl	8004738 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9c8 	bl	8004898 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d13a      	bne.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d035      	beq.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7e      	ldr	r2, [pc, #504]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004526:	4b7e      	ldr	r3, [pc, #504]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004528:	e001      	b.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800452a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4979      	ldr	r1, [pc, #484]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004536:	428b      	cmp	r3, r1
 8004538:	d101      	bne.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800453a:	4b79      	ldr	r3, [pc, #484]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800453c:	e001      	b.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800453e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004542:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004546:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004556:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f043 0202 	orr.w	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff fe88 	bl	8004298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	f040 80be 	bne.w	8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80b8 	beq.w	8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a59      	ldr	r2, [pc, #356]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045ba:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045bc:	e001      	b.n	80045c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4954      	ldr	r1, [pc, #336]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045ca:	428b      	cmp	r3, r1
 80045cc:	d101      	bne.n	80045d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045ce:	4b54      	ldr	r3, [pc, #336]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045d0:	e001      	b.n	80045d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fe4a 	bl	8004298 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004604:	e084      	b.n	8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d107      	bne.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8be 	bl	800479c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d107      	bne.n	800463a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8fd 	bl	8004834 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d12f      	bne.n	80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	d02a      	beq.n	80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800465c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2e      	ldr	r2, [pc, #184]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004668:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800466a:	e001      	b.n	8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800466c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4929      	ldr	r1, [pc, #164]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004678:	428b      	cmp	r3, r1
 800467a:	d101      	bne.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800467e:	e001      	b.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004688:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0202 	orr.w	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fdfa 	bl	8004298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d131      	bne.n	8004712 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02c      	beq.n	8004712 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046c4:	e001      	b.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4912      	ldr	r1, [pc, #72]	; (800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046d2:	428b      	cmp	r3, r1
 80046d4:	d101      	bne.n	80046da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046d8:	e001      	b.n	80046de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80046da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	f043 0204 	orr.w	r2, r3, #4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fdc5 	bl	8004298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800470e:	e000      	b.n	8004712 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004710:	bf00      	nop
}
 8004712:	bf00      	nop
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40003800 	.word	0x40003800
 8004720:	40003400 	.word	0x40003400

08004724 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	1c99      	adds	r1, r3, #2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6251      	str	r1, [r2, #36]	; 0x24
 800474a:	881a      	ldrh	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d113      	bne.n	8004792 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004778:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ffc9 	bl	8004724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c99      	adds	r1, r3, #2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6251      	str	r1, [r2, #36]	; 0x24
 80047ae:	8819      	ldrh	r1, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1d      	ldr	r2, [pc, #116]	; (800482c <I2SEx_TxISR_I2SExt+0x90>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <I2SEx_TxISR_I2SExt+0x22>
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <I2SEx_TxISR_I2SExt+0x94>)
 80047bc:	e001      	b.n	80047c2 <I2SEx_TxISR_I2SExt+0x26>
 80047be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c2:	460a      	mov	r2, r1
 80047c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d121      	bne.n	8004822 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <I2SEx_TxISR_I2SExt+0x90>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <I2SEx_TxISR_I2SExt+0x50>
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <I2SEx_TxISR_I2SExt+0x94>)
 80047ea:	e001      	b.n	80047f0 <I2SEx_TxISR_I2SExt+0x54>
 80047ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	490d      	ldr	r1, [pc, #52]	; (800482c <I2SEx_TxISR_I2SExt+0x90>)
 80047f8:	428b      	cmp	r3, r1
 80047fa:	d101      	bne.n	8004800 <I2SEx_TxISR_I2SExt+0x64>
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <I2SEx_TxISR_I2SExt+0x94>)
 80047fe:	e001      	b.n	8004804 <I2SEx_TxISR_I2SExt+0x68>
 8004800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004804:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004808:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff81 	bl	8004724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40003800 	.word	0x40003800
 8004830:	40003400 	.word	0x40003400

08004834 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68d8      	ldr	r0, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	1c99      	adds	r1, r3, #2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800484c:	b282      	uxth	r2, r0
 800484e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d113      	bne.n	8004890 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004876:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ff4a 	bl	8004724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <I2SEx_RxISR_I2SExt+0x90>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <I2SEx_RxISR_I2SExt+0x16>
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <I2SEx_RxISR_I2SExt+0x94>)
 80048ac:	e001      	b.n	80048b2 <I2SEx_RxISR_I2SExt+0x1a>
 80048ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048b2:	68d8      	ldr	r0, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	1c99      	adds	r1, r3, #2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048be:	b282      	uxth	r2, r0
 80048c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d121      	bne.n	800491e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <I2SEx_RxISR_I2SExt+0x90>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <I2SEx_RxISR_I2SExt+0x50>
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <I2SEx_RxISR_I2SExt+0x94>)
 80048e6:	e001      	b.n	80048ec <I2SEx_RxISR_I2SExt+0x54>
 80048e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	490d      	ldr	r1, [pc, #52]	; (8004928 <I2SEx_RxISR_I2SExt+0x90>)
 80048f4:	428b      	cmp	r3, r1
 80048f6:	d101      	bne.n	80048fc <I2SEx_RxISR_I2SExt+0x64>
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <I2SEx_RxISR_I2SExt+0x94>)
 80048fa:	e001      	b.n	8004900 <I2SEx_RxISR_I2SExt+0x68>
 80048fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004900:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004904:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff ff03 	bl	8004724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40003800 	.word	0x40003800
 800492c:	40003400 	.word	0x40003400

08004930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e25b      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d075      	beq.n	8004a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494e:	4ba3      	ldr	r3, [pc, #652]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b04      	cmp	r3, #4
 8004958:	d00c      	beq.n	8004974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495a:	4ba0      	ldr	r3, [pc, #640]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004962:	2b08      	cmp	r3, #8
 8004964:	d112      	bne.n	800498c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4b9d      	ldr	r3, [pc, #628]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004972:	d10b      	bne.n	800498c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	4b99      	ldr	r3, [pc, #612]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0x108>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d157      	bne.n	8004a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e236      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x74>
 8004996:	4b91      	ldr	r3, [pc, #580]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a90      	ldr	r2, [pc, #576]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xb0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x98>
 80049ae:	4b8b      	ldr	r3, [pc, #556]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a8a      	ldr	r2, [pc, #552]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a87      	ldr	r2, [pc, #540]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xb0>
 80049c8:	4b84      	ldr	r3, [pc, #528]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a83      	ldr	r2, [pc, #524]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b81      	ldr	r3, [pc, #516]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a80      	ldr	r2, [pc, #512]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fc fe7e 	bl	80016e8 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fc fe7a 	bl	80016e8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1fb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xc0>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fc fe6a 	bl	80016e8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fc fe66 	bl	80016e8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e1e7      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	4b6c      	ldr	r3, [pc, #432]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0xe8>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d063      	beq.n	8004b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a46:	4b65      	ldr	r3, [pc, #404]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d11c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d116      	bne.n	8004a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6a:	4b5c      	ldr	r3, [pc, #368]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x152>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1bb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b56      	ldr	r3, [pc, #344]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4952      	ldr	r1, [pc, #328]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	e03a      	b.n	8004b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d020      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa0:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <HAL_RCC_OscConfig+0x2b0>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fc fe1f 	bl	80016e8 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aae:	f7fc fe1b 	bl	80016e8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e19c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac0:	4b46      	ldr	r3, [pc, #280]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004acc:	4b43      	ldr	r3, [pc, #268]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4940      	ldr	r1, [pc, #256]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	e015      	b.n	8004b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae2:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_OscConfig+0x2b0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fc fdfe 	bl	80016e8 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fc fdfa 	bl	80016e8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e17b      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d030      	beq.n	8004b7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <HAL_RCC_OscConfig+0x2b4>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fc fdde 	bl	80016e8 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b30:	f7fc fdda 	bl	80016e8 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e15b      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x200>
 8004b4e:	e015      	b.n	8004b7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b50:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCC_OscConfig+0x2b4>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fc fdc7 	bl	80016e8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fc fdc3 	bl	80016e8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e144      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80a0 	beq.w	8004cca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x2b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d121      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_RCC_OscConfig+0x2b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a07      	ldr	r2, [pc, #28]	; (8004be8 <HAL_RCC_OscConfig+0x2b8>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fc fd89 	bl	80016e8 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e011      	b.n	8004bfe <HAL_RCC_OscConfig+0x2ce>
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470000 	.word	0x42470000
 8004be4:	42470e80 	.word	0x42470e80
 8004be8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bec:	f7fc fd7c 	bl	80016e8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0fd      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfe:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_OscConfig+0x4d4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
 8004c12:	4b7d      	ldr	r3, [pc, #500]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a7c      	ldr	r2, [pc, #496]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	e01c      	b.n	8004c5a <HAL_RCC_OscConfig+0x32a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0x312>
 8004c28:	4b77      	ldr	r3, [pc, #476]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a76      	ldr	r2, [pc, #472]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c2e:	f043 0304 	orr.w	r3, r3, #4
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a73      	ldr	r2, [pc, #460]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	e00b      	b.n	8004c5a <HAL_RCC_OscConfig+0x32a>
 8004c42:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a70      	ldr	r2, [pc, #448]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a6d      	ldr	r2, [pc, #436]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fc fd41 	bl	80016e8 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fc fd3d 	bl	80016e8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0bc      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ee      	beq.n	8004c6a <HAL_RCC_OscConfig+0x33a>
 8004c8c:	e014      	b.n	8004cb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fc fd2b 	bl	80016e8 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fc fd27 	bl	80016e8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0a6      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ee      	bne.n	8004c96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a51      	ldr	r2, [pc, #324]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8092 	beq.w	8004df8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd4:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d05c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d141      	bne.n	8004d6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b48      	ldr	r3, [pc, #288]	; (8004e0c <HAL_RCC_OscConfig+0x4dc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fc fcfb 	bl	80016e8 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf6:	f7fc fcf7 	bl	80016e8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e078      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	4933      	ldr	r1, [pc, #204]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d3e:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <HAL_RCC_OscConfig+0x4dc>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fc fcd0 	bl	80016e8 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc fccc 	bl	80016e8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04d      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5e:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x41c>
 8004d6a:	e045      	b.n	8004df8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCC_OscConfig+0x4dc>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fc fcb9 	bl	80016e8 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fc fcb5 	bl	80016e8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e036      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x44a>
 8004d98:	e02e      	b.n	8004df8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e029      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d115      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dce:	4013      	ands	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40007000 	.word	0x40007000
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	42470060 	.word	0x42470060

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0cc      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90c      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d044      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d119      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e06f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e067      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4934      	ldr	r1, [pc, #208]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fc fbf2 	bl	80016e8 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fc fbee 	bl	80016e8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20c      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f821 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	5cd3      	ldrb	r3, [r2, r3]
 8004faa:	fa21 f303 	lsr.w	r3, r1, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fc fb52 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	080089bc 	.word	0x080089bc
 8004fd4:	200000c0 	.word	0x200000c0
 8004fd8:	200000c4 	.word	0x200000c4

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	2300      	movs	r3, #0
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff2:	4b63      	ldr	r3, [pc, #396]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d007      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x32>
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d008      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x38>
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 80b4 	bne.w	8005170 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800500a:	60bb      	str	r3, [r7, #8]
       break;
 800500c:	e0b3      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005010:	60bb      	str	r3, [r7, #8]
      break;
 8005012:	e0b0      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b5a      	ldr	r3, [pc, #360]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501e:	4b58      	ldr	r3, [pc, #352]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04a      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b55      	ldr	r3, [pc, #340]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	ea03 0501 	and.w	r5, r3, r1
 8005040:	ea04 0602 	and.w	r6, r4, r2
 8005044:	4629      	mov	r1, r5
 8005046:	4632      	mov	r2, r6
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0154      	lsls	r4, r2, #5
 8005052:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005056:	014b      	lsls	r3, r1, #5
 8005058:	4619      	mov	r1, r3
 800505a:	4622      	mov	r2, r4
 800505c:	1b49      	subs	r1, r1, r5
 800505e:	eb62 0206 	sbc.w	r2, r2, r6
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	0194      	lsls	r4, r2, #6
 800506c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005070:	018b      	lsls	r3, r1, #6
 8005072:	1a5b      	subs	r3, r3, r1
 8005074:	eb64 0402 	sbc.w	r4, r4, r2
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	00e2      	lsls	r2, r4, #3
 8005082:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005086:	00d9      	lsls	r1, r3, #3
 8005088:	460b      	mov	r3, r1
 800508a:	4614      	mov	r4, r2
 800508c:	195b      	adds	r3, r3, r5
 800508e:	eb44 0406 	adc.w	r4, r4, r6
 8005092:	f04f 0100 	mov.w	r1, #0
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	0262      	lsls	r2, r4, #9
 800509c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050a0:	0259      	lsls	r1, r3, #9
 80050a2:	460b      	mov	r3, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	4621      	mov	r1, r4
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f04f 0400 	mov.w	r4, #0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4623      	mov	r3, r4
 80050b4:	f7fb f888 	bl	80001c8 <__aeabi_uldivmod>
 80050b8:	4603      	mov	r3, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e049      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c0:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	ea03 0501 	and.w	r5, r3, r1
 80050d6:	ea04 0602 	and.w	r6, r4, r2
 80050da:	4629      	mov	r1, r5
 80050dc:	4632      	mov	r2, r6
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	0154      	lsls	r4, r2, #5
 80050e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050ec:	014b      	lsls	r3, r1, #5
 80050ee:	4619      	mov	r1, r3
 80050f0:	4622      	mov	r2, r4
 80050f2:	1b49      	subs	r1, r1, r5
 80050f4:	eb62 0206 	sbc.w	r2, r2, r6
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	0194      	lsls	r4, r2, #6
 8005102:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005106:	018b      	lsls	r3, r1, #6
 8005108:	1a5b      	subs	r3, r3, r1
 800510a:	eb64 0402 	sbc.w	r4, r4, r2
 800510e:	f04f 0100 	mov.w	r1, #0
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	00e2      	lsls	r2, r4, #3
 8005118:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800511c:	00d9      	lsls	r1, r3, #3
 800511e:	460b      	mov	r3, r1
 8005120:	4614      	mov	r4, r2
 8005122:	195b      	adds	r3, r3, r5
 8005124:	eb44 0406 	adc.w	r4, r4, r6
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	02a2      	lsls	r2, r4, #10
 8005132:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005136:	0299      	lsls	r1, r3, #10
 8005138:	460b      	mov	r3, r1
 800513a:	4614      	mov	r4, r2
 800513c:	4618      	mov	r0, r3
 800513e:	4621      	mov	r1, r4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	461a      	mov	r2, r3
 8005148:	4623      	mov	r3, r4
 800514a:	f7fb f83d 	bl	80001c8 <__aeabi_uldivmod>
 800514e:	4603      	mov	r3, r0
 8005150:	460c      	mov	r4, r1
 8005152:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	3301      	adds	r3, #1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	60bb      	str	r3, [r7, #8]
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005172:	60bb      	str	r3, [r7, #8]
      break;
 8005174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005176:	68bb      	ldr	r3, [r7, #8]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	00f42400 	.word	0x00f42400
 8005188:	007a1200 	.word	0x007a1200

0800518c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005192:	681b      	ldr	r3, [r3, #0]
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	200000c0 	.word	0x200000c0

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051a8:	f7ff fff0 	bl	800518c <HAL_RCC_GetHCLKFreq>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	080089cc 	.word	0x080089cc

080051cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d035      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051f4:	4b62      	ldr	r3, [pc, #392]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fa:	f7fc fa75 	bl	80016e8 <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005202:	f7fc fa71 	bl	80016e8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0b0      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005214:	4b5b      	ldr	r3, [pc, #364]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	019a      	lsls	r2, r3, #6
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	071b      	lsls	r3, r3, #28
 800522c:	4955      	ldr	r1, [pc, #340]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005234:	4b52      	ldr	r3, [pc, #328]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800523a:	f7fc fa55 	bl	80016e8 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005242:	f7fc fa51 	bl	80016e8 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e090      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005254:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8083 	beq.w	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	4b44      	ldr	r3, [pc, #272]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a43      	ldr	r2, [pc, #268]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800528a:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3e      	ldr	r2, [pc, #248]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005296:	f7fc fa27 	bl	80016e8 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800529e:	f7fc fa23 	bl	80016e8 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e062      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052bc:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02f      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d028      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052e4:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ea:	4b28      	ldr	r3, [pc, #160]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052f0:	4a24      	ldr	r2, [pc, #144]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d114      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005302:	f7fc f9f1 	bl	80016e8 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005308:	e00a      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc f9ed 	bl	80016e8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e02a      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ee      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005338:	d10d      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	490d      	ldr	r1, [pc, #52]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	608b      	str	r3, [r1, #8]
 8005354:	e005      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800535c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005360:	6093      	str	r3, [r2, #8]
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005364:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	4905      	ldr	r1, [pc, #20]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	42470068 	.word	0x42470068
 8005384:	40023800 	.word	0x40023800
 8005388:	40007000 	.word	0x40007000
 800538c:	42470e40 	.word	0x42470e40

08005390 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d13d      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053ae:	4b22      	ldr	r3, [pc, #136]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d12f      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053c2:	4b1e      	ldr	r3, [pc, #120]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053c4:	617b      	str	r3, [r7, #20]
          break;
 80053c6:	e02f      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d4:	d108      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053de:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	e007      	b.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fe:	099b      	lsrs	r3, r3, #6
 8005400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800540e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005412:	0f1b      	lsrs	r3, r3, #28
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	fbb2 f3f3 	udiv	r3, r2, r3
 800541e:	617b      	str	r3, [r7, #20]
          break;
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
          break;
 8005426:	bf00      	nop
        }
      }
      break;
 8005428:	bf00      	nop
    }
  }
  return frequency;
 800542a:	697b      	ldr	r3, [r7, #20]
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40023800 	.word	0x40023800
 800543c:	00bb8000 	.word	0x00bb8000
 8005440:	007a1200 	.word	0x007a1200
 8005444:	00f42400 	.word	0x00f42400

08005448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e056      	b.n	8005508 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fb ffe5 	bl	8001444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005490:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	ea42 0103 	orr.w	r1, r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	f003 0104 	and.w	r1, r3, #4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005510:	b084      	sub	sp, #16
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	f107 001c 	add.w	r0, r7, #28
 800551e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d122      	bne.n	800556e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800553c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f94a 	bl	80057fc <USB_CoreReset>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
 800556c:	e01a      	b.n	80055a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f93e 	bl	80057fc <USB_CoreReset>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
 8005596:	e005      	b.n	80055a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d10b      	bne.n	80055c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f043 0206 	orr.w	r2, r3, #6
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ce:	b004      	add	sp, #16
 80055d0:	4770      	bx	lr

080055d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f043 0201 	orr.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 0201 	bic.w	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d106      	bne.n	8005642 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e00b      	b.n	800565a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	e001      	b.n	800565a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e003      	b.n	8005662 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800565a:	2032      	movs	r0, #50	; 0x32
 800565c:	f7fc f850 	bl	8001700 <HAL_Delay>

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	f043 0220 	orr.w	r2, r3, #32
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <USB_FlushTxFifo+0x48>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e006      	b.n	80056a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d0f0      	beq.n	8005686 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	00030d40 	.word	0x00030d40

080056b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2210      	movs	r2, #16
 80056c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3301      	adds	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <USB_FlushRxFifo+0x40>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e006      	b.n	80056ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d0f0      	beq.n	80056ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	00030d40 	.word	0x00030d40

080056fc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	460b      	mov	r3, r1
 800570c:	71fb      	strb	r3, [r7, #7]
 800570e:	4613      	mov	r3, r2
 8005710:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800571a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d11a      	bne.n	8005758 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005722:	88bb      	ldrh	r3, [r7, #4]
 8005724:	3303      	adds	r3, #3
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e00f      	b.n	8005750 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	031a      	lsls	r2, r3, #12
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	461a      	mov	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3304      	adds	r3, #4
 8005748:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	3301      	adds	r3, #1
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	429a      	cmp	r2, r3
 8005756:	d3eb      	bcc.n	8005730 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3724      	adds	r7, #36	; 0x24
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005766:	b480      	push	{r7}
 8005768:	b089      	sub	sp, #36	; 0x24
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	3303      	adds	r3, #3
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e00b      	b.n	80057a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	601a      	str	r2, [r3, #0]
    pDest++;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3304      	adds	r3, #4
 800579a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	3301      	adds	r3, #1
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d3ef      	bcc.n	800578a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057aa:	69fb      	ldr	r3, [r7, #28]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3724      	adds	r7, #36	; 0x24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0301 	and.w	r3, r3, #1
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a13      	ldr	r2, [pc, #76]	; (8005860 <USB_CoreReset+0x64>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e01b      	b.n	8005852 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	daf2      	bge.n	8005808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f043 0201 	orr.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a09      	ldr	r2, [pc, #36]	; (8005860 <USB_CoreReset+0x64>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e006      	b.n	8005852 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d0f0      	beq.n	8005832 <USB_CoreReset+0x36>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	00030d40 	.word	0x00030d40

08005864 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005864:	b084      	sub	sp, #16
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	f107 001c 	add.w	r0, r7, #28
 8005872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d018      	beq.n	80058e8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10a      	bne.n	80058d2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ca:	f043 0304 	orr.w	r3, r3, #4
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e014      	b.n	80058fc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e009      	b.n	80058fc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058f6:	f023 0304 	bic.w	r3, r3, #4
 80058fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80058fc:	2110      	movs	r1, #16
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff feb4 	bl	800566c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fed7 	bl	80056b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e015      	b.n	800593c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005930:	461a      	mov	r2, r3
 8005932:	2300      	movs	r3, #0
 8005934:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3e5      	bcc.n	8005910 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005944:	2101      	movs	r1, #1
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8ac 	bl	8005aa4 <USB_DriveVbus>

  HAL_Delay(200U);
 800594c:	20c8      	movs	r0, #200	; 0xc8
 800594e:	f7fb fed7 	bl	8001700 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005972:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a14      	ldr	r2, [pc, #80]	; (80059c8 <USB_HostInit+0x164>)
 8005978:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <USB_HostInit+0x168>)
 800597e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005982:	e009      	b.n	8005998 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a10      	ldr	r2, [pc, #64]	; (80059d0 <USB_HostInit+0x16c>)
 800598e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <USB_HostInit+0x170>)
 8005994:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f043 0210 	orr.w	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <USB_HostInit+0x174>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c2:	b004      	add	sp, #16
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	01000200 	.word	0x01000200
 80059cc:	00e00300 	.word	0x00e00300
 80059d0:	00600080 	.word	0x00600080
 80059d4:	004000e0 	.word	0x004000e0
 80059d8:	a3200008 	.word	0xa3200008

080059dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a14:	4313      	orrs	r3, r2
 8005a16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d107      	bne.n	8005a2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a24:	461a      	mov	r2, r3
 8005a26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a2a:	6053      	str	r3, [r2, #4]
 8005a2c:	e009      	b.n	8005a42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d106      	bne.n	8005a42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a80:	2064      	movs	r0, #100	; 0x64
 8005a82:	f7fb fe3d 	bl	8001700 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a94:	200a      	movs	r0, #10
 8005a96:	f7fb fe33 	bl	8001700 <HAL_Delay>

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ac8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <USB_DriveVbus+0x44>
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d106      	bne.n	8005ae8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ae6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af2:	d109      	bne.n	8005b08 <USB_DriveVbus+0x64>
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	0c5b      	lsrs	r3, r3, #17
 8005b34:	f003 0303 	and.w	r3, r3, #3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	b29b      	uxth	r3, r3
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	70fb      	strb	r3, [r7, #3]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70bb      	strb	r3, [r7, #2]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	461a      	mov	r2, r3
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d87e      	bhi.n	8005ca4 <USB_HC_Init+0x13c>
 8005ba6:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <USB_HC_Init+0x44>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005c67 	.word	0x08005c67
 8005bb4:	08005bbd 	.word	0x08005bbd
 8005bb8:	08005c29 	.word	0x08005c29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f240 439d 	movw	r3, #1181	; 0x49d
 8005bce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005bd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da10      	bge.n	8005bfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005bf8:	e057      	b.n	8005caa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d051      	beq.n	8005caa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c24:	60d3      	str	r3, [r2, #12]
      break;
 8005c26:	e040      	b.n	8005caa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	461a      	mov	r2, r3
 8005c36:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da34      	bge.n	8005cae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	78fa      	ldrb	r2, [r7, #3]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c64:	e023      	b.n	8005cae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	461a      	mov	r2, r3
 8005c74:	f240 2325 	movw	r3, #549	; 0x225
 8005c78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da17      	bge.n	8005cb2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ca0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ca2:	e006      	b.n	8005cb2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca8:	e004      	b.n	8005cb4 <USB_HC_Init+0x14c>
      break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <USB_HC_Init+0x14c>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <USB_HC_Init+0x14c>
      break;
 8005cb2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005cde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	da03      	bge.n	8005cee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	e001      	b.n	8005cf2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005cf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d103      	bne.n	8005d02 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e001      	b.n	8005d06 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d06:	787b      	ldrb	r3, [r7, #1]
 8005d08:	059b      	lsls	r3, r3, #22
 8005d0a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d0e:	78bb      	ldrb	r3, [r7, #2]
 8005d10:	02db      	lsls	r3, r3, #11
 8005d12:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d16:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d1c:	049b      	lsls	r3, r3, #18
 8005d1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d22:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	0159      	lsls	r1, r3, #5
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	440b      	add	r3, r1
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d42:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d10f      	bne.n	8005d6c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d6a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop

08005d7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	; 0x30
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d028      	beq.n	8005df8 <USB_HC_StartXfer+0x7c>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d124      	bne.n	8005df8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <USB_HC_StartXfer+0x50>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	795b      	ldrb	r3, [r3, #5]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d107      	bne.n	8005dcc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa2e 	bl	8006224 <USB_DoPing>
      return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e112      	b.n	8005ff2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d112      	bne.n	8005df8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005df0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2200      	movs	r2, #0
 8005df6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d018      	beq.n	8005e32 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	8912      	ldrh	r2, [r2, #8]
 8005e08:	4413      	add	r3, r2
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	8912      	ldrh	r2, [r2, #8]
 8005e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e14:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e18:	8b7b      	ldrh	r3, [r7, #26]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d90b      	bls.n	8005e36 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e1e:	8b7b      	ldrh	r3, [r7, #26]
 8005e20:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	8912      	ldrh	r2, [r2, #8]
 8005e28:	fb02 f203 	mul.w	r2, r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	611a      	str	r2, [r3, #16]
 8005e30:	e001      	b.n	8005e36 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e32:	2301      	movs	r3, #1
 8005e34:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	78db      	ldrb	r3, [r3, #3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	8912      	ldrh	r2, [r2, #8]
 8005e44:	fb02 f203 	mul.w	r2, r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e56:	04d9      	lsls	r1, r3, #19
 8005e58:	4b68      	ldr	r3, [pc, #416]	; (8005ffc <USB_HC_StartXfer+0x280>)
 8005e5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	7a9b      	ldrb	r3, [r3, #10]
 8005e62:	075b      	lsls	r3, r3, #29
 8005e64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	0148      	lsls	r0, r1, #5
 8005e6c:	6a39      	ldr	r1, [r7, #32]
 8005e6e:	4401      	add	r1, r0
 8005e70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	68d9      	ldr	r1, [r3, #12]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	460a      	mov	r2, r1
 8005e90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2301      	moveq	r3, #1
 8005ea4:	2300      	movne	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ec8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	7e7b      	ldrb	r3, [r7, #25]
 8005eda:	075b      	lsls	r3, r3, #29
 8005edc:	69f9      	ldr	r1, [r7, #28]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	6a39      	ldr	r1, [r7, #32]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a41      	ldr	r2, [pc, #260]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005efc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005efe:	4b40      	ldr	r3, [pc, #256]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f06:	4a3e      	ldr	r2, [pc, #248]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f08:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f12:	4b3b      	ldr	r3, [pc, #236]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	4a39      	ldr	r2, [pc, #228]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e005      	b.n	8005f2c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f20:	4b37      	ldr	r3, [pc, #220]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f28:	4a35      	ldr	r2, [pc, #212]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f2a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f2c:	4b34      	ldr	r3, [pc, #208]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	4a32      	ldr	r2, [pc, #200]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f36:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	461a      	mov	r2, r3
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <USB_HC_StartXfer+0x284>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d14e      	bne.n	8005ff0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d14a      	bne.n	8005ff0 <USB_HC_StartXfer+0x274>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d046      	beq.n	8005ff0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	79db      	ldrb	r3, [r3, #7]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d830      	bhi.n	8005fcc <USB_HC_StartXfer+0x250>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <USB_HC_StartXfer+0x1f4>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005fa5 	.word	0x08005fa5
 8005f78:	08005f81 	.word	0x08005f81
 8005f7c:	08005fa5 	.word	0x08005fa5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	3303      	adds	r3, #3
 8005f86:	089b      	lsrs	r3, r3, #2
 8005f88:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f8a:	8afa      	ldrh	r2, [r7, #22]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d91c      	bls.n	8005fd0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	619a      	str	r2, [r3, #24]
          }
          break;
 8005fa2:	e015      	b.n	8005fd0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	3303      	adds	r3, #3
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005fae:	8afa      	ldrh	r2, [r7, #22]
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d90a      	bls.n	8005fd4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]
          }
          break;
 8005fca:	e003      	b.n	8005fd4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005fcc:	bf00      	nop
 8005fce:	e002      	b.n	8005fd6 <USB_HC_StartXfer+0x25a>
          break;
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <USB_HC_StartXfer+0x25a>
          break;
 8005fd4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	68d9      	ldr	r1, [r3, #12]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	785a      	ldrb	r2, [r3, #1]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	b298      	uxth	r0, r3
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	4603      	mov	r3, r0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fb86 	bl	80056fc <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3728      	adds	r7, #40	; 0x28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	1ff80000 	.word	0x1ff80000
 8006000:	20000170 	.word	0x20000170

08006004 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	b29b      	uxth	r3, r3
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006026:	b480      	push	{r7}
 8006028:	b087      	sub	sp, #28
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	0c9b      	lsrs	r3, r3, #18
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <USB_HC_Halt+0x3a>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d16c      	bne.n	800613a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	440a      	add	r2, r1
 8006076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800607e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d143      	bne.n	8006114 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3301      	adds	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060f8:	d81d      	bhi.n	8006136 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006110:	d0ec      	beq.n	80060ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006112:	e080      	b.n	8006216 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	440a      	add	r2, r1
 800612a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006132:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006134:	e06f      	b.n	8006216 <USB_HC_Halt+0x1f0>
          break;
 8006136:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006138:	e06d      	b.n	8006216 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	440a      	add	r2, r1
 8006150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006158:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d143      	bne.n	80061f2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	440a      	add	r2, r1
 8006180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006188:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061c8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061d6:	d81d      	bhi.n	8006214 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ee:	d0ec      	beq.n	80061ca <USB_HC_Halt+0x1a4>
 80061f0:	e011      	b.n	8006216 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	440a      	add	r2, r1
 8006208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e000      	b.n	8006216 <USB_HC_Halt+0x1f0>
          break;
 8006214:	bf00      	nop
    }
  }

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006238:	2301      	movs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	04da      	lsls	r2, r3, #19
 8006240:	4b15      	ldr	r3, [pc, #84]	; (8006298 <USB_DoPing+0x74>)
 8006242:	4013      	ands	r3, r2
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	440a      	add	r2, r1
 800624c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006254:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800626c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006274:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	1ff80000 	.word	0x1ff80000

0800629c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff f9a1 	bl	80055f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80062b2:	2110      	movs	r1, #16
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff f9d9 	bl	800566c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff f9fc 	bl	80056b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062c0:	2300      	movs	r3, #0
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	e01f      	b.n	8006306 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	461a      	mov	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3301      	adds	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b0f      	cmp	r3, #15
 800630a:	d9dc      	bls.n	80062c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	e034      	b.n	800637c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006328:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006330:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006338:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	461a      	mov	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3301      	adds	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006358:	d80c      	bhi.n	8006374 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800636c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006370:	d0ec      	beq.n	800634c <USB_StopHost+0xb0>
 8006372:	e000      	b.n	8006376 <USB_StopHost+0xda>
        break;
 8006374:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	3301      	adds	r3, #1
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d9c7      	bls.n	8006312 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006388:	461a      	mov	r2, r3
 800638a:	f04f 33ff 	mov.w	r3, #4294967295
 800638e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f04f 32ff 	mov.w	r2, #4294967295
 8006396:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff f91a 	bl	80055d2 <USB_EnableGlobalInt>

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af04      	add	r7, sp, #16
 80063ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80063b0:	2301      	movs	r3, #1
 80063b2:	2202      	movs	r2, #2
 80063b4:	2102      	movs	r1, #2
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fc68 	bl	8006c8c <USBH_FindInterface>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2bff      	cmp	r3, #255	; 0xff
 80063c4:	d002      	beq.n	80063cc <USBH_CDC_InterfaceInit+0x24>
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d901      	bls.n	80063d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063cc:	2302      	movs	r3, #2
 80063ce:	e13d      	b.n	800664c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc3d 	bl	8006c54 <USBH_SelectInterface>
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e131      	b.n	800664c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80063ee:	2050      	movs	r0, #80	; 0x50
 80063f0:	f002 fa04 	bl	80087fc <malloc>
 80063f4:	4603      	mov	r3, r0
 80063f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006408:	2302      	movs	r3, #2
 800640a:	e11f      	b.n	800664c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800640c:	2250      	movs	r2, #80	; 0x50
 800640e:	2100      	movs	r1, #0
 8006410:	68b8      	ldr	r0, [r7, #8]
 8006412:	f002 fa03 	bl	800881c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	211a      	movs	r1, #26
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	4413      	add	r3, r2
 8006422:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b25b      	sxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	da15      	bge.n	800645a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	211a      	movs	r1, #26
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	211a      	movs	r1, #26
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fe36 	bl	80080d2 <USBH_AllocPipe>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	7819      	ldrb	r1, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	7858      	ldrb	r0, [r3, #1]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	8952      	ldrh	r2, [r2, #10]
 8006486:	9202      	str	r2, [sp, #8]
 8006488:	2203      	movs	r2, #3
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	4623      	mov	r3, r4
 8006490:	4602      	mov	r2, r0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fdee 	bl	8008074 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f002 f8fb 	bl	800869c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80064a6:	2300      	movs	r3, #0
 80064a8:	2200      	movs	r2, #0
 80064aa:	210a      	movs	r1, #10
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fbed 	bl	8006c8c <USBH_FindInterface>
 80064b2:	4603      	mov	r3, r0
 80064b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	2bff      	cmp	r3, #255	; 0xff
 80064ba:	d002      	beq.n	80064c2 <USBH_CDC_InterfaceInit+0x11a>
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d901      	bls.n	80064c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064c2:	2302      	movs	r3, #2
 80064c4:	e0c2      	b.n	800664c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	211a      	movs	r1, #26
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da16      	bge.n	800650c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	211a      	movs	r1, #26
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	211a      	movs	r1, #26
 80064fa:	fb01 f303 	mul.w	r3, r1, r3
 80064fe:	4413      	add	r3, r2
 8006500:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006504:	881a      	ldrh	r2, [r3, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	835a      	strh	r2, [r3, #26]
 800650a:	e015      	b.n	8006538 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	211a      	movs	r1, #26
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	211a      	movs	r1, #26
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	211a      	movs	r1, #26
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b25b      	sxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	da16      	bge.n	800657e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	211a      	movs	r1, #26
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	4413      	add	r3, r2
 800655c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	211a      	movs	r1, #26
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	4413      	add	r3, r2
 8006572:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006576:	881a      	ldrh	r2, [r3, #0]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	835a      	strh	r2, [r3, #26]
 800657c:	e015      	b.n	80065aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	211a      	movs	r1, #26
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	4413      	add	r3, r2
 800658a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800658e:	781a      	ldrb	r2, [r3, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	211a      	movs	r1, #26
 800659a:	fb01 f303 	mul.w	r3, r1, r3
 800659e:	4413      	add	r3, r2
 80065a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065a4:	881a      	ldrh	r2, [r3, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	7b9b      	ldrb	r3, [r3, #14]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fd8e 	bl	80080d2 <USBH_AllocPipe>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	7bdb      	ldrb	r3, [r3, #15]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fd84 	bl	80080d2 <USBH_AllocPipe>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	7b59      	ldrb	r1, [r3, #13]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	7b98      	ldrb	r0, [r3, #14]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	8b12      	ldrh	r2, [r2, #24]
 80065ea:	9202      	str	r2, [sp, #8]
 80065ec:	2202      	movs	r2, #2
 80065ee:	9201      	str	r2, [sp, #4]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	4623      	mov	r3, r4
 80065f4:	4602      	mov	r2, r0
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fd3c 	bl	8008074 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	7b19      	ldrb	r1, [r3, #12]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	7bd8      	ldrb	r0, [r3, #15]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	8b52      	ldrh	r2, [r2, #26]
 8006614:	9202      	str	r2, [sp, #8]
 8006616:	2202      	movs	r2, #2
 8006618:	9201      	str	r2, [sp, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4623      	mov	r3, r4
 800661e:	4602      	mov	r2, r0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fd27 	bl	8008074 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	7b5b      	ldrb	r3, [r3, #13]
 8006632:	2200      	movs	r2, #0
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f002 f830 	bl	800869c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	7b1b      	ldrb	r3, [r3, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 f829 	bl	800869c <USBH_LL_SetToggle>

  return USBH_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	bd90      	pop	{r4, r7, pc}

08006654 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fd1c 	bl	80080b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fd47 	bl	8008114 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	7b1b      	ldrb	r3, [r3, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	7b1b      	ldrb	r3, [r3, #12]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fd09 	bl	80080b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	7b1b      	ldrb	r3, [r3, #12]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fd34 	bl	8008114 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	7b5b      	ldrb	r3, [r3, #13]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	7b5b      	ldrb	r3, [r3, #13]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 fcf6 	bl	80080b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	7b5b      	ldrb	r3, [r3, #13]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fd21 	bl	8008114 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f002 f88d 	bl	800880c <free>
    phost->pActiveClass->pData = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f8:	2200      	movs	r2, #0
 80066fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3340      	adds	r3, #64	; 0x40
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8b1 	bl	8006886 <GetLineCoding>
 8006724:	4603      	mov	r3, r0
 8006726:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006734:	2102      	movs	r1, #2
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800673a:	7afb      	ldrb	r3, [r7, #11]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006764:	2b04      	cmp	r3, #4
 8006766:	d877      	bhi.n	8006858 <USBH_CDC_Process+0x114>
 8006768:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <USBH_CDC_Process+0x2c>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	08006785 	.word	0x08006785
 8006774:	0800678b 	.word	0x0800678b
 8006778:	080067bb 	.word	0x080067bb
 800677c:	0800682f 	.word	0x0800682f
 8006780:	0800683d 	.word	0x0800683d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e06d      	b.n	8006866 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f897 	bl	80068c4 <SetLineCoding>
 8006796:	4603      	mov	r3, r0
 8006798:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067a8:	e058      	b.n	800685c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d055      	beq.n	800685c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2204      	movs	r2, #4
 80067b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067b8:	e050      	b.n	800685c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3340      	adds	r3, #64	; 0x40
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f860 	bl	8006886 <GetLineCoding>
 80067c6:	4603      	mov	r3, r0
 80067c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d126      	bne.n	800681e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e2:	791b      	ldrb	r3, [r3, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d13b      	bne.n	8006860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d133      	bne.n	8006860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006802:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006804:	429a      	cmp	r2, r3
 8006806:	d12b      	bne.n	8006860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006810:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006812:	429a      	cmp	r2, r3
 8006814:	d124      	bne.n	8006860 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f95a 	bl	8006ad0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800681c:	e020      	b.n	8006860 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d01d      	beq.n	8006860 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2204      	movs	r2, #4
 8006828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800682c:	e018      	b.n	8006860 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f867 	bl	8006902 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8dc 	bl	80069f2 <CDC_ProcessReception>
      break;
 800683a:	e014      	b.n	8006866 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 ffe5 	bl	800780e <USBH_ClrFeature>
 8006844:	4603      	mov	r3, r0
 8006846:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006856:	e005      	b.n	8006864 <USBH_CDC_Process+0x120>

    default:
      break;
 8006858:	bf00      	nop
 800685a:	e004      	b.n	8006866 <USBH_CDC_Process+0x122>
      break;
 800685c:	bf00      	nop
 800685e:	e002      	b.n	8006866 <USBH_CDC_Process+0x122>
      break;
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <USBH_CDC_Process+0x122>
      break;
 8006864:	bf00      	nop

  }

  return status;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	22a1      	movs	r2, #161	; 0xa1
 8006894:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2207      	movs	r2, #7
 80068ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2207      	movs	r2, #7
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 f98a 	bl	8007bce <USBH_CtlReq>
 80068ba:	4603      	mov	r3, r0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2221      	movs	r2, #33	; 0x21
 80068d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2207      	movs	r2, #7
 80068ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2207      	movs	r2, #7
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 f96b 	bl	8007bce <USBH_CtlReq>
 80068f8:	4603      	mov	r3, r0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af02      	add	r7, sp, #8
 8006908:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006914:	2300      	movs	r3, #0
 8006916:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800691e:	2b01      	cmp	r3, #1
 8006920:	d002      	beq.n	8006928 <CDC_ProcessTransmission+0x26>
 8006922:	2b02      	cmp	r3, #2
 8006924:	d025      	beq.n	8006972 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006926:	e060      	b.n	80069ea <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	8b12      	ldrh	r2, [r2, #24]
 8006930:	4293      	cmp	r3, r2
 8006932:	d90c      	bls.n	800694e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8b1a      	ldrh	r2, [r3, #24]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	7b58      	ldrb	r0, [r3, #13]
 8006940:	2301      	movs	r3, #1
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	4603      	mov	r3, r0
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fb51 	bl	8007fee <USBH_BulkSendData>
 800694c:	e00c      	b.n	8006968 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	7b58      	ldrb	r0, [r3, #13]
 800695c:	2301      	movs	r3, #1
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4603      	mov	r3, r0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fb43 	bl	8007fee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006970:	e03b      	b.n	80069ea <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7b5b      	ldrb	r3, [r3, #13]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fe65 	bl	8008648 <USBH_LL_GetURBState>
 800697e:	4603      	mov	r3, r0
 8006980:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006982:	7afb      	ldrb	r3, [r7, #11]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d128      	bne.n	80069da <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	8b12      	ldrh	r2, [r2, #24]
 8006990:	4293      	cmp	r3, r2
 8006992:	d90e      	bls.n	80069b2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	8b12      	ldrh	r2, [r2, #24]
 800699c:	1a9a      	subs	r2, r3, r2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	8b12      	ldrh	r2, [r2, #24]
 80069aa:	441a      	add	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	61da      	str	r2, [r3, #28]
 80069b0:	e002      	b.n	80069b8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069c8:	e00e      	b.n	80069e8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f868 	bl	8006aa8 <USBH_CDC_TransmitCallback>
      break;
 80069d8:	e006      	b.n	80069e8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d103      	bne.n	80069e8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069e8:	bf00      	nop
  }
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d002      	beq.n	8006a18 <CDC_ProcessReception+0x26>
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d00e      	beq.n	8006a34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006a16:	e043      	b.n	8006aa0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	6a19      	ldr	r1, [r3, #32]
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	8b5a      	ldrh	r2, [r3, #26]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	7b1b      	ldrb	r3, [r3, #12]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fb07 	bl	8008038 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a32:	e035      	b.n	8006aa0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fe04 	bl	8008648 <USBH_LL_GetURBState>
 8006a40:	4603      	mov	r3, r0
 8006a42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d129      	bne.n	8006a9e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	7b1b      	ldrb	r3, [r3, #12]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fd67 	bl	8008524 <USBH_LL_GetLastXferSize>
 8006a56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d016      	beq.n	8006a90 <CDC_ProcessReception+0x9e>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	8b5b      	ldrh	r3, [r3, #26]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d910      	bls.n	8006a90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6a1a      	ldr	r2, [r3, #32]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	441a      	add	r2, r3
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a8e:	e006      	b.n	8006a9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f80f 	bl	8006abc <USBH_CDC_ReceiveCallback>
      break;
 8006a9e:	bf00      	nop
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006af8:	2302      	movs	r3, #2
 8006afa:	e029      	b.n	8006b50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	79fa      	ldrb	r2, [r7, #7]
 8006b00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f81f 	bl	8006b58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f001 fc39 	bl	80083c0 <USBH_LL_Init>

  return USBH_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e009      	b.n	8006b7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	33e0      	adds	r3, #224	; 0xe0
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b0e      	cmp	r3, #14
 8006b82:	d9f2      	bls.n	8006b6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e009      	b.n	8006b9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba4:	d3f1      	bcc.n	8006b8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2240      	movs	r2, #64	; 0x40
 8006bca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10e      	bne.n	8006c3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	33de      	adds	r3, #222	; 0xde
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	e004      	b.n	8006c46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	73fb      	strb	r3, [r7, #15]
 8006c40:	e001      	b.n	8006c46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c6a:	78fa      	ldrb	r2, [r7, #3]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d204      	bcs.n	8006c7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c78:	e001      	b.n	8006c7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	70fb      	strb	r3, [r7, #3]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70bb      	strb	r3, [r7, #2]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cb6:	e025      	b.n	8006d04 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	221a      	movs	r2, #26
 8006cbc:	fb02 f303 	mul.w	r3, r2, r3
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	795b      	ldrb	r3, [r3, #5]
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d002      	beq.n	8006cda <USBH_FindInterface+0x4e>
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	2bff      	cmp	r3, #255	; 0xff
 8006cd8:	d111      	bne.n	8006cfe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cde:	78ba      	ldrb	r2, [r7, #2]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d002      	beq.n	8006cea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ce4:	78bb      	ldrb	r3, [r7, #2]
 8006ce6:	2bff      	cmp	r3, #255	; 0xff
 8006ce8:	d109      	bne.n	8006cfe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cee:	787a      	ldrb	r2, [r7, #1]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d002      	beq.n	8006cfa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cf4:	787b      	ldrb	r3, [r7, #1]
 8006cf6:	2bff      	cmp	r3, #255	; 0xff
 8006cf8:	d101      	bne.n	8006cfe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	e006      	b.n	8006d0c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	3301      	adds	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d9d6      	bls.n	8006cb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d0a:	23ff      	movs	r3, #255	; 0xff
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fb89 	bl	8008438 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006d26:	2101      	movs	r1, #1
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fca0 	bl	800866e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af04      	add	r7, sp, #16
 8006d3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d102      	bne.n	8006d5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2203      	movs	r2, #3
 8006d58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b0b      	cmp	r3, #11
 8006d62:	f200 81b3 	bhi.w	80070cc <USBH_Process+0x394>
 8006d66:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <USBH_Process+0x34>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006dcf 	.word	0x08006dcf
 8006d74:	08006e37 	.word	0x08006e37
 8006d78:	08007067 	.word	0x08007067
 8006d7c:	080070cd 	.word	0x080070cd
 8006d80:	08006edb 	.word	0x08006edb
 8006d84:	0800700d 	.word	0x0800700d
 8006d88:	08006f11 	.word	0x08006f11
 8006d8c:	08006f31 	.word	0x08006f31
 8006d90:	08006f51 	.word	0x08006f51
 8006d94:	08006f7f 	.word	0x08006f7f
 8006d98:	0800704f 	.word	0x0800704f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8193 	beq.w	80070d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006db0:	20c8      	movs	r0, #200	; 0xc8
 8006db2:	f001 fca6 	bl	8008702 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fb99 	bl	80084ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006dcc:	e180      	b.n	80070d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006de6:	e182      	b.n	80070ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df2:	d914      	bls.n	8006e1e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d903      	bls.n	8006e16 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	220d      	movs	r2, #13
 8006e12:	701a      	strb	r2, [r3, #0]
      break;
 8006e14:	e16b      	b.n	80070ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
      break;
 8006e1c:	e167      	b.n	80070ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e24:	f103 020a 	add.w	r2, r3, #10
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e2e:	200a      	movs	r0, #10
 8006e30:	f001 fc67 	bl	8008702 <USBH_Delay>
      break;
 8006e34:	e15b      	b.n	80070ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e46:	2104      	movs	r1, #4
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e4c:	2064      	movs	r0, #100	; 0x64
 8006e4e:	f001 fc58 	bl	8008702 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fb26 	bl	80084a4 <USBH_LL_GetSpeed>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2205      	movs	r2, #5
 8006e66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f931 	bl	80080d2 <USBH_AllocPipe>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f929 	bl	80080d2 <USBH_AllocPipe>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7919      	ldrb	r1, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e9c:	b292      	uxth	r2, r2
 8006e9e:	9202      	str	r2, [sp, #8]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	9201      	str	r2, [sp, #4]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f8e2 	bl	8008074 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7959      	ldrb	r1, [r3, #5]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ec4:	b292      	uxth	r2, r2
 8006ec6:	9202      	str	r2, [sp, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	9201      	str	r2, [sp, #4]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f8ce 	bl	8008074 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ed8:	e109      	b.n	80070ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f90c 	bl	80070f8 <USBH_HandleEnum>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 80f3 	bne.w	80070d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d103      	bne.n	8006f08 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2208      	movs	r2, #8
 8006f04:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f06:	e0e5      	b.n	80070d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	701a      	strb	r2, [r3, #0]
      break;
 8006f0e:	e0e1      	b.n	80070d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80de 	beq.w	80070d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f22:	2101      	movs	r1, #1
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f2e:	e0d3      	b.n	80070d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fc20 	bl	8007780 <USBH_SetCfg>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 80ca 	bne.w	80070dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2209      	movs	r2, #9
 8006f4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f4e:	e0c5      	b.n	80070dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc30 	bl	80077c6 <USBH_SetFeature>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 80b9 	bne.w	80070e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	220a      	movs	r2, #10
 8006f72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f74:	e0b4      	b.n	80070e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
      break;
 8006f7c:	e0b0      	b.n	80070e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80ad 	beq.w	80070e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	e016      	b.n	8006fc6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f98:	7bfa      	ldrb	r2, [r7, #15]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32de      	adds	r2, #222	; 0xde
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	791a      	ldrb	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d108      	bne.n	8006fc0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006fae:	7bfa      	ldrb	r2, [r7, #15]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	32de      	adds	r2, #222	; 0xde
 8006fb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006fbe:	e005      	b.n	8006fcc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0e5      	beq.n	8006f98 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d016      	beq.n	8007004 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2206      	movs	r2, #6
 8006fec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff4:	2103      	movs	r1, #3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ffa:	e073      	b.n	80070e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	220d      	movs	r2, #13
 8007000:	701a      	strb	r2, [r3, #0]
      break;
 8007002:	e06f      	b.n	80070e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	220d      	movs	r2, #13
 8007008:	701a      	strb	r2, [r3, #0]
      break;
 800700a:	e06b      	b.n	80070e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
 8007022:	4603      	mov	r3, r0
 8007024:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d103      	bne.n	8007036 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220b      	movs	r2, #11
 8007032:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007034:	e058      	b.n	80070e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d154      	bne.n	80070e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	220d      	movs	r2, #13
 8007042:	701a      	strb	r2, [r3, #0]
      break;
 8007044:	e050      	b.n	80070e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	220d      	movs	r2, #13
 800704a:	701a      	strb	r2, [r3, #0]
      break;
 800704c:	e04c      	b.n	80070e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d049      	beq.n	80070ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
      }
      break;
 8007064:	e042      	b.n	80070ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fd72 	bl	8006b58 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070a2:	2105      	movs	r1, #5
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d107      	bne.n	80070c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fe2b 	bl	8006d18 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070c2:	e014      	b.n	80070ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f9b7 	bl	8008438 <USBH_LL_Start>
      break;
 80070ca:	e010      	b.n	80070ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80070cc:	bf00      	nop
 80070ce:	e00e      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070d0:	bf00      	nop
 80070d2:	e00c      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070d4:	bf00      	nop
 80070d6:	e00a      	b.n	80070ee <USBH_Process+0x3b6>
    break;
 80070d8:	bf00      	nop
 80070da:	e008      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070dc:	bf00      	nop
 80070de:	e006      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <USBH_Process+0x3b6>
      break;
 80070ec:	bf00      	nop
  }
  return USBH_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af04      	add	r7, sp, #16
 80070fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007104:	2301      	movs	r3, #1
 8007106:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b07      	cmp	r3, #7
 800710e:	f200 81c1 	bhi.w	8007494 <USBH_HandleEnum+0x39c>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <USBH_HandleEnum+0x20>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007139 	.word	0x08007139
 800711c:	080071f7 	.word	0x080071f7
 8007120:	08007261 	.word	0x08007261
 8007124:	080072ef 	.word	0x080072ef
 8007128:	08007359 	.word	0x08007359
 800712c:	080073c9 	.word	0x080073c9
 8007130:	0800740f 	.word	0x0800740f
 8007134:	08007455 	.word	0x08007455
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007138:	2108      	movs	r1, #8
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa50 	bl	80075e0 <USBH_Get_DevDesc>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d130      	bne.n	80071ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7919      	ldrb	r1, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800716e:	b292      	uxth	r2, r2
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4603      	mov	r3, r0
 800717a:	2280      	movs	r2, #128	; 0x80
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 ff79 	bl	8008074 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7959      	ldrb	r1, [r3, #5]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007196:	b292      	uxth	r2, r2
 8007198:	9202      	str	r2, [sp, #8]
 800719a:	2200      	movs	r2, #0
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4603      	mov	r3, r0
 80071a2:	2200      	movs	r2, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 ff65 	bl	8008074 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071aa:	e175      	b.n	8007498 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	f040 8172 	bne.w	8007498 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ba:	3301      	adds	r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d903      	bls.n	80071d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220d      	movs	r2, #13
 80071d2:	701a      	strb	r2, [r3, #0]
      break;
 80071d4:	e160      	b.n	8007498 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	795b      	ldrb	r3, [r3, #5]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 ff99 	bl	8008114 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 ff93 	bl	8008114 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
      break;
 80071f4:	e150      	b.n	8007498 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071f6:	2112      	movs	r1, #18
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9f1 	bl	80075e0 <USBH_Get_DevDesc>
 80071fe:	4603      	mov	r3, r0
 8007200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800720e:	e145      	b.n	800749c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b03      	cmp	r3, #3
 8007214:	f040 8142 	bne.w	800749c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800721e:	3301      	adds	r3, #1
 8007220:	b2da      	uxtb	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800722e:	2b03      	cmp	r3, #3
 8007230:	d903      	bls.n	800723a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220d      	movs	r2, #13
 8007236:	701a      	strb	r2, [r3, #0]
      break;
 8007238:	e130      	b.n	800749c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	795b      	ldrb	r3, [r3, #5]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 ff67 	bl	8008114 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 ff61 	bl	8008114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
      break;
 800725e:	e11d      	b.n	800749c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007260:	2101      	movs	r1, #1
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa68 	bl	8007738 <USBH_SetAddress>
 8007268:	4603      	mov	r3, r0
 800726a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d132      	bne.n	80072d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007272:	2002      	movs	r0, #2
 8007274:	f001 fa45 	bl	8008702 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2203      	movs	r2, #3
 8007284:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	7919      	ldrb	r1, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800729a:	b292      	uxth	r2, r2
 800729c:	9202      	str	r2, [sp, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	9201      	str	r2, [sp, #4]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4603      	mov	r3, r0
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fee3 	bl	8008074 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7959      	ldrb	r1, [r3, #5]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072c2:	b292      	uxth	r2, r2
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4603      	mov	r3, r0
 80072ce:	2200      	movs	r2, #0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fecf 	bl	8008074 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072d6:	e0e3      	b.n	80074a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	f040 80e0 	bne.w	80074a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	220d      	movs	r2, #13
 80072e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	705a      	strb	r2, [r3, #1]
      break;
 80072ec:	e0d8      	b.n	80074a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80072ee:	2109      	movs	r1, #9
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f99d 	bl	8007630 <USBH_Get_CfgDesc>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2204      	movs	r2, #4
 8007304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007306:	e0cd      	b.n	80074a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b03      	cmp	r3, #3
 800730c:	f040 80ca 	bne.w	80074a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007316:	3301      	adds	r3, #1
 8007318:	b2da      	uxtb	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007326:	2b03      	cmp	r3, #3
 8007328:	d903      	bls.n	8007332 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	220d      	movs	r2, #13
 800732e:	701a      	strb	r2, [r3, #0]
      break;
 8007330:	e0b8      	b.n	80074a4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	795b      	ldrb	r3, [r3, #5]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 feeb 	bl	8008114 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	791b      	ldrb	r3, [r3, #4]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fee5 	bl	8008114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e0a5      	b.n	80074a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f965 	bl	8007630 <USBH_Get_CfgDesc>
 8007366:	4603      	mov	r3, r0
 8007368:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d103      	bne.n	8007378 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2205      	movs	r2, #5
 8007374:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007376:	e097      	b.n	80074a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b03      	cmp	r3, #3
 800737c:	f040 8094 	bne.w	80074a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007386:	3301      	adds	r3, #1
 8007388:	b2da      	uxtb	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007396:	2b03      	cmp	r3, #3
 8007398:	d903      	bls.n	80073a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	220d      	movs	r2, #13
 800739e:	701a      	strb	r2, [r3, #0]
      break;
 80073a0:	e082      	b.n	80074a8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	795b      	ldrb	r3, [r3, #5]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 feb3 	bl	8008114 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	791b      	ldrb	r3, [r3, #4]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fead 	bl	8008114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
      break;
 80073c6:	e06f      	b.n	80074a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d019      	beq.n	8007406 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073de:	23ff      	movs	r3, #255	; 0xff
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f949 	bl	8007678 <USBH_Get_StringDesc>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2206      	movs	r2, #6
 80073f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073f6:	e059      	b.n	80074ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d156      	bne.n	80074ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2206      	movs	r2, #6
 8007402:	705a      	strb	r2, [r3, #1]
      break;
 8007404:	e052      	b.n	80074ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2206      	movs	r2, #6
 800740a:	705a      	strb	r2, [r3, #1]
      break;
 800740c:	e04e      	b.n	80074ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007414:	2b00      	cmp	r3, #0
 8007416:	d019      	beq.n	800744c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007424:	23ff      	movs	r3, #255	; 0xff
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f926 	bl	8007678 <USBH_Get_StringDesc>
 800742c:	4603      	mov	r3, r0
 800742e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d103      	bne.n	800743e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2207      	movs	r2, #7
 800743a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800743c:	e038      	b.n	80074b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d135      	bne.n	80074b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2207      	movs	r2, #7
 8007448:	705a      	strb	r2, [r3, #1]
      break;
 800744a:	e031      	b.n	80074b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2207      	movs	r2, #7
 8007450:	705a      	strb	r2, [r3, #1]
      break;
 8007452:	e02d      	b.n	80074b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800745a:	2b00      	cmp	r3, #0
 800745c:	d017      	beq.n	800748e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800746a:	23ff      	movs	r3, #255	; 0xff
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f903 	bl	8007678 <USBH_Get_StringDesc>
 8007472:	4603      	mov	r3, r0
 8007474:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d102      	bne.n	8007482 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007480:	e018      	b.n	80074b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d115      	bne.n	80074b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]
      break;
 800748c:	e012      	b.n	80074b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
      break;
 8007492:	e00f      	b.n	80074b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007494:	bf00      	nop
 8007496:	e00e      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 8007498:	bf00      	nop
 800749a:	e00c      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 800749c:	bf00      	nop
 800749e:	e00a      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 80074a0:	bf00      	nop
 80074a2:	e008      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 80074a4:	bf00      	nop
 80074a6:	e006      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 80074a8:	bf00      	nop
 80074aa:	e004      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 80074ac:	bf00      	nop
 80074ae:	e002      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <USBH_HandleEnum+0x3be>
      break;
 80074b4:	bf00      	nop
  }
  return Status;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f804 	bl	8007502 <USBH_HandleSof>
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b0b      	cmp	r3, #11
 8007512:	d10a      	bne.n	800752a <USBH_HandleSof+0x28>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
  }
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007542:	bf00      	nop
}
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800755e:	bf00      	nop
}
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ff58 	bl	800846e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	791b      	ldrb	r3, [r3, #4]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fda5 	bl	8008114 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fd9f 	bl	8008114 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	4613      	mov	r3, r2
 80075fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f864 	bl	80076ce <USBH_GetDescriptor>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800761c:	78fa      	ldrb	r2, [r7, #3]
 800761e:	b292      	uxth	r2, r2
 8007620:	4619      	mov	r1, r3
 8007622:	f000 f918 	bl	8007856 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007626:	7bfb      	ldrb	r3, [r7, #15]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af02      	add	r7, sp, #8
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	331c      	adds	r3, #28
 8007640:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f83d 	bl	80076ce <USBH_GetDescriptor>
 8007654:	4603      	mov	r3, r0
 8007656:	72fb      	strb	r3, [r7, #11]
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d107      	bne.n	800766e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	68f9      	ldr	r1, [r7, #12]
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f964 	bl	8007936 <USBH_ParseCfgDesc>
  }

  return status;
 800766e:	7afb      	ldrb	r3, [r7, #11]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	461a      	mov	r2, r3
 8007684:	460b      	mov	r3, r1
 8007686:	72fb      	strb	r3, [r7, #11]
 8007688:	4613      	mov	r3, r2
 800768a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007694:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800769c:	893b      	ldrh	r3, [r7, #8]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	460b      	mov	r3, r1
 80076a2:	2100      	movs	r1, #0
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f812 	bl	80076ce <USBH_GetDescriptor>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d107      	bne.n	80076c4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076ba:	893a      	ldrh	r2, [r7, #8]
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fa37 	bl	8007b32 <USBH_ParseStringDesc>
  }

  return status;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	72fb      	strb	r3, [r7, #11]
 80076dc:	4613      	mov	r3, r2
 80076de:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	789b      	ldrb	r3, [r3, #2]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d11c      	bne.n	8007722 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2206      	movs	r2, #6
 80076f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	893a      	ldrh	r2, [r7, #8]
 80076fe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007700:	893b      	ldrh	r3, [r7, #8]
 8007702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770a:	d104      	bne.n	8007716 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f240 4209 	movw	r2, #1033	; 0x409
 8007712:	829a      	strh	r2, [r3, #20]
 8007714:	e002      	b.n	800771c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8b3a      	ldrh	r2, [r7, #24]
 8007720:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007722:	8b3b      	ldrh	r3, [r7, #24]
 8007724:	461a      	mov	r2, r3
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa50 	bl	8007bce <USBH_CtlReq>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	789b      	ldrb	r3, [r3, #2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10f      	bne.n	800776c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2205      	movs	r2, #5
 8007756:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800776c:	2200      	movs	r2, #0
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa2c 	bl	8007bce <USBH_CtlReq>
 8007776:	4603      	mov	r3, r0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	789b      	ldrb	r3, [r3, #2]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10e      	bne.n	80077b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2209      	movs	r2, #9
 800779e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2100      	movs	r1, #0
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa09 	bl	8007bce <USBH_CtlReq>
 80077bc:	4603      	mov	r3, r0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	789b      	ldrb	r3, [r3, #2]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d10f      	bne.n	80077fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2203      	movs	r2, #3
 80077e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077fa:	2200      	movs	r2, #0
 80077fc:	2100      	movs	r1, #0
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9e5 	bl	8007bce <USBH_CtlReq>
 8007804:	4603      	mov	r3, r0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	789b      	ldrb	r3, [r3, #2]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d10f      	bne.n	8007842 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007842:	2200      	movs	r2, #0
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9c1 	bl	8007bce <USBH_CtlReq>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	4613      	mov	r3, r2
 8007862:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	785a      	ldrb	r2, [r3, #1]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3302      	adds	r3, #2
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b29a      	uxth	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	3303      	adds	r3, #3
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	b29b      	uxth	r3, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	791a      	ldrb	r2, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	795a      	ldrb	r2, [r3, #5]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	799a      	ldrb	r2, [r3, #6]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	79da      	ldrb	r2, [r3, #7]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d939      	bls.n	800792a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	3308      	adds	r3, #8
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	3309      	adds	r3, #9
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	4313      	orrs	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	330a      	adds	r3, #10
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	330b      	adds	r3, #11
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4313      	orrs	r3, r2
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	330c      	adds	r3, #12
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	330d      	adds	r3, #13
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	4313      	orrs	r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	7b9a      	ldrb	r2, [r3, #14]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	7bda      	ldrb	r2, [r3, #15]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	7c1a      	ldrb	r2, [r3, #16]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	7c5a      	ldrb	r2, [r3, #17]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	745a      	strb	r2, [r3, #17]
  }
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b08a      	sub	sp, #40	; 0x28
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	4613      	mov	r3, r2
 8007942:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785a      	ldrb	r2, [r3, #1]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3302      	adds	r3, #2
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b29a      	uxth	r2, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	3303      	adds	r3, #3
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	791a      	ldrb	r2, [r3, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	795a      	ldrb	r2, [r3, #5]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	799a      	ldrb	r2, [r3, #6]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	79da      	ldrb	r2, [r3, #7]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	7a1a      	ldrb	r2, [r3, #8]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	2b09      	cmp	r3, #9
 80079b0:	d95f      	bls.n	8007a72 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80079b2:	2309      	movs	r3, #9
 80079b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079ba:	e051      	b.n	8007a60 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079bc:	f107 0316 	add.w	r3, r7, #22
 80079c0:	4619      	mov	r1, r3
 80079c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079c4:	f000 f8e8 	bl	8007b98 <USBH_GetNextDesc>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d146      	bne.n	8007a60 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80079d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079d6:	221a      	movs	r2, #26
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	3308      	adds	r3, #8
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	3302      	adds	r3, #2
 80079e4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e8:	69f8      	ldr	r0, [r7, #28]
 80079ea:	f000 f846 	bl	8007a7a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079f8:	e022      	b.n	8007a40 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079fa:	f107 0316 	add.w	r3, r7, #22
 80079fe:	4619      	mov	r1, r3
 8007a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a02:	f000 f8c9 	bl	8007b98 <USBH_GetNextDesc>
 8007a06:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	785b      	ldrb	r3, [r3, #1]
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	d117      	bne.n	8007a40 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a18:	3201      	adds	r2, #1
 8007a1a:	00d2      	lsls	r2, r2, #3
 8007a1c:	211a      	movs	r1, #26
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	3308      	adds	r3, #8
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a30:	69b8      	ldr	r0, [r7, #24]
 8007a32:	f000 f851 	bl	8007ad8 <USBH_ParseEPDesc>
            ep_ix++;
 8007a36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	791b      	ldrb	r3, [r3, #4]
 8007a44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d204      	bcs.n	8007a56 <USBH_ParseCfgDesc+0x120>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	885a      	ldrh	r2, [r3, #2]
 8007a50:	8afb      	ldrh	r3, [r7, #22]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d8d1      	bhi.n	80079fa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d804      	bhi.n	8007a72 <USBH_ParseCfgDesc+0x13c>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	885a      	ldrh	r2, [r3, #2]
 8007a6c:	8afb      	ldrh	r3, [r7, #22]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d8a4      	bhi.n	80079bc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a72:	bf00      	nop
 8007a74:	3728      	adds	r7, #40	; 0x28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785a      	ldrb	r2, [r3, #1]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	789a      	ldrb	r2, [r3, #2]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	78da      	ldrb	r2, [r3, #3]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	791a      	ldrb	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	795a      	ldrb	r2, [r3, #5]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	799a      	ldrb	r2, [r3, #6]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	79da      	ldrb	r2, [r3, #7]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	7a1a      	ldrb	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	721a      	strb	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785a      	ldrb	r2, [r3, #1]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	789a      	ldrb	r2, [r3, #2]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	78da      	ldrb	r2, [r3, #3]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	3304      	adds	r3, #4
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	3305      	adds	r3, #5
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	4313      	orrs	r3, r2
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	799a      	ldrb	r2, [r3, #6]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	719a      	strb	r2, [r3, #6]
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b087      	sub	sp, #28
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d120      	bne.n	8007b8c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	1e9a      	subs	r2, r3, #2
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	4293      	cmp	r3, r2
 8007b54:	bf28      	it	cs
 8007b56:	4613      	movcs	r3, r2
 8007b58:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b60:	2300      	movs	r3, #0
 8007b62:	82fb      	strh	r3, [r7, #22]
 8007b64:	e00b      	b.n	8007b7e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b66:	8afb      	ldrh	r3, [r7, #22]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	781a      	ldrb	r2, [r3, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b78:	8afb      	ldrh	r3, [r7, #22]
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	82fb      	strh	r3, [r7, #22]
 8007b7e:	8afa      	ldrh	r2, [r7, #22]
 8007b80:	8abb      	ldrh	r3, [r7, #20]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d3ef      	bcc.n	8007b66 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	789b      	ldrb	r3, [r3, #2]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d002      	beq.n	8007bee <USBH_CtlReq+0x20>
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d00f      	beq.n	8007c0c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007bec:	e027      	b.n	8007c3e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	88fa      	ldrh	r2, [r7, #6]
 8007bf8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2202      	movs	r2, #2
 8007c04:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0a:	e018      	b.n	8007c3e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f81b 	bl	8007c48 <USBH_HandleControl>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <USBH_CtlReq+0x54>
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d106      	bne.n	8007c30 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	761a      	strb	r2, [r3, #24]
      break;
 8007c2e:	e005      	b.n	8007c3c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d102      	bne.n	8007c3c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	709a      	strb	r2, [r3, #2]
      break;
 8007c3c:	bf00      	nop
  }
  return status;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	7e1b      	ldrb	r3, [r3, #24]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	2b0a      	cmp	r3, #10
 8007c60:	f200 8158 	bhi.w	8007f14 <USBH_HandleControl+0x2cc>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <USBH_HandleControl+0x24>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	08007cb3 	.word	0x08007cb3
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d43 	.word	0x08007d43
 8007c7c:	08007d7b 	.word	0x08007d7b
 8007c80:	08007da7 	.word	0x08007da7
 8007c84:	08007df9 	.word	0x08007df9
 8007c88:	08007e1b 	.word	0x08007e1b
 8007c8c:	08007e57 	.word	0x08007e57
 8007c90:	08007e7f 	.word	0x08007e7f
 8007c94:	08007ebd 	.word	0x08007ebd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f103 0110 	add.w	r1, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f945 	bl	8007f34 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	761a      	strb	r2, [r3, #24]
      break;
 8007cb0:	e13b      	b.n	8007f2a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fcc5 	bl	8008648 <USBH_LL_GetURBState>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d11e      	bne.n	8007d06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7c1b      	ldrb	r3, [r3, #16]
 8007ccc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	8adb      	ldrh	r3, [r3, #22]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007cda:	7b7b      	ldrb	r3, [r7, #13]
 8007cdc:	2b80      	cmp	r3, #128	; 0x80
 8007cde:	d103      	bne.n	8007ce8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ce6:	e117      	b.n	8007f18 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2205      	movs	r2, #5
 8007cec:	761a      	strb	r2, [r3, #24]
      break;
 8007cee:	e113      	b.n	8007f18 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007cf0:	7b7b      	ldrb	r3, [r7, #13]
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d103      	bne.n	8007cfe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2209      	movs	r2, #9
 8007cfa:	761a      	strb	r2, [r3, #24]
      break;
 8007cfc:	e10c      	b.n	8007f18 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2207      	movs	r2, #7
 8007d02:	761a      	strb	r2, [r3, #24]
      break;
 8007d04:	e108      	b.n	8007f18 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d003      	beq.n	8007d14 <USBH_HandleControl+0xcc>
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	f040 8102 	bne.w	8007f18 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220b      	movs	r2, #11
 8007d18:	761a      	strb	r2, [r3, #24]
      break;
 8007d1a:	e0fd      	b.n	8007f18 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	899a      	ldrh	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	791b      	ldrb	r3, [r3, #4]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f93c 	bl	8007fb2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	761a      	strb	r2, [r3, #24]
      break;
 8007d40:	e0f3      	b.n	8007f2a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fc7d 	bl	8008648 <USBH_LL_GetURBState>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d102      	bne.n	8007d5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2209      	movs	r2, #9
 8007d5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	d102      	bne.n	8007d6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d64:	2303      	movs	r3, #3
 8007d66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d68:	e0d8      	b.n	8007f1c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	f040 80d5 	bne.w	8007f1c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	220b      	movs	r2, #11
 8007d76:	761a      	strb	r2, [r3, #24]
      break;
 8007d78:	e0d0      	b.n	8007f1c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6899      	ldr	r1, [r3, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	899a      	ldrh	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7958      	ldrb	r0, [r3, #5]
 8007d86:	2301      	movs	r3, #1
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f8eb 	bl	8007f68 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2206      	movs	r2, #6
 8007da2:	761a      	strb	r2, [r3, #24]
      break;
 8007da4:	e0c1      	b.n	8007f2a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	795b      	ldrb	r3, [r3, #5]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc4b 	bl	8008648 <USBH_LL_GetURBState>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d103      	bne.n	8007dc4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2207      	movs	r2, #7
 8007dc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dc2:	e0ad      	b.n	8007f20 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d105      	bne.n	8007dd6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	220c      	movs	r2, #12
 8007dce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd4:	e0a4      	b.n	8007f20 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d103      	bne.n	8007de4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2205      	movs	r2, #5
 8007de0:	761a      	strb	r2, [r3, #24]
      break;
 8007de2:	e09d      	b.n	8007f20 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	f040 809a 	bne.w	8007f20 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	220b      	movs	r2, #11
 8007df0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007df2:	2302      	movs	r3, #2
 8007df4:	73fb      	strb	r3, [r7, #15]
      break;
 8007df6:	e093      	b.n	8007f20 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	791b      	ldrb	r3, [r3, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8d6 	bl	8007fb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2208      	movs	r2, #8
 8007e16:	761a      	strb	r2, [r3, #24]

      break;
 8007e18:	e087      	b.n	8007f2a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	791b      	ldrb	r3, [r3, #4]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fc11 	bl	8008648 <USBH_LL_GetURBState>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d105      	bne.n	8007e3c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	220d      	movs	r2, #13
 8007e34:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e3a:	e073      	b.n	8007f24 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d103      	bne.n	8007e4a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	220b      	movs	r2, #11
 8007e46:	761a      	strb	r2, [r3, #24]
      break;
 8007e48:	e06c      	b.n	8007f24 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d169      	bne.n	8007f24 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007e50:	2303      	movs	r3, #3
 8007e52:	73fb      	strb	r3, [r7, #15]
      break;
 8007e54:	e066      	b.n	8007f24 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795a      	ldrb	r2, [r3, #5]
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	2100      	movs	r1, #0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f87f 	bl	8007f68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	220a      	movs	r2, #10
 8007e7a:	761a      	strb	r2, [r3, #24]
      break;
 8007e7c:	e055      	b.n	8007f2a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	795b      	ldrb	r3, [r3, #5]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fbdf 	bl	8008648 <USBH_LL_GetURBState>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d105      	bne.n	8007ea0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	220d      	movs	r2, #13
 8007e9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e9e:	e043      	b.n	8007f28 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d103      	bne.n	8007eae <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2209      	movs	r2, #9
 8007eaa:	761a      	strb	r2, [r3, #24]
      break;
 8007eac:	e03c      	b.n	8007f28 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d139      	bne.n	8007f28 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	220b      	movs	r2, #11
 8007eb8:	761a      	strb	r2, [r3, #24]
      break;
 8007eba:	e035      	b.n	8007f28 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7e5b      	ldrb	r3, [r3, #25]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	765a      	strb	r2, [r3, #25]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7e5b      	ldrb	r3, [r3, #25]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d806      	bhi.n	8007ede <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007edc:	e025      	b.n	8007f2a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ee4:	2106      	movs	r1, #6
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	795b      	ldrb	r3, [r3, #5]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f90c 	bl	8008114 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f906 	bl	8008114 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	73fb      	strb	r3, [r7, #15]
      break;
 8007f12:	e00a      	b.n	8007f2a <USBH_HandleControl+0x2e2>

    default:
      break;
 8007f14:	bf00      	nop
 8007f16:	e008      	b.n	8007f2a <USBH_HandleControl+0x2e2>
      break;
 8007f18:	bf00      	nop
 8007f1a:	e006      	b.n	8007f2a <USBH_HandleControl+0x2e2>
      break;
 8007f1c:	bf00      	nop
 8007f1e:	e004      	b.n	8007f2a <USBH_HandleControl+0x2e2>
      break;
 8007f20:	bf00      	nop
 8007f22:	e002      	b.n	8007f2a <USBH_HandleControl+0x2e2>
      break;
 8007f24:	bf00      	nop
 8007f26:	e000      	b.n	8007f2a <USBH_HandleControl+0x2e2>
      break;
 8007f28:	bf00      	nop
  }

  return status;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af04      	add	r7, sp, #16
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f42:	79f9      	ldrb	r1, [r7, #7]
 8007f44:	2300      	movs	r3, #0
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	2308      	movs	r3, #8
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	2300      	movs	r3, #0
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 fb44 	bl	80085e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4611      	mov	r1, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	460b      	mov	r3, r1
 8007f78:	80fb      	strh	r3, [r7, #6]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f8c:	7979      	ldrb	r1, [r7, #5]
 8007f8e:	7e3b      	ldrb	r3, [r7, #24]
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	9302      	str	r3, [sp, #8]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fb1f 	bl	80085e6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af04      	add	r7, sp, #16
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	80fb      	strh	r3, [r7, #6]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fc8:	7979      	ldrb	r1, [r7, #5]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2201      	movs	r2, #1
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 fb01 	bl	80085e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007fe4:	2300      	movs	r3, #0

}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b088      	sub	sp, #32
 8007ff2:	af04      	add	r7, sp, #16
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	80fb      	strh	r3, [r7, #6]
 8008000:	4613      	mov	r3, r2
 8008002:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008012:	7979      	ldrb	r1, [r7, #5]
 8008014:	7e3b      	ldrb	r3, [r7, #24]
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	2301      	movs	r3, #1
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2302      	movs	r3, #2
 8008026:	2200      	movs	r2, #0
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fadc 	bl	80085e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af04      	add	r7, sp, #16
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4611      	mov	r1, r2
 8008044:	461a      	mov	r2, r3
 8008046:	460b      	mov	r3, r1
 8008048:	80fb      	strh	r3, [r7, #6]
 800804a:	4613      	mov	r3, r2
 800804c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800804e:	7979      	ldrb	r1, [r7, #5]
 8008050:	2300      	movs	r3, #0
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	2301      	movs	r3, #1
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2302      	movs	r3, #2
 8008062:	2201      	movs	r2, #1
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fabe 	bl	80085e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af04      	add	r7, sp, #16
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	4608      	mov	r0, r1
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	4603      	mov	r3, r0
 8008084:	70fb      	strb	r3, [r7, #3]
 8008086:	460b      	mov	r3, r1
 8008088:	70bb      	strb	r3, [r7, #2]
 800808a:	4613      	mov	r3, r2
 800808c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800808e:	7878      	ldrb	r0, [r7, #1]
 8008090:	78ba      	ldrb	r2, [r7, #2]
 8008092:	78f9      	ldrb	r1, [r7, #3]
 8008094:	8b3b      	ldrh	r3, [r7, #24]
 8008096:	9302      	str	r3, [sp, #8]
 8008098:	7d3b      	ldrb	r3, [r7, #20]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	7c3b      	ldrb	r3, [r7, #16]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4603      	mov	r3, r0
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa51 	bl	800854a <USBH_LL_OpenPipe>

  return USBH_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa70 	bl	80085a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f836 	bl	8008150 <USBH_GetFreePipe>
 80080e4:	4603      	mov	r3, r0
 80080e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00a      	beq.n	8008108 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	89fb      	ldrh	r3, [r7, #14]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	33e0      	adds	r3, #224	; 0xe0
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008108:	89fb      	ldrh	r3, [r7, #14]
 800810a:	b2db      	uxtb	r3, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	2b0a      	cmp	r3, #10
 8008124:	d80d      	bhi.n	8008142 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	33e0      	adds	r3, #224	; 0xe0
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	33e0      	adds	r3, #224	; 0xe0
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e00f      	b.n	8008182 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33e0      	adds	r3, #224	; 0xe0
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d102      	bne.n	800817c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	b29b      	uxth	r3, r3
 800817a:	e007      	b.n	800818c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	3301      	adds	r3, #1
 8008180:	73fb      	strb	r3, [r7, #15]
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b0a      	cmp	r3, #10
 8008186:	d9ec      	bls.n	8008162 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008188:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800819c:	2201      	movs	r2, #1
 800819e:	490e      	ldr	r1, [pc, #56]	; (80081d8 <MX_USB_HOST_Init+0x40>)
 80081a0:	480e      	ldr	r0, [pc, #56]	; (80081dc <MX_USB_HOST_Init+0x44>)
 80081a2:	f7fe fc9f 	bl	8006ae4 <USBH_Init>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80081ac:	f7f8 ff7c 	bl	80010a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80081b0:	490b      	ldr	r1, [pc, #44]	; (80081e0 <MX_USB_HOST_Init+0x48>)
 80081b2:	480a      	ldr	r0, [pc, #40]	; (80081dc <MX_USB_HOST_Init+0x44>)
 80081b4:	f7fe fd24 	bl	8006c00 <USBH_RegisterClass>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80081be:	f7f8 ff73 	bl	80010a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80081c2:	4806      	ldr	r0, [pc, #24]	; (80081dc <MX_USB_HOST_Init+0x44>)
 80081c4:	f7fe fda8 	bl	8006d18 <USBH_Start>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80081ce:	f7f8 ff6b 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	080081f9 	.word	0x080081f9
 80081dc:	20000418 	.word	0x20000418
 80081e0:	200000cc 	.word	0x200000cc

080081e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80081e8:	4802      	ldr	r0, [pc, #8]	; (80081f4 <MX_USB_HOST_Process+0x10>)
 80081ea:	f7fe fda5 	bl	8006d38 <USBH_Process>
}
 80081ee:	bf00      	nop
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000418 	.word	0x20000418

080081f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	3b01      	subs	r3, #1
 8008208:	2b04      	cmp	r3, #4
 800820a:	d819      	bhi.n	8008240 <USBH_UserProcess+0x48>
 800820c:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <USBH_UserProcess+0x1c>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008241 	.word	0x08008241
 8008218:	08008231 	.word	0x08008231
 800821c:	08008241 	.word	0x08008241
 8008220:	08008239 	.word	0x08008239
 8008224:	08008229 	.word	0x08008229
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <USBH_UserProcess+0x58>)
 800822a:	2203      	movs	r2, #3
 800822c:	701a      	strb	r2, [r3, #0]
  break;
 800822e:	e008      	b.n	8008242 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <USBH_UserProcess+0x58>)
 8008232:	2202      	movs	r2, #2
 8008234:	701a      	strb	r2, [r3, #0]
  break;
 8008236:	e004      	b.n	8008242 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008238:	4b05      	ldr	r3, [pc, #20]	; (8008250 <USBH_UserProcess+0x58>)
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
  break;
 800823e:	e000      	b.n	8008242 <USBH_UserProcess+0x4a>

  default:
  break;
 8008240:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20000174 	.word	0x20000174

08008254 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	; 0x28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	609a      	str	r2, [r3, #8]
 8008268:	60da      	str	r2, [r3, #12]
 800826a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008274:	d147      	bne.n	8008306 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	4b25      	ldr	r3, [pc, #148]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 800827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827e:	4a24      	ldr	r2, [pc, #144]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	6313      	str	r3, [r2, #48]	; 0x30
 8008286:	4b22      	ldr	r3, [pc, #136]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008298:	2300      	movs	r3, #0
 800829a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4619      	mov	r1, r3
 80082a6:	481b      	ldr	r0, [pc, #108]	; (8008314 <HAL_HCD_MspInit+0xc0>)
 80082a8:	f7f9 fec6 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b2:	2302      	movs	r3, #2
 80082b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082be:	230a      	movs	r3, #10
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c2:	f107 0314 	add.w	r3, r7, #20
 80082c6:	4619      	mov	r1, r3
 80082c8:	4812      	ldr	r0, [pc, #72]	; (8008314 <HAL_HCD_MspInit+0xc0>)
 80082ca:	f7f9 feb5 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082ce:	4b10      	ldr	r3, [pc, #64]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 80082d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d2:	4a0f      	ldr	r2, [pc, #60]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 80082d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d8:	6353      	str	r3, [r2, #52]	; 0x34
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	4a0b      	ldr	r2, [pc, #44]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 80082e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082e8:	6453      	str	r3, [r2, #68]	; 0x44
 80082ea:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_HCD_MspInit+0xbc>)
 80082ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082f6:	2200      	movs	r2, #0
 80082f8:	2100      	movs	r1, #0
 80082fa:	2043      	movs	r0, #67	; 0x43
 80082fc:	f7f9 fe65 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008300:	2043      	movs	r0, #67	; 0x43
 8008302:	f7f9 fe7e 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008306:	bf00      	nop
 8008308:	3728      	adds	r7, #40	; 0x28
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40023800 	.word	0x40023800
 8008314:	40020000 	.word	0x40020000

08008318 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff f8d9 	bl	80074de <USBH_LL_IncTimer>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff f911 	bl	800756a <USBH_LL_Connect>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff f91a 	bl	8007598 <USBH_LL_Disconnect>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
 8008378:	4613      	mov	r3, r2
 800837a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff f8cb 	bl	8007532 <USBH_LL_PortEnabled>
} 
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff f8cb 	bl	800754e <USBH_LL_PortDisabled>
} 
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d12a      	bne.n	8008428 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80083d2:	4a18      	ldr	r2, [pc, #96]	; (8008434 <USBH_LL_Init+0x74>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a15      	ldr	r2, [pc, #84]	; (8008434 <USBH_LL_Init+0x74>)
 80083de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <USBH_LL_Init+0x74>)
 80083e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <USBH_LL_Init+0x74>)
 80083ec:	2208      	movs	r2, #8
 80083ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80083f0:	4b10      	ldr	r3, [pc, #64]	; (8008434 <USBH_LL_Init+0x74>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <USBH_LL_Init+0x74>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80083fc:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <USBH_LL_Init+0x74>)
 80083fe:	2202      	movs	r2, #2
 8008400:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <USBH_LL_Init+0x74>)
 8008404:	2200      	movs	r2, #0
 8008406:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008408:	480a      	ldr	r0, [pc, #40]	; (8008434 <USBH_LL_Init+0x74>)
 800840a:	f7f9 ffc8 	bl	800239e <HAL_HCD_Init>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008414:	f7f8 fe48 	bl	80010a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008418:	4806      	ldr	r0, [pc, #24]	; (8008434 <USBH_LL_Init+0x74>)
 800841a:	f7fa fbcb 	bl	8002bb4 <HAL_HCD_GetCurrentFrame>
 800841e:	4603      	mov	r3, r0
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff f84c 	bl	80074c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200007f0 	.word	0x200007f0

08008438 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800844e:	4618      	mov	r0, r3
 8008450:	f7fa fb38 	bl	8002ac4 <HAL_HCD_Start>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f95c 	bl	8008718 <USBH_Get_USB_Status>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008464:	7bbb      	ldrb	r3, [r7, #14]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008484:	4618      	mov	r0, r3
 8008486:	f7fa fb40 	bl	8002b0a <HAL_HCD_Stop>
 800848a:	4603      	mov	r3, r0
 800848c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 f941 	bl	8008718 <USBH_Get_USB_Status>
 8008496:	4603      	mov	r3, r0
 8008498:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800849a:	7bbb      	ldrb	r3, [r7, #14]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fa fb8a 	bl	8002bd0 <HAL_HCD_GetCurrentSpeed>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d007      	beq.n	80084d2 <USBH_LL_GetSpeed+0x2e>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d302      	bcc.n	80084cc <USBH_LL_GetSpeed+0x28>
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d006      	beq.n	80084d8 <USBH_LL_GetSpeed+0x34>
 80084ca:	e008      	b.n	80084de <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
    break;
 80084d0:	e008      	b.n	80084e4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80084d2:	2301      	movs	r3, #1
 80084d4:	73fb      	strb	r3, [r7, #15]
    break;
 80084d6:	e005      	b.n	80084e4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80084d8:	2302      	movs	r3, #2
 80084da:	73fb      	strb	r3, [r7, #15]
    break;
 80084dc:	e002      	b.n	80084e4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80084de:	2301      	movs	r3, #1
 80084e0:	73fb      	strb	r3, [r7, #15]
    break;
 80084e2:	bf00      	nop
  }
  return  speed;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008504:	4618      	mov	r0, r3
 8008506:	f7fa fb1d 	bl	8002b44 <HAL_HCD_ResetPort>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f901 	bl	8008718 <USBH_Get_USB_Status>
 8008516:	4603      	mov	r3, r0
 8008518:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800851a:	7bbb      	ldrb	r3, [r7, #14]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f7fa fb25 	bl	8002b8a <HAL_HCD_HC_GetXferCount>
 8008540:	4603      	mov	r3, r0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800854a:	b590      	push	{r4, r7, lr}
 800854c:	b089      	sub	sp, #36	; 0x24
 800854e:	af04      	add	r7, sp, #16
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	4608      	mov	r0, r1
 8008554:	4611      	mov	r1, r2
 8008556:	461a      	mov	r2, r3
 8008558:	4603      	mov	r3, r0
 800855a:	70fb      	strb	r3, [r7, #3]
 800855c:	460b      	mov	r3, r1
 800855e:	70bb      	strb	r3, [r7, #2]
 8008560:	4613      	mov	r3, r2
 8008562:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008572:	787c      	ldrb	r4, [r7, #1]
 8008574:	78ba      	ldrb	r2, [r7, #2]
 8008576:	78f9      	ldrb	r1, [r7, #3]
 8008578:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	4623      	mov	r3, r4
 800858a:	f7f9 ff6a 	bl	8002462 <HAL_HCD_HC_Init>
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 f8bf 	bl	8008718 <USBH_Get_USB_Status>
 800859a:	4603      	mov	r3, r0
 800859c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800859e:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd90      	pop	{r4, r7, pc}

080085a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f9 ffe3 	bl	8002592 <HAL_HCD_HC_Halt>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f8a0 	bl	8008718 <USBH_Get_USB_Status>
 80085d8:	4603      	mov	r3, r0
 80085da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80085e6:	b590      	push	{r4, r7, lr}
 80085e8:	b089      	sub	sp, #36	; 0x24
 80085ea:	af04      	add	r7, sp, #16
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	4608      	mov	r0, r1
 80085f0:	4611      	mov	r1, r2
 80085f2:	461a      	mov	r2, r3
 80085f4:	4603      	mov	r3, r0
 80085f6:	70fb      	strb	r3, [r7, #3]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70bb      	strb	r3, [r7, #2]
 80085fc:	4613      	mov	r3, r2
 80085fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800860e:	787c      	ldrb	r4, [r7, #1]
 8008610:	78ba      	ldrb	r2, [r7, #2]
 8008612:	78f9      	ldrb	r1, [r7, #3]
 8008614:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	4623      	mov	r3, r4
 800862a:	f7f9 ffd5 	bl	80025d8 <HAL_HCD_HC_SubmitRequest>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f86f 	bl	8008718 <USBH_Get_USB_Status>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800863e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	bd90      	pop	{r4, r7, pc}

08008648 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7fa fa7e 	bl	8002b60 <HAL_HCD_HC_GetURBState>
 8008664:	4603      	mov	r3, r0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008680:	2b01      	cmp	r3, #1
 8008682:	d103      	bne.n	800868c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f872 	bl	8008770 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800868c:	20c8      	movs	r0, #200	; 0xc8
 800868e:	f7f9 f837 	bl	8001700 <HAL_Delay>
  return USBH_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
 80086a8:	4613      	mov	r3, r2
 80086aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	440b      	add	r3, r1
 80086c2:	333b      	adds	r3, #59	; 0x3b
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	00db      	lsls	r3, r3, #3
 80086d6:	440b      	add	r3, r1
 80086d8:	3350      	adds	r3, #80	; 0x50
 80086da:	78ba      	ldrb	r2, [r7, #2]
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e009      	b.n	80086f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	440b      	add	r3, r1
 80086ee:	3351      	adds	r3, #81	; 0x51
 80086f0:	78ba      	ldrb	r2, [r7, #2]
 80086f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7f8 fff8 	bl	8001700 <HAL_Delay>
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d817      	bhi.n	800875c <USBH_Get_USB_Status+0x44>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <USBH_Get_USB_Status+0x1c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008745 	.word	0x08008745
 8008738:	0800874b 	.word	0x0800874b
 800873c:	08008751 	.word	0x08008751
 8008740:	08008757 	.word	0x08008757
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e00b      	b.n	8008762 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800874a:	2302      	movs	r3, #2
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e008      	b.n	8008762 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e005      	b.n	8008762 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e002      	b.n	8008762 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800875c:	2302      	movs	r3, #2
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	bf00      	nop
  }
  return usb_status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d102      	bne.n	800878a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
 8008788:	e001      	b.n	800878e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	461a      	mov	r2, r3
 8008792:	2101      	movs	r1, #1
 8008794:	4803      	ldr	r0, [pc, #12]	; (80087a4 <MX_DriverVbusFS+0x34>)
 8008796:	f7f9 fde9 	bl	800236c <HAL_GPIO_WritePin>
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40020800 	.word	0x40020800

080087a8 <__errno>:
 80087a8:	4b01      	ldr	r3, [pc, #4]	; (80087b0 <__errno+0x8>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200000ec 	.word	0x200000ec

080087b4 <__libc_init_array>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	4e0d      	ldr	r6, [pc, #52]	; (80087ec <__libc_init_array+0x38>)
 80087b8:	4c0d      	ldr	r4, [pc, #52]	; (80087f0 <__libc_init_array+0x3c>)
 80087ba:	1ba4      	subs	r4, r4, r6
 80087bc:	10a4      	asrs	r4, r4, #2
 80087be:	2500      	movs	r5, #0
 80087c0:	42a5      	cmp	r5, r4
 80087c2:	d109      	bne.n	80087d8 <__libc_init_array+0x24>
 80087c4:	4e0b      	ldr	r6, [pc, #44]	; (80087f4 <__libc_init_array+0x40>)
 80087c6:	4c0c      	ldr	r4, [pc, #48]	; (80087f8 <__libc_init_array+0x44>)
 80087c8:	f000 f8ea 	bl	80089a0 <_init>
 80087cc:	1ba4      	subs	r4, r4, r6
 80087ce:	10a4      	asrs	r4, r4, #2
 80087d0:	2500      	movs	r5, #0
 80087d2:	42a5      	cmp	r5, r4
 80087d4:	d105      	bne.n	80087e2 <__libc_init_array+0x2e>
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087dc:	4798      	blx	r3
 80087de:	3501      	adds	r5, #1
 80087e0:	e7ee      	b.n	80087c0 <__libc_init_array+0xc>
 80087e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087e6:	4798      	blx	r3
 80087e8:	3501      	adds	r5, #1
 80087ea:	e7f2      	b.n	80087d2 <__libc_init_array+0x1e>
 80087ec:	080089dc 	.word	0x080089dc
 80087f0:	080089dc 	.word	0x080089dc
 80087f4:	080089dc 	.word	0x080089dc
 80087f8:	080089e0 	.word	0x080089e0

080087fc <malloc>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	; (8008808 <malloc+0xc>)
 80087fe:	4601      	mov	r1, r0
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f000 b861 	b.w	80088c8 <_malloc_r>
 8008806:	bf00      	nop
 8008808:	200000ec 	.word	0x200000ec

0800880c <free>:
 800880c:	4b02      	ldr	r3, [pc, #8]	; (8008818 <free+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f000 b80b 	b.w	800882c <_free_r>
 8008816:	bf00      	nop
 8008818:	200000ec 	.word	0x200000ec

0800881c <memset>:
 800881c:	4402      	add	r2, r0
 800881e:	4603      	mov	r3, r0
 8008820:	4293      	cmp	r3, r2
 8008822:	d100      	bne.n	8008826 <memset+0xa>
 8008824:	4770      	bx	lr
 8008826:	f803 1b01 	strb.w	r1, [r3], #1
 800882a:	e7f9      	b.n	8008820 <memset+0x4>

0800882c <_free_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4605      	mov	r5, r0
 8008830:	2900      	cmp	r1, #0
 8008832:	d045      	beq.n	80088c0 <_free_r+0x94>
 8008834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008838:	1f0c      	subs	r4, r1, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	bfb8      	it	lt
 800883e:	18e4      	addlt	r4, r4, r3
 8008840:	f000 f8ac 	bl	800899c <__malloc_lock>
 8008844:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <_free_r+0x98>)
 8008846:	6813      	ldr	r3, [r2, #0]
 8008848:	4610      	mov	r0, r2
 800884a:	b933      	cbnz	r3, 800885a <_free_r+0x2e>
 800884c:	6063      	str	r3, [r4, #4]
 800884e:	6014      	str	r4, [r2, #0]
 8008850:	4628      	mov	r0, r5
 8008852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008856:	f000 b8a2 	b.w	800899e <__malloc_unlock>
 800885a:	42a3      	cmp	r3, r4
 800885c:	d90c      	bls.n	8008878 <_free_r+0x4c>
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	1862      	adds	r2, r4, r1
 8008862:	4293      	cmp	r3, r2
 8008864:	bf04      	itt	eq
 8008866:	681a      	ldreq	r2, [r3, #0]
 8008868:	685b      	ldreq	r3, [r3, #4]
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	bf04      	itt	eq
 800886e:	1852      	addeq	r2, r2, r1
 8008870:	6022      	streq	r2, [r4, #0]
 8008872:	6004      	str	r4, [r0, #0]
 8008874:	e7ec      	b.n	8008850 <_free_r+0x24>
 8008876:	4613      	mov	r3, r2
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	b10a      	cbz	r2, 8008880 <_free_r+0x54>
 800887c:	42a2      	cmp	r2, r4
 800887e:	d9fa      	bls.n	8008876 <_free_r+0x4a>
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	1858      	adds	r0, r3, r1
 8008884:	42a0      	cmp	r0, r4
 8008886:	d10b      	bne.n	80088a0 <_free_r+0x74>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	4401      	add	r1, r0
 800888c:	1858      	adds	r0, r3, r1
 800888e:	4282      	cmp	r2, r0
 8008890:	6019      	str	r1, [r3, #0]
 8008892:	d1dd      	bne.n	8008850 <_free_r+0x24>
 8008894:	6810      	ldr	r0, [r2, #0]
 8008896:	6852      	ldr	r2, [r2, #4]
 8008898:	605a      	str	r2, [r3, #4]
 800889a:	4401      	add	r1, r0
 800889c:	6019      	str	r1, [r3, #0]
 800889e:	e7d7      	b.n	8008850 <_free_r+0x24>
 80088a0:	d902      	bls.n	80088a8 <_free_r+0x7c>
 80088a2:	230c      	movs	r3, #12
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	e7d3      	b.n	8008850 <_free_r+0x24>
 80088a8:	6820      	ldr	r0, [r4, #0]
 80088aa:	1821      	adds	r1, r4, r0
 80088ac:	428a      	cmp	r2, r1
 80088ae:	bf04      	itt	eq
 80088b0:	6811      	ldreq	r1, [r2, #0]
 80088b2:	6852      	ldreq	r2, [r2, #4]
 80088b4:	6062      	str	r2, [r4, #4]
 80088b6:	bf04      	itt	eq
 80088b8:	1809      	addeq	r1, r1, r0
 80088ba:	6021      	streq	r1, [r4, #0]
 80088bc:	605c      	str	r4, [r3, #4]
 80088be:	e7c7      	b.n	8008850 <_free_r+0x24>
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	20000178 	.word	0x20000178

080088c8 <_malloc_r>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	1ccd      	adds	r5, r1, #3
 80088cc:	f025 0503 	bic.w	r5, r5, #3
 80088d0:	3508      	adds	r5, #8
 80088d2:	2d0c      	cmp	r5, #12
 80088d4:	bf38      	it	cc
 80088d6:	250c      	movcc	r5, #12
 80088d8:	2d00      	cmp	r5, #0
 80088da:	4606      	mov	r6, r0
 80088dc:	db01      	blt.n	80088e2 <_malloc_r+0x1a>
 80088de:	42a9      	cmp	r1, r5
 80088e0:	d903      	bls.n	80088ea <_malloc_r+0x22>
 80088e2:	230c      	movs	r3, #12
 80088e4:	6033      	str	r3, [r6, #0]
 80088e6:	2000      	movs	r0, #0
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	f000 f857 	bl	800899c <__malloc_lock>
 80088ee:	4a21      	ldr	r2, [pc, #132]	; (8008974 <_malloc_r+0xac>)
 80088f0:	6814      	ldr	r4, [r2, #0]
 80088f2:	4621      	mov	r1, r4
 80088f4:	b991      	cbnz	r1, 800891c <_malloc_r+0x54>
 80088f6:	4c20      	ldr	r4, [pc, #128]	; (8008978 <_malloc_r+0xb0>)
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	b91b      	cbnz	r3, 8008904 <_malloc_r+0x3c>
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 f83d 	bl	800897c <_sbrk_r>
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	4629      	mov	r1, r5
 8008906:	4630      	mov	r0, r6
 8008908:	f000 f838 	bl	800897c <_sbrk_r>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d124      	bne.n	800895a <_malloc_r+0x92>
 8008910:	230c      	movs	r3, #12
 8008912:	6033      	str	r3, [r6, #0]
 8008914:	4630      	mov	r0, r6
 8008916:	f000 f842 	bl	800899e <__malloc_unlock>
 800891a:	e7e4      	b.n	80088e6 <_malloc_r+0x1e>
 800891c:	680b      	ldr	r3, [r1, #0]
 800891e:	1b5b      	subs	r3, r3, r5
 8008920:	d418      	bmi.n	8008954 <_malloc_r+0x8c>
 8008922:	2b0b      	cmp	r3, #11
 8008924:	d90f      	bls.n	8008946 <_malloc_r+0x7e>
 8008926:	600b      	str	r3, [r1, #0]
 8008928:	50cd      	str	r5, [r1, r3]
 800892a:	18cc      	adds	r4, r1, r3
 800892c:	4630      	mov	r0, r6
 800892e:	f000 f836 	bl	800899e <__malloc_unlock>
 8008932:	f104 000b 	add.w	r0, r4, #11
 8008936:	1d23      	adds	r3, r4, #4
 8008938:	f020 0007 	bic.w	r0, r0, #7
 800893c:	1ac3      	subs	r3, r0, r3
 800893e:	d0d3      	beq.n	80088e8 <_malloc_r+0x20>
 8008940:	425a      	negs	r2, r3
 8008942:	50e2      	str	r2, [r4, r3]
 8008944:	e7d0      	b.n	80088e8 <_malloc_r+0x20>
 8008946:	428c      	cmp	r4, r1
 8008948:	684b      	ldr	r3, [r1, #4]
 800894a:	bf16      	itet	ne
 800894c:	6063      	strne	r3, [r4, #4]
 800894e:	6013      	streq	r3, [r2, #0]
 8008950:	460c      	movne	r4, r1
 8008952:	e7eb      	b.n	800892c <_malloc_r+0x64>
 8008954:	460c      	mov	r4, r1
 8008956:	6849      	ldr	r1, [r1, #4]
 8008958:	e7cc      	b.n	80088f4 <_malloc_r+0x2c>
 800895a:	1cc4      	adds	r4, r0, #3
 800895c:	f024 0403 	bic.w	r4, r4, #3
 8008960:	42a0      	cmp	r0, r4
 8008962:	d005      	beq.n	8008970 <_malloc_r+0xa8>
 8008964:	1a21      	subs	r1, r4, r0
 8008966:	4630      	mov	r0, r6
 8008968:	f000 f808 	bl	800897c <_sbrk_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d0cf      	beq.n	8008910 <_malloc_r+0x48>
 8008970:	6025      	str	r5, [r4, #0]
 8008972:	e7db      	b.n	800892c <_malloc_r+0x64>
 8008974:	20000178 	.word	0x20000178
 8008978:	2000017c 	.word	0x2000017c

0800897c <_sbrk_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4c06      	ldr	r4, [pc, #24]	; (8008998 <_sbrk_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4605      	mov	r5, r0
 8008984:	4608      	mov	r0, r1
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	f7f8 fddc 	bl	8001544 <_sbrk>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_sbrk_r+0x1a>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	b103      	cbz	r3, 8008996 <_sbrk_r+0x1a>
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	20000ab4 	.word	0x20000ab4

0800899c <__malloc_lock>:
 800899c:	4770      	bx	lr

0800899e <__malloc_unlock>:
 800899e:	4770      	bx	lr

080089a0 <_init>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr

080089ac <_fini>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr
