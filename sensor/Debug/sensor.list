
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008838  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080089c0  080089c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089dc  080089dc  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e4  080089e4  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  080089ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  20000150  08008b3c  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  08008b3c  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbb1  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f64  00000000  00000000  0003cd31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  00040c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00041fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c7e  00000000  00000000  00043140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000141e6  00000000  00000000  00068dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf991  00000000  00000000  0007cfa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  0014c9b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000150 	.word	0x20000150
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089a8 	.word	0x080089a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000154 	.word	0x20000154
 80001c4:	080089a8 	.word	0x080089a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <timer_finished>:
}comm_state;



int timer_finished(fsm_t* this)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	long timer = HAL_GetTick();
 80004d0:	f001 f90e 	bl	80016f0 <HAL_GetTick>
 80004d4:	4603      	mov	r3, r0
 80004d6:	60fb      	str	r3, [r7, #12]
	return(HAL_GetTick() >= +LoRa_timer);
 80004d8:	f001 f90a 	bl	80016f0 <HAL_GetTick>
 80004dc:	4602      	mov	r2, r0
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <timer_finished+0x2c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	bf2c      	ite	cs
 80004e6:	2301      	movcs	r3, #1
 80004e8:	2300      	movcc	r3, #0
 80004ea:	b2db      	uxtb	r3, r3
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000184 	.word	0x20000184

080004f8 <send_data>:

void send_data(fsm_t* this)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	 sensor_buf_t data;

	 data = ringbuf_get(&data_ring_buff);
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4908      	ldr	r1, [pc, #32]	; (8000528 <send_data+0x30>)
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fe42 	bl	8001190 <ringbuf_get>
	 LoRa_timer = HAL_GetTick() + LoRa_period;
 800050c:	f001 f8f0 	bl	80016f0 <HAL_GetTick>
 8000510:	4602      	mov	r2, r0
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <send_data+0x34>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4413      	add	r3, r2
 8000518:	461a      	mov	r2, r3
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <send_data+0x38>)
 800051c:	601a      	str	r2, [r3, #0]

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000018c 	.word	0x2000018c
 800052c:	20000188 	.word	0x20000188
 8000530:	20000184 	.word	0x20000184

08000534 <LoRa_initialization>:
	  { WAIT, timer_finished, WAIT, send_data},
	  {-1, NULL, -1, NULL },
};

fsm_t* LoRa_initialization(uint16_t period)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
	fsm_t* fsm_LoRa;
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 800053e:	210a      	movs	r1, #10
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LoRa_initialization+0x3c>)
 8000542:	f000 fdbc 	bl	80010be <ringbuf_init>
	fsm_LoRa = fsm_new(send_wireless);
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <LoRa_initialization+0x40>)
 8000548:	f000 f838 	bl	80005bc <fsm_new>
 800054c:	60f8      	str	r0, [r7, #12]
	LoRa_timer = HAL_GetTick() + period;
 800054e:	f001 f8cf 	bl	80016f0 <HAL_GetTick>
 8000552:	4602      	mov	r2, r0
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	4413      	add	r3, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <LoRa_initialization+0x44>)
 800055c:	601a      	str	r2, [r3, #0]
	LoRa_period = period;
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <LoRa_initialization+0x48>)
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	8013      	strh	r3, [r2, #0]

	return fsm_LoRa;
 8000564:	68fb      	ldr	r3, [r7, #12]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000018c 	.word	0x2000018c
 8000574:	20000000 	.word	0x20000000
 8000578:	20000184 	.word	0x20000184
 800057c:	20000188 	.word	0x20000188

08000580 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b5b0      	push	{r4, r5, r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af06      	add	r7, sp, #24
 8000588:	f107 0410 	add.w	r4, r7, #16
 800058c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ringbuf_put(&data_ring_buff, data);
 8000590:	466d      	mov	r5, sp
 8000592:	f107 041c 	add.w	r4, r7, #28
 8000596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	602b      	str	r3, [r5, #0]
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <save_new_data+0x38>)
 80005a6:	f000 fdab 	bl	8001100 <ringbuf_put>
//    fichero = fopen("fout.txt", "w+");
//    fputs("Aprender a programar\n", fichero);
//    fclose(fichero);
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005b2:	b004      	add	sp, #16
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000018c 	.word	0x2000018c

080005bc <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80005c4:	2008      	movs	r0, #8
 80005c6:	f008 f91d 	bl	8008804 <malloc>
 80005ca:	4603      	mov	r3, r0
 80005cc:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f000 f805 	bl	80005e0 <fsm_init>
  return this;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	601a      	str	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e01c      	b.n	800064e <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d113      	bne.n	8000648 <fsm_fire+0x44>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	4798      	blx	r3
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00c      	beq.n	8000648 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00c      	beq.n	8000658 <fsm_fire+0x54>
        t->out(this);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	4798      	blx	r3
      break;
 8000646:	e007      	b.n	8000658 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3310      	adds	r3, #16
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dade      	bge.n	8000614 <fsm_fire+0x10>
    }
  }
}
 8000656:	e000      	b.n	800065a <fsm_fire+0x56>
      break;
 8000658:	bf00      	nop
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <data_saved>:
	  Saving,
	  Sleeping,
	  Setup
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	2301      	movs	r3, #1
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <error>:

int error (fsm_t* this) {
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d005      	beq.n	800069e <error+0x26>
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800069a:	429a      	cmp	r2, r3
 800069c:	d901      	bls.n	80006a2 <error+0x2a>
		return 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <error+0x2c>
	else return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <no_error>:

int no_error (fsm_t* this) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	889b      	ldrh	r3, [r3, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d007      	beq.n	80006da <no_error+0x2a>
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	889a      	ldrh	r2, [r3, #4]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d801      	bhi.n	80006da <no_error+0x2a>
		return 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e000      	b.n	80006dc <no_error+0x2c>
	else return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <timer_sleep>:

int timer_sleep (fsm_t* this) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>config->sleep_timer) return 1;
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <timer_sleep+0x2c>
 8000702:	f000 fff5 	bl	80016f0 <HAL_GetTick>
 8000706:	4602      	mov	r2, r0
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d901      	bls.n	8000714 <timer_sleep+0x2c>
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <timer_sleep+0x2e>
	else return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <timer_setup>:

int timer_setup (fsm_t* this) {
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000730:	f000 ffde 	bl	80016f0 <HAL_GetTick>
 8000734:	4602      	mov	r2, r0
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	429a      	cmp	r2, r3
 800073c:	bf8c      	ite	hi
 800073e:	2301      	movhi	r3, #1
 8000740:	2300      	movls	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <timer_warning>:

int timer_warning (fsm_t* this) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->warning_timer);
 800075e:	f000 ffc7 	bl	80016f0 <HAL_GetTick>
 8000762:	4602      	mov	r2, r0
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	bf8c      	ite	hi
 800076c:	2301      	movhi	r3, #1
 800076e:	2300      	movls	r3, #0
 8000770:	b2db      	uxtb	r3, r3
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <timer_measure>:

int timer_measure (fsm_t* this) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->measure_timer);
 800078c:	f000 ffb0 	bl	80016f0 <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	429a      	cmp	r2, r3
 8000798:	bf8c      	ite	hi
 800079a:	2301      	movhi	r3, #1
 800079c:	2300      	movls	r3, #0
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <contador>:

int contador (fsm_t* this) {
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	60bb      	str	r3, [r7, #8]
	if(config->measure_count>=(config->measure_average))
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	7f1b      	ldrb	r3, [r3, #28]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d301      	bcc.n	80007cc <contador+0x24>
		return 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <contador+0x26>
	else return 0;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <warning_limit>:

int warning_limit (fsm_t* this) {
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	bfcc      	ite	gt
 80007f4:	2301      	movgt	r3, #1
 80007f6:	2300      	movle	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <measuring>:

void measuring (fsm_t* this) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 8000810:	2300      	movs	r3, #0
 8000812:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	60fb      	str	r3, [r7, #12]

	data = HAL_ADC_GetValue(&hadc1);
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <measuring+0x60>)
 8000820:	f001 f8d1 	bl	80019c6 <HAL_ADC_GetValue>
 8000824:	4603      	mov	r3, r0
 8000826:	82fb      	strh	r3, [r7, #22]

	config->data_recovered = config->data_recovered + data;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	885a      	ldrh	r2, [r3, #2]
 800082c:	8afb      	ldrh	r3, [r7, #22]
 800082e:	4413      	add	r3, r2
 8000830:	b29a      	uxth	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	7f1b      	ldrb	r3, [r3, #28]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 8000842:	f000 ff55 	bl	80016f0 <HAL_GetTick>
 8000846:	4602      	mov	r2, r0
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800084c:	4413      	add	r3, r2
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	619a      	str	r2, [r3, #24]

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <measuring+0x64>)
 800085c:	f001 fd8a 	bl	8002374 <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200002d8 	.word	0x200002d8
 800086c:	40020c00 	.word	0x40020c00

08000870 <process_data>:

void process_data (fsm_t* this) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered/config->measure_count;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	885b      	ldrh	r3, [r3, #2]
 8000886:	461a      	mov	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	7f1b      	ldrb	r3, [r3, #28]
 800088c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000890:	b29a      	uxth	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <process_data+0x80>)
 8000898:	f001 f862 	bl	8001960 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a2:	4814      	ldr	r0, [pc, #80]	; (80008f4 <process_data+0x84>)
 80008a4:	f001 fd66 	bl	8002374 <HAL_GPIO_WritePin>

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	889a      	ldrh	r2, [r3, #4]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d80f      	bhi.n	80008d4 <process_data+0x64>
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	889a      	ldrh	r2, [r3, #4]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008bc:	429a      	cmp	r2, r3
 80008be:	d309      	bcc.n	80008d4 <process_data+0x64>
	{
		config->alarm = FALSE;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2200      	movs	r2, #0
 80008c4:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <process_data+0x84>)
 80008ce:	f001 fd51 	bl	8002374 <HAL_GPIO_WritePin>
 80008d2:	e008      	b.n	80008e6 <process_data+0x76>
	}
	else
	{
		config->alarm = TRUE;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	2201      	movs	r2, #1
 80008d8:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <process_data+0x84>)
 80008e2:	f001 fd47 	bl	8002374 <HAL_GPIO_WritePin>

	}

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002d8 	.word	0x200002d8
 80008f4:	40020c00 	.word	0x40020c00

080008f8 <alert>:
void alert (fsm_t* this) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	615a      	str	r2, [r3, #20]
	config->warning_timer = HAL_GetTick()+config->warning_period;
 8000914:	f000 feec 	bl	80016f0 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800091e:	4413      	add	r3, r2
 8000920:	461a      	mov	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	611a      	str	r2, [r3, #16]
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <sleep>:

void sleep (fsm_t* this) { // led orange
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 8000942:	f000 fed5 	bl	80016f0 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800094c:	4413      	add	r3, r2
 800094e:	461a      	mov	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	8c1b      	ldrh	r3, [r3, #32]
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <sleep+0x88>)
 800095e:	f001 fd09 	bl	8002374 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <sleep+0x88>)
 800096a:	f001 fd03 	bl	8002374 <HAL_GPIO_WritePin>

	if(config->warning_count >= 2)
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	2b01      	cmp	r3, #1
 8000974:	dd0f      	ble.n	8000996 <sleep+0x66>
	{
		config->error = TRUE;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2201      	movs	r2, #1
 800097a:	71da      	strb	r2, [r3, #7]
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <sleep+0x88>)
 8000984:	f001 fcf6 	bl	8002374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <sleep+0x88>)
 8000990:	f001 fcf0 	bl	8002374 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
	}
}
 8000994:	e00b      	b.n	80009ae <sleep+0x7e>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <sleep+0x88>)
 800099e:	f001 fce9 	bl	8002374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <sleep+0x88>)
 80009aa:	f001 fce3 	bl	8002374 <HAL_GPIO_WritePin>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40020c00 	.word	0x40020c00

080009bc <setting_up>:

void setting_up (fsm_t* this) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2200      	movs	r2, #0
 80009d2:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2200      	movs	r2, #0
 80009de:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2200      	movs	r2, #0
 80009e4:	809a      	strh	r2, [r3, #4]
	config->error = FALSE;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2200      	movs	r2, #0
 80009ea:	71da      	strb	r2, [r3, #7]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 80009ec:	f000 fe80 	bl	80016f0 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009f6:	4413      	add	r3, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	8c1b      	ldrh	r3, [r3, #32]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <setting_up+0x78>)
 8000a08:	f001 fcb4 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000a0c:	480a      	ldr	r0, [pc, #40]	; (8000a38 <setting_up+0x7c>)
 8000a0e:	f000 fee1 	bl	80017d4 <HAL_ADC_Start>

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <setting_up+0x78>)
 8000a1a:	f001 fcab 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <setting_up+0x78>)
 8000a26:	f001 fca5 	bl	8002374 <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	200002d8 	.word	0x200002d8

08000a3c <save_data>:

void save_data (fsm_t* this)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b091      	sub	sp, #68	; 0x44
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensor_t* config = punt->param;
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28

	data2save.ID = config->ID;
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	8bdb      	ldrh	r3, [r3, #30]
 8000a52:	813b      	strh	r3, [r7, #8]
	data2save.alarm = config->alarm;
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a56:	799b      	ldrb	r3, [r3, #6]
 8000a58:	733b      	strb	r3, [r7, #12]
	data2save.error = config->error;
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	79db      	ldrb	r3, [r3, #7]
 8000a5e:	737b      	strb	r3, [r7, #13]
	data2save.measure = config->data_average;
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	817b      	strh	r3, [r7, #10]
	data2save.threshold_H = config->threshold_H;
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a6a:	823b      	strh	r3, [r7, #16]
	data2save.threshold_L = config->threshold_L;
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000a70:	81fb      	strh	r3, [r7, #14]
//	data2save.timestamp =

	save_new_data(data2save);
 8000a72:	466c      	mov	r4, sp
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	f7ff fd7c 	bl	8000580 <save_new_data>
}
 8000a88:	bf00      	nop
 8000a8a:	3734      	adds	r7, #52	; 0x34
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}

08000a90 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 8000a9a:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <fsm_sensor_init+0x20>)
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fd9f 	bl	80005e0 <fsm_init>
  f->param = c;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	609a      	str	r2, [r3, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000020 	.word	0x20000020

08000ab4 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t ID, uint16_t supply_Pin, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t warning_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	817b      	strh	r3, [r7, #10]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	813b      	strh	r3, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2200      	movs	r2, #0
 8000ade:	809a      	strh	r2, [r3, #4]
	sensor->alarm = FALSE;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	719a      	strb	r2, [r3, #6]
	sensor->error = FALSE;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	71da      	strb	r2, [r3, #7]
	sensor->setup_timer = 0;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
	sensor->sleep_timer = 0;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
	sensor->warning_timer = 0;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->ID = ID;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	897a      	ldrh	r2, [r7, #10]
 8000b14:	83da      	strh	r2, [r3, #30]
	sensor->supply_Pin = supply_Pin;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	893a      	ldrh	r2, [r7, #8]
 8000b1a:	841a      	strh	r2, [r3, #32]
	sensor->threshold_L = threshold_L;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->threshold_H = threshold_H;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	8b3a      	ldrh	r2, [r7, #24]
 8000b26:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor->threshold_Max = threshold_Max;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	8bba      	ldrh	r2, [r7, #28]
 8000b2c:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->setup_period = setup_period;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	8c3a      	ldrh	r2, [r7, #32]
 8000b32:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->sleep_period = sleep_period;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b38:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->warning_period = warning_period;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b3e:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->measure_period = measure_period;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b44:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_average = measure_average;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b4a:	861a      	strh	r2, [r3, #48]	; 0x30

}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f000 fd61 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f83d 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f9a5 	bl	8000eb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b6a:	f000 f90f 	bl	8000d8c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b6e:	f000 f93b 	bl	8000de8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b72:	f000 f969 	bl	8000e48 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b76:	f007 fb13 	bl	80081a0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000b7a:	f000 f8b3 	bl	8000ce4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fsm_LoRa = LoRa_initialization(LoRa_period);
 8000b7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b82:	f7ff fcd7 	bl	8000534 <LoRa_initialization>
 8000b86:	6478      	str	r0, [r7, #68]	; 0x44
  sensor_initialization(&sensor1, ID_ph_sensor, Sensor_Supply_Pin, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_warning_period, ph_sleep_period, ph_measure_period, ph_average);
 8000b88:	1d38      	adds	r0, r7, #4
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	9306      	str	r3, [sp, #24]
 8000b8e:	23c8      	movs	r3, #200	; 0xc8
 8000b90:	9305      	str	r3, [sp, #20]
 8000b92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b96:	9304      	str	r3, [sp, #16]
 8000b98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b9c:	9303      	str	r3, [sp, #12]
 8000b9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	f7ff ff7c 	bl	8000ab4 <sensor_initialization>

  fsm_sensor_init(&fsm_s1, &sensor1);
 8000bbc:	1d3a      	adds	r2, r7, #4
 8000bbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff63 	bl	8000a90 <fsm_sensor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bca:	f007 fb0f 	bl	80081ec <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire(fsm_LoRa);
 8000bce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000bd0:	f7ff fd18 	bl	8000604 <fsm_fire>
    fsm_fire(&fsm_s1.fsm);
 8000bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fd13 	bl	8000604 <fsm_fire>
    MX_USB_HOST_Process();
 8000bde:	e7f4      	b.n	8000bca <main+0x72>

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b098      	sub	sp, #96	; 0x60
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	2230      	movs	r2, #48	; 0x30
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 fe18 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <SystemClock_Config+0xfc>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a30      	ldr	r2, [pc, #192]	; (8000cdc <SystemClock_Config+0xfc>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <SystemClock_Config+0xfc>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <SystemClock_Config+0x100>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a2a      	ldr	r2, [pc, #168]	; (8000ce0 <SystemClock_Config+0x100>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <SystemClock_Config+0x100>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c4e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2302      	movs	r3, #2
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c62:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c66:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fe5f 	bl	8004938 <HAL_RCC_OscConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c80:	f000 fa16 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c84:	230f      	movs	r3, #15
 8000c86:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 f8b8 	bl	8004e18 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cae:	f000 f9ff 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cb6:	23c0      	movs	r3, #192	; 0xc0
 8000cb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f004 fa86 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cce:	f000 f9ef 	bl	80010b0 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3760      	adds	r7, #96	; 0x60
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <MX_ADC1_Init+0xa0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <MX_ADC1_Init+0xa4>)
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d48:	f000 fd00 	bl	800174c <HAL_ADC_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d52:	f000 f9ad 	bl	80010b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_ADC1_Init+0x9c>)
 8000d68:	f000 fe3a 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d72:	f000 f99d 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200002d8 	.word	0x200002d8
 8000d84:	40012000 	.word	0x40012000
 8000d88:	0f000001 	.word	0x0f000001

08000d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x58>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dca:	f002 ffdd 	bl	8003d88 <HAL_I2C_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dd4:	f000 f96c 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000320 	.word	0x20000320
 8000de0:	40005400 	.word	0x40005400
 8000de4:	000186a0 	.word	0x000186a0

08000de8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <MX_I2S3_Init+0x58>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <MX_I2S3_Init+0x5c>)
 8000e12:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e28:	f003 f8e6 	bl	8003ff8 <HAL_I2S_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e32:	f000 f93d 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200003cc 	.word	0x200003cc
 8000e40:	40003c00 	.word	0x40003c00
 8000e44:	00017700 	.word	0x00017700

08000e48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <MX_SPI1_Init+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e94:	220a      	movs	r2, #10
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_SPI1_Init+0x64>)
 8000e9a:	f004 fad9 	bl	8005450 <HAL_SPI_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ea4:	f000 f904 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000374 	.word	0x20000374
 8000eb0:	40013000 	.word	0x40013000

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	4b71      	ldr	r3, [pc, #452]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a70      	ldr	r2, [pc, #448]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a69      	ldr	r2, [pc, #420]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b63      	ldr	r3, [pc, #396]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a62      	ldr	r2, [pc, #392]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b60      	ldr	r3, [pc, #384]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a5b      	ldr	r2, [pc, #364]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b59      	ldr	r3, [pc, #356]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a54      	ldr	r2, [pc, #336]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b52      	ldr	r3, [pc, #328]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b4e      	ldr	r3, [pc, #312]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <MX_GPIO_Init+0x1e0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2108      	movs	r1, #8
 8000f76:	4848      	ldr	r0, [pc, #288]	; (8001098 <MX_GPIO_Init+0x1e4>)
 8000f78:	f001 f9fc 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4846      	ldr	r0, [pc, #280]	; (800109c <MX_GPIO_Init+0x1e8>)
 8000f82:	f001 f9f7 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000f86:	2200      	movs	r2, #0
 8000f88:	f24f 0112 	movw	r1, #61458	; 0xf012
 8000f8c:	4844      	ldr	r0, [pc, #272]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8000f8e:	f001 f9f1 	bl	8002374 <HAL_GPIO_WritePin>
                          |Sensor_Supply_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f92:	2308      	movs	r3, #8
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483b      	ldr	r0, [pc, #236]	; (8001098 <MX_GPIO_Init+0x1e4>)
 8000faa:	f001 f849 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <MX_GPIO_Init+0x1e8>)
 8000fc6:	f001 f83b 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482d      	ldr	r0, [pc, #180]	; (800109c <MX_GPIO_Init+0x1e8>)
 8000fe6:	f001 f82b 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <MX_GPIO_Init+0x1f0>)
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482a      	ldr	r0, [pc, #168]	; (80010a8 <MX_GPIO_Init+0x1f4>)
 8000ffe:	f001 f81f 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001002:	2304      	movs	r3, #4
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4825      	ldr	r0, [pc, #148]	; (80010ac <MX_GPIO_Init+0x1f8>)
 8001016:	f001 f813 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800102c:	2305      	movs	r3, #5
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	481d      	ldr	r0, [pc, #116]	; (80010ac <MX_GPIO_Init+0x1f8>)
 8001038:	f001 f802 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor_Supply_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800103c:	f24f 0312 	movw	r3, #61458	; 0xf012
 8001040:	61fb      	str	r3, [r7, #28]
                          |Sensor_Supply_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 8001056:	f000 fff3 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800105a:	2320      	movs	r3, #32
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_GPIO_Init+0x1ec>)
 800106e:	f000 ffe7 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001072:	2302      	movs	r3, #2
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_GPIO_Init+0x1f0>)
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0x1e4>)
 8001086:	f000 ffdb 	bl	8002040 <HAL_GPIO_Init>

}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	; 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40021000 	.word	0x40021000
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	10120000 	.word	0x10120000
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:A+1 //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <ringbuf_init+0x1c>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010d8:	d004      	beq.n	80010e4 <ringbuf_init+0x26>

	 p=NULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 80010de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010e2:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  _this->tail = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001100:	b084      	sub	sp, #16
 8001102:	b4b0      	push	{r4, r5, r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	f107 001c 	add.w	r0, r7, #28
 800110e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(NEXT(_this->head) != 0){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001118:	2b09      	cmp	r3, #9
 800111a:	d01c      	beq.n	8001156 <ringbuf_put+0x56>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001126:	d016      	beq.n	8001156 <ringbuf_put+0x56>
  _this->buf[_this->head] = item;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	015b      	lsls	r3, r3, #5
 8001132:	4413      	add	r3, r2
 8001134:	461d      	mov	r5, r3
 8001136:	f107 041c 	add.w	r4, r7, #28
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001142:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head++;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001154:	e016      	b.n	8001184 <ringbuf_put+0x84>
  }
  else
  {
  _this->buf[_this->head] = item;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	4413      	add	r3, r2
 8001162:	461d      	mov	r5, r3
 8001164:	f107 041c 	add.w	r4, r7, #28
 8001168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001170:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head = 0;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2209      	movs	r2, #9
 8001180:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  }
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bcb0      	pop	{r4, r5, r7}
 800118c:	b004      	add	sp, #16
 800118e:	4770      	bx	lr

08001190 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 8001190:	b4b0      	push	{r4, r5, r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d025      	beq.n	80011f6 <ringbuf_get+0x66>
	{
		item = _this->buf[_this->tail];
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	4413      	add	r3, r2
 80011b6:	f107 0408 	add.w	r4, r7, #8
 80011ba:	461d      	mov	r5, r3
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (NEXT(_this->tail) != 0)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d00d      	beq.n	80011ee <ringbuf_get+0x5e>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d007      	beq.n	80011ee <ringbuf_get+0x5e>
		{
			_this->tail++;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80011ec:	e003      	b.n	80011f6 <ringbuf_get+0x66>
		}
		else
		{
			_this->tail = 0;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		}
    }
	return item;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	461d      	mov	r5, r3
 80011fa:	f107 0408 	add.w	r4, r7, #8
 80011fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001202:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001206:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	372c      	adds	r7, #44	; 0x2c
 800120e:	46bd      	mov	sp, r7
 8001210:	bcb0      	pop	{r4, r5, r7}
 8001212:	4770      	bx	lr

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_MspInit+0x4c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_MspInit+0x4c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_MspInit+0x4c>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_MspInit+0x4c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001252:	2007      	movs	r0, #7
 8001254:	f000 feb2 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800

08001264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_ADC_MspInit+0x7c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d127      	bne.n	80012d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_ADC_MspInit+0x80>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_ADC_MspInit+0x80>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_ADC_MspInit+0x80>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_ADC_MspInit+0x80>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_ADC_MspInit+0x80>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_ADC_MspInit+0x80>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012be:	2302      	movs	r3, #2
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_ADC_MspInit+0x84>)
 80012d2:	f000 feb5 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40012000 	.word	0x40012000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_I2C_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800132a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133c:	2304      	movs	r3, #4
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <HAL_I2C_MspInit+0x8c>)
 8001348:	f000 fe7a 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_I2C_MspInit+0x88>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40005400 	.word	0x40005400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_I2S_MspInit+0xc0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d14a      	bne.n	8001434 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_I2S_MspInit+0xc4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013f2:	2310      	movs	r3, #16
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001402:	2306      	movs	r3, #6
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <HAL_I2S_MspInit+0xc8>)
 800140e:	f000 fe17 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001412:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001424:	2306      	movs	r3, #6
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_I2S_MspInit+0xcc>)
 8001430:	f000 fe06 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40003c00 	.word	0x40003c00
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020800 	.word	0x40020800

0800144c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_SPI_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_SPI_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_SPI_MspInit+0x88>)
 8001478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_SPI_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_SPI_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_SPI_MspInit+0x88>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_SPI_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014a6:	23e0      	movs	r3, #224	; 0xe0
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_SPI_MspInit+0x8c>)
 80014c2:	f000 fdbd 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40013000 	.word	0x40013000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f8ca 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <OTG_FS_IRQHandler+0x10>)
 800153e:	f001 f9c1 	bl	80028c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200007f0 	.word	0x200007f0

0800154c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_sbrk+0x50>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x16>
		heap_end = &end;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <_sbrk+0x50>)
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <_sbrk+0x54>)
 8001560:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <_sbrk+0x50>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <_sbrk+0x50>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	466a      	mov	r2, sp
 8001572:	4293      	cmp	r3, r2
 8001574:	d907      	bls.n	8001586 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001576:	f007 f91b 	bl	80087b0 <__errno>
 800157a:	4602      	mov	r2, r0
 800157c:	230c      	movs	r3, #12
 800157e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	e006      	b.n	8001594 <_sbrk+0x48>
	}

	heap_end += incr;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <_sbrk+0x50>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a03      	ldr	r2, [pc, #12]	; (800159c <_sbrk+0x50>)
 8001590:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000016c 	.word	0x2000016c
 80015a0:	20000ab8 	.word	0x20000ab8

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <SystemInit+0x28>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <SystemInit+0x28>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SystemInit+0x28>)
 80015ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015be:	609a      	str	r2, [r3, #8]
#endif
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015d6:	e003      	b.n	80015e0 <LoopCopyDataInit>

080015d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015de:	3104      	adds	r1, #4

080015e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e8:	d3f6      	bcc.n	80015d8 <CopyDataInit>
  ldr  r2, =_sbss
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015ec:	e002      	b.n	80015f4 <LoopFillZerobss>

080015ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015f0:	f842 3b04 	str.w	r3, [r2], #4

080015f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f8:	d3f9      	bcc.n	80015ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015fa:	f7ff ffd3 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f007 f8dd 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff faa9 	bl	8000b58 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800160c:	080089ec 	.word	0x080089ec
  ldr  r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001614:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8001618:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 800161c:	20000ab8 	.word	0x20000ab8

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_Init+0x40>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_Init+0x40>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_Init+0x40>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 fcb5 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fddc 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fccd 	bl	8002026 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 fc95 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200000c0 	.word	0x200000c0
 80016c0:	200000c8 	.word	0x200000c8
 80016c4:	200000c4 	.word	0x200000c4

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200000c8 	.word	0x200000c8
 80016ec:	20000414 	.word	0x20000414

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000414 	.word	0x20000414

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_Delay+0x40>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000c8 	.word	0x200000c8

0800174c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e033      	b.n	80017ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fd7a 	bl	8001264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001792:	f023 0302 	bic.w	r3, r3, #2
 8001796:	f043 0202 	orr.w	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fa40 	bl	8001c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Start+0x1a>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e0a5      	b.n	800193a <HAL_ADC_Start+0x166>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d018      	beq.n	8001836 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001814:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <HAL_ADC_Start+0x174>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_ADC_Start+0x178>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9a      	lsrs	r2, r3, #18
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001828:	e002      	b.n	8001830 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3b01      	subs	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f9      	bne.n	800182a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d179      	bne.n	8001938 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001882:	d106      	bne.n	8001892 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	f023 0206 	bic.w	r2, r3, #6
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
 8001890:	e002      	b.n	8001898 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_ADC_Start+0x17c>)
 80018a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d12a      	bne.n	8001910 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_ADC_Start+0x180>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d015      	beq.n	80018f0 <HAL_ADC_Start+0x11c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_ADC_Start+0x184>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d105      	bne.n	80018da <HAL_ADC_Start+0x106>
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_ADC_Start+0x17c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00a      	beq.n	80018f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_ADC_Start+0x188>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d129      	bne.n	8001938 <HAL_ADC_Start+0x164>
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_ADC_Start+0x17c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d823      	bhi.n	8001938 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d11c      	bne.n	8001938 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	e013      	b.n	8001938 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_ADC_Start+0x180>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10e      	bne.n	8001938 <HAL_ADC_Start+0x164>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001936:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200000c0 	.word	0x200000c0
 800194c:	431bde83 	.word	0x431bde83
 8001950:	40012300 	.word	0x40012300
 8001954:	40012000 	.word	0x40012000
 8001958:	40012100 	.word	0x40012100
 800195c:	40012200 	.word	0x40012200

08001960 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_ADC_Stop+0x16>
 8001972:	2302      	movs	r3, #2
 8001974:	e021      	b.n	80019ba <HAL_ADC_Stop+0x5a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d109      	bne.n	80019b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1c>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e105      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x228>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d925      	bls.n	8001a58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68d9      	ldr	r1, [r3, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b1e      	subs	r3, #30
 8001a22:	2207      	movs	r2, #7
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	400a      	ands	r2, r1
 8001a30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68d9      	ldr	r1, [r3, #12]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	4603      	mov	r3, r0
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4403      	add	r3, r0
 8001a4a:	3b1e      	subs	r3, #30
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	e022      	b.n	8001a9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	400a      	ands	r2, r1
 8001a7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6919      	ldr	r1, [r3, #16]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4403      	add	r3, r0
 8001a94:	409a      	lsls	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d824      	bhi.n	8001af0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b05      	subs	r3, #5
 8001ab8:	221f      	movs	r2, #31
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b05      	subs	r3, #5
 8001ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34
 8001aee:	e04c      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d824      	bhi.n	8001b42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	3b23      	subs	r3, #35	; 0x23
 8001b0a:	221f      	movs	r2, #31
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43da      	mvns	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	400a      	ands	r2, r1
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3b23      	subs	r3, #35	; 0x23
 8001b34:	fa00 f203 	lsl.w	r2, r0, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b40:	e023      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b41      	subs	r3, #65	; 0x41
 8001b54:	221f      	movs	r2, #31
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b41      	subs	r3, #65	; 0x41
 8001b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_ADC_ConfigChannel+0x234>)
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <HAL_ADC_ConfigChannel+0x238>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d109      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1cc>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_ADC_ConfigChannel+0x238>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d123      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x21e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d003      	beq.n	8001bc6 <HAL_ADC_ConfigChannel+0x1e6>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b11      	cmp	r3, #17
 8001bc4:	d11b      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d111      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_ADC_ConfigChannel+0x23c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_ADC_ConfigChannel+0x240>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	0c9a      	lsrs	r2, r3, #18
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40012300 	.word	0x40012300
 8001c18:	40012000 	.word	0x40012000
 8001c1c:	200000c0 	.word	0x200000c0
 8001c20:	431bde83 	.word	0x431bde83

08001c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2c:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <ADC_Init+0x1f0>)
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	021a      	lsls	r2, r3, #8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <ADC_Init+0x1f4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d022      	beq.n	8001d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6899      	ldr	r1, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	e00f      	b.n	8001d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0202 	bic.w	r2, r2, #2
 8001d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e1b      	ldrb	r3, [r3, #24]
 8001d3c:	005a      	lsls	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	035a      	lsls	r2, r3, #13
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	e007      	b.n	8001d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	051a      	lsls	r2, r3, #20
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dda:	025a      	lsls	r2, r3, #9
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	029a      	lsls	r2, r3, #10
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40012300 	.word	0x40012300
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e16b      	b.n	8002334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 815a 	bne.w	800232e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00b      	beq.n	800209a <HAL_GPIO_Init+0x5a>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208e:	2b11      	cmp	r3, #17
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b12      	cmp	r3, #18
 8002098:	d130      	bne.n	80020fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0201 	and.w	r2, r3, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0xfc>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80b4 	beq.w	800232e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <HAL_GPIO_Init+0x308>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a5e      	ldr	r2, [pc, #376]	; (8002348 <HAL_GPIO_Init+0x308>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <HAL_GPIO_Init+0x308>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x310>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x314>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_GPIO_Init+0x318>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4e      	ldr	r2, [pc, #312]	; (800235c <HAL_GPIO_Init+0x31c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4d      	ldr	r2, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x320>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4c      	ldr	r2, [pc, #304]	; (8002364 <HAL_GPIO_Init+0x324>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <HAL_GPIO_Init+0x328>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4a      	ldr	r2, [pc, #296]	; (800236c <HAL_GPIO_Init+0x32c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x20a>
 8002246:	2307      	movs	r3, #7
 8002248:	e00e      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224a:	2308      	movs	r3, #8
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224e:	2306      	movs	r3, #6
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4934      	ldr	r1, [pc, #208]	; (800234c <HAL_GPIO_Init+0x30c>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <HAL_GPIO_Init+0x330>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022aa:	4a31      	ldr	r2, [pc, #196]	; (8002370 <HAL_GPIO_Init+0x330>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_GPIO_Init+0x330>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <HAL_GPIO_Init+0x330>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_GPIO_Init+0x330>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_GPIO_Init+0x330>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_GPIO_Init+0x330>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002328:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_GPIO_Init+0x330>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f ae90 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	3724      	adds	r7, #36	; 0x24
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40021800 	.word	0x40021800
 800236c:	40021c00 	.word	0x40021c00
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a8:	b08f      	sub	sp, #60	; 0x3c
 80023aa:	af0a      	add	r7, sp, #40	; 0x28
 80023ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e054      	b.n	8002462 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f005 ff42 	bl	800825c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 f900 	bl	80055fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	687e      	ldr	r6, [r7, #4]
 8002404:	466d      	mov	r5, sp
 8002406:	f106 0410 	add.w	r4, r6, #16
 800240a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002416:	e885 0003 	stmia.w	r5, {r0, r1}
 800241a:	1d33      	adds	r3, r6, #4
 800241c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241e:	6838      	ldr	r0, [r7, #0]
 8002420:	f003 f87a 	bl	8005518 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f8f7 	bl	800561e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	687e      	ldr	r6, [r7, #4]
 8002438:	466d      	mov	r5, sp
 800243a:	f106 0410 	add.w	r4, r6, #16
 800243e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800244a:	e885 0003 	stmia.w	r5, {r0, r1}
 800244e:	1d33      	adds	r3, r6, #4
 8002450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002452:	6838      	ldr	r0, [r7, #0]
 8002454:	f003 fa0a 	bl	800586c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800246a:	b590      	push	{r4, r7, lr}
 800246c:	b089      	sub	sp, #36	; 0x24
 800246e:	af04      	add	r7, sp, #16
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	4608      	mov	r0, r1
 8002474:	4611      	mov	r1, r2
 8002476:	461a      	mov	r2, r3
 8002478:	4603      	mov	r3, r0
 800247a:	70fb      	strb	r3, [r7, #3]
 800247c:	460b      	mov	r3, r1
 800247e:	70bb      	strb	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_HCD_HC_Init+0x28>
 800248e:	2302      	movs	r3, #2
 8002490:	e07f      	b.n	8002592 <HAL_HCD_HC_Init+0x128>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	333d      	adds	r3, #61	; 0x3d
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	3338      	adds	r3, #56	; 0x38
 80024be:	787a      	ldrb	r2, [r7, #1]
 80024c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	3340      	adds	r3, #64	; 0x40
 80024d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	3339      	adds	r3, #57	; 0x39
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	333f      	adds	r3, #63	; 0x3f
 80024fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80024fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	78bb      	ldrb	r3, [r7, #2]
 8002504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002508:	b2d8      	uxtb	r0, r3
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	333a      	adds	r3, #58	; 0x3a
 8002518:	4602      	mov	r2, r0
 800251a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800251c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da0a      	bge.n	800253a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	333b      	adds	r3, #59	; 0x3b
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e009      	b.n	800254e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	333b      	adds	r3, #59	; 0x3b
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	333c      	adds	r3, #60	; 0x3c
 800255e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002562:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	787c      	ldrb	r4, [r7, #1]
 800256a:	78ba      	ldrb	r2, [r7, #2]
 800256c:	78f9      	ldrb	r1, [r7, #3]
 800256e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4623      	mov	r3, r4
 8002580:	f003 faf6 	bl	8005b70 <USB_HC_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}

0800259a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_HCD_HC_Halt+0x1e>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e00f      	b.n	80025d8 <HAL_HCD_HC_Halt+0x3e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fd30 	bl	800602e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	70fb      	strb	r3, [r7, #3]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70bb      	strb	r3, [r7, #2]
 80025f6:	4613      	mov	r3, r2
 80025f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	333b      	adds	r3, #59	; 0x3b
 800260a:	78ba      	ldrb	r2, [r7, #2]
 800260c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	333f      	adds	r3, #63	; 0x3f
 800261e:	787a      	ldrb	r2, [r7, #1]
 8002620:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002622:	7c3b      	ldrb	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d114      	bne.n	8002652 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3342      	adds	r3, #66	; 0x42
 8002638:	2203      	movs	r2, #3
 800263a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	333d      	adds	r3, #61	; 0x3d
 800264c:	7f3a      	ldrb	r2, [r7, #28]
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e009      	b.n	8002666 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	3342      	adds	r3, #66	; 0x42
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002666:	787b      	ldrb	r3, [r7, #1]
 8002668:	2b03      	cmp	r3, #3
 800266a:	f200 80d6 	bhi.w	800281a <HAL_HCD_HC_SubmitRequest+0x23a>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	08002805 	.word	0x08002805
 800267c:	080026f1 	.word	0x080026f1
 8002680:	0800277b 	.word	0x0800277b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002684:	7c3b      	ldrb	r3, [r7, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 80c9 	bne.w	800281e <HAL_HCD_HC_SubmitRequest+0x23e>
 800268c:	78bb      	ldrb	r3, [r7, #2]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80c5 	bne.w	800281e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002694:	8b3b      	ldrh	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3351      	adds	r3, #81	; 0x51
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	3351      	adds	r3, #81	; 0x51
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	3342      	adds	r3, #66	; 0x42
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026d8:	e0a1      	b.n	800281e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	3342      	adds	r3, #66	; 0x42
 80026ea:	2202      	movs	r2, #2
 80026ec:	701a      	strb	r2, [r3, #0]
      break;
 80026ee:	e096      	b.n	800281e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80026f0:	78bb      	ldrb	r3, [r7, #2]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d120      	bne.n	8002738 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	3351      	adds	r3, #81	; 0x51
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	3342      	adds	r3, #66	; 0x42
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002720:	e07e      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	3342      	adds	r3, #66	; 0x42
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
      break;
 8002736:	e073      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	3350      	adds	r3, #80	; 0x50
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	3342      	adds	r3, #66	; 0x42
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
      break;
 8002762:	e05d      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	3342      	adds	r3, #66	; 0x42
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
      break;
 8002778:	e052      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800277a:	78bb      	ldrb	r3, [r7, #2]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d120      	bne.n	80027c2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3351      	adds	r3, #81	; 0x51
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3342      	adds	r3, #66	; 0x42
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027aa:	e039      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	3342      	adds	r3, #66	; 0x42
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
      break;
 80027c0:	e02e      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	3350      	adds	r3, #80	; 0x50
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3342      	adds	r3, #66	; 0x42
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
      break;
 80027ec:	e018      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	3342      	adds	r3, #66	; 0x42
 80027fe:	2202      	movs	r2, #2
 8002800:	701a      	strb	r2, [r3, #0]
      break;
 8002802:	e00d      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3342      	adds	r3, #66	; 0x42
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
      break;
 8002818:	e002      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800281e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3344      	adds	r3, #68	; 0x44
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	8b39      	ldrh	r1, [r7, #24]
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4403      	add	r3, r0
 8002844:	3348      	adds	r3, #72	; 0x48
 8002846:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	334c      	adds	r3, #76	; 0x4c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	3339      	adds	r3, #57	; 0x39
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	335d      	adds	r3, #93	; 0x5d
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	3338      	adds	r3, #56	; 0x38
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	18d1      	adds	r1, r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	f003 fa66 	bl	8005d84 <USB_HC_StartXfer>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop

080028c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 ff83 	bl	80057e6 <USB_GetMode>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80ef 	bne.w	8002ac6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 ff67 	bl	80057c0 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80e5 	beq.w	8002ac4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 ff5e 	bl	80057c0 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290e:	d104      	bne.n	800291a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002918:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f002 ff4e 	bl	80057c0 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800292e:	d104      	bne.n	800293a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002938:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f002 ff3e 	bl	80057c0 <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800294a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800294e:	d104      	bne.n	800295a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002958:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f002 ff2e 	bl	80057c0 <USB_ReadInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d103      	bne.n	8002976 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2202      	movs	r2, #2
 8002974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 ff20 	bl	80057c0 <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800298a:	d115      	bne.n	80029b8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002994:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f005 fcd6 	bl	8008358 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 f816 	bl	80059e4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 feff 	bl	80057c0 <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d102      	bne.n	80029d4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f001 f966 	bl	8003ca0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fef1 	bl	80057c0 <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d106      	bne.n	80029f6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f005 fc99 	bl	8008320 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2208      	movs	r2, #8
 80029f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fee0 	bl	80057c0 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0a:	d138      	bne.n	8002a7e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fafb 	bl	800600c <USB_HC_ReadInterrupt>
 8002a16:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e025      	b.n	8002a6a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d018      	beq.n	8002a64 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	d106      	bne.n	8002a58 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8cf 	bl	8002bf4 <HCD_HC_IN_IRQHandler>
 8002a56:	e005      	b.n	8002a64 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fcfd 	bl	800345e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3d4      	bcc.n	8002a1e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fe9c 	bl	80057c0 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d101      	bne.n	8002a96 <HAL_HCD_IRQHandler+0x1d2>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_HCD_IRQHandler+0x1d4>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d014      	beq.n	8002ac6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0210 	bic.w	r2, r2, #16
 8002aaa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f001 f84b 	bl	8003b48 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0210 	orr.w	r2, r2, #16
 8002ac0:	619a      	str	r2, [r3, #24]
 8002ac2:	e000      	b.n	8002ac6 <HAL_HCD_IRQHandler+0x202>
      return;
 8002ac4:	bf00      	nop
    }
  }
}
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_HCD_Start+0x16>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e013      	b.n	8002b0a <HAL_HCD_Start+0x3e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f002 fd73 	bl	80055da <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 ffd6 	bl	8005aac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_HCD_Stop+0x16>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e00d      	b.n	8002b44 <HAL_HCD_Stop+0x32>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fbb5 	bl	80062a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 ff7d 	bl	8005a58 <USB_ResetPort>
 8002b5e:	4603      	mov	r3, r0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	781b      	ldrb	r3, [r3, #0]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	334c      	adds	r3, #76	; 0x4c
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 ffbf 	bl	8005b4c <USB_GetCurrentFrame>
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 ff9a 	bl	8005b1e <USB_GetHostSpeed>
 8002bea:	4603      	mov	r3, r0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d119      	bne.n	8002c58 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	461a      	mov	r2, r3
 8002c32:	2304      	movs	r3, #4
 8002c34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	0151      	lsls	r1, r2, #5
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	440a      	add	r2, r1
 8002c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	60d3      	str	r3, [r2, #12]
 8002c56:	e0ce      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d12c      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	335d      	adds	r3, #93	; 0x5d
 8002c94:	2207      	movs	r2, #7
 8002c96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f9b3 	bl	800602e <USB_HC_Halt>
 8002cc8:	e095      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d109      	bne.n	8002cf4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2320      	movs	r3, #32
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	e080      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d134      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	335d      	adds	r3, #93	; 0x5d
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2308      	movs	r3, #8
 8002d60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 f95e 	bl	800602e <USB_HC_Halt>
 8002d72:	e040      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d134      	bne.n	8002df6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 f939 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2310      	movs	r3, #16
 8002dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	335d      	adds	r3, #93	; 0x5d
 8002dde:	2208      	movs	r2, #8
 8002de0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	461a      	mov	r2, r3
 8002df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0c:	d122      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	0151      	lsls	r1, r2, #5
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	440a      	add	r2, r1
 8002e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 f8f8 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e50:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e52:	e300      	b.n	8003456 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	f040 80fd 	bne.w	8003066 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01b      	beq.n	8002eac <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3348      	adds	r3, #72	; 0x48
 8002e84:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0159      	lsls	r1, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	440b      	add	r3, r1
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e98:	1ad1      	subs	r1, r2, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4403      	add	r3, r0
 8002ea8:	334c      	adds	r3, #76	; 0x4c
 8002eaa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	335d      	adds	r3, #93	; 0x5d
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	3358      	adds	r3, #88	; 0x58
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	333f      	adds	r3, #63	; 0x3f
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	333f      	adds	r3, #63	; 0x3f
 8002f0c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d121      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	0151      	lsls	r1, r2, #5
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	440a      	add	r2, r1
 8002f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 f876 	bl	800602e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2310      	movs	r3, #16
 8002f52:	6093      	str	r3, [r2, #8]
 8002f54:	e070      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333f      	adds	r3, #63	; 0x3f
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d12a      	bne.n	8002fc2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	0151      	lsls	r1, r2, #5
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	440a      	add	r2, r1
 8002f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f8a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	335c      	adds	r3, #92	; 0x5c
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	335c      	adds	r3, #92	; 0x5c
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4601      	mov	r1, r0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f005 f9da 	bl	8008374 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fc0:	e03a      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	333f      	adds	r3, #63	; 0x3f
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d12f      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3350      	adds	r3, #80	; 0x50
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	f083 0301 	eor.w	r3, r3, #1
 8003002:	b2d8      	uxtb	r0, r3
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	3350      	adds	r3, #80	; 0x50
 8003014:	4602      	mov	r2, r0
 8003016:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	b2d8      	uxtb	r0, r3
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	4601      	mov	r1, r0
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f005 f99e 	bl	8008374 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3350      	adds	r3, #80	; 0x50
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2d8      	uxtb	r0, r3
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3350      	adds	r3, #80	; 0x50
 8003060:	4602      	mov	r2, r0
 8003062:	701a      	strb	r2, [r3, #0]
}
 8003064:	e1f7      	b.n	8003456 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	f040 811a 	bne.w	80032b2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	0151      	lsls	r1, r2, #5
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	440a      	add	r2, r1
 8003094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003098:	f023 0302 	bic.w	r3, r3, #2
 800309c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	335d      	adds	r3, #93	; 0x5d
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10a      	bne.n	80030ca <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	335c      	adds	r3, #92	; 0x5c
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e0d9      	b.n	800327e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	335d      	adds	r3, #93	; 0x5d
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d10a      	bne.n	80030f6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	2205      	movs	r2, #5
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e0c3      	b.n	800327e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	335d      	adds	r3, #93	; 0x5d
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b06      	cmp	r3, #6
 800310a:	d00a      	beq.n	8003122 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	335d      	adds	r3, #93	; 0x5d
 800311c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800311e:	2b08      	cmp	r3, #8
 8003120:	d156      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	3358      	adds	r3, #88	; 0x58
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1c59      	adds	r1, r3, #1
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4403      	add	r3, r0
 8003144:	3358      	adds	r3, #88	; 0x58
 8003146:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	3358      	adds	r3, #88	; 0x58
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d914      	bls.n	8003188 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	3358      	adds	r3, #88	; 0x58
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	335c      	adds	r3, #92	; 0x5c
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e009      	b.n	800319c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	2202      	movs	r2, #2
 800319a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e056      	b.n	800327e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	335d      	adds	r3, #93	; 0x5d
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d123      	bne.n	800322e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	335c      	adds	r3, #92	; 0x5c
 80031f6:	2202      	movs	r2, #2
 80031f8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003210:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003218:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	461a      	mov	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e027      	b.n	800327e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	335d      	adds	r3, #93	; 0x5d
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b07      	cmp	r3, #7
 8003242:	d11c      	bne.n	800327e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	3358      	adds	r3, #88	; 0x58
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1c59      	adds	r1, r3, #1
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4403      	add	r3, r0
 8003266:	3358      	adds	r3, #88	; 0x58
 8003268:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	335c      	adds	r3, #92	; 0x5c
 800327a:	2204      	movs	r2, #4
 800327c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	461a      	mov	r2, r3
 800328c:	2302      	movs	r3, #2
 800328e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	b2d8      	uxtb	r0, r3
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	335c      	adds	r3, #92	; 0x5c
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4601      	mov	r1, r0
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f005 f862 	bl	8008374 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032b0:	e0d1      	b.n	8003456 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d13e      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	3358      	adds	r3, #88	; 0x58
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4403      	add	r3, r0
 800330a:	3358      	adds	r3, #88	; 0x58
 800330c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	335d      	adds	r3, #93	; 0x5d
 800331e:	2206      	movs	r2, #6
 8003320:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f002 fe7e 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	461a      	mov	r2, r3
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	6093      	str	r3, [r2, #8]
}
 8003344:	e087      	b.n	8003456 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d17c      	bne.n	8003456 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	333f      	adds	r3, #63	; 0x3f
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d122      	bne.n	80033b8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3358      	adds	r3, #88	; 0x58
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	0151      	lsls	r1, r2, #5
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	440a      	add	r2, r1
 800339c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fe3c 	bl	800602e <USB_HC_Halt>
 80033b6:	e045      	b.n	8003444 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	440b      	add	r3, r1
 80033c6:	333f      	adds	r3, #63	; 0x3f
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	333f      	adds	r3, #63	; 0x3f
 80033de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d12f      	bne.n	8003444 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	3358      	adds	r3, #88	; 0x58
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d121      	bne.n	8003444 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	335d      	adds	r3, #93	; 0x5d
 8003410:	2203      	movs	r2, #3
 8003412:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	440a      	add	r2, r1
 800342a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f002 fdf5 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	2310      	movs	r3, #16
 8003454:	6093      	str	r3, [r2, #8]
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d119      	bne.n	80034c2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2304      	movs	r3, #4
 800349e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80034c0:	e33e      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d141      	bne.n	800355c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	2320      	movs	r3, #32
 80034e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	333d      	adds	r3, #61	; 0x3d
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	f040 831f 	bne.w	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	333d      	adds	r3, #61	; 0x3d
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	335c      	adds	r3, #92	; 0x5c
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	0151      	lsls	r1, r2, #5
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	440a      	add	r2, r1
 8003540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f002 fd6a 	bl	800602e <USB_HC_Halt>
}
 800355a:	e2f1      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d13f      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	335d      	adds	r3, #93	; 0x5d
 8003582:	2204      	movs	r2, #4
 8003584:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	333d      	adds	r3, #61	; 0x3d
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	440b      	add	r3, r1
 80035a8:	3358      	adds	r3, #88	; 0x58
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 fd28 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	461a      	mov	r2, r3
 80035ec:	2340      	movs	r3, #64	; 0x40
 80035ee:	6093      	str	r3, [r2, #8]
}
 80035f0:	e2a6      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003608:	d122      	bne.n	8003650 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	0151      	lsls	r1, r2, #5
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	440a      	add	r2, r1
 8003620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f002 fcfa 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800364c:	6093      	str	r3, [r2, #8]
}
 800364e:	e277      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d135      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	3358      	adds	r3, #88	; 0x58
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	440a      	add	r2, r1
 8003690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fcc2 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b6:	461a      	mov	r2, r3
 80036b8:	2301      	movs	r3, #1
 80036ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	335d      	adds	r3, #93	; 0x5d
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
}
 80036d0:	e236      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d12b      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2308      	movs	r3, #8
 80036f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	440a      	add	r2, r1
 8003710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fc82 	bl	800602e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335d      	adds	r3, #93	; 0x5d
 800373a:	2205      	movs	r2, #5
 800373c:	701a      	strb	r2, [r3, #0]
}
 800373e:	e1ff      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d155      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	3358      	adds	r3, #88	; 0x58
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	335d      	adds	r3, #93	; 0x5d
 800377a:	2203      	movs	r2, #3
 800377c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	333d      	adds	r3, #61	; 0x3d
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d114      	bne.n	80037be <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	333c      	adds	r3, #60	; 0x3c
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	333d      	adds	r3, #61	; 0x3d
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	0151      	lsls	r1, r2, #5
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	440a      	add	r2, r1
 80037d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f002 fc20 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	461a      	mov	r2, r3
 80037fc:	2310      	movs	r3, #16
 80037fe:	6093      	str	r3, [r2, #8]
}
 8003800:	e19e      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d12b      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	440a      	add	r2, r1
 800382e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f002 fbf3 	bl	800602e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	335d      	adds	r3, #93	; 0x5d
 8003858:	2206      	movs	r2, #6
 800385a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	461a      	mov	r2, r3
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	6093      	str	r3, [r2, #8]
}
 800386e:	e167      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d135      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	440a      	add	r2, r1
 800389e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 fbbb 	bl	800602e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	461a      	mov	r2, r3
 80038c6:	2310      	movs	r3, #16
 80038c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	461a      	mov	r2, r3
 80038d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	335d      	adds	r3, #93	; 0x5d
 80038ee:	2208      	movs	r2, #8
 80038f0:	701a      	strb	r2, [r3, #0]
}
 80038f2:	e125      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	f040 811a 	bne.w	8003b40 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	440a      	add	r2, r1
 8003922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003926:	f023 0302 	bic.w	r3, r3, #2
 800392a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335d      	adds	r3, #93	; 0x5d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d137      	bne.n	80039b2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	335c      	adds	r3, #92	; 0x5c
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	333f      	adds	r3, #63	; 0x3f
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d00b      	beq.n	8003984 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	333f      	adds	r3, #63	; 0x3f
 800397c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	f040 80c5 	bne.w	8003b0e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	3351      	adds	r3, #81	; 0x51
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	f083 0301 	eor.w	r3, r3, #1
 800399a:	b2d8      	uxtb	r0, r3
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	3351      	adds	r3, #81	; 0x51
 80039ac:	4602      	mov	r2, r0
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e0ad      	b.n	8003b0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	335d      	adds	r3, #93	; 0x5d
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d10a      	bne.n	80039de <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	335c      	adds	r3, #92	; 0x5c
 80039d8:	2202      	movs	r2, #2
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e097      	b.n	8003b0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	335d      	adds	r3, #93	; 0x5d
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d10a      	bne.n	8003a0a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	335c      	adds	r3, #92	; 0x5c
 8003a04:	2202      	movs	r2, #2
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e081      	b.n	8003b0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	335d      	adds	r3, #93	; 0x5d
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d10a      	bne.n	8003a36 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	335c      	adds	r3, #92	; 0x5c
 8003a30:	2205      	movs	r2, #5
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e06b      	b.n	8003b0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	335d      	adds	r3, #93	; 0x5d
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d00a      	beq.n	8003a62 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	335d      	adds	r3, #93	; 0x5d
 8003a5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d155      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	3358      	adds	r3, #88	; 0x58
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1c59      	adds	r1, r3, #1
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4403      	add	r3, r0
 8003a84:	3358      	adds	r3, #88	; 0x58
 8003a86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	440b      	add	r3, r1
 8003a96:	3358      	adds	r3, #88	; 0x58
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d914      	bls.n	8003ac8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3358      	adds	r3, #88	; 0x58
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	335c      	adds	r3, #92	; 0x5c
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e009      	b.n	8003adc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	335c      	adds	r3, #92	; 0x5c
 8003ad8:	2202      	movs	r2, #2
 8003ada:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003af2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003afa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	b2d8      	uxtb	r0, r3
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	335c      	adds	r3, #92	; 0x5c
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4601      	mov	r1, r0
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f004 fc1a 	bl	8008374 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b40:	bf00      	nop
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	0c5b      	lsrs	r3, r3, #17
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d003      	beq.n	8003b8c <HCD_RXQLVL_IRQHandler+0x44>
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	f000 8082 	beq.w	8003c8e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b8a:	e083      	b.n	8003c94 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d07f      	beq.n	8003c92 <HCD_RXQLVL_IRQHandler+0x14a>
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3344      	adds	r3, #68	; 0x44
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d074      	beq.n	8003c92 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	440b      	add	r3, r1
 8003bba:	3344      	adds	r3, #68	; 0x44
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f001 fdd3 	bl	800576e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3344      	adds	r3, #68	; 0x44
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	18d1      	adds	r1, r2, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4403      	add	r3, r0
 8003bec:	3344      	adds	r3, #68	; 0x44
 8003bee:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334c      	adds	r3, #76	; 0x4c
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	18d1      	adds	r1, r2, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4403      	add	r3, r0
 8003c14:	334c      	adds	r3, #76	; 0x4c
 8003c16:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HCD_RXQLVL_IRQHandler+0x154>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d031      	beq.n	8003c92 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c44:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c4c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3350      	adds	r3, #80	; 0x50
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f083 0301 	eor.w	r3, r3, #1
 8003c76:	b2d8      	uxtb	r0, r3
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	3350      	adds	r3, #80	; 0x50
 8003c88:	4602      	mov	r2, r0
 8003c8a:	701a      	strb	r2, [r3, #0]
      break;
 8003c8c:	e001      	b.n	8003c92 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003c92:	bf00      	nop
  }
}
 8003c94:	bf00      	nop
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	1ff80000 	.word	0x1ff80000

08003ca0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ccc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d10b      	bne.n	8003cf0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f004 fb2a 	bl	800833c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d132      	bne.n	8003d60 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 0308 	orr.w	r3, r3, #8
 8003d00:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d126      	bne.n	8003d5a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d113      	bne.n	8003d3c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d1e:	d106      	bne.n	8003d2e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2102      	movs	r1, #2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 fe5c 	bl	80059e4 <USB_InitFSLSPClkSel>
 8003d2c:	e011      	b.n	8003d52 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fe55 	bl	80059e4 <USB_InitFSLSPClkSel>
 8003d3a:	e00a      	b.n	8003d52 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d50:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f004 fb1c 	bl	8008390 <HAL_HCD_PortEnabled_Callback>
 8003d58:	e002      	b.n	8003d60 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f004 fb26 	bl	80083ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d103      	bne.n	8003d72 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6013      	str	r3, [r2, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e11f      	b.n	8003fda <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fa9c 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dec:	f001 f9de 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4a7b      	ldr	r2, [pc, #492]	; (8003fe4 <HAL_I2C_Init+0x25c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d807      	bhi.n	8003e0c <HAL_I2C_Init+0x84>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a7a      	ldr	r2, [pc, #488]	; (8003fe8 <HAL_I2C_Init+0x260>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bf94      	ite	ls
 8003e04:	2301      	movls	r3, #1
 8003e06:	2300      	movhi	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e006      	b.n	8003e1a <HAL_I2C_Init+0x92>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a77      	ldr	r2, [pc, #476]	; (8003fec <HAL_I2C_Init+0x264>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bf94      	ite	ls
 8003e14:	2301      	movls	r3, #1
 8003e16:	2300      	movhi	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0db      	b.n	8003fda <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a72      	ldr	r2, [pc, #456]	; (8003ff0 <HAL_I2C_Init+0x268>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0c9b      	lsrs	r3, r3, #18
 8003e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4a64      	ldr	r2, [pc, #400]	; (8003fe4 <HAL_I2C_Init+0x25c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d802      	bhi.n	8003e5c <HAL_I2C_Init+0xd4>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	e009      	b.n	8003e70 <HAL_I2C_Init+0xe8>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	4a63      	ldr	r2, [pc, #396]	; (8003ff4 <HAL_I2C_Init+0x26c>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	3301      	adds	r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4956      	ldr	r1, [pc, #344]	; (8003fe4 <HAL_I2C_Init+0x25c>)
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d80d      	bhi.n	8003eac <HAL_I2C_Init+0x124>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e59      	subs	r1, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	bf38      	it	cc
 8003ea8:	2304      	movcc	r3, #4
 8003eaa:	e04f      	b.n	8003f4c <HAL_I2C_Init+0x1c4>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d111      	bne.n	8003ed8 <HAL_I2C_Init+0x150>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1e58      	subs	r0, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e012      	b.n	8003efe <HAL_I2C_Init+0x176>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e58      	subs	r0, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	0099      	lsls	r1, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Init+0x17e>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e022      	b.n	8003f4c <HAL_I2C_Init+0x1c4>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10e      	bne.n	8003f2c <HAL_I2C_Init+0x1a4>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1e58      	subs	r0, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	440b      	add	r3, r1
 8003f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2a:	e00f      	b.n	8003f4c <HAL_I2C_Init+0x1c4>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1e58      	subs	r0, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	0099      	lsls	r1, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	6809      	ldr	r1, [r1, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6911      	ldr	r1, [r2, #16]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	000186a0 	.word	0x000186a0
 8003fe8:	001e847f 	.word	0x001e847f
 8003fec:	003d08ff 	.word	0x003d08ff
 8003ff0:	431bde83 	.word	0x431bde83
 8003ff4:	10624dd3 	.word	0x10624dd3

08003ff8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e128      	b.n	800425c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a90      	ldr	r2, [pc, #576]	; (8004264 <HAL_I2S_Init+0x26c>)
 8004022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd f9a9 	bl	800137c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2202      	movs	r2, #2
 800404c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d060      	beq.n	8004118 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800405e:	2310      	movs	r3, #16
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e001      	b.n	8004068 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b20      	cmp	r3, #32
 800406e:	d802      	bhi.n	8004076 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004076:	2001      	movs	r0, #1
 8004078:	f001 f98e 	bl	8005398 <HAL_RCCEx_GetPeriphCLKFreq>
 800407c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d125      	bne.n	80040d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	fbb2 f2f3 	udiv	r2, r2, r3
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	3305      	adds	r3, #5
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e01f      	b.n	80040f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	3305      	adds	r3, #5
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e00e      	b.n	80040f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	3305      	adds	r3, #5
 80040f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4a5c      	ldr	r2, [pc, #368]	; (8004268 <HAL_I2S_Init+0x270>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	08db      	lsrs	r3, r3, #3
 80040fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	e003      	b.n	8004120 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004118:	2302      	movs	r3, #2
 800411a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d902      	bls.n	800412c <HAL_I2S_Init+0x134>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2bff      	cmp	r3, #255	; 0xff
 800412a:	d907      	bls.n	800413c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f043 0210 	orr.w	r2, r3, #16
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e08f      	b.n	800425c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	ea42 0103 	orr.w	r1, r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	430a      	orrs	r2, r1
 800414e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800415a:	f023 030f 	bic.w	r3, r3, #15
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6851      	ldr	r1, [r2, #4]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6892      	ldr	r2, [r2, #8]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68d2      	ldr	r2, [r2, #12]
 800416c:	4311      	orrs	r1, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6992      	ldr	r2, [r2, #24]
 8004172:	430a      	orrs	r2, r1
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d161      	bne.n	800424c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a38      	ldr	r2, [pc, #224]	; (800426c <HAL_I2S_Init+0x274>)
 800418c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a37      	ldr	r2, [pc, #220]	; (8004270 <HAL_I2S_Init+0x278>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_I2S_Init+0x1a4>
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_I2S_Init+0x27c>)
 800419a:	e001      	b.n	80041a0 <HAL_I2S_Init+0x1a8>
 800419c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4932      	ldr	r1, [pc, #200]	; (8004270 <HAL_I2S_Init+0x278>)
 80041a8:	428a      	cmp	r2, r1
 80041aa:	d101      	bne.n	80041b0 <HAL_I2S_Init+0x1b8>
 80041ac:	4a31      	ldr	r2, [pc, #196]	; (8004274 <HAL_I2S_Init+0x27c>)
 80041ae:	e001      	b.n	80041b4 <HAL_I2S_Init+0x1bc>
 80041b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041b8:	f023 030f 	bic.w	r3, r3, #15
 80041bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <HAL_I2S_Init+0x278>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_I2S_Init+0x1d4>
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_I2S_Init+0x27c>)
 80041ca:	e001      	b.n	80041d0 <HAL_I2S_Init+0x1d8>
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d0:	2202      	movs	r2, #2
 80041d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <HAL_I2S_Init+0x278>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_I2S_Init+0x1ea>
 80041de:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_I2S_Init+0x27c>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2S_Init+0x1ee>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f2:	d003      	beq.n	80041fc <HAL_I2S_Init+0x204>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80041fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e001      	b.n	8004208 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	b299      	uxth	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800421e:	4303      	orrs	r3, r0
 8004220:	b29b      	uxth	r3, r3
 8004222:	430b      	orrs	r3, r1
 8004224:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004226:	4313      	orrs	r3, r2
 8004228:	b29a      	uxth	r2, r3
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	4313      	orrs	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004234:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <HAL_I2S_Init+0x278>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_I2S_Init+0x24c>
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_I2S_Init+0x27c>)
 8004242:	e001      	b.n	8004248 <HAL_I2S_Init+0x250>
 8004244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004248:	897a      	ldrh	r2, [r7, #10]
 800424a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	0800436f 	.word	0x0800436f
 8004268:	cccccccd 	.word	0xcccccccd
 800426c:	08004485 	.word	0x08004485
 8004270:	40003800 	.word	0x40003800
 8004274:	40003400 	.word	0x40003400

08004278 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	1c9a      	adds	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ffb8 	bl	8004278 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	b292      	uxth	r2, r2
 8004324:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10e      	bne.n	8004366 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004356:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff93 	bl	800428c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b04      	cmp	r3, #4
 8004388:	d13a      	bne.n	8004400 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d109      	bne.n	80043a8 <I2S_IRQHandler+0x3a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d102      	bne.n	80043a8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ffb4 	bl	8004310 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d126      	bne.n	8004400 <I2S_IRQHandler+0x92>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d11f      	bne.n	8004400 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f043 0202 	orr.w	r2, r3, #2
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ff50 	bl	80042a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b03      	cmp	r3, #3
 800440a:	d136      	bne.n	800447a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d109      	bne.n	800442a <I2S_IRQHandler+0xbc>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d102      	bne.n	800442a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff ff45 	bl	80042b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d122      	bne.n	800447a <I2S_IRQHandler+0x10c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b20      	cmp	r3, #32
 8004440:	d11b      	bne.n	800447a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004450:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ff13 	bl	80042a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4aa2      	ldr	r2, [pc, #648]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800449e:	4ba2      	ldr	r3, [pc, #648]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044a0:	e001      	b.n	80044a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a9b      	ldr	r2, [pc, #620]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044bc:	4b9a      	ldr	r3, [pc, #616]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044be:	e001      	b.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d0:	d004      	beq.n	80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 8099 	bne.w	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d107      	bne.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f925 	bl	8004740 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d107      	bne.n	8004510 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9c8 	bl	80048a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d13a      	bne.n	8004590 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d035      	beq.n	8004590 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7e      	ldr	r2, [pc, #504]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800452e:	4b7e      	ldr	r3, [pc, #504]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004530:	e001      	b.n	8004536 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4979      	ldr	r1, [pc, #484]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800453e:	428b      	cmp	r3, r1
 8004540:	d101      	bne.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004542:	4b79      	ldr	r3, [pc, #484]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004544:	e001      	b.n	800454a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800454a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800454e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800455e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f043 0202 	orr.w	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fe88 	bl	80042a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b08      	cmp	r3, #8
 8004598:	f040 80be 	bne.w	8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80b8 	beq.w	8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a59      	ldr	r2, [pc, #356]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045c2:	4b59      	ldr	r3, [pc, #356]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045c4:	e001      	b.n	80045ca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4954      	ldr	r1, [pc, #336]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045d2:	428b      	cmp	r3, r1
 80045d4:	d101      	bne.n	80045da <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045d6:	4b54      	ldr	r3, [pc, #336]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045d8:	e001      	b.n	80045de <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045e2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fe4a 	bl	80042a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800460c:	e084      	b.n	8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d107      	bne.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8be 	bl	80047a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8fd 	bl	800483c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d12f      	bne.n	80046ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02a      	beq.n	80046ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004664:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004672:	e001      	b.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4929      	ldr	r1, [pc, #164]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004680:	428b      	cmp	r3, r1
 8004682:	d101      	bne.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004684:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004686:	e001      	b.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800468c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004690:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fdfa 	bl	80042a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d131      	bne.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02c      	beq.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046cc:	e001      	b.n	80046d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4912      	ldr	r1, [pc, #72]	; (8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046da:	428b      	cmp	r3, r1
 80046dc:	d101      	bne.n	80046e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046e0:	e001      	b.n	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80046e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fdc5 	bl	80042a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	e000      	b.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004718:	bf00      	nop
}
 800471a:	bf00      	nop
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40003800 	.word	0x40003800
 8004728:	40003400 	.word	0x40003400

0800472c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c99      	adds	r1, r3, #2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6251      	str	r1, [r2, #36]	; 0x24
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004780:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ffc9 	bl	800472c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c99      	adds	r1, r3, #2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6251      	str	r1, [r2, #36]	; 0x24
 80047b6:	8819      	ldrh	r1, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <I2SEx_TxISR_I2SExt+0x90>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <I2SEx_TxISR_I2SExt+0x22>
 80047c2:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <I2SEx_TxISR_I2SExt+0x94>)
 80047c4:	e001      	b.n	80047ca <I2SEx_TxISR_I2SExt+0x26>
 80047c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ca:	460a      	mov	r2, r1
 80047cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d121      	bne.n	800482a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <I2SEx_TxISR_I2SExt+0x90>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <I2SEx_TxISR_I2SExt+0x50>
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <I2SEx_TxISR_I2SExt+0x94>)
 80047f2:	e001      	b.n	80047f8 <I2SEx_TxISR_I2SExt+0x54>
 80047f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	490d      	ldr	r1, [pc, #52]	; (8004834 <I2SEx_TxISR_I2SExt+0x90>)
 8004800:	428b      	cmp	r3, r1
 8004802:	d101      	bne.n	8004808 <I2SEx_TxISR_I2SExt+0x64>
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <I2SEx_TxISR_I2SExt+0x94>)
 8004806:	e001      	b.n	800480c <I2SEx_TxISR_I2SExt+0x68>
 8004808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800480c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004810:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff81 	bl	800472c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40003800 	.word	0x40003800
 8004838:	40003400 	.word	0x40003400

0800483c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68d8      	ldr	r0, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	1c99      	adds	r1, r3, #2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004854:	b282      	uxth	r2, r0
 8004856:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800487e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ff4a 	bl	800472c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <I2SEx_RxISR_I2SExt+0x90>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <I2SEx_RxISR_I2SExt+0x16>
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <I2SEx_RxISR_I2SExt+0x94>)
 80048b4:	e001      	b.n	80048ba <I2SEx_RxISR_I2SExt+0x1a>
 80048b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ba:	68d8      	ldr	r0, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	1c99      	adds	r1, r3, #2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048c6:	b282      	uxth	r2, r0
 80048c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <I2SEx_RxISR_I2SExt+0x90>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <I2SEx_RxISR_I2SExt+0x50>
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <I2SEx_RxISR_I2SExt+0x94>)
 80048ee:	e001      	b.n	80048f4 <I2SEx_RxISR_I2SExt+0x54>
 80048f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	490d      	ldr	r1, [pc, #52]	; (8004930 <I2SEx_RxISR_I2SExt+0x90>)
 80048fc:	428b      	cmp	r3, r1
 80048fe:	d101      	bne.n	8004904 <I2SEx_RxISR_I2SExt+0x64>
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <I2SEx_RxISR_I2SExt+0x94>)
 8004902:	e001      	b.n	8004908 <I2SEx_RxISR_I2SExt+0x68>
 8004904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004908:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800490c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff03 	bl	800472c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40003800 	.word	0x40003800
 8004934:	40003400 	.word	0x40003400

08004938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e25b      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d075      	beq.n	8004a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004956:	4ba3      	ldr	r3, [pc, #652]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b04      	cmp	r3, #4
 8004960:	d00c      	beq.n	800497c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004962:	4ba0      	ldr	r3, [pc, #640]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800496a:	2b08      	cmp	r3, #8
 800496c:	d112      	bne.n	8004994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496e:	4b9d      	ldr	r3, [pc, #628]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	4b99      	ldr	r3, [pc, #612]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05b      	beq.n	8004a40 <HAL_RCC_OscConfig+0x108>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d157      	bne.n	8004a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e236      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x74>
 800499e:	4b91      	ldr	r3, [pc, #580]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a90      	ldr	r2, [pc, #576]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e01d      	b.n	80049e8 <HAL_RCC_OscConfig+0xb0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x98>
 80049b6:	4b8b      	ldr	r3, [pc, #556]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a8a      	ldr	r2, [pc, #552]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a87      	ldr	r2, [pc, #540]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0xb0>
 80049d0:	4b84      	ldr	r3, [pc, #528]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a83      	ldr	r2, [pc, #524]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b81      	ldr	r3, [pc, #516]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a80      	ldr	r2, [pc, #512]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fc fe7e 	bl	80016f0 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fc fe7a 	bl	80016f0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1fb      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b76      	ldr	r3, [pc, #472]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0xc0>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fc fe6a 	bl	80016f0 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fc fe66 	bl	80016f0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e1e7      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	4b6c      	ldr	r3, [pc, #432]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0xe8>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d063      	beq.n	8004b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a4e:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5a:	4b62      	ldr	r3, [pc, #392]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d11c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a66:	4b5f      	ldr	r3, [pc, #380]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d116      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a72:	4b5c      	ldr	r3, [pc, #368]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_RCC_OscConfig+0x152>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e1bb      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8a:	4b56      	ldr	r3, [pc, #344]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4952      	ldr	r1, [pc, #328]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9e:	e03a      	b.n	8004b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa8:	4b4f      	ldr	r3, [pc, #316]	; (8004be8 <HAL_RCC_OscConfig+0x2b0>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aae:	f7fc fe1f 	bl	80016f0 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab6:	f7fc fe1b 	bl	80016f0 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e19c      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac8:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4940      	ldr	r1, [pc, #256]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	600b      	str	r3, [r1, #0]
 8004ae8:	e015      	b.n	8004b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <HAL_RCC_OscConfig+0x2b0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc fdfe 	bl	80016f0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fc fdfa 	bl	80016f0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e17b      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d030      	beq.n	8004b84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2a:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCC_OscConfig+0x2b4>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fc fdde 	bl	80016f0 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b38:	f7fc fdda 	bl	80016f0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e15b      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4a:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x200>
 8004b56:	e015      	b.n	8004b84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCC_OscConfig+0x2b4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5e:	f7fc fdc7 	bl	80016f0 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b66:	f7fc fdc3 	bl	80016f0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e144      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80a0 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b96:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_OscConfig+0x2b8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d121      	bne.n	8004c12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_RCC_OscConfig+0x2b8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <HAL_RCC_OscConfig+0x2b8>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bda:	f7fc fd89 	bl	80016f0 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	e011      	b.n	8004c06 <HAL_RCC_OscConfig+0x2ce>
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	42470000 	.word	0x42470000
 8004bec:	42470e80 	.word	0x42470e80
 8004bf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf4:	f7fc fd7c 	bl	80016f0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0fd      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c06:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <HAL_RCC_OscConfig+0x4d4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d106      	bne.n	8004c28 <HAL_RCC_OscConfig+0x2f0>
 8004c1a:	4b7d      	ldr	r3, [pc, #500]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a7c      	ldr	r2, [pc, #496]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
 8004c26:	e01c      	b.n	8004c62 <HAL_RCC_OscConfig+0x32a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCC_OscConfig+0x312>
 8004c30:	4b77      	ldr	r3, [pc, #476]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	4a76      	ldr	r2, [pc, #472]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c36:	f043 0304 	orr.w	r3, r3, #4
 8004c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3c:	4b74      	ldr	r3, [pc, #464]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	4a73      	ldr	r2, [pc, #460]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70
 8004c48:	e00b      	b.n	8004c62 <HAL_RCC_OscConfig+0x32a>
 8004c4a:	4b71      	ldr	r3, [pc, #452]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a70      	ldr	r2, [pc, #448]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
 8004c56:	4b6e      	ldr	r3, [pc, #440]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4a6d      	ldr	r2, [pc, #436]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d015      	beq.n	8004c96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fc fd41 	bl	80016f0 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fc fd3d 	bl	80016f0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0bc      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ee      	beq.n	8004c72 <HAL_RCC_OscConfig+0x33a>
 8004c94:	e014      	b.n	8004cc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c96:	f7fc fd2b 	bl	80016f0 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fc fd27 	bl	80016f0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0a6      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb4:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ee      	bne.n	8004c9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc6:	4b52      	ldr	r3, [pc, #328]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4a51      	ldr	r2, [pc, #324]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8092 	beq.w	8004e00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cdc:	4b4c      	ldr	r3, [pc, #304]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d05c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d141      	bne.n	8004d74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf0:	4b48      	ldr	r3, [pc, #288]	; (8004e14 <HAL_RCC_OscConfig+0x4dc>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf6:	f7fc fcfb 	bl	80016f0 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fc fcf7 	bl	80016f0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e078      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d10:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	019b      	lsls	r3, r3, #6
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	3b01      	subs	r3, #1
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	061b      	lsls	r3, r3, #24
 8004d40:	4933      	ldr	r1, [pc, #204]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d46:	4b33      	ldr	r3, [pc, #204]	; (8004e14 <HAL_RCC_OscConfig+0x4dc>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fc fcd0 	bl	80016f0 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fc fccc 	bl	80016f0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e04d      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d66:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x41c>
 8004d72:	e045      	b.n	8004e00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d74:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <HAL_RCC_OscConfig+0x4dc>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fc fcb9 	bl	80016f0 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d82:	f7fc fcb5 	bl	80016f0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e036      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d94:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x44a>
 8004da0:	e02e      	b.n	8004e00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e029      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_RCC_OscConfig+0x4d8>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d11c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d115      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10d      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	40023800 	.word	0x40023800
 8004e14:	42470060 	.word	0x42470060

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0cc      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90c      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0b8      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	494d      	ldr	r1, [pc, #308]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d044      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d119      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d003      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e067      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4934      	ldr	r1, [pc, #208]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f08:	f7fc fbf2 	bl	80016f0 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fc fbee 	bl	80016f0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e04f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d20c      	bcs.n	8004f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e032      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4916      	ldr	r1, [pc, #88]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f9e:	f000 f821 	bl	8004fe4 <HAL_RCC_GetSysClockFreq>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	5cd3      	ldrb	r3, [r2, r3]
 8004fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fc fb52 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023c00 	.word	0x40023c00
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	080089c4 	.word	0x080089c4
 8004fdc:	200000c0 	.word	0x200000c0
 8004fe0:	200000c4 	.word	0x200000c4

08004fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b04      	cmp	r3, #4
 8005004:	d007      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x32>
 8005006:	2b08      	cmp	r3, #8
 8005008:	d008      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x38>
 800500a:	2b00      	cmp	r3, #0
 800500c:	f040 80b4 	bne.w	8005178 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005010:	4b5e      	ldr	r3, [pc, #376]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005012:	60bb      	str	r3, [r7, #8]
       break;
 8005014:	e0b3      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005016:	4b5e      	ldr	r3, [pc, #376]	; (8005190 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005018:	60bb      	str	r3, [r7, #8]
      break;
 800501a:	e0b0      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800501c:	4b5a      	ldr	r3, [pc, #360]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005024:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005026:	4b58      	ldr	r3, [pc, #352]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d04a      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005032:	4b55      	ldr	r3, [pc, #340]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	f04f 0400 	mov.w	r4, #0
 800503c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	ea03 0501 	and.w	r5, r3, r1
 8005048:	ea04 0602 	and.w	r6, r4, r2
 800504c:	4629      	mov	r1, r5
 800504e:	4632      	mov	r2, r6
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	0154      	lsls	r4, r2, #5
 800505a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800505e:	014b      	lsls	r3, r1, #5
 8005060:	4619      	mov	r1, r3
 8005062:	4622      	mov	r2, r4
 8005064:	1b49      	subs	r1, r1, r5
 8005066:	eb62 0206 	sbc.w	r2, r2, r6
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	f04f 0400 	mov.w	r4, #0
 8005072:	0194      	lsls	r4, r2, #6
 8005074:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005078:	018b      	lsls	r3, r1, #6
 800507a:	1a5b      	subs	r3, r3, r1
 800507c:	eb64 0402 	sbc.w	r4, r4, r2
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	00e2      	lsls	r2, r4, #3
 800508a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800508e:	00d9      	lsls	r1, r3, #3
 8005090:	460b      	mov	r3, r1
 8005092:	4614      	mov	r4, r2
 8005094:	195b      	adds	r3, r3, r5
 8005096:	eb44 0406 	adc.w	r4, r4, r6
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	0262      	lsls	r2, r4, #9
 80050a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050a8:	0259      	lsls	r1, r3, #9
 80050aa:	460b      	mov	r3, r1
 80050ac:	4614      	mov	r4, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	4621      	mov	r1, r4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f04f 0400 	mov.w	r4, #0
 80050b8:	461a      	mov	r2, r3
 80050ba:	4623      	mov	r3, r4
 80050bc:	f7fb f884 	bl	80001c8 <__aeabi_uldivmod>
 80050c0:	4603      	mov	r3, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e049      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	f04f 0400 	mov.w	r4, #0
 80050d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	ea03 0501 	and.w	r5, r3, r1
 80050de:	ea04 0602 	and.w	r6, r4, r2
 80050e2:	4629      	mov	r1, r5
 80050e4:	4632      	mov	r2, r6
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	f04f 0400 	mov.w	r4, #0
 80050ee:	0154      	lsls	r4, r2, #5
 80050f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050f4:	014b      	lsls	r3, r1, #5
 80050f6:	4619      	mov	r1, r3
 80050f8:	4622      	mov	r2, r4
 80050fa:	1b49      	subs	r1, r1, r5
 80050fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	f04f 0400 	mov.w	r4, #0
 8005108:	0194      	lsls	r4, r2, #6
 800510a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800510e:	018b      	lsls	r3, r1, #6
 8005110:	1a5b      	subs	r3, r3, r1
 8005112:	eb64 0402 	sbc.w	r4, r4, r2
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	00e2      	lsls	r2, r4, #3
 8005120:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005124:	00d9      	lsls	r1, r3, #3
 8005126:	460b      	mov	r3, r1
 8005128:	4614      	mov	r4, r2
 800512a:	195b      	adds	r3, r3, r5
 800512c:	eb44 0406 	adc.w	r4, r4, r6
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	02a2      	lsls	r2, r4, #10
 800513a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800513e:	0299      	lsls	r1, r3, #10
 8005140:	460b      	mov	r3, r1
 8005142:	4614      	mov	r4, r2
 8005144:	4618      	mov	r0, r3
 8005146:	4621      	mov	r1, r4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f04f 0400 	mov.w	r4, #0
 800514e:	461a      	mov	r2, r3
 8005150:	4623      	mov	r3, r4
 8005152:	f7fb f839 	bl	80001c8 <__aeabi_uldivmod>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	3301      	adds	r3, #1
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	60bb      	str	r3, [r7, #8]
      break;
 8005176:	e002      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800517a:	60bb      	str	r3, [r7, #8]
      break;
 800517c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517e:	68bb      	ldr	r3, [r7, #8]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005188:	40023800 	.word	0x40023800
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200

08005194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	200000c0 	.word	0x200000c0

080051ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b0:	f7ff fff0 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b4:	4601      	mov	r1, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0a9b      	lsrs	r3, r3, #10
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c2:	5cd3      	ldrb	r3, [r2, r3]
 80051c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	080089d4 	.word	0x080089d4

080051d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d035      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051fc:	4b62      	ldr	r3, [pc, #392]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fc fa75 	bl	80016f0 <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005208:	e008      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800520a:	f7fc fa71 	bl	80016f0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0b0      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521c:	4b5b      	ldr	r3, [pc, #364]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	019a      	lsls	r2, r3, #6
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	071b      	lsls	r3, r3, #28
 8005234:	4955      	ldr	r1, [pc, #340]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800523c:	4b52      	ldr	r3, [pc, #328]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fc fa55 	bl	80016f0 <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800524a:	f7fc fa51 	bl	80016f0 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e090      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	4b4b      	ldr	r3, [pc, #300]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8083 	beq.w	800537c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4b44      	ldr	r3, [pc, #272]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a43      	ldr	r2, [pc, #268]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b41      	ldr	r3, [pc, #260]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005292:	4b3f      	ldr	r3, [pc, #252]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a3e      	ldr	r2, [pc, #248]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800529e:	f7fc fa27 	bl	80016f0 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fc fa23 	bl	80016f0 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e062      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02f      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d028      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ec:	4b29      	ldr	r3, [pc, #164]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052f2:	4b28      	ldr	r3, [pc, #160]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052f8:	4a24      	ldr	r2, [pc, #144]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b01      	cmp	r3, #1
 8005308:	d114      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800530a:	f7fc f9f1 	bl	80016f0 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fc f9ed 	bl	80016f0 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e02a      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0ee      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005340:	d10d      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005356:	490d      	ldr	r1, [pc, #52]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]
 800535c:	e005      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800535e:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005364:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005368:	6093      	str	r3, [r2, #8]
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005376:	4905      	ldr	r1, [pc, #20]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	42470068 	.word	0x42470068
 800538c:	40023800 	.word	0x40023800
 8005390:	40007000 	.word	0x40007000
 8005394:	42470e40 	.word	0x42470e40

08005398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d13d      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053be:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d12f      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053ca:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053cc:	617b      	str	r3, [r7, #20]
          break;
 80053ce:	e02f      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053d0:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053dc:	d108      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e6:	4a18      	ldr	r2, [pc, #96]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e007      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541a:	0f1b      	lsrs	r3, r3, #28
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	617b      	str	r3, [r7, #20]
          break;
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
          break;
 800542e:	bf00      	nop
        }
      }
      break;
 8005430:	bf00      	nop
    }
  }
  return frequency;
 8005432:	697b      	ldr	r3, [r7, #20]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40023800 	.word	0x40023800
 8005444:	00bb8000 	.word	0x00bb8000
 8005448:	007a1200 	.word	0x007a1200
 800544c:	00f42400 	.word	0x00f42400

08005450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e056      	b.n	8005510 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fb ffe5 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	ea42 0103 	orr.w	r1, r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 0104 	and.w	r1, r3, #4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005518:	b084      	sub	sp, #16
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	f107 001c 	add.w	r0, r7, #28
 8005526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	2b01      	cmp	r3, #1
 800552e:	d122      	bne.n	8005576 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d105      	bne.n	800556a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f94a 	bl	8005804 <USB_CoreReset>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
 8005574:	e01a      	b.n	80055ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f93e 	bl	8005804 <USB_CoreReset>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800558c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
 800559e:	e005      	b.n	80055ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10b      	bne.n	80055ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f043 0206 	orr.w	r2, r3, #6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d6:	b004      	add	sp, #16
 80055d8:	4770      	bx	lr

080055da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 0201 	bic.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d106      	bne.n	800564a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	e00b      	b.n	8005662 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]
 800565c:	e001      	b.n	8005662 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e003      	b.n	800566a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005662:	2032      	movs	r0, #50	; 0x32
 8005664:	f7fc f850 	bl	8001708 <HAL_Delay>

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <USB_FlushTxFifo+0x48>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d0f0      	beq.n	800568e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	00030d40 	.word	0x00030d40

080056c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2210      	movs	r2, #16
 80056d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <USB_FlushRxFifo+0x40>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d0f0      	beq.n	80056d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	00030d40 	.word	0x00030d40

08005704 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	460b      	mov	r3, r1
 8005714:	71fb      	strb	r3, [r7, #7]
 8005716:	4613      	mov	r3, r2
 8005718:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005722:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d11a      	bne.n	8005760 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800572a:	88bb      	ldrh	r3, [r7, #4]
 800572c:	3303      	adds	r3, #3
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e00f      	b.n	8005758 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	031a      	lsls	r2, r3, #12
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4413      	add	r3, r2
 8005740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005744:	461a      	mov	r2, r3
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3304      	adds	r3, #4
 8005750:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3301      	adds	r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	d3eb      	bcc.n	8005738 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800576e:	b480      	push	{r7}
 8005770:	b089      	sub	sp, #36	; 0x24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	3303      	adds	r3, #3
 8005788:	089b      	lsrs	r3, r3, #2
 800578a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	e00b      	b.n	80057aa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	601a      	str	r2, [r3, #0]
    pDest++;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3304      	adds	r3, #4
 80057a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3ef      	bcc.n	8005792 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057b2:	69fb      	ldr	r3, [r7, #28]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3724      	adds	r7, #36	; 0x24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f003 0301 	and.w	r3, r3, #1
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <USB_CoreReset+0x64>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e01b      	b.n	800585a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	daf2      	bge.n	8005810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <USB_CoreReset+0x64>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e006      	b.n	800585a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d0f0      	beq.n	800583a <USB_CoreReset+0x36>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	00030d40 	.word	0x00030d40

0800586c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800586c:	b084      	sub	sp, #16
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	f107 001c 	add.w	r0, r7, #28
 800587a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005888:	461a      	mov	r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10a      	bne.n	80058da <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058d2:	f043 0304 	orr.w	r3, r3, #4
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	e014      	b.n	8005904 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e009      	b.n	8005904 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058fe:	f023 0304 	bic.w	r3, r3, #4
 8005902:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005904:	2110      	movs	r1, #16
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff feb4 	bl	8005674 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff fed7 	bl	80056c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e015      	b.n	8005944 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	f04f 33ff 	mov.w	r3, #4294967295
 800592a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4413      	add	r3, r2
 8005934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005938:	461a      	mov	r2, r3
 800593a:	2300      	movs	r3, #0
 800593c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	429a      	cmp	r2, r3
 800594a:	d3e5      	bcc.n	8005918 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800594c:	2101      	movs	r1, #1
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8ac 	bl	8005aac <USB_DriveVbus>

  HAL_Delay(200U);
 8005954:	20c8      	movs	r0, #200	; 0xc8
 8005956:	f7fb fed7 	bl	8001708 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <USB_HostInit+0x164>)
 8005980:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <USB_HostInit+0x168>)
 8005986:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800598a:	e009      	b.n	80059a0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <USB_HostInit+0x16c>)
 8005996:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a10      	ldr	r2, [pc, #64]	; (80059dc <USB_HostInit+0x170>)
 800599c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d105      	bne.n	80059b2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f043 0210 	orr.w	r2, r3, #16
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <USB_HostInit+0x174>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ca:	b004      	add	sp, #16
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	01000200 	.word	0x01000200
 80059d4:	00e00300 	.word	0x00e00300
 80059d8:	00600080 	.word	0x00600080
 80059dc:	004000e0 	.word	0x004000e0
 80059e0:	a3200008 	.word	0xa3200008

080059e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d107      	bne.n	8005a36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a32:	6053      	str	r3, [r2, #4]
 8005a34:	e009      	b.n	8005a4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d106      	bne.n	8005a4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a42:	461a      	mov	r2, r3
 8005a44:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a88:	2064      	movs	r0, #100	; 0x64
 8005a8a:	f7fb fe3d 	bl	8001708 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a9c:	200a      	movs	r0, #10
 8005a9e:	f7fb fe33 	bl	8001708 <HAL_Delay>

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ad0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <USB_DriveVbus+0x44>
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d106      	bne.n	8005af0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005aee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afa:	d109      	bne.n	8005b10 <USB_DriveVbus+0x64>
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	0c5b      	lsrs	r3, r3, #17
 8005b3c:	f003 0303 	and.w	r3, r3, #3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	b29b      	uxth	r3, r3
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	70fb      	strb	r3, [r7, #3]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70bb      	strb	r3, [r7, #2]
 8005b86:	4613      	mov	r3, r2
 8005b88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d87e      	bhi.n	8005cac <USB_HC_Init+0x13c>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <USB_HC_Init+0x44>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005c6f 	.word	0x08005c6f
 8005bbc:	08005bc5 	.word	0x08005bc5
 8005bc0:	08005c31 	.word	0x08005c31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005bd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005bd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da10      	bge.n	8005c02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfe:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005c00:	e057      	b.n	8005cb2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d051      	beq.n	8005cb2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c2c:	60d3      	str	r3, [r2, #12]
      break;
 8005c2e:	e040      	b.n	8005cb2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da34      	bge.n	8005cb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c6c:	e023      	b.n	8005cb6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f240 2325 	movw	r3, #549	; 0x225
 8005c80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	da17      	bge.n	8005cba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ca8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005caa:	e006      	b.n	8005cba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	e004      	b.n	8005cbc <USB_HC_Init+0x14c>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <USB_HC_Init+0x14c>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <USB_HC_Init+0x14c>
      break;
 8005cba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	2101      	movs	r1, #1
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ce6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da03      	bge.n	8005cf6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e001      	b.n	8005cfa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d103      	bne.n	8005d0a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e001      	b.n	8005d0e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d0e:	787b      	ldrb	r3, [r7, #1]
 8005d10:	059b      	lsls	r3, r3, #22
 8005d12:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d16:	78bb      	ldrb	r3, [r7, #2]
 8005d18:	02db      	lsls	r3, r3, #11
 8005d1a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d24:	049b      	lsls	r3, r3, #18
 8005d26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	0159      	lsls	r1, r3, #5
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	440b      	add	r3, r1
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d44:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d4a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10f      	bne.n	8005d74 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d72:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005da0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d028      	beq.n	8005e00 <USB_HC_StartXfer+0x7c>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	791b      	ldrb	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d124      	bne.n	8005e00 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <USB_HC_StartXfer+0x50>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	795b      	ldrb	r3, [r3, #5]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fa2e 	bl	800622c <USB_DoPing>
      return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e112      	b.n	8005ffa <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d112      	bne.n	8005e00 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005df8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d018      	beq.n	8005e3a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	8912      	ldrh	r2, [r2, #8]
 8005e10:	4413      	add	r3, r2
 8005e12:	3b01      	subs	r3, #1
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	8912      	ldrh	r2, [r2, #8]
 8005e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e1c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e20:	8b7b      	ldrh	r3, [r7, #26]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90b      	bls.n	8005e3e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e26:	8b7b      	ldrh	r3, [r7, #26]
 8005e28:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	8912      	ldrh	r2, [r2, #8]
 8005e30:	fb02 f203 	mul.w	r2, r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	611a      	str	r2, [r3, #16]
 8005e38:	e001      	b.n	8005e3e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	78db      	ldrb	r3, [r3, #3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d006      	beq.n	8005e54 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	8912      	ldrh	r2, [r2, #8]
 8005e4c:	fb02 f203 	mul.w	r2, r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e5e:	04d9      	lsls	r1, r3, #19
 8005e60:	4b68      	ldr	r3, [pc, #416]	; (8006004 <USB_HC_StartXfer+0x280>)
 8005e62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	7a9b      	ldrb	r3, [r3, #10]
 8005e6a:	075b      	lsls	r3, r3, #29
 8005e6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	0148      	lsls	r0, r1, #5
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	4401      	add	r1, r0
 8005e78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68d9      	ldr	r1, [r3, #12]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	460a      	mov	r2, r1
 8005e98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ecc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ed0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	7e7b      	ldrb	r3, [r7, #25]
 8005ee2:	075b      	lsls	r3, r3, #29
 8005ee4:	69f9      	ldr	r1, [r7, #28]
 8005ee6:	0148      	lsls	r0, r1, #5
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	4401      	add	r1, r0
 8005eec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a41      	ldr	r2, [pc, #260]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f04:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f06:	4b40      	ldr	r3, [pc, #256]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f0e:	4a3e      	ldr	r2, [pc, #248]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f10:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	78db      	ldrb	r3, [r3, #3]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f1a:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f22:	4a39      	ldr	r2, [pc, #228]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e005      	b.n	8005f34 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f28:	4b37      	ldr	r3, [pc, #220]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f30:	4a35      	ldr	r2, [pc, #212]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f32:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f34:	4b34      	ldr	r3, [pc, #208]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f3c:	4a32      	ldr	r2, [pc, #200]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f3e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <USB_HC_StartXfer+0x284>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d14e      	bne.n	8005ff8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	78db      	ldrb	r3, [r3, #3]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d14a      	bne.n	8005ff8 <USB_HC_StartXfer+0x274>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d046      	beq.n	8005ff8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	79db      	ldrb	r3, [r3, #7]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d830      	bhi.n	8005fd4 <USB_HC_StartXfer+0x250>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <USB_HC_StartXfer+0x1f4>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005f89 	.word	0x08005f89
 8005f84:	08005fad 	.word	0x08005fad
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	3303      	adds	r3, #3
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f92:	8afa      	ldrh	r2, [r7, #22]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d91c      	bls.n	8005fd8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	619a      	str	r2, [r3, #24]
          }
          break;
 8005faa:	e015      	b.n	8005fd8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	3303      	adds	r3, #3
 8005fb2:	089b      	lsrs	r3, r3, #2
 8005fb4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005fb6:	8afa      	ldrh	r2, [r7, #22]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d90a      	bls.n	8005fdc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	619a      	str	r2, [r3, #24]
          }
          break;
 8005fd2:	e003      	b.n	8005fdc <USB_HC_StartXfer+0x258>

        default:
          break;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <USB_HC_StartXfer+0x25a>
          break;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <USB_HC_StartXfer+0x25a>
          break;
 8005fdc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	68d9      	ldr	r1, [r3, #12]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	785a      	ldrb	r2, [r3, #1]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	b298      	uxth	r0, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fb86 	bl	8005704 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	1ff80000 	.word	0x1ff80000
 8006008:	20000170 	.word	0x20000170

0800600c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	b29b      	uxth	r3, r3
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	0c9b      	lsrs	r3, r3, #18
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <USB_HC_Halt+0x3a>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d16c      	bne.n	8006142 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006086:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d143      	bne.n	800611c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	3301      	adds	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006100:	d81d      	bhi.n	800613e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006118:	d0ec      	beq.n	80060f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800611a:	e080      	b.n	800621e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800613a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800613c:	e06f      	b.n	800621e <USB_HC_Halt+0x1f0>
          break;
 800613e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006140:	e06d      	b.n	800621e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	440a      	add	r2, r1
 8006158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006160:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d143      	bne.n	80061fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	440a      	add	r2, r1
 8006188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006190:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	3301      	adds	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061de:	d81d      	bhi.n	800621c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f6:	d0ec      	beq.n	80061d2 <USB_HC_Halt+0x1a4>
 80061f8:	e011      	b.n	800621e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e000      	b.n	800621e <USB_HC_Halt+0x1f0>
          break;
 800621c:	bf00      	nop
    }
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	04da      	lsls	r2, r3, #19
 8006248:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <USB_DoPing+0x74>)
 800624a:	4013      	ands	r3, r2
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	440a      	add	r2, r1
 8006254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800625c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006274:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800627c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	461a      	mov	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	1ff80000 	.word	0x1ff80000

080062a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff f9a1 	bl	80055fc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80062ba:	2110      	movs	r1, #16
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff f9d9 	bl	8005674 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff f9fc 	bl	80056c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	e01f      	b.n	800630e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	3301      	adds	r3, #1
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d9dc      	bls.n	80062ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	e034      	b.n	8006384 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006330:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006338:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006340:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	461a      	mov	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006360:	d80c      	bhi.n	800637c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006378:	d0ec      	beq.n	8006354 <USB_StopHost+0xb0>
 800637a:	e000      	b.n	800637e <USB_StopHost+0xda>
        break;
 800637c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3301      	adds	r3, #1
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b0f      	cmp	r3, #15
 8006388:	d9c7      	bls.n	800631a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006390:	461a      	mov	r2, r3
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f04f 32ff 	mov.w	r2, #4294967295
 800639e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff f91a 	bl	80055da <USB_EnableGlobalInt>

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b089      	sub	sp, #36	; 0x24
 80063b4:	af04      	add	r7, sp, #16
 80063b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80063b8:	2301      	movs	r3, #1
 80063ba:	2202      	movs	r2, #2
 80063bc:	2102      	movs	r1, #2
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fc68 	bl	8006c94 <USBH_FindInterface>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2bff      	cmp	r3, #255	; 0xff
 80063cc:	d002      	beq.n	80063d4 <USBH_CDC_InterfaceInit+0x24>
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d901      	bls.n	80063d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063d4:	2302      	movs	r3, #2
 80063d6:	e13d      	b.n	8006654 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc3d 	bl	8006c5c <USBH_SelectInterface>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80063ec:	2302      	movs	r3, #2
 80063ee:	e131      	b.n	8006654 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80063f6:	2050      	movs	r0, #80	; 0x50
 80063f8:	f002 fa04 	bl	8008804 <malloc>
 80063fc:	4603      	mov	r3, r0
 80063fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006410:	2302      	movs	r3, #2
 8006412:	e11f      	b.n	8006654 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006414:	2250      	movs	r2, #80	; 0x50
 8006416:	2100      	movs	r1, #0
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f002 fa03 	bl	8008824 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	211a      	movs	r1, #26
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	4413      	add	r3, r2
 800642a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b25b      	sxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	da15      	bge.n	8006462 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	211a      	movs	r1, #26
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	211a      	movs	r1, #26
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	4413      	add	r3, r2
 8006458:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800645c:	881a      	ldrh	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fe36 	bl	80080da <USBH_AllocPipe>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	7819      	ldrb	r1, [r3, #0]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7858      	ldrb	r0, [r3, #1]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	8952      	ldrh	r2, [r2, #10]
 800648e:	9202      	str	r2, [sp, #8]
 8006490:	2203      	movs	r2, #3
 8006492:	9201      	str	r2, [sp, #4]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4623      	mov	r3, r4
 8006498:	4602      	mov	r2, r0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fdee 	bl	800807c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f002 f8fb 	bl	80086a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80064ae:	2300      	movs	r3, #0
 80064b0:	2200      	movs	r2, #0
 80064b2:	210a      	movs	r1, #10
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fbed 	bl	8006c94 <USBH_FindInterface>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2bff      	cmp	r3, #255	; 0xff
 80064c2:	d002      	beq.n	80064ca <USBH_CDC_InterfaceInit+0x11a>
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d901      	bls.n	80064ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e0c2      	b.n	8006654 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	211a      	movs	r1, #26
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	4413      	add	r3, r2
 80064da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da16      	bge.n	8006514 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	211a      	movs	r1, #26
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064f6:	781a      	ldrb	r2, [r3, #0]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	211a      	movs	r1, #26
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	4413      	add	r3, r2
 8006508:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800650c:	881a      	ldrh	r2, [r3, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	835a      	strh	r2, [r3, #26]
 8006512:	e015      	b.n	8006540 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	211a      	movs	r1, #26
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	4413      	add	r3, r2
 8006520:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006524:	781a      	ldrb	r2, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	211a      	movs	r1, #26
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	4413      	add	r3, r2
 8006536:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	211a      	movs	r1, #26
 8006546:	fb01 f303 	mul.w	r3, r1, r3
 800654a:	4413      	add	r3, r2
 800654c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b25b      	sxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	da16      	bge.n	8006586 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	211a      	movs	r1, #26
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	211a      	movs	r1, #26
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	4413      	add	r3, r2
 800657a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800657e:	881a      	ldrh	r2, [r3, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	835a      	strh	r2, [r3, #26]
 8006584:	e015      	b.n	80065b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	211a      	movs	r1, #26
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	4413      	add	r3, r2
 8006592:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	211a      	movs	r1, #26
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065ac:	881a      	ldrh	r2, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	7b9b      	ldrb	r3, [r3, #14]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fd8e 	bl	80080da <USBH_AllocPipe>
 80065be:	4603      	mov	r3, r0
 80065c0:	461a      	mov	r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	7bdb      	ldrb	r3, [r3, #15]
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 fd84 	bl	80080da <USBH_AllocPipe>
 80065d2:	4603      	mov	r3, r0
 80065d4:	461a      	mov	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	7b59      	ldrb	r1, [r3, #13]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	7b98      	ldrb	r0, [r3, #14]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	8b12      	ldrh	r2, [r2, #24]
 80065f2:	9202      	str	r2, [sp, #8]
 80065f4:	2202      	movs	r2, #2
 80065f6:	9201      	str	r2, [sp, #4]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	4623      	mov	r3, r4
 80065fc:	4602      	mov	r2, r0
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fd3c 	bl	800807c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	7b19      	ldrb	r1, [r3, #12]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	7bd8      	ldrb	r0, [r3, #15]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	8b52      	ldrh	r2, [r2, #26]
 800661c:	9202      	str	r2, [sp, #8]
 800661e:	2202      	movs	r2, #2
 8006620:	9201      	str	r2, [sp, #4]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4623      	mov	r3, r4
 8006626:	4602      	mov	r2, r0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fd27 	bl	800807c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	7b5b      	ldrb	r3, [r3, #13]
 800663a:	2200      	movs	r2, #0
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f002 f830 	bl	80086a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	7b1b      	ldrb	r3, [r3, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f002 f829 	bl	80086a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bd90      	pop	{r4, r7, pc}

0800665c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00e      	beq.n	8006694 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fd1c 	bl	80080ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fd47 	bl	800811c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	7b1b      	ldrb	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00e      	beq.n	80066ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	7b1b      	ldrb	r3, [r3, #12]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fd09 	bl	80080ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	7b1b      	ldrb	r3, [r3, #12]
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fd34 	bl	800811c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	7b5b      	ldrb	r3, [r3, #13]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	7b5b      	ldrb	r3, [r3, #13]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 fcf6 	bl	80080ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	7b5b      	ldrb	r3, [r3, #13]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fd21 	bl	800811c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f002 f88d 	bl	8008814 <free>
    phost->pActiveClass->pData = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006700:	2200      	movs	r2, #0
 8006702:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3340      	adds	r3, #64	; 0x40
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f8b1 	bl	800688e <GetLineCoding>
 800672c:	4603      	mov	r3, r0
 800672e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800673c:	2102      	movs	r1, #2
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006742:	7afb      	ldrb	r3, [r7, #11]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800676c:	2b04      	cmp	r3, #4
 800676e:	d877      	bhi.n	8006860 <USBH_CDC_Process+0x114>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <USBH_CDC_Process+0x2c>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	0800678d 	.word	0x0800678d
 800677c:	08006793 	.word	0x08006793
 8006780:	080067c3 	.word	0x080067c3
 8006784:	08006837 	.word	0x08006837
 8006788:	08006845 	.word	0x08006845
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e06d      	b.n	800686e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f897 	bl	80068cc <SetLineCoding>
 800679e:	4603      	mov	r3, r0
 80067a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067b0:	e058      	b.n	8006864 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d055      	beq.n	8006864 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2204      	movs	r2, #4
 80067bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067c0:	e050      	b.n	8006864 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3340      	adds	r3, #64	; 0x40
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f860 	bl	800688e <GetLineCoding>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d126      	bne.n	8006826 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ea:	791b      	ldrb	r3, [r3, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d13b      	bne.n	8006868 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d133      	bne.n	8006868 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800680c:	429a      	cmp	r2, r3
 800680e:	d12b      	bne.n	8006868 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006818:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800681a:	429a      	cmp	r2, r3
 800681c:	d124      	bne.n	8006868 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f95a 	bl	8006ad8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006824:	e020      	b.n	8006868 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d01d      	beq.n	8006868 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2204      	movs	r2, #4
 8006830:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006834:	e018      	b.n	8006868 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f867 	bl	800690a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8dc 	bl	80069fa <CDC_ProcessReception>
      break;
 8006842:	e014      	b.n	800686e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 ffe5 	bl	8007816 <USBH_ClrFeature>
 800684c:	4603      	mov	r3, r0
 800684e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800685e:	e005      	b.n	800686c <USBH_CDC_Process+0x120>

    default:
      break;
 8006860:	bf00      	nop
 8006862:	e004      	b.n	800686e <USBH_CDC_Process+0x122>
      break;
 8006864:	bf00      	nop
 8006866:	e002      	b.n	800686e <USBH_CDC_Process+0x122>
      break;
 8006868:	bf00      	nop
 800686a:	e000      	b.n	800686e <USBH_CDC_Process+0x122>
      break;
 800686c:	bf00      	nop

  }

  return status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	22a1      	movs	r2, #161	; 0xa1
 800689c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2221      	movs	r2, #33	; 0x21
 80068a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2207      	movs	r2, #7
 80068b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2207      	movs	r2, #7
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f98a 	bl	8007bd6 <USBH_CtlReq>
 80068c2:	4603      	mov	r3, r0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2221      	movs	r2, #33	; 0x21
 80068da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2207      	movs	r2, #7
 80068f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2207      	movs	r2, #7
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f96b 	bl	8007bd6 <USBH_CtlReq>
 8006900:	4603      	mov	r3, r0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af02      	add	r7, sp, #8
 8006910:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800691c:	2300      	movs	r3, #0
 800691e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006926:	2b01      	cmp	r3, #1
 8006928:	d002      	beq.n	8006930 <CDC_ProcessTransmission+0x26>
 800692a:	2b02      	cmp	r3, #2
 800692c:	d025      	beq.n	800697a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800692e:	e060      	b.n	80069f2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	8b12      	ldrh	r2, [r2, #24]
 8006938:	4293      	cmp	r3, r2
 800693a:	d90c      	bls.n	8006956 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	69d9      	ldr	r1, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8b1a      	ldrh	r2, [r3, #24]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	7b58      	ldrb	r0, [r3, #13]
 8006948:	2301      	movs	r3, #1
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4603      	mov	r3, r0
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fb51 	bl	8007ff6 <USBH_BulkSendData>
 8006954:	e00c      	b.n	8006970 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	7b58      	ldrb	r0, [r3, #13]
 8006964:	2301      	movs	r3, #1
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	4603      	mov	r3, r0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fb43 	bl	8007ff6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006978:	e03b      	b.n	80069f2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	7b5b      	ldrb	r3, [r3, #13]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fe65 	bl	8008650 <USBH_LL_GetURBState>
 8006986:	4603      	mov	r3, r0
 8006988:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d128      	bne.n	80069e2 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	8b12      	ldrh	r2, [r2, #24]
 8006998:	4293      	cmp	r3, r2
 800699a:	d90e      	bls.n	80069ba <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	8b12      	ldrh	r2, [r2, #24]
 80069a4:	1a9a      	subs	r2, r3, r2
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	8b12      	ldrh	r2, [r2, #24]
 80069b2:	441a      	add	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	61da      	str	r2, [r3, #28]
 80069b8:	e002      	b.n	80069c0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069d0:	e00e      	b.n	80069f0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f868 	bl	8006ab0 <USBH_CDC_TransmitCallback>
      break;
 80069e0:	e006      	b.n	80069f0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d103      	bne.n	80069f0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069f0:	bf00      	nop
  }
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d002      	beq.n	8006a20 <CDC_ProcessReception+0x26>
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d00e      	beq.n	8006a3c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006a1e:	e043      	b.n	8006aa8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6a19      	ldr	r1, [r3, #32]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	8b5a      	ldrh	r2, [r3, #26]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	7b1b      	ldrb	r3, [r3, #12]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fb07 	bl	8008040 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2204      	movs	r2, #4
 8006a36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a3a:	e035      	b.n	8006aa8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	7b1b      	ldrb	r3, [r3, #12]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fe04 	bl	8008650 <USBH_LL_GetURBState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d129      	bne.n	8006aa6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	7b1b      	ldrb	r3, [r3, #12]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fd67 	bl	800852c <USBH_LL_GetLastXferSize>
 8006a5e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d016      	beq.n	8006a98 <CDC_ProcessReception+0x9e>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	8b5b      	ldrh	r3, [r3, #26]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d910      	bls.n	8006a98 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad2      	subs	r2, r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	441a      	add	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a96:	e006      	b.n	8006aa6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f80f 	bl	8006ac4 <USBH_CDC_ReceiveCallback>
      break;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b00:	2302      	movs	r3, #2
 8006b02:	e029      	b.n	8006b58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	79fa      	ldrb	r2, [r7, #7]
 8006b08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f81f 	bl	8006b60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f001 fc39 	bl	80083c8 <USBH_LL_Init>

  return USBH_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e009      	b.n	8006b86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	33e0      	adds	r3, #224	; 0xe0
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b0e      	cmp	r3, #14
 8006b8a:	d9f2      	bls.n	8006b72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e009      	b.n	8006ba6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bac:	d3f1      	bcc.n	8006b92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2240      	movs	r2, #64	; 0x40
 8006bd2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d016      	beq.n	8006c4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10e      	bne.n	8006c44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	33de      	adds	r3, #222	; 0xde
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
 8006c42:	e004      	b.n	8006c4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c44:	2302      	movs	r3, #2
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e001      	b.n	8006c4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d204      	bcs.n	8006c82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c80:	e001      	b.n	8006c86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c82:	2302      	movs	r3, #2
 8006c84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	70fb      	strb	r3, [r7, #3]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70bb      	strb	r3, [r7, #2]
 8006caa:	4613      	mov	r3, r2
 8006cac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cbe:	e025      	b.n	8006d0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	221a      	movs	r2, #26
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	3308      	adds	r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	3302      	adds	r3, #2
 8006cd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	795b      	ldrb	r3, [r3, #5]
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d002      	beq.n	8006ce2 <USBH_FindInterface+0x4e>
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	d111      	bne.n	8006d06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ce6:	78ba      	ldrb	r2, [r7, #2]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d002      	beq.n	8006cf2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cec:	78bb      	ldrb	r3, [r7, #2]
 8006cee:	2bff      	cmp	r3, #255	; 0xff
 8006cf0:	d109      	bne.n	8006d06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cf6:	787a      	ldrb	r2, [r7, #1]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d002      	beq.n	8006d02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cfc:	787b      	ldrb	r3, [r7, #1]
 8006cfe:	2bff      	cmp	r3, #255	; 0xff
 8006d00:	d101      	bne.n	8006d06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	e006      	b.n	8006d14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d9d6      	bls.n	8006cc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d12:	23ff      	movs	r3, #255	; 0xff
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fb89 	bl	8008440 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fca0 	bl	8008676 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af04      	add	r7, sp, #16
 8006d46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d102      	bne.n	8006d62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b0b      	cmp	r3, #11
 8006d6a:	f200 81b3 	bhi.w	80070d4 <USBH_Process+0x394>
 8006d6e:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <USBH_Process+0x34>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006da5 	.word	0x08006da5
 8006d78:	08006dd7 	.word	0x08006dd7
 8006d7c:	08006e3f 	.word	0x08006e3f
 8006d80:	0800706f 	.word	0x0800706f
 8006d84:	080070d5 	.word	0x080070d5
 8006d88:	08006ee3 	.word	0x08006ee3
 8006d8c:	08007015 	.word	0x08007015
 8006d90:	08006f19 	.word	0x08006f19
 8006d94:	08006f39 	.word	0x08006f39
 8006d98:	08006f59 	.word	0x08006f59
 8006d9c:	08006f87 	.word	0x08006f87
 8006da0:	08007057 	.word	0x08007057
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8193 	beq.w	80070d8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006db8:	20c8      	movs	r0, #200	; 0xc8
 8006dba:	f001 fca6 	bl	800870a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fb99 	bl	80084f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006dd4:	e180      	b.n	80070d8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d107      	bne.n	8006df0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dee:	e182      	b.n	80070f6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfa:	d914      	bls.n	8006e26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e02:	3301      	adds	r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d903      	bls.n	8006e1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	220d      	movs	r2, #13
 8006e1a:	701a      	strb	r2, [r3, #0]
      break;
 8006e1c:	e16b      	b.n	80070f6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
      break;
 8006e24:	e167      	b.n	80070f6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e2c:	f103 020a 	add.w	r2, r3, #10
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e36:	200a      	movs	r0, #10
 8006e38:	f001 fc67 	bl	800870a <USBH_Delay>
      break;
 8006e3c:	e15b      	b.n	80070f6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e4e:	2104      	movs	r1, #4
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e54:	2064      	movs	r0, #100	; 0x64
 8006e56:	f001 fc58 	bl	800870a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fb26 	bl	80084ac <USBH_LL_GetSpeed>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2205      	movs	r2, #5
 8006e6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 f931 	bl	80080da <USBH_AllocPipe>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f929 	bl	80080da <USBH_AllocPipe>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7919      	ldrb	r1, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	9201      	str	r2, [sp, #4]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2280      	movs	r2, #128	; 0x80
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f8e2 	bl	800807c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7959      	ldrb	r1, [r3, #5]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	9202      	str	r2, [sp, #8]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	9201      	str	r2, [sp, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2200      	movs	r2, #0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 f8ce 	bl	800807c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ee0:	e109      	b.n	80070f6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f90c 	bl	8007100 <USBH_HandleEnum>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 80f3 	bne.w	80070dc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d103      	bne.n	8006f10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f0e:	e0e5      	b.n	80070dc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2207      	movs	r2, #7
 8006f14:	701a      	strb	r2, [r3, #0]
      break;
 8006f16:	e0e1      	b.n	80070dc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80de 	beq.w	80070e0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2208      	movs	r2, #8
 8006f34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f36:	e0d3      	b.n	80070e0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc20 	bl	8007788 <USBH_SetCfg>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f040 80ca 	bne.w	80070e4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2209      	movs	r2, #9
 8006f54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f56:	e0c5      	b.n	80070e4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f66:	2101      	movs	r1, #1
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc30 	bl	80077ce <USBH_SetFeature>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f040 80b9 	bne.w	80070e8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f7c:	e0b4      	b.n	80070e8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	220a      	movs	r2, #10
 8006f82:	701a      	strb	r2, [r3, #0]
      break;
 8006f84:	e0b0      	b.n	80070e8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80ad 	beq.w	80070ec <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	e016      	b.n	8006fce <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006fa0:	7bfa      	ldrb	r2, [r7, #15]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32de      	adds	r2, #222	; 0xde
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	791a      	ldrb	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d108      	bne.n	8006fc8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006fb6:	7bfa      	ldrb	r2, [r7, #15]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	32de      	adds	r2, #222	; 0xde
 8006fbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006fc6:	e005      	b.n	8006fd4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0e5      	beq.n	8006fa0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d016      	beq.n	800700c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d109      	bne.n	8007004 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2206      	movs	r2, #6
 8006ff4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ffc:	2103      	movs	r1, #3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007002:	e073      	b.n	80070ec <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	220d      	movs	r2, #13
 8007008:	701a      	strb	r2, [r3, #0]
      break;
 800700a:	e06f      	b.n	80070ec <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	220d      	movs	r2, #13
 8007010:	701a      	strb	r2, [r3, #0]
      break;
 8007012:	e06b      	b.n	80070ec <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d017      	beq.n	800704e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
 800702a:	4603      	mov	r3, r0
 800702c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	220b      	movs	r2, #11
 800703a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800703c:	e058      	b.n	80070f0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d154      	bne.n	80070f0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	220d      	movs	r2, #13
 800704a:	701a      	strb	r2, [r3, #0]
      break;
 800704c:	e050      	b.n	80070f0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	220d      	movs	r2, #13
 8007052:	701a      	strb	r2, [r3, #0]
      break;
 8007054:	e04c      	b.n	80070f0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d049      	beq.n	80070f4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      }
      break;
 800706c:	e042      	b.n	80070f4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fd72 	bl	8006b60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070aa:	2105      	movs	r1, #5
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d107      	bne.n	80070cc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fe2b 	bl	8006d20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070ca:	e014      	b.n	80070f6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f9b7 	bl	8008440 <USBH_LL_Start>
      break;
 80070d2:	e010      	b.n	80070f6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80070d4:	bf00      	nop
 80070d6:	e00e      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070d8:	bf00      	nop
 80070da:	e00c      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070dc:	bf00      	nop
 80070de:	e00a      	b.n	80070f6 <USBH_Process+0x3b6>
    break;
 80070e0:	bf00      	nop
 80070e2:	e008      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070e4:	bf00      	nop
 80070e6:	e006      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070e8:	bf00      	nop
 80070ea:	e004      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070ec:	bf00      	nop
 80070ee:	e002      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <USBH_Process+0x3b6>
      break;
 80070f4:	bf00      	nop
  }
  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af04      	add	r7, sp, #16
 8007106:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b07      	cmp	r3, #7
 8007116:	f200 81c1 	bhi.w	800749c <USBH_HandleEnum+0x39c>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USBH_HandleEnum+0x20>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007141 	.word	0x08007141
 8007124:	080071ff 	.word	0x080071ff
 8007128:	08007269 	.word	0x08007269
 800712c:	080072f7 	.word	0x080072f7
 8007130:	08007361 	.word	0x08007361
 8007134:	080073d1 	.word	0x080073d1
 8007138:	08007417 	.word	0x08007417
 800713c:	0800745d 	.word	0x0800745d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007140:	2108      	movs	r1, #8
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa50 	bl	80075e8 <USBH_Get_DevDesc>
 8007148:	4603      	mov	r3, r0
 800714a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d130      	bne.n	80071b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7919      	ldrb	r1, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007176:	b292      	uxth	r2, r2
 8007178:	9202      	str	r2, [sp, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	9201      	str	r2, [sp, #4]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 ff79 	bl	800807c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	7959      	ldrb	r1, [r3, #5]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800719e:	b292      	uxth	r2, r2
 80071a0:	9202      	str	r2, [sp, #8]
 80071a2:	2200      	movs	r2, #0
 80071a4:	9201      	str	r2, [sp, #4]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4603      	mov	r3, r0
 80071aa:	2200      	movs	r2, #0
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 ff65 	bl	800807c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071b2:	e175      	b.n	80074a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	f040 8172 	bne.w	80074a0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071c2:	3301      	adds	r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d903      	bls.n	80071de <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	220d      	movs	r2, #13
 80071da:	701a      	strb	r2, [r3, #0]
      break;
 80071dc:	e160      	b.n	80074a0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	795b      	ldrb	r3, [r3, #5]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 ff99 	bl	800811c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ff93 	bl	800811c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
      break;
 80071fc:	e150      	b.n	80074a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071fe:	2112      	movs	r1, #18
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9f1 	bl	80075e8 <USBH_Get_DevDesc>
 8007206:	4603      	mov	r3, r0
 8007208:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007216:	e145      	b.n	80074a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b03      	cmp	r3, #3
 800721c:	f040 8142 	bne.w	80074a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007226:	3301      	adds	r3, #1
 8007228:	b2da      	uxtb	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007236:	2b03      	cmp	r3, #3
 8007238:	d903      	bls.n	8007242 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	220d      	movs	r2, #13
 800723e:	701a      	strb	r2, [r3, #0]
      break;
 8007240:	e130      	b.n	80074a4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	795b      	ldrb	r3, [r3, #5]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 ff67 	bl	800811c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	791b      	ldrb	r3, [r3, #4]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ff61 	bl	800811c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
      break;
 8007266:	e11d      	b.n	80074a4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007268:	2101      	movs	r1, #1
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa68 	bl	8007740 <USBH_SetAddress>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d132      	bne.n	80072e0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800727a:	2002      	movs	r0, #2
 800727c:	f001 fa45 	bl	800870a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7919      	ldrb	r1, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072a2:	b292      	uxth	r2, r2
 80072a4:	9202      	str	r2, [sp, #8]
 80072a6:	2200      	movs	r2, #0
 80072a8:	9201      	str	r2, [sp, #4]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4603      	mov	r3, r0
 80072ae:	2280      	movs	r2, #128	; 0x80
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fee3 	bl	800807c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7959      	ldrb	r1, [r3, #5]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072ca:	b292      	uxth	r2, r2
 80072cc:	9202      	str	r2, [sp, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	9201      	str	r2, [sp, #4]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4603      	mov	r3, r0
 80072d6:	2200      	movs	r2, #0
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fecf 	bl	800807c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072de:	e0e3      	b.n	80074a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	f040 80e0 	bne.w	80074a8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	220d      	movs	r2, #13
 80072ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	705a      	strb	r2, [r3, #1]
      break;
 80072f4:	e0d8      	b.n	80074a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80072f6:	2109      	movs	r1, #9
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f99d 	bl	8007638 <USBH_Get_CfgDesc>
 80072fe:	4603      	mov	r3, r0
 8007300:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2204      	movs	r2, #4
 800730c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800730e:	e0cd      	b.n	80074ac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b03      	cmp	r3, #3
 8007314:	f040 80ca 	bne.w	80074ac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800731e:	3301      	adds	r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800732e:	2b03      	cmp	r3, #3
 8007330:	d903      	bls.n	800733a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	220d      	movs	r2, #13
 8007336:	701a      	strb	r2, [r3, #0]
      break;
 8007338:	e0b8      	b.n	80074ac <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	795b      	ldrb	r3, [r3, #5]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 feeb 	bl	800811c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	791b      	ldrb	r3, [r3, #4]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fee5 	bl	800811c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
      break;
 800735e:	e0a5      	b.n	80074ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f965 	bl	8007638 <USBH_Get_CfgDesc>
 800736e:	4603      	mov	r3, r0
 8007370:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2205      	movs	r2, #5
 800737c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800737e:	e097      	b.n	80074b0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b03      	cmp	r3, #3
 8007384:	f040 8094 	bne.w	80074b0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800738e:	3301      	adds	r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d903      	bls.n	80073aa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	220d      	movs	r2, #13
 80073a6:	701a      	strb	r2, [r3, #0]
      break;
 80073a8:	e082      	b.n	80074b0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	795b      	ldrb	r3, [r3, #5]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 feb3 	bl	800811c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	791b      	ldrb	r3, [r3, #4]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fead 	bl	800811c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
      break;
 80073ce:	e06f      	b.n	80074b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d019      	beq.n	800740e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073e6:	23ff      	movs	r3, #255	; 0xff
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f949 	bl	8007680 <USBH_Get_StringDesc>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2206      	movs	r2, #6
 80073fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073fe:	e059      	b.n	80074b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	2b03      	cmp	r3, #3
 8007404:	d156      	bne.n	80074b4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2206      	movs	r2, #6
 800740a:	705a      	strb	r2, [r3, #1]
      break;
 800740c:	e052      	b.n	80074b4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2206      	movs	r2, #6
 8007412:	705a      	strb	r2, [r3, #1]
      break;
 8007414:	e04e      	b.n	80074b4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800741c:	2b00      	cmp	r3, #0
 800741e:	d019      	beq.n	8007454 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800742c:	23ff      	movs	r3, #255	; 0xff
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f926 	bl	8007680 <USBH_Get_StringDesc>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2207      	movs	r2, #7
 8007442:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007444:	e038      	b.n	80074b8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d135      	bne.n	80074b8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2207      	movs	r2, #7
 8007450:	705a      	strb	r2, [r3, #1]
      break;
 8007452:	e031      	b.n	80074b8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2207      	movs	r2, #7
 8007458:	705a      	strb	r2, [r3, #1]
      break;
 800745a:	e02d      	b.n	80074b8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007462:	2b00      	cmp	r3, #0
 8007464:	d017      	beq.n	8007496 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007472:	23ff      	movs	r3, #255	; 0xff
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f903 	bl	8007680 <USBH_Get_StringDesc>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007488:	e018      	b.n	80074bc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d115      	bne.n	80074bc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	e012      	b.n	80074bc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
      break;
 800749a:	e00f      	b.n	80074bc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800749c:	bf00      	nop
 800749e:	e00e      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074a0:	bf00      	nop
 80074a2:	e00c      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074a4:	bf00      	nop
 80074a6:	e00a      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074a8:	bf00      	nop
 80074aa:	e008      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074ac:	bf00      	nop
 80074ae:	e006      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074b0:	bf00      	nop
 80074b2:	e004      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <USBH_HandleEnum+0x3be>
      break;
 80074bc:	bf00      	nop
  }
  return Status;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f804 	bl	800750a <USBH_HandleSof>
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b0b      	cmp	r3, #11
 800751a:	d10a      	bne.n	8007532 <USBH_HandleSof+0x28>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
  }
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800754a:	bf00      	nop
}
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007566:	bf00      	nop
}
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 ff58 	bl	8008476 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fda5 	bl	800811c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	795b      	ldrb	r3, [r3, #5]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fd9f 	bl	800811c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007606:	2100      	movs	r1, #0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f864 	bl	80076d6 <USBH_GetDescriptor>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	b292      	uxth	r2, r2
 8007628:	4619      	mov	r1, r3
 800762a:	f000 f918 	bl	800785e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af02      	add	r7, sp, #8
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	331c      	adds	r3, #28
 8007648:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800764a:	887b      	ldrh	r3, [r7, #2]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007654:	2100      	movs	r1, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f83d 	bl	80076d6 <USBH_GetDescriptor>
 800765c:	4603      	mov	r3, r0
 800765e:	72fb      	strb	r3, [r7, #11]
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800766c:	887a      	ldrh	r2, [r7, #2]
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f964 	bl	800793e <USBH_ParseCfgDesc>
  }

  return status;
 8007676:	7afb      	ldrb	r3, [r7, #11]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	461a      	mov	r2, r3
 800768c:	460b      	mov	r3, r1
 800768e:	72fb      	strb	r3, [r7, #11]
 8007690:	4613      	mov	r3, r2
 8007692:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800769c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80076a4:	893b      	ldrh	r3, [r7, #8]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	460b      	mov	r3, r1
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f812 	bl	80076d6 <USBH_GetDescriptor>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d107      	bne.n	80076cc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076c2:	893a      	ldrh	r2, [r7, #8]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fa37 	bl	8007b3a <USBH_ParseStringDesc>
  }

  return status;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	607b      	str	r3, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	72fb      	strb	r3, [r7, #11]
 80076e4:	4613      	mov	r3, r2
 80076e6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	789b      	ldrb	r3, [r3, #2]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d11c      	bne.n	800772a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2206      	movs	r2, #6
 8007700:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	893a      	ldrh	r2, [r7, #8]
 8007706:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007708:	893b      	ldrh	r3, [r7, #8]
 800770a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800770e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007712:	d104      	bne.n	800771e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f240 4209 	movw	r2, #1033	; 0x409
 800771a:	829a      	strh	r2, [r3, #20]
 800771c:	e002      	b.n	8007724 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8b3a      	ldrh	r2, [r7, #24]
 8007728:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800772a:	8b3b      	ldrh	r3, [r7, #24]
 800772c:	461a      	mov	r2, r3
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fa50 	bl	8007bd6 <USBH_CtlReq>
 8007736:	4603      	mov	r3, r0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	789b      	ldrb	r3, [r3, #2]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10f      	bne.n	8007774 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2205      	movs	r2, #5
 800775e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa2c 	bl	8007bd6 <USBH_CtlReq>
 800777e:	4603      	mov	r3, r0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	789b      	ldrb	r3, [r3, #2]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d10e      	bne.n	80077ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2209      	movs	r2, #9
 80077a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	887a      	ldrh	r2, [r7, #2]
 80077ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa09 	bl	8007bd6 <USBH_CtlReq>
 80077c4:	4603      	mov	r3, r0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	789b      	ldrb	r3, [r3, #2]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d10f      	bne.n	8007802 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2203      	movs	r2, #3
 80077ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007802:	2200      	movs	r2, #0
 8007804:	2100      	movs	r1, #0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f9e5 	bl	8007bd6 <USBH_CtlReq>
 800780c:	4603      	mov	r3, r0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	789b      	ldrb	r3, [r3, #2]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d10f      	bne.n	800784a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9c1 	bl	8007bd6 <USBH_CtlReq>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	4613      	mov	r3, r2
 800786a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	785a      	ldrb	r2, [r3, #1]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	3302      	adds	r3, #2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29a      	uxth	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3303      	adds	r3, #3
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	b29b      	uxth	r3, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	791a      	ldrb	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	795a      	ldrb	r2, [r3, #5]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	799a      	ldrb	r2, [r3, #6]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	79da      	ldrb	r2, [r3, #7]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d939      	bls.n	8007932 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	3308      	adds	r3, #8
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3309      	adds	r3, #9
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	330a      	adds	r3, #10
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	330b      	adds	r3, #11
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4313      	orrs	r3, r2
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	330c      	adds	r3, #12
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	330d      	adds	r3, #13
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	b29b      	uxth	r3, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	7b9a      	ldrb	r2, [r3, #14]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	7bda      	ldrb	r2, [r3, #15]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	7c1a      	ldrb	r2, [r3, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	7c5a      	ldrb	r2, [r3, #17]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	745a      	strb	r2, [r3, #17]
  }
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08a      	sub	sp, #40	; 0x28
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	4613      	mov	r3, r2
 800794a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	781a      	ldrb	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	785a      	ldrb	r2, [r3, #1]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	3302      	adds	r3, #2
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b29a      	uxth	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	3303      	adds	r3, #3
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	b29b      	uxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	791a      	ldrb	r2, [r3, #4]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	795a      	ldrb	r2, [r3, #5]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	799a      	ldrb	r2, [r3, #6]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	79da      	ldrb	r2, [r3, #7]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	7a1a      	ldrb	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	2b09      	cmp	r3, #9
 80079b8:	d95f      	bls.n	8007a7a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80079ba:	2309      	movs	r3, #9
 80079bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80079be:	2300      	movs	r3, #0
 80079c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079c2:	e051      	b.n	8007a68 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079c4:	f107 0316 	add.w	r3, r7, #22
 80079c8:	4619      	mov	r1, r3
 80079ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079cc:	f000 f8e8 	bl	8007ba0 <USBH_GetNextDesc>
 80079d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d146      	bne.n	8007a68 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80079da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079de:	221a      	movs	r2, #26
 80079e0:	fb02 f303 	mul.w	r3, r2, r3
 80079e4:	3308      	adds	r3, #8
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	3302      	adds	r3, #2
 80079ec:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079f0:	69f8      	ldr	r0, [r7, #28]
 80079f2:	f000 f846 	bl	8007a82 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a00:	e022      	b.n	8007a48 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a02:	f107 0316 	add.w	r3, r7, #22
 8007a06:	4619      	mov	r1, r3
 8007a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a0a:	f000 f8c9 	bl	8007ba0 <USBH_GetNextDesc>
 8007a0e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b05      	cmp	r3, #5
 8007a16:	d117      	bne.n	8007a48 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a20:	3201      	adds	r2, #1
 8007a22:	00d2      	lsls	r2, r2, #3
 8007a24:	211a      	movs	r1, #26
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	3304      	adds	r3, #4
 8007a34:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a38:	69b8      	ldr	r0, [r7, #24]
 8007a3a:	f000 f851 	bl	8007ae0 <USBH_ParseEPDesc>
            ep_ix++;
 8007a3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a42:	3301      	adds	r3, #1
 8007a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	791b      	ldrb	r3, [r3, #4]
 8007a4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d204      	bcs.n	8007a5e <USBH_ParseCfgDesc+0x120>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	885a      	ldrh	r2, [r3, #2]
 8007a58:	8afb      	ldrh	r3, [r7, #22]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d8d1      	bhi.n	8007a02 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a62:	3301      	adds	r3, #1
 8007a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d804      	bhi.n	8007a7a <USBH_ParseCfgDesc+0x13c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	885a      	ldrh	r2, [r3, #2]
 8007a74:	8afb      	ldrh	r3, [r7, #22]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d8a4      	bhi.n	80079c4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3728      	adds	r7, #40	; 0x28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785a      	ldrb	r2, [r3, #1]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	789a      	ldrb	r2, [r3, #2]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	78da      	ldrb	r2, [r3, #3]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	791a      	ldrb	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	795a      	ldrb	r2, [r3, #5]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	799a      	ldrb	r2, [r3, #6]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	79da      	ldrb	r2, [r3, #7]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	7a1a      	ldrb	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	721a      	strb	r2, [r3, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	785a      	ldrb	r2, [r3, #1]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	789a      	ldrb	r2, [r3, #2]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	78da      	ldrb	r2, [r3, #3]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	3305      	adds	r3, #5
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	799a      	ldrb	r2, [r3, #6]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	719a      	strb	r2, [r3, #6]
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	4613      	mov	r3, r2
 8007b46:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d120      	bne.n	8007b94 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	1e9a      	subs	r2, r3, #2
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	bf28      	it	cs
 8007b5e:	4613      	movcs	r3, r2
 8007b60:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3302      	adds	r3, #2
 8007b66:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	82fb      	strh	r3, [r7, #22]
 8007b6c:	e00b      	b.n	8007b86 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b6e:	8afb      	ldrh	r3, [r7, #22]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b80:	8afb      	ldrh	r3, [r7, #22]
 8007b82:	3302      	adds	r3, #2
 8007b84:	82fb      	strh	r3, [r7, #22]
 8007b86:	8afa      	ldrh	r2, [r7, #22]
 8007b88:	8abb      	ldrh	r3, [r7, #20]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d3ef      	bcc.n	8007b6e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	701a      	strb	r2, [r3, #0]
  }
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	4613      	mov	r3, r2
 8007be2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	789b      	ldrb	r3, [r3, #2]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d002      	beq.n	8007bf6 <USBH_CtlReq+0x20>
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d00f      	beq.n	8007c14 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007bf4:	e027      	b.n	8007c46 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	88fa      	ldrh	r2, [r7, #6]
 8007c00:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
      break;
 8007c12:	e018      	b.n	8007c46 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f81b 	bl	8007c50 <USBH_HandleControl>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <USBH_CtlReq+0x54>
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d106      	bne.n	8007c38 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	761a      	strb	r2, [r3, #24]
      break;
 8007c36:	e005      	b.n	8007c44 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d102      	bne.n	8007c44 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	709a      	strb	r2, [r3, #2]
      break;
 8007c44:	bf00      	nop
  }
  return status;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7e1b      	ldrb	r3, [r3, #24]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	2b0a      	cmp	r3, #10
 8007c68:	f200 8158 	bhi.w	8007f1c <USBH_HandleControl+0x2cc>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <USBH_HandleControl+0x24>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	08007cbb 	.word	0x08007cbb
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d4b 	.word	0x08007d4b
 8007c84:	08007d83 	.word	0x08007d83
 8007c88:	08007daf 	.word	0x08007daf
 8007c8c:	08007e01 	.word	0x08007e01
 8007c90:	08007e23 	.word	0x08007e23
 8007c94:	08007e5f 	.word	0x08007e5f
 8007c98:	08007e87 	.word	0x08007e87
 8007c9c:	08007ec5 	.word	0x08007ec5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f103 0110 	add.w	r1, r3, #16
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	795b      	ldrb	r3, [r3, #5]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f945 	bl	8007f3c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	761a      	strb	r2, [r3, #24]
      break;
 8007cb8:	e13b      	b.n	8007f32 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	795b      	ldrb	r3, [r3, #5]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fcc5 	bl	8008650 <USBH_LL_GetURBState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d11e      	bne.n	8007d0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7c1b      	ldrb	r3, [r3, #16]
 8007cd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cd8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	8adb      	ldrh	r3, [r3, #22]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007ce2:	7b7b      	ldrb	r3, [r7, #13]
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d103      	bne.n	8007cf0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2203      	movs	r2, #3
 8007cec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cee:	e117      	b.n	8007f20 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	761a      	strb	r2, [r3, #24]
      break;
 8007cf6:	e113      	b.n	8007f20 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007cf8:	7b7b      	ldrb	r3, [r7, #13]
 8007cfa:	2b80      	cmp	r3, #128	; 0x80
 8007cfc:	d103      	bne.n	8007d06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2209      	movs	r2, #9
 8007d02:	761a      	strb	r2, [r3, #24]
      break;
 8007d04:	e10c      	b.n	8007f20 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2207      	movs	r2, #7
 8007d0a:	761a      	strb	r2, [r3, #24]
      break;
 8007d0c:	e108      	b.n	8007f20 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d003      	beq.n	8007d1c <USBH_HandleControl+0xcc>
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	f040 8102 	bne.w	8007f20 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	220b      	movs	r2, #11
 8007d20:	761a      	strb	r2, [r3, #24]
      break;
 8007d22:	e0fd      	b.n	8007f20 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6899      	ldr	r1, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	899a      	ldrh	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	791b      	ldrb	r3, [r3, #4]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f93c 	bl	8007fba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2204      	movs	r2, #4
 8007d46:	761a      	strb	r2, [r3, #24]
      break;
 8007d48:	e0f3      	b.n	8007f32 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	791b      	ldrb	r3, [r3, #4]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fc7d 	bl	8008650 <USBH_LL_GetURBState>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d102      	bne.n	8007d66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2209      	movs	r2, #9
 8007d64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b05      	cmp	r3, #5
 8007d6a:	d102      	bne.n	8007d72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d70:	e0d8      	b.n	8007f24 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	f040 80d5 	bne.w	8007f24 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220b      	movs	r2, #11
 8007d7e:	761a      	strb	r2, [r3, #24]
      break;
 8007d80:	e0d0      	b.n	8007f24 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6899      	ldr	r1, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	899a      	ldrh	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7958      	ldrb	r0, [r3, #5]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4603      	mov	r3, r0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f8eb 	bl	8007f70 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2206      	movs	r2, #6
 8007daa:	761a      	strb	r2, [r3, #24]
      break;
 8007dac:	e0c1      	b.n	8007f32 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc4b 	bl	8008650 <USBH_LL_GetURBState>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d103      	bne.n	8007dcc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2207      	movs	r2, #7
 8007dc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dca:	e0ad      	b.n	8007f28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d105      	bne.n	8007dde <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220c      	movs	r2, #12
 8007dd6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	73fb      	strb	r3, [r7, #15]
      break;
 8007ddc:	e0a4      	b.n	8007f28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d103      	bne.n	8007dec <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2205      	movs	r2, #5
 8007de8:	761a      	strb	r2, [r3, #24]
      break;
 8007dea:	e09d      	b.n	8007f28 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	f040 809a 	bne.w	8007f28 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	220b      	movs	r2, #11
 8007df8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfe:	e093      	b.n	8007f28 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f8d6 	bl	8007fba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	761a      	strb	r2, [r3, #24]

      break;
 8007e20:	e087      	b.n	8007f32 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc11 	bl	8008650 <USBH_LL_GetURBState>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d105      	bne.n	8007e44 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	220d      	movs	r2, #13
 8007e3c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e42:	e073      	b.n	8007f2c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d103      	bne.n	8007e52 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220b      	movs	r2, #11
 8007e4e:	761a      	strb	r2, [r3, #24]
      break;
 8007e50:	e06c      	b.n	8007f2c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b05      	cmp	r3, #5
 8007e56:	d169      	bne.n	8007f2c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5c:	e066      	b.n	8007f2c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	795a      	ldrb	r2, [r3, #5]
 8007e62:	2301      	movs	r3, #1
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4613      	mov	r3, r2
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f87f 	bl	8007f70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	220a      	movs	r2, #10
 8007e82:	761a      	strb	r2, [r3, #24]
      break;
 8007e84:	e055      	b.n	8007f32 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	795b      	ldrb	r3, [r3, #5]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fbdf 	bl	8008650 <USBH_LL_GetURBState>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d105      	bne.n	8007ea8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	220d      	movs	r2, #13
 8007ea4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ea6:	e043      	b.n	8007f30 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d103      	bne.n	8007eb6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2209      	movs	r2, #9
 8007eb2:	761a      	strb	r2, [r3, #24]
      break;
 8007eb4:	e03c      	b.n	8007f30 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d139      	bne.n	8007f30 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	220b      	movs	r2, #11
 8007ec0:	761a      	strb	r2, [r3, #24]
      break;
 8007ec2:	e035      	b.n	8007f30 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7e5b      	ldrb	r3, [r3, #25]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	765a      	strb	r2, [r3, #25]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7e5b      	ldrb	r3, [r3, #25]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d806      	bhi.n	8007ee6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ee4:	e025      	b.n	8007f32 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eec:	2106      	movs	r1, #6
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	795b      	ldrb	r3, [r3, #5]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f90c 	bl	800811c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	791b      	ldrb	r3, [r3, #4]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f906 	bl	800811c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f16:	2302      	movs	r3, #2
 8007f18:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1a:	e00a      	b.n	8007f32 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007f1c:	bf00      	nop
 8007f1e:	e008      	b.n	8007f32 <USBH_HandleControl+0x2e2>
      break;
 8007f20:	bf00      	nop
 8007f22:	e006      	b.n	8007f32 <USBH_HandleControl+0x2e2>
      break;
 8007f24:	bf00      	nop
 8007f26:	e004      	b.n	8007f32 <USBH_HandleControl+0x2e2>
      break;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <USBH_HandleControl+0x2e2>
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <USBH_HandleControl+0x2e2>
      break;
 8007f30:	bf00      	nop
  }

  return status;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af04      	add	r7, sp, #16
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f4a:	79f9      	ldrb	r1, [r7, #7]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	2308      	movs	r3, #8
 8007f52:	9302      	str	r3, [sp, #8]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2200      	movs	r2, #0
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fb44 	bl	80085ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af04      	add	r7, sp, #16
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	460b      	mov	r3, r1
 8007f80:	80fb      	strh	r3, [r7, #6]
 8007f82:	4613      	mov	r3, r2
 8007f84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f94:	7979      	ldrb	r1, [r7, #5]
 8007f96:	7e3b      	ldrb	r3, [r7, #24]
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	9302      	str	r3, [sp, #8]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2200      	movs	r2, #0
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fb1f 	bl	80085ee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b088      	sub	sp, #32
 8007fbe:	af04      	add	r7, sp, #16
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	460b      	mov	r3, r1
 8007fca:	80fb      	strh	r3, [r7, #6]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fd0:	7979      	ldrb	r1, [r7, #5]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9303      	str	r3, [sp, #12]
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fb01 	bl	80085ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007fec:	2300      	movs	r3, #0

}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b088      	sub	sp, #32
 8007ffa:	af04      	add	r7, sp, #16
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	4611      	mov	r1, r2
 8008002:	461a      	mov	r2, r3
 8008004:	460b      	mov	r3, r1
 8008006:	80fb      	strh	r3, [r7, #6]
 8008008:	4613      	mov	r3, r2
 800800a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800801a:	7979      	ldrb	r1, [r7, #5]
 800801c:	7e3b      	ldrb	r3, [r7, #24]
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	9302      	str	r3, [sp, #8]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	2301      	movs	r3, #1
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2302      	movs	r3, #2
 800802e:	2200      	movs	r2, #0
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fadc 	bl	80085ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af04      	add	r7, sp, #16
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4611      	mov	r1, r2
 800804c:	461a      	mov	r2, r3
 800804e:	460b      	mov	r3, r1
 8008050:	80fb      	strh	r3, [r7, #6]
 8008052:	4613      	mov	r3, r2
 8008054:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008056:	7979      	ldrb	r1, [r7, #5]
 8008058:	2300      	movs	r3, #0
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	9302      	str	r3, [sp, #8]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	2301      	movs	r3, #1
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	2302      	movs	r3, #2
 800806a:	2201      	movs	r2, #1
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 fabe 	bl	80085ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af04      	add	r7, sp, #16
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	4603      	mov	r3, r0
 800808c:	70fb      	strb	r3, [r7, #3]
 800808e:	460b      	mov	r3, r1
 8008090:	70bb      	strb	r3, [r7, #2]
 8008092:	4613      	mov	r3, r2
 8008094:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008096:	7878      	ldrb	r0, [r7, #1]
 8008098:	78ba      	ldrb	r2, [r7, #2]
 800809a:	78f9      	ldrb	r1, [r7, #3]
 800809c:	8b3b      	ldrh	r3, [r7, #24]
 800809e:	9302      	str	r3, [sp, #8]
 80080a0:	7d3b      	ldrb	r3, [r7, #20]
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	7c3b      	ldrb	r3, [r7, #16]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	4603      	mov	r3, r0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa51 	bl	8008552 <USBH_LL_OpenPipe>

  return USBH_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa70 	bl	80085b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f836 	bl	8008158 <USBH_GetFreePipe>
 80080ec:	4603      	mov	r3, r0
 80080ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080f0:	89fb      	ldrh	r3, [r7, #14]
 80080f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00a      	beq.n	8008110 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	89fb      	ldrh	r3, [r7, #14]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	33e0      	adds	r3, #224	; 0xe0
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008110:	89fb      	ldrh	r3, [r7, #14]
 8008112:	b2db      	uxtb	r3, r3
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	2b0a      	cmp	r3, #10
 800812c:	d80d      	bhi.n	800814a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	33e0      	adds	r3, #224	; 0xe0
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	33e0      	adds	r3, #224	; 0xe0
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	e00f      	b.n	800818a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	33e0      	adds	r3, #224	; 0xe0
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	b29b      	uxth	r3, r3
 8008182:	e007      	b.n	8008194 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	3301      	adds	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b0a      	cmp	r3, #10
 800818e:	d9ec      	bls.n	800816a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008190:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081a4:	2201      	movs	r2, #1
 80081a6:	490e      	ldr	r1, [pc, #56]	; (80081e0 <MX_USB_HOST_Init+0x40>)
 80081a8:	480e      	ldr	r0, [pc, #56]	; (80081e4 <MX_USB_HOST_Init+0x44>)
 80081aa:	f7fe fc9f 	bl	8006aec <USBH_Init>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80081b4:	f7f8 ff7c 	bl	80010b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80081b8:	490b      	ldr	r1, [pc, #44]	; (80081e8 <MX_USB_HOST_Init+0x48>)
 80081ba:	480a      	ldr	r0, [pc, #40]	; (80081e4 <MX_USB_HOST_Init+0x44>)
 80081bc:	f7fe fd24 	bl	8006c08 <USBH_RegisterClass>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80081c6:	f7f8 ff73 	bl	80010b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80081ca:	4806      	ldr	r0, [pc, #24]	; (80081e4 <MX_USB_HOST_Init+0x44>)
 80081cc:	f7fe fda8 	bl	8006d20 <USBH_Start>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80081d6:	f7f8 ff6b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80081da:	bf00      	nop
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	08008201 	.word	0x08008201
 80081e4:	20000418 	.word	0x20000418
 80081e8:	200000cc 	.word	0x200000cc

080081ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80081f0:	4802      	ldr	r0, [pc, #8]	; (80081fc <MX_USB_HOST_Process+0x10>)
 80081f2:	f7fe fda5 	bl	8006d40 <USBH_Process>
}
 80081f6:	bf00      	nop
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000418 	.word	0x20000418

08008200 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	3b01      	subs	r3, #1
 8008210:	2b04      	cmp	r3, #4
 8008212:	d819      	bhi.n	8008248 <USBH_UserProcess+0x48>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <USBH_UserProcess+0x1c>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008249 	.word	0x08008249
 8008220:	08008239 	.word	0x08008239
 8008224:	08008249 	.word	0x08008249
 8008228:	08008241 	.word	0x08008241
 800822c:	08008231 	.word	0x08008231
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <USBH_UserProcess+0x58>)
 8008232:	2203      	movs	r2, #3
 8008234:	701a      	strb	r2, [r3, #0]
  break;
 8008236:	e008      	b.n	800824a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008238:	4b07      	ldr	r3, [pc, #28]	; (8008258 <USBH_UserProcess+0x58>)
 800823a:	2202      	movs	r2, #2
 800823c:	701a      	strb	r2, [r3, #0]
  break;
 800823e:	e004      	b.n	800824a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <USBH_UserProcess+0x58>)
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
  break;
 8008246:	e000      	b.n	800824a <USBH_UserProcess+0x4a>

  default:
  break;
 8008248:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20000174 	.word	0x20000174

0800825c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	; 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008264:	f107 0314 	add.w	r3, r7, #20
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	609a      	str	r2, [r3, #8]
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800827c:	d147      	bne.n	800830e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	4b25      	ldr	r3, [pc, #148]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	4a24      	ldr	r2, [pc, #144]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 8008288:	f043 0301 	orr.w	r3, r3, #1
 800828c:	6313      	str	r3, [r2, #48]	; 0x30
 800828e:	4b22      	ldr	r3, [pc, #136]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800829a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800829e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	4619      	mov	r1, r3
 80082ae:	481b      	ldr	r0, [pc, #108]	; (800831c <HAL_HCD_MspInit+0xc0>)
 80082b0:	f7f9 fec6 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ba:	2302      	movs	r3, #2
 80082bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c2:	2300      	movs	r3, #0
 80082c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082c6:	230a      	movs	r3, #10
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ca:	f107 0314 	add.w	r3, r7, #20
 80082ce:	4619      	mov	r1, r3
 80082d0:	4812      	ldr	r0, [pc, #72]	; (800831c <HAL_HCD_MspInit+0xc0>)
 80082d2:	f7f9 feb5 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082d6:	4b10      	ldr	r3, [pc, #64]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 80082d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082da:	4a0f      	ldr	r2, [pc, #60]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 80082dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e0:	6353      	str	r3, [r2, #52]	; 0x34
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 80082e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ea:	4a0b      	ldr	r2, [pc, #44]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 80082ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082f0:	6453      	str	r3, [r2, #68]	; 0x44
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <HAL_HCD_MspInit+0xbc>)
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082fe:	2200      	movs	r2, #0
 8008300:	2100      	movs	r1, #0
 8008302:	2043      	movs	r0, #67	; 0x43
 8008304:	f7f9 fe65 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008308:	2043      	movs	r0, #67	; 0x43
 800830a:	f7f9 fe7e 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800830e:	bf00      	nop
 8008310:	3728      	adds	r7, #40	; 0x28
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40023800 	.word	0x40023800
 800831c:	40020000 	.word	0x40020000

08008320 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff f8d9 	bl	80074e6 <USBH_LL_IncTimer>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff f911 	bl	8007572 <USBH_LL_Connect>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff f91a 	bl	80075a0 <USBH_LL_Disconnect>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
 8008380:	4613      	mov	r3, r2
 8008382:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff f8cb 	bl	800753a <USBH_LL_PortEnabled>
} 
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff f8cb 	bl	8007556 <USBH_LL_PortDisabled>
} 
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d12a      	bne.n	8008430 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80083da:	4a18      	ldr	r2, [pc, #96]	; (800843c <USBH_LL_Init+0x74>)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a15      	ldr	r2, [pc, #84]	; (800843c <USBH_LL_Init+0x74>)
 80083e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083ea:	4b14      	ldr	r3, [pc, #80]	; (800843c <USBH_LL_Init+0x74>)
 80083ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <USBH_LL_Init+0x74>)
 80083f4:	2208      	movs	r2, #8
 80083f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80083f8:	4b10      	ldr	r3, [pc, #64]	; (800843c <USBH_LL_Init+0x74>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <USBH_LL_Init+0x74>)
 8008400:	2200      	movs	r2, #0
 8008402:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008404:	4b0d      	ldr	r3, [pc, #52]	; (800843c <USBH_LL_Init+0x74>)
 8008406:	2202      	movs	r2, #2
 8008408:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800840a:	4b0c      	ldr	r3, [pc, #48]	; (800843c <USBH_LL_Init+0x74>)
 800840c:	2200      	movs	r2, #0
 800840e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008410:	480a      	ldr	r0, [pc, #40]	; (800843c <USBH_LL_Init+0x74>)
 8008412:	f7f9 ffc8 	bl	80023a6 <HAL_HCD_Init>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800841c:	f7f8 fe48 	bl	80010b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008420:	4806      	ldr	r0, [pc, #24]	; (800843c <USBH_LL_Init+0x74>)
 8008422:	f7fa fbcb 	bl	8002bbc <HAL_HCD_GetCurrentFrame>
 8008426:	4603      	mov	r3, r0
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff f84c 	bl	80074c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200007f0 	.word	0x200007f0

08008440 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008456:	4618      	mov	r0, r3
 8008458:	f7fa fb38 	bl	8002acc <HAL_HCD_Start>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f95c 	bl	8008720 <USBH_Get_USB_Status>
 8008468:	4603      	mov	r3, r0
 800846a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800846c:	7bbb      	ldrb	r3, [r7, #14]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800848c:	4618      	mov	r0, r3
 800848e:	f7fa fb40 	bl	8002b12 <HAL_HCD_Stop>
 8008492:	4603      	mov	r3, r0
 8008494:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f941 	bl	8008720 <USBH_Get_USB_Status>
 800849e:	4603      	mov	r3, r0
 80084a0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fa fb8a 	bl	8002bd8 <HAL_HCD_GetCurrentSpeed>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d007      	beq.n	80084da <USBH_LL_GetSpeed+0x2e>
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d302      	bcc.n	80084d4 <USBH_LL_GetSpeed+0x28>
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d006      	beq.n	80084e0 <USBH_LL_GetSpeed+0x34>
 80084d2:	e008      	b.n	80084e6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
    break;
 80084d8:	e008      	b.n	80084ec <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80084da:	2301      	movs	r3, #1
 80084dc:	73fb      	strb	r3, [r7, #15]
    break;
 80084de:	e005      	b.n	80084ec <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80084e0:	2302      	movs	r3, #2
 80084e2:	73fb      	strb	r3, [r7, #15]
    break;
 80084e4:	e002      	b.n	80084ec <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80084e6:	2301      	movs	r3, #1
 80084e8:	73fb      	strb	r3, [r7, #15]
    break;
 80084ea:	bf00      	nop
  }
  return  speed;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800850c:	4618      	mov	r0, r3
 800850e:	f7fa fb1d 	bl	8002b4c <HAL_HCD_ResetPort>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f901 	bl	8008720 <USBH_Get_USB_Status>
 800851e:	4603      	mov	r3, r0
 8008520:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008522:	7bbb      	ldrb	r3, [r7, #14]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7fa fb25 	bl	8002b92 <HAL_HCD_HC_GetXferCount>
 8008548:	4603      	mov	r3, r0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008552:	b590      	push	{r4, r7, lr}
 8008554:	b089      	sub	sp, #36	; 0x24
 8008556:	af04      	add	r7, sp, #16
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	70bb      	strb	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800857a:	787c      	ldrb	r4, [r7, #1]
 800857c:	78ba      	ldrb	r2, [r7, #2]
 800857e:	78f9      	ldrb	r1, [r7, #3]
 8008580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4623      	mov	r3, r4
 8008592:	f7f9 ff6a 	bl	800246a <HAL_HCD_HC_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f8bf 	bl	8008720 <USBH_Get_USB_Status>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd90      	pop	{r4, r7, pc}

080085b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7f9 ffe3 	bl	800259a <HAL_HCD_HC_Halt>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f8a0 	bl	8008720 <USBH_Get_USB_Status>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80085ee:	b590      	push	{r4, r7, lr}
 80085f0:	b089      	sub	sp, #36	; 0x24
 80085f2:	af04      	add	r7, sp, #16
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	461a      	mov	r2, r3
 80085fc:	4603      	mov	r3, r0
 80085fe:	70fb      	strb	r3, [r7, #3]
 8008600:	460b      	mov	r3, r1
 8008602:	70bb      	strb	r3, [r7, #2]
 8008604:	4613      	mov	r3, r2
 8008606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008616:	787c      	ldrb	r4, [r7, #1]
 8008618:	78ba      	ldrb	r2, [r7, #2]
 800861a:	78f9      	ldrb	r1, [r7, #3]
 800861c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4623      	mov	r3, r4
 8008632:	f7f9 ffd5 	bl	80025e0 <HAL_HCD_HC_SubmitRequest>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f86f 	bl	8008720 <USBH_Get_USB_Status>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008646:	7bbb      	ldrb	r3, [r7, #14]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	bd90      	pop	{r4, r7, pc}

08008650 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7fa fa7e 	bl	8002b68 <HAL_HCD_HC_GetURBState>
 800866c:	4603      	mov	r3, r0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008688:	2b01      	cmp	r3, #1
 800868a:	d103      	bne.n	8008694 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f872 	bl	8008778 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008694:	20c8      	movs	r0, #200	; 0xc8
 8008696:	f7f9 f837 	bl	8001708 <HAL_Delay>
  return USBH_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	4613      	mov	r3, r2
 80086b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	440b      	add	r3, r1
 80086ca:	333b      	adds	r3, #59	; 0x3b
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	440b      	add	r3, r1
 80086e0:	3350      	adds	r3, #80	; 0x50
 80086e2:	78ba      	ldrb	r2, [r7, #2]
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	e009      	b.n	80086fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	440b      	add	r3, r1
 80086f6:	3351      	adds	r3, #81	; 0x51
 80086f8:	78ba      	ldrb	r2, [r7, #2]
 80086fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7f8 fff8 	bl	8001708 <HAL_Delay>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b03      	cmp	r3, #3
 8008732:	d817      	bhi.n	8008764 <USBH_Get_USB_Status+0x44>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <USBH_Get_USB_Status+0x1c>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	0800874d 	.word	0x0800874d
 8008740:	08008753 	.word	0x08008753
 8008744:	08008759 	.word	0x08008759
 8008748:	0800875f 	.word	0x0800875f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
    break;
 8008750:	e00b      	b.n	800876a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008752:	2302      	movs	r3, #2
 8008754:	73fb      	strb	r3, [r7, #15]
    break;
 8008756:	e008      	b.n	800876a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
    break;
 800875c:	e005      	b.n	800876a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800875e:	2302      	movs	r3, #2
 8008760:	73fb      	strb	r3, [r7, #15]
    break;
 8008762:	e002      	b.n	800876a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008764:	2302      	movs	r3, #2
 8008766:	73fb      	strb	r3, [r7, #15]
    break;
 8008768:	bf00      	nop
  }
  return usb_status;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	e001      	b.n	8008796 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	461a      	mov	r2, r3
 800879a:	2101      	movs	r1, #1
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <MX_DriverVbusFS+0x34>)
 800879e:	f7f9 fde9 	bl	8002374 <HAL_GPIO_WritePin>
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40020800 	.word	0x40020800

080087b0 <__errno>:
 80087b0:	4b01      	ldr	r3, [pc, #4]	; (80087b8 <__errno+0x8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	200000ec 	.word	0x200000ec

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	4e0d      	ldr	r6, [pc, #52]	; (80087f4 <__libc_init_array+0x38>)
 80087c0:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c2:	1ba4      	subs	r4, r4, r6
 80087c4:	10a4      	asrs	r4, r4, #2
 80087c6:	2500      	movs	r5, #0
 80087c8:	42a5      	cmp	r5, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	4e0b      	ldr	r6, [pc, #44]	; (80087fc <__libc_init_array+0x40>)
 80087ce:	4c0c      	ldr	r4, [pc, #48]	; (8008800 <__libc_init_array+0x44>)
 80087d0:	f000 f8ea 	bl	80089a8 <_init>
 80087d4:	1ba4      	subs	r4, r4, r6
 80087d6:	10a4      	asrs	r4, r4, #2
 80087d8:	2500      	movs	r5, #0
 80087da:	42a5      	cmp	r5, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087e4:	4798      	blx	r3
 80087e6:	3501      	adds	r5, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087ee:	4798      	blx	r3
 80087f0:	3501      	adds	r5, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	080089e4 	.word	0x080089e4
 80087f8:	080089e4 	.word	0x080089e4
 80087fc:	080089e4 	.word	0x080089e4
 8008800:	080089e8 	.word	0x080089e8

08008804 <malloc>:
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <malloc+0xc>)
 8008806:	4601      	mov	r1, r0
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f000 b861 	b.w	80088d0 <_malloc_r>
 800880e:	bf00      	nop
 8008810:	200000ec 	.word	0x200000ec

08008814 <free>:
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <free+0xc>)
 8008816:	4601      	mov	r1, r0
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	f000 b80b 	b.w	8008834 <_free_r>
 800881e:	bf00      	nop
 8008820:	200000ec 	.word	0x200000ec

08008824 <memset>:
 8008824:	4402      	add	r2, r0
 8008826:	4603      	mov	r3, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <_free_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4605      	mov	r5, r0
 8008838:	2900      	cmp	r1, #0
 800883a:	d045      	beq.n	80088c8 <_free_r+0x94>
 800883c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008840:	1f0c      	subs	r4, r1, #4
 8008842:	2b00      	cmp	r3, #0
 8008844:	bfb8      	it	lt
 8008846:	18e4      	addlt	r4, r4, r3
 8008848:	f000 f8ac 	bl	80089a4 <__malloc_lock>
 800884c:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <_free_r+0x98>)
 800884e:	6813      	ldr	r3, [r2, #0]
 8008850:	4610      	mov	r0, r2
 8008852:	b933      	cbnz	r3, 8008862 <_free_r+0x2e>
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	6014      	str	r4, [r2, #0]
 8008858:	4628      	mov	r0, r5
 800885a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800885e:	f000 b8a2 	b.w	80089a6 <__malloc_unlock>
 8008862:	42a3      	cmp	r3, r4
 8008864:	d90c      	bls.n	8008880 <_free_r+0x4c>
 8008866:	6821      	ldr	r1, [r4, #0]
 8008868:	1862      	adds	r2, r4, r1
 800886a:	4293      	cmp	r3, r2
 800886c:	bf04      	itt	eq
 800886e:	681a      	ldreq	r2, [r3, #0]
 8008870:	685b      	ldreq	r3, [r3, #4]
 8008872:	6063      	str	r3, [r4, #4]
 8008874:	bf04      	itt	eq
 8008876:	1852      	addeq	r2, r2, r1
 8008878:	6022      	streq	r2, [r4, #0]
 800887a:	6004      	str	r4, [r0, #0]
 800887c:	e7ec      	b.n	8008858 <_free_r+0x24>
 800887e:	4613      	mov	r3, r2
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	b10a      	cbz	r2, 8008888 <_free_r+0x54>
 8008884:	42a2      	cmp	r2, r4
 8008886:	d9fa      	bls.n	800887e <_free_r+0x4a>
 8008888:	6819      	ldr	r1, [r3, #0]
 800888a:	1858      	adds	r0, r3, r1
 800888c:	42a0      	cmp	r0, r4
 800888e:	d10b      	bne.n	80088a8 <_free_r+0x74>
 8008890:	6820      	ldr	r0, [r4, #0]
 8008892:	4401      	add	r1, r0
 8008894:	1858      	adds	r0, r3, r1
 8008896:	4282      	cmp	r2, r0
 8008898:	6019      	str	r1, [r3, #0]
 800889a:	d1dd      	bne.n	8008858 <_free_r+0x24>
 800889c:	6810      	ldr	r0, [r2, #0]
 800889e:	6852      	ldr	r2, [r2, #4]
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	4401      	add	r1, r0
 80088a4:	6019      	str	r1, [r3, #0]
 80088a6:	e7d7      	b.n	8008858 <_free_r+0x24>
 80088a8:	d902      	bls.n	80088b0 <_free_r+0x7c>
 80088aa:	230c      	movs	r3, #12
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	e7d3      	b.n	8008858 <_free_r+0x24>
 80088b0:	6820      	ldr	r0, [r4, #0]
 80088b2:	1821      	adds	r1, r4, r0
 80088b4:	428a      	cmp	r2, r1
 80088b6:	bf04      	itt	eq
 80088b8:	6811      	ldreq	r1, [r2, #0]
 80088ba:	6852      	ldreq	r2, [r2, #4]
 80088bc:	6062      	str	r2, [r4, #4]
 80088be:	bf04      	itt	eq
 80088c0:	1809      	addeq	r1, r1, r0
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	605c      	str	r4, [r3, #4]
 80088c6:	e7c7      	b.n	8008858 <_free_r+0x24>
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	bf00      	nop
 80088cc:	20000178 	.word	0x20000178

080088d0 <_malloc_r>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	1ccd      	adds	r5, r1, #3
 80088d4:	f025 0503 	bic.w	r5, r5, #3
 80088d8:	3508      	adds	r5, #8
 80088da:	2d0c      	cmp	r5, #12
 80088dc:	bf38      	it	cc
 80088de:	250c      	movcc	r5, #12
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	4606      	mov	r6, r0
 80088e4:	db01      	blt.n	80088ea <_malloc_r+0x1a>
 80088e6:	42a9      	cmp	r1, r5
 80088e8:	d903      	bls.n	80088f2 <_malloc_r+0x22>
 80088ea:	230c      	movs	r3, #12
 80088ec:	6033      	str	r3, [r6, #0]
 80088ee:	2000      	movs	r0, #0
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
 80088f2:	f000 f857 	bl	80089a4 <__malloc_lock>
 80088f6:	4a21      	ldr	r2, [pc, #132]	; (800897c <_malloc_r+0xac>)
 80088f8:	6814      	ldr	r4, [r2, #0]
 80088fa:	4621      	mov	r1, r4
 80088fc:	b991      	cbnz	r1, 8008924 <_malloc_r+0x54>
 80088fe:	4c20      	ldr	r4, [pc, #128]	; (8008980 <_malloc_r+0xb0>)
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	b91b      	cbnz	r3, 800890c <_malloc_r+0x3c>
 8008904:	4630      	mov	r0, r6
 8008906:	f000 f83d 	bl	8008984 <_sbrk_r>
 800890a:	6020      	str	r0, [r4, #0]
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f000 f838 	bl	8008984 <_sbrk_r>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d124      	bne.n	8008962 <_malloc_r+0x92>
 8008918:	230c      	movs	r3, #12
 800891a:	6033      	str	r3, [r6, #0]
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f842 	bl	80089a6 <__malloc_unlock>
 8008922:	e7e4      	b.n	80088ee <_malloc_r+0x1e>
 8008924:	680b      	ldr	r3, [r1, #0]
 8008926:	1b5b      	subs	r3, r3, r5
 8008928:	d418      	bmi.n	800895c <_malloc_r+0x8c>
 800892a:	2b0b      	cmp	r3, #11
 800892c:	d90f      	bls.n	800894e <_malloc_r+0x7e>
 800892e:	600b      	str	r3, [r1, #0]
 8008930:	50cd      	str	r5, [r1, r3]
 8008932:	18cc      	adds	r4, r1, r3
 8008934:	4630      	mov	r0, r6
 8008936:	f000 f836 	bl	80089a6 <__malloc_unlock>
 800893a:	f104 000b 	add.w	r0, r4, #11
 800893e:	1d23      	adds	r3, r4, #4
 8008940:	f020 0007 	bic.w	r0, r0, #7
 8008944:	1ac3      	subs	r3, r0, r3
 8008946:	d0d3      	beq.n	80088f0 <_malloc_r+0x20>
 8008948:	425a      	negs	r2, r3
 800894a:	50e2      	str	r2, [r4, r3]
 800894c:	e7d0      	b.n	80088f0 <_malloc_r+0x20>
 800894e:	428c      	cmp	r4, r1
 8008950:	684b      	ldr	r3, [r1, #4]
 8008952:	bf16      	itet	ne
 8008954:	6063      	strne	r3, [r4, #4]
 8008956:	6013      	streq	r3, [r2, #0]
 8008958:	460c      	movne	r4, r1
 800895a:	e7eb      	b.n	8008934 <_malloc_r+0x64>
 800895c:	460c      	mov	r4, r1
 800895e:	6849      	ldr	r1, [r1, #4]
 8008960:	e7cc      	b.n	80088fc <_malloc_r+0x2c>
 8008962:	1cc4      	adds	r4, r0, #3
 8008964:	f024 0403 	bic.w	r4, r4, #3
 8008968:	42a0      	cmp	r0, r4
 800896a:	d005      	beq.n	8008978 <_malloc_r+0xa8>
 800896c:	1a21      	subs	r1, r4, r0
 800896e:	4630      	mov	r0, r6
 8008970:	f000 f808 	bl	8008984 <_sbrk_r>
 8008974:	3001      	adds	r0, #1
 8008976:	d0cf      	beq.n	8008918 <_malloc_r+0x48>
 8008978:	6025      	str	r5, [r4, #0]
 800897a:	e7db      	b.n	8008934 <_malloc_r+0x64>
 800897c:	20000178 	.word	0x20000178
 8008980:	2000017c 	.word	0x2000017c

08008984 <_sbrk_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4c06      	ldr	r4, [pc, #24]	; (80089a0 <_sbrk_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4605      	mov	r5, r0
 800898c:	4608      	mov	r0, r1
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	f7f8 fddc 	bl	800154c <_sbrk>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_sbrk_r+0x1a>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	b103      	cbz	r3, 800899e <_sbrk_r+0x1a>
 800899c:	602b      	str	r3, [r5, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20000ab4 	.word	0x20000ab4

080089a4 <__malloc_lock>:
 80089a4:	4770      	bx	lr

080089a6 <__malloc_unlock>:
 80089a6:	4770      	bx	lr

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
