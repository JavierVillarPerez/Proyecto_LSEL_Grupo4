
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008534  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  080086e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000120  08008808  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08008808  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1c8  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b86  00000000  00000000  0003b318  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b8  00000000  00000000  0003eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  00040158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024fe3  00000000  00000000  00041278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012df6  00000000  00000000  0006625b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf6c4  00000000  00000000  00079051  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  00148790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000120 	.word	0x20000120
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086a4 	.word	0x080086a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000124 	.word	0x20000124
 80001c4:	080086a4 	.word	0x080086a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	601a      	str	r2, [r3, #0]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e01c      	b.n	8000536 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d113      	bne.n	8000530 <fsm_fire+0x44>
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	4798      	blx	r3
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00c      	beq.n	8000530 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
      if (t->out)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00c      	beq.n	8000540 <fsm_fire+0x54>
        t->out(this);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	4798      	blx	r3
      break;
 800052e:	e007      	b.n	8000540 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3310      	adds	r3, #16
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	dade      	bge.n	80004fc <fsm_fire+0x10>
    }
  }
}
 800053e:	e000      	b.n	8000542 <fsm_fire+0x56>
      break;
 8000540:	bf00      	nop
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <error>:
	  Process,
	  Sleeping,
	  Setup
}sensor_state;

int error (fsm_t* this) {
 800054a:	b480      	push	{r7}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	889b      	ldrh	r3, [r3, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <error+0x26>
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	889a      	ldrh	r2, [r3, #4]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	d901      	bls.n	8000574 <error+0x2a>
		return 1;
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <error+0x2c>
	else return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <no_error>:
int no_error (fsm_t* this) {
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	889b      	ldrh	r3, [r3, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d007      	beq.n	80005ac <no_error+0x2a>
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	889a      	ldrh	r2, [r3, #4]
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d801      	bhi.n	80005ac <no_error+0x2a>
		return 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	e000      	b.n	80005ae <no_error+0x2c>
	else return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <timer_sleep>:
int timer_sleep (fsm_t* this) {
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>config->sleep_timer) return 1;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d008      	beq.n	80005e6 <timer_sleep+0x2c>
 80005d4:	f000 ff0a 	bl	80013ec <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d901      	bls.n	80005e6 <timer_sleep+0x2c>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <timer_sleep+0x2e>
	else return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <timer_setup>:

int timer_setup (fsm_t* this) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 8000602:	f000 fef3 	bl	80013ec <HAL_GetTick>
 8000606:	4602      	mov	r2, r0
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	429a      	cmp	r2, r3
 800060e:	bf8c      	ite	hi
 8000610:	2301      	movhi	r3, #1
 8000612:	2300      	movls	r3, #0
 8000614:	b2db      	uxtb	r3, r3
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <timer_warning>:
int timer_warning (fsm_t* this) {
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->warning_timer);
 8000630:	f000 fedc 	bl	80013ec <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	429a      	cmp	r2, r3
 800063c:	bf8c      	ite	hi
 800063e:	2301      	movhi	r3, #1
 8000640:	2300      	movls	r3, #0
 8000642:	b2db      	uxtb	r3, r3
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <timer_measure>:
int timer_measure (fsm_t* this) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->measure_timer);
 800065e:	f000 fec5 	bl	80013ec <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	429a      	cmp	r2, r3
 800066a:	bf8c      	ite	hi
 800066c:	2301      	movhi	r3, #1
 800066e:	2300      	movls	r3, #0
 8000670:	b2db      	uxtb	r3, r3
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <contador>:
int contador (fsm_t* this) {
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	60bb      	str	r3, [r7, #8]
	if(config->measure_count>=(config->measure_average))
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	7f1b      	ldrb	r3, [r3, #28]
 8000690:	b29a      	uxth	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000696:	429a      	cmp	r2, r3
 8000698:	d301      	bcc.n	800069e <contador+0x24>
		return 1;
 800069a:	2301      	movs	r3, #1
 800069c:	e000      	b.n	80006a0 <contador+0x26>
	else return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <warning_limit>:
int warning_limit (fsm_t* this) {
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	bfcc      	ite	gt
 80006c6:	2301      	movgt	r3, #1
 80006c8:	2300      	movle	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <measuring>:

void measuring (fsm_t* this) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	60fb      	str	r3, [r7, #12]

	data = HAL_ADC_GetValue(&hadc1);
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <measuring+0x60>)
 80006f0:	f000 ffe7 	bl	80016c2 <HAL_ADC_GetValue>
 80006f4:	4603      	mov	r3, r0
 80006f6:	82fb      	strh	r3, [r7, #22]

	config->data_recovered = config->data_recovered + data;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	885a      	ldrh	r2, [r3, #2]
 80006fc:	8afb      	ldrh	r3, [r7, #22]
 80006fe:	4413      	add	r3, r2
 8000700:	b29a      	uxth	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	7f1b      	ldrb	r3, [r3, #28]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 8000712:	f000 fe6b 	bl	80013ec <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800071c:	4413      	add	r3, r2
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	619a      	str	r2, [r3, #24]

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <measuring+0x64>)
 800072c:	f001 fca0 	bl	8002070 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000154 	.word	0x20000154
 800073c:	40020c00 	.word	0x40020c00

08000740 <process_data>:

void process_data (fsm_t* this) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered/config->measure_count;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	885b      	ldrh	r3, [r3, #2]
 8000756:	461a      	mov	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	7f1b      	ldrb	r3, [r3, #28]
 800075c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000760:	b29a      	uxth	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <process_data+0x80>)
 8000768:	f000 ff78 	bl	800165c <HAL_ADC_Stop>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <process_data+0x84>)
 8000774:	f001 fc7c 	bl	8002070 <HAL_GPIO_WritePin>

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	889a      	ldrh	r2, [r3, #4]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000780:	429a      	cmp	r2, r3
 8000782:	d80f      	bhi.n	80007a4 <process_data+0x64>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	889a      	ldrh	r2, [r3, #4]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	8c1b      	ldrh	r3, [r3, #32]
 800078c:	429a      	cmp	r2, r3
 800078e:	d309      	bcc.n	80007a4 <process_data+0x64>
	{
		config->alarm = 0;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2200      	movs	r2, #0
 8000794:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <process_data+0x84>)
 800079e:	f001 fc67 	bl	8002070 <HAL_GPIO_WritePin>
 80007a2:	e008      	b.n	80007b6 <process_data+0x76>
	}
	else
	{
		config->alarm = 1;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	2201      	movs	r2, #1
 80007a8:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <process_data+0x84>)
 80007b2:	f001 fc5d 	bl	8002070 <HAL_GPIO_WritePin>

	}

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000154 	.word	0x20000154
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <alert>:
void alert (fsm_t* this) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	615a      	str	r2, [r3, #20]
	config->warning_timer = HAL_GetTick()+config->warning_period;
 80007e4:	f000 fe02 	bl	80013ec <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	611a      	str	r2, [r3, #16]
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <sleep>:

void sleep (fsm_t* this) { // led orange
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 8000812:	f000 fdeb 	bl	80013ec <HAL_GetTick>
 8000816:	4602      	mov	r2, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800081c:	4413      	add	r3, r2
 800081e:	461a      	mov	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	8bdb      	ldrh	r3, [r3, #30]
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <sleep+0x88>)
 800082e:	f001 fc1f 	bl	8002070 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <sleep+0x88>)
 800083a:	f001 fc19 	bl	8002070 <HAL_GPIO_WritePin>

	if(config->warning_count >= 2)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	2b01      	cmp	r3, #1
 8000844:	dd0f      	ble.n	8000866 <sleep+0x66>
	{
		config->error = TRUE;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	2201      	movs	r2, #1
 800084a:	71da      	strb	r2, [r3, #7]
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <sleep+0x88>)
 8000854:	f001 fc0c 	bl	8002070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <sleep+0x88>)
 8000860:	f001 fc06 	bl	8002070 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
	}
}
 8000864:	e00b      	b.n	800087e <sleep+0x7e>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <sleep+0x88>)
 800086e:	f001 fbff 	bl	8002070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <sleep+0x88>)
 800087a:	f001 fbf9 	bl	8002070 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020c00 	.word	0x40020c00

0800088c <setting_up>:
void setting_up (fsm_t* this) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2200      	movs	r2, #0
 80008ae:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2200      	movs	r2, #0
 80008b4:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 80008b6:	f000 fd99 	bl	80013ec <HAL_GetTick>
 80008ba:	4602      	mov	r2, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	8bdb      	ldrh	r3, [r3, #30]
 80008cc:	2201      	movs	r2, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <setting_up+0x64>)
 80008d2:	f001 fbcd 	bl	8002070 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <setting_up+0x68>)
 80008d8:	f000 fdfa 	bl	80014d0 <HAL_ADC_Start>

	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <setting_up+0x64>)
 80008e4:	f001 fbc4 	bl	8002070 <HAL_GPIO_WritePin>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	20000154 	.word	0x20000154

080008f8 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 8000902:	4905      	ldr	r1, [pc, #20]	; (8000918 <fsm_sensor_init+0x20>)
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fddf 	bl	80004c8 <fsm_init>
  f->param = c;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	609a      	str	r2, [r3, #8]
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000

0800091c <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t supply_Pin, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t warning_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	4608      	mov	r0, r1
 8000926:	4611      	mov	r1, r2
 8000928:	461a      	mov	r2, r3
 800092a:	4603      	mov	r3, r0
 800092c:	817b      	strh	r3, [r7, #10]
 800092e:	460b      	mov	r3, r1
 8000930:	813b      	strh	r3, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2200      	movs	r2, #0
 8000940:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	809a      	strh	r2, [r3, #4]
	sensor->alarm = FALSE;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2200      	movs	r2, #0
 800094c:	719a      	strb	r2, [r3, #6]
	sensor->error = FALSE;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2200      	movs	r2, #0
 8000952:	71da      	strb	r2, [r3, #7]
	sensor->setup_timer = 0;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
	sensor->sleep_timer = 0;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
	sensor->warning_timer = 0;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2200      	movs	r2, #0
 8000976:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->supply_Pin = supply_Pin;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	897a      	ldrh	r2, [r7, #10]
 800097c:	83da      	strh	r2, [r3, #30]
	sensor->threshold_L = threshold_L;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	893a      	ldrh	r2, [r7, #8]
 8000982:	841a      	strh	r2, [r3, #32]
	sensor->threshold_H = threshold_H;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	88fa      	ldrh	r2, [r7, #6]
 8000988:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->threshold_Max = threshold_Max;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	8b3a      	ldrh	r2, [r7, #24]
 800098e:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor->setup_period = setup_period;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	8bba      	ldrh	r2, [r7, #28]
 8000994:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->sleep_period = sleep_period;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800099a:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->warning_period = warning_period;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	8c3a      	ldrh	r2, [r7, #32]
 80009a0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->measure_period = measure_period;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80009a6:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->measure_average = measure_average;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80009ac:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b096      	sub	sp, #88	; 0x58
 80009be:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fcae 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f834 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f000 f99c 	bl	8000d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009cc:	f000 f906 	bl	8000bdc <MX_I2C1_Init>
  MX_I2S3_Init();
 80009d0:	f000 f932 	bl	8000c38 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009d4:	f000 f960 	bl	8000c98 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009d8:	f007 fa60 	bl	8007e9c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80009dc:	f000 f8aa 	bl	8000b34 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  sensor_initialization(&sensor1, Sensor_Supply_Pin, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_warning_period, ph_sleep_period, ph_measure_period, ph_average);
 80009e0:	1d38      	adds	r0, r7, #4
 80009e2:	2304      	movs	r3, #4
 80009e4:	9305      	str	r3, [sp, #20]
 80009e6:	23c8      	movs	r3, #200	; 0xc8
 80009e8:	9304      	str	r3, [sp, #16]
 80009ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ee:	9303      	str	r3, [sp, #12]
 80009f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a06:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	f7ff ff86 	bl	800091c <sensor_initialization>
  fsm_sensor_init(&fsm_s1, &sensor1);
 8000a10:	1d3a      	adds	r2, r7, #4
 8000a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff6d 	bl	80008f8 <fsm_sensor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a1e:	f007 fa63 	bl	8007ee8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    fsm_fire(&fsm_s1.fsm);
 8000a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd60 	bl	80004ec <fsm_fire>
    MX_USB_HOST_Process();
 8000a2c:	e7f7      	b.n	8000a1e <main+0x64>
	...

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b098      	sub	sp, #96	; 0x60
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a3a:	2230      	movs	r2, #48	; 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fd6e 	bl	8008520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <SystemClock_Config+0xfc>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a30      	ldr	r2, [pc, #192]	; (8000b2c <SystemClock_Config+0xfc>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <SystemClock_Config+0xfc>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemClock_Config+0x100>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemClock_Config+0x100>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0x100>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fdb5 	bl	8004634 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ad0:	f000 fa16 	bl	8000f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	2105      	movs	r1, #5
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 f80e 	bl	8004b14 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000afe:	f000 f9ff 	bl	8000f00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 f9dc 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b1e:	f000 f9ef 	bl	8000f00 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3760      	adds	r7, #96	; 0x60
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <MX_ADC1_Init+0xa0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_ADC1_Init+0xa4>)
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b98:	f000 fc56 	bl	8001448 <HAL_ADC_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000ba2:	f000 f9ad 	bl	8000f00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000bb8:	f000 fd90 	bl	80016dc <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bc2:	f000 f99d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000154 	.word	0x20000154
 8000bd4:	40012000 	.word	0x40012000
 8000bd8:	0f000001 	.word	0x0f000001

08000bdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_I2C1_Init+0x54>)
 8000be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000be8:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_I2C1_Init+0x58>)
 8000bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c1a:	f002 ff33 	bl	8003a84 <HAL_I2C_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c24:	f000 f96c 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000019c 	.word	0x2000019c
 8000c30:	40005400 	.word	0x40005400
 8000c34:	000186a0 	.word	0x000186a0

08000c38 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <MX_I2S3_Init+0x58>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <MX_I2S3_Init+0x5c>)
 8000c62:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_I2S3_Init+0x54>)
 8000c78:	f003 f83c 	bl	8003cf4 <HAL_I2S_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c82:	f000 f93d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000248 	.word	0x20000248
 8000c90:	40003c00 	.word	0x40003c00
 8000c94:	00017700 	.word	0x00017700

08000c98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cea:	f004 fa2f 	bl	800514c <HAL_SPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f000 f904 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200001f0 	.word	0x200001f0
 8000d00:	40013000 	.word	0x40013000

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a70      	ldr	r2, [pc, #448]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b6e      	ldr	r3, [pc, #440]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a69      	ldr	r2, [pc, #420]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b63      	ldr	r3, [pc, #396]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a62      	ldr	r2, [pc, #392]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b60      	ldr	r3, [pc, #384]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a5b      	ldr	r2, [pc, #364]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b55      	ldr	r3, [pc, #340]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a54      	ldr	r2, [pc, #336]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b4b      	ldr	r3, [pc, #300]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4848      	ldr	r0, [pc, #288]	; (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f001 f952 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4846      	ldr	r0, [pc, #280]	; (8000eec <MX_GPIO_Init+0x1e8>)
 8000dd2:	f001 f94d 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f24f 0112 	movw	r1, #61458	; 0xf012
 8000ddc:	4844      	ldr	r0, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000dde:	f001 f947 	bl	8002070 <HAL_GPIO_WritePin>
                          |Sensor_Supply_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000de2:	2308      	movs	r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	483b      	ldr	r0, [pc, #236]	; (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000dfa:	f000 ff9f 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <MX_GPIO_Init+0x1e8>)
 8000e16:	f000 ff91 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <MX_GPIO_Init+0x1e8>)
 8000e36:	f000 ff81 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482a      	ldr	r0, [pc, #168]	; (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000e4e:	f000 ff75 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x1f8>)
 8000e66:	f000 ff69 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_GPIO_Init+0x1f8>)
 8000e88:	f000 ff58 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor_Supply_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000e8c:	f24f 0312 	movw	r3, #61458	; 0xf012
 8000e90:	61fb      	str	r3, [r7, #28]
                          |Sensor_Supply_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000ea6:	f000 ff49 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000ebe:	f000 ff3d 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000ed6:	f000 ff31 	bl	8001d3c <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	; 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	10120000 	.word	0x10120000
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f4e:	2007      	movs	r0, #7
 8000f50:	f000 feb2 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_ADC_MspInit+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d127      	bne.n	8000fd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_ADC_MspInit+0x84>)
 8000fce:	f000 feb5 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_I2C_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001026:	f44f 7310 	mov.w	r3, #576	; 0x240
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_I2C_MspInit+0x8c>)
 8001044:	f000 fe7a 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005400 	.word	0x40005400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <HAL_I2S_MspInit+0xc0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d14a      	bne.n	8001130 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a26      	ldr	r2, [pc, #152]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_I2S_MspInit+0xc4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010ee:	2310      	movs	r3, #16
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010fe:	2306      	movs	r3, #6
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <HAL_I2S_MspInit+0xc8>)
 800110a:	f000 fe17 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800110e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001120:	2306      	movs	r3, #6
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <HAL_I2S_MspInit+0xcc>)
 800112c:	f000 fe06 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40003c00 	.word	0x40003c00
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020800 	.word	0x40020800

08001148 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_SPI_MspInit+0x84>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12b      	bne.n	80011c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011a2:	23e0      	movs	r3, #224	; 0xe0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_SPI_MspInit+0x8c>)
 80011be:	f000 fdbd 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40013000 	.word	0x40013000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f8ca 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <OTG_FS_IRQHandler+0x10>)
 800123a:	f001 f9c1 	bl	80025c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000066c 	.word	0x2000066c

08001248 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x50>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x16>
		heap_end = &end;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <_sbrk+0x50>)
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <_sbrk+0x54>)
 800125c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <_sbrk+0x50>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <_sbrk+0x50>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	466a      	mov	r2, sp
 800126e:	4293      	cmp	r3, r2
 8001270:	d907      	bls.n	8001282 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001272:	f007 f91b 	bl	80084ac <__errno>
 8001276:	4602      	mov	r2, r0
 8001278:	230c      	movs	r3, #12
 800127a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	e006      	b.n	8001290 <_sbrk+0x48>
	}

	heap_end += incr;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_sbrk+0x50>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <_sbrk+0x50>)
 800128c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000013c 	.word	0x2000013c
 800129c:	20000938 	.word	0x20000938

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <SystemInit+0x28>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <SystemInit+0x28>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SystemInit+0x28>)
 80012b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ba:	609a      	str	r2, [r3, #8]
#endif
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
  ldr  r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd3 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f007 f8dd 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fb5c 	bl	80009ba <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001308:	080086e8 	.word	0x080086e8
  ldr  r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001310:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 8001314:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 8001318:	20000934 	.word	0x20000934

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 fcb5 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fddc 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fccd 	bl	8001d22 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 fc95 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000090 	.word	0x20000090
 80013bc:	20000098 	.word	0x20000098
 80013c0:	20000094 	.word	0x20000094

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000098 	.word	0x20000098
 80013e8:	20000290 	.word	0x20000290

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000290 	.word	0x20000290

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_Delay+0x40>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000098 	.word	0x20000098

08001448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e033      	b.n	80014c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fd7a 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148e:	f023 0302 	bic.w	r3, r3, #2
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fa40 	bl	8001920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
 80014b6:	e001      	b.n	80014bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start+0x1a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e0a5      	b.n	8001636 <HAL_ADC_Start+0x166>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d018      	beq.n	8001532 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <HAL_ADC_Start+0x174>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_ADC_Start+0x178>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9a      	lsrs	r2, r3, #18
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3b01      	subs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d179      	bne.n	8001634 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157e:	d106      	bne.n	800158e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f023 0206 	bic.w	r2, r3, #6
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
 800158c:	e002      	b.n	8001594 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_ADC_Start+0x17c>)
 800159e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d12a      	bne.n	800160c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a25      	ldr	r2, [pc, #148]	; (8001650 <HAL_ADC_Start+0x180>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d015      	beq.n	80015ec <HAL_ADC_Start+0x11c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_ADC_Start+0x184>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_Start+0x106>
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_ADC_Start+0x17c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_ADC_Start+0x188>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d129      	bne.n	8001634 <HAL_ADC_Start+0x164>
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_ADC_Start+0x17c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d823      	bhi.n	8001634 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d11c      	bne.n	8001634 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	e013      	b.n	8001634 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_ADC_Start+0x180>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10e      	bne.n	8001634 <HAL_ADC_Start+0x164>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001632:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000090 	.word	0x20000090
 8001648:	431bde83 	.word	0x431bde83
 800164c:	40012300 	.word	0x40012300
 8001650:	40012000 	.word	0x40012000
 8001654:	40012100 	.word	0x40012100
 8001658:	40012200 	.word	0x40012200

0800165c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Stop+0x16>
 800166e:	2302      	movs	r3, #2
 8001670:	e021      	b.n	80016b6 <HAL_ADC_Stop+0x5a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e105      	b.n	8001904 <HAL_ADC_ConfigChannel+0x228>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d925      	bls.n	8001754 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1e      	subs	r3, #30
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68d9      	ldr	r1, [r3, #12]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	4603      	mov	r3, r0
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4403      	add	r3, r0
 8001746:	3b1e      	subs	r3, #30
 8001748:	409a      	lsls	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e022      	b.n	800179a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	2207      	movs	r2, #7
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	400a      	ands	r2, r1
 8001776:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6919      	ldr	r1, [r3, #16]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	4603      	mov	r3, r0
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4403      	add	r3, r0
 8001790:	409a      	lsls	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d824      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b05      	subs	r3, #5
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b05      	subs	r3, #5
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	e04c      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d824      	bhi.n	800183e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b23      	subs	r3, #35	; 0x23
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b23      	subs	r3, #35	; 0x23
 8001830:	fa00 f203 	lsl.w	r2, r0, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	e023      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b41      	subs	r3, #65	; 0x41
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b41      	subs	r3, #65	; 0x41
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_ADC_ConfigChannel+0x234>)
 8001888:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_ADC_ConfigChannel+0x238>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d109      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d105      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_ADC_ConfigChannel+0x238>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d123      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x1e6>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b11      	cmp	r3, #17
 80018c0:	d11b      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d111      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_ADC_ConfigChannel+0x23c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_ADC_ConfigChannel+0x240>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	0c9a      	lsrs	r2, r3, #18
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012300 	.word	0x40012300
 8001914:	40012000 	.word	0x40012000
 8001918:	20000090 	.word	0x20000090
 800191c:	431bde83 	.word	0x431bde83

08001920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <ADC_Init+0x1f0>)
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	021a      	lsls	r2, r3, #8
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <ADC_Init+0x1f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d022      	beq.n	80019fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	e00f      	b.n	8001a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0202 	bic.w	r2, r2, #2
 8001a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6899      	ldr	r1, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
 8001a38:	005a      	lsls	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01b      	beq.n	8001a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	3b01      	subs	r3, #1
 8001a78:	035a      	lsls	r2, r3, #13
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	e007      	b.n	8001a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	051a      	lsls	r2, r3, #20
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad6:	025a      	lsls	r2, r3, #9
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	029a      	lsls	r2, r3, #10
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40012300 	.word	0x40012300
 8001b14:	0f000001 	.word	0x0f000001

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e16b      	b.n	8002030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 815a 	bne.w	800202a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d00b      	beq.n	8001d96 <HAL_GPIO_Init+0x5a>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0xfc>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80b4 	beq.w	800202a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <HAL_GPIO_Init+0x308>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a5e      	ldr	r2, [pc, #376]	; (8002044 <HAL_GPIO_Init+0x308>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_GPIO_Init+0x308>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a5a      	ldr	r2, [pc, #360]	; (8002048 <HAL_GPIO_Init+0x30c>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_GPIO_Init+0x310>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02b      	beq.n	8001f62 <HAL_GPIO_Init+0x226>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_GPIO_Init+0x314>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x222>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <HAL_GPIO_Init+0x318>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x21e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	; (8002058 <HAL_GPIO_Init+0x31c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	; (800205c <HAL_GPIO_Init+0x320>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x216>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <HAL_GPIO_Init+0x324>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x212>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_GPIO_Init+0x328>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x20e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x32c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x20a>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00e      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f46:	2308      	movs	r3, #8
 8001f48:	e00c      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00a      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e008      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f62:	2300      	movs	r3, #0
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f74:	4934      	ldr	r1, [pc, #208]	; (8002048 <HAL_GPIO_Init+0x30c>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_GPIO_Init+0x330>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa6:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_GPIO_Init+0x330>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_GPIO_Init+0x330>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_GPIO_Init+0x330>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_GPIO_Init+0x330>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_GPIO_Init+0x330>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_GPIO_Init+0x330>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_GPIO_Init+0x330>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	f67f ae90 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002038:	bf00      	nop
 800203a:	3724      	adds	r7, #36	; 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800
 8002068:	40021c00 	.word	0x40021c00
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a4:	b08f      	sub	sp, #60	; 0x3c
 80020a6:	af0a      	add	r7, sp, #40	; 0x28
 80020a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e054      	b.n	800215e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f005 ff42 	bl	8007f58 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2203      	movs	r2, #3
 80020d8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f900 	bl	80052f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	687e      	ldr	r6, [r7, #4]
 8002100:	466d      	mov	r5, sp
 8002102:	f106 0410 	add.w	r4, r6, #16
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002112:	e885 0003 	stmia.w	r5, {r0, r1}
 8002116:	1d33      	adds	r3, r6, #4
 8002118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211a:	6838      	ldr	r0, [r7, #0]
 800211c:	f003 f87a 	bl	8005214 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f003 f8f7 	bl	800531a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	687e      	ldr	r6, [r7, #4]
 8002134:	466d      	mov	r5, sp
 8002136:	f106 0410 	add.w	r4, r6, #16
 800213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002146:	e885 0003 	stmia.w	r5, {r0, r1}
 800214a:	1d33      	adds	r3, r6, #4
 800214c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	f003 fa0a 	bl	8005568 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002166 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002166:	b590      	push	{r4, r7, lr}
 8002168:	b089      	sub	sp, #36	; 0x24
 800216a:	af04      	add	r7, sp, #16
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	4608      	mov	r0, r1
 8002170:	4611      	mov	r1, r2
 8002172:	461a      	mov	r2, r3
 8002174:	4603      	mov	r3, r0
 8002176:	70fb      	strb	r3, [r7, #3]
 8002178:	460b      	mov	r3, r1
 800217a:	70bb      	strb	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_HCD_HC_Init+0x28>
 800218a:	2302      	movs	r3, #2
 800218c:	e07f      	b.n	800228e <HAL_HCD_HC_Init+0x128>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	333d      	adds	r3, #61	; 0x3d
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	3338      	adds	r3, #56	; 0x38
 80021ba:	787a      	ldrb	r2, [r7, #1]
 80021bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	3340      	adds	r3, #64	; 0x40
 80021ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	3339      	adds	r3, #57	; 0x39
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	333f      	adds	r3, #63	; 0x3f
 80021f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	78bb      	ldrb	r3, [r7, #2]
 8002200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002204:	b2d8      	uxtb	r0, r3
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	333a      	adds	r3, #58	; 0x3a
 8002214:	4602      	mov	r2, r0
 8002216:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da0a      	bge.n	8002236 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	333b      	adds	r3, #59	; 0x3b
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e009      	b.n	800224a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	333b      	adds	r3, #59	; 0x3b
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	333c      	adds	r3, #60	; 0x3c
 800225a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800225e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	787c      	ldrb	r4, [r7, #1]
 8002266:	78ba      	ldrb	r2, [r7, #2]
 8002268:	78f9      	ldrb	r1, [r7, #3]
 800226a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4623      	mov	r3, r4
 800227c:	f003 faf6 	bl	800586c <USB_HC_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}

08002296 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_HCD_HC_Halt+0x1e>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e00f      	b.n	80022d4 <HAL_HCD_HC_Halt+0x3e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fd30 	bl	8005d2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	70fb      	strb	r3, [r7, #3]
 80022ee:	460b      	mov	r3, r1
 80022f0:	70bb      	strb	r3, [r7, #2]
 80022f2:	4613      	mov	r3, r2
 80022f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	333b      	adds	r3, #59	; 0x3b
 8002306:	78ba      	ldrb	r2, [r7, #2]
 8002308:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	333f      	adds	r3, #63	; 0x3f
 800231a:	787a      	ldrb	r2, [r7, #1]
 800231c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800231e:	7c3b      	ldrb	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d114      	bne.n	800234e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	3342      	adds	r3, #66	; 0x42
 8002334:	2203      	movs	r2, #3
 8002336:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	333d      	adds	r3, #61	; 0x3d
 8002348:	7f3a      	ldrb	r2, [r7, #28]
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e009      	b.n	8002362 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3342      	adds	r3, #66	; 0x42
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002362:	787b      	ldrb	r3, [r7, #1]
 8002364:	2b03      	cmp	r3, #3
 8002366:	f200 80d6 	bhi.w	8002516 <HAL_HCD_HC_SubmitRequest+0x23a>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_HCD_HC_SubmitRequest+0x94>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002381 	.word	0x08002381
 8002374:	08002501 	.word	0x08002501
 8002378:	080023ed 	.word	0x080023ed
 800237c:	08002477 	.word	0x08002477
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002380:	7c3b      	ldrb	r3, [r7, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	f040 80c9 	bne.w	800251a <HAL_HCD_HC_SubmitRequest+0x23e>
 8002388:	78bb      	ldrb	r3, [r7, #2]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 80c5 	bne.w	800251a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002390:	8b3b      	ldrh	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	3351      	adds	r3, #81	; 0x51
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3351      	adds	r3, #81	; 0x51
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	3342      	adds	r3, #66	; 0x42
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023d4:	e0a1      	b.n	800251a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	3342      	adds	r3, #66	; 0x42
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
      break;
 80023ea:	e096      	b.n	800251a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023ec:	78bb      	ldrb	r3, [r7, #2]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d120      	bne.n	8002434 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3351      	adds	r3, #81	; 0x51
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3342      	adds	r3, #66	; 0x42
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800241c:	e07e      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3342      	adds	r3, #66	; 0x42
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
      break;
 8002432:	e073      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3350      	adds	r3, #80	; 0x50
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3342      	adds	r3, #66	; 0x42
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
      break;
 800245e:	e05d      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	3342      	adds	r3, #66	; 0x42
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      break;
 8002474:	e052      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002476:	78bb      	ldrb	r3, [r7, #2]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d120      	bne.n	80024be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	3351      	adds	r3, #81	; 0x51
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	3342      	adds	r3, #66	; 0x42
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024a6:	e039      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	3342      	adds	r3, #66	; 0x42
 80024b8:	2202      	movs	r2, #2
 80024ba:	701a      	strb	r2, [r3, #0]
      break;
 80024bc:	e02e      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3350      	adds	r3, #80	; 0x50
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3342      	adds	r3, #66	; 0x42
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e018      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	3342      	adds	r3, #66	; 0x42
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]
      break;
 80024fe:	e00d      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3342      	adds	r3, #66	; 0x42
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
      break;
 8002514:	e002      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800251a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3344      	adds	r3, #68	; 0x44
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	8b39      	ldrh	r1, [r7, #24]
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4403      	add	r3, r0
 8002540:	3348      	adds	r3, #72	; 0x48
 8002542:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	334c      	adds	r3, #76	; 0x4c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	3339      	adds	r3, #57	; 0x39
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	335d      	adds	r3, #93	; 0x5d
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	3338      	adds	r3, #56	; 0x38
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	18d1      	adds	r1, r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	f003 fa66 	bl	8005a80 <USB_HC_StartXfer>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop

080025c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 ff83 	bl	80054e2 <USB_GetMode>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 80ef 	bne.w	80027c2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 ff67 	bl	80054bc <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80e5 	beq.w	80027c0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 ff5e 	bl	80054bc <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800260a:	d104      	bne.n	8002616 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002614:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f002 ff4e 	bl	80054bc <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800262a:	d104      	bne.n	8002636 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002634:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f002 ff3e 	bl	80054bc <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264a:	d104      	bne.n	8002656 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 ff2e 	bl	80054bc <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d103      	bne.n	8002672 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 ff20 	bl	80054bc <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002686:	d115      	bne.n	80026b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002690:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f005 fcd6 	bl	8008054 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 f816 	bl	80056e0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 feff 	bl	80054bc <USB_ReadInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c8:	d102      	bne.n	80026d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f001 f966 	bl	800399c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fef1 	bl	80054bc <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d106      	bne.n	80026f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f005 fc99 	bl	800801c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2208      	movs	r2, #8
 80026f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fee0 	bl	80054bc <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002706:	d138      	bne.n	800277a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fafb 	bl	8005d08 <USB_HC_ReadInterrupt>
 8002712:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e025      	b.n	8002766 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	d106      	bne.n	8002754 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8cf 	bl	80028f0 <HCD_HC_IN_IRQHandler>
 8002752:	e005      	b.n	8002760 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fcfd 	bl	800315a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3d4      	bcc.n	800271a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fe9c 	bl	80054bc <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d101      	bne.n	8002792 <HAL_HCD_IRQHandler+0x1d2>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_HCD_IRQHandler+0x1d4>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d014      	beq.n	80027c2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0210 	bic.w	r2, r2, #16
 80027a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f001 f84b 	bl	8003844 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0210 	orr.w	r2, r2, #16
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	e000      	b.n	80027c2 <HAL_HCD_IRQHandler+0x202>
      return;
 80027c0:	bf00      	nop
    }
  }
}
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_HCD_Start+0x16>
 80027da:	2302      	movs	r3, #2
 80027dc:	e013      	b.n	8002806 <HAL_HCD_Start+0x3e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 fd73 	bl	80052d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 ffd6 	bl	80057a8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_HCD_Stop+0x16>
 8002820:	2302      	movs	r3, #2
 8002822:	e00d      	b.n	8002840 <HAL_HCD_Stop+0x32>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fbb5 	bl	8005fa0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f002 ff7d 	bl	8005754 <USB_ResetPort>
 800285a:	4603      	mov	r3, r0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	335c      	adds	r3, #92	; 0x5c
 8002880:	781b      	ldrb	r3, [r3, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	334c      	adds	r3, #76	; 0x4c
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 ffbf 	bl	8005848 <USB_GetCurrentFrame>
 80028ca:	4603      	mov	r3, r0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 ff9a 	bl	800581a <USB_GetHostSpeed>
 80028e6:	4603      	mov	r3, r0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d119      	bne.n	8002954 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2304      	movs	r3, #4
 8002930:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	0151      	lsls	r1, r2, #5
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	440a      	add	r2, r1
 8002948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	60d3      	str	r3, [r2, #12]
 8002952:	e0ce      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d12c      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	335d      	adds	r3, #93	; 0x5d
 8002990:	2207      	movs	r2, #7
 8002992:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 f9b3 	bl	8005d2a <USB_HC_Halt>
 80029c4:	e095      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d109      	bne.n	80029f0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2320      	movs	r3, #32
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	e080      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d134      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	0151      	lsls	r1, r2, #5
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	335d      	adds	r3, #93	; 0x5d
 8002a36:	2205      	movs	r2, #5
 8002a38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2310      	movs	r3, #16
 8002a4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 f95e 	bl	8005d2a <USB_HC_Halt>
 8002a6e:	e040      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d134      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 f939 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	335d      	adds	r3, #93	; 0x5d
 8002ada:	2208      	movs	r2, #8
 8002adc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b08:	d122      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	0151      	lsls	r1, r2, #5
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	440a      	add	r2, r1
 8002b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 f8f8 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b4c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b4e:	e300      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	f040 80fd 	bne.w	8002d62 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3348      	adds	r3, #72	; 0x48
 8002b80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	0159      	lsls	r1, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b94:	1ad1      	subs	r1, r2, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4403      	add	r3, r0
 8002ba4:	334c      	adds	r3, #76	; 0x4c
 8002ba6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335d      	adds	r3, #93	; 0x5d
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	3358      	adds	r3, #88	; 0x58
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2301      	movs	r3, #1
 8002be0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	333f      	adds	r3, #63	; 0x3f
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	333f      	adds	r3, #63	; 0x3f
 8002c08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d121      	bne.n	8002c52 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f876 	bl	8005d2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	6093      	str	r3, [r2, #8]
 8002c50:	e070      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	333f      	adds	r3, #63	; 0x3f
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d12a      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	0151      	lsls	r1, r2, #5
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	440a      	add	r2, r1
 8002c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c86:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	b2d8      	uxtb	r0, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f005 f9da 	bl	8008070 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cbc:	e03a      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	333f      	adds	r3, #63	; 0x3f
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d12f      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3350      	adds	r3, #80	; 0x50
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	f083 0301 	eor.w	r3, r3, #1
 8002cfe:	b2d8      	uxtb	r0, r3
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3350      	adds	r3, #80	; 0x50
 8002d10:	4602      	mov	r2, r0
 8002d12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	b2d8      	uxtb	r0, r3
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	335c      	adds	r3, #92	; 0x5c
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f005 f99e 	bl	8008070 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	3350      	adds	r3, #80	; 0x50
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	f083 0301 	eor.w	r3, r3, #1
 8002d4a:	b2d8      	uxtb	r0, r3
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3350      	adds	r3, #80	; 0x50
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	701a      	strb	r2, [r3, #0]
}
 8002d60:	e1f7      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f040 811a 	bne.w	8002fae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	0151      	lsls	r1, r2, #5
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	440a      	add	r2, r1
 8002d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	335d      	adds	r3, #93	; 0x5d
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10a      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e0d9      	b.n	8002f7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	335d      	adds	r3, #93	; 0x5d
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10a      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	335c      	adds	r3, #92	; 0x5c
 8002dec:	2205      	movs	r2, #5
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e0c3      	b.n	8002f7a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	335d      	adds	r3, #93	; 0x5d
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d00a      	beq.n	8002e1e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	335d      	adds	r3, #93	; 0x5d
 8002e18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d156      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3358      	adds	r3, #88	; 0x58
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c59      	adds	r1, r3, #1
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4403      	add	r3, r0
 8002e40:	3358      	adds	r3, #88	; 0x58
 8002e42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	3358      	adds	r3, #88	; 0x58
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d914      	bls.n	8002e84 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	3358      	adds	r3, #88	; 0x58
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	335c      	adds	r3, #92	; 0x5c
 8002e7e:	2204      	movs	r2, #4
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e009      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	335c      	adds	r3, #92	; 0x5c
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e056      	b.n	8002f7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	440b      	add	r3, r1
 8002eda:	335d      	adds	r3, #93	; 0x5d
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d123      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	335c      	adds	r3, #92	; 0x5c
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f0c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f14:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e027      	b.n	8002f7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	335d      	adds	r3, #93	; 0x5d
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b07      	cmp	r3, #7
 8002f3e:	d11c      	bne.n	8002f7a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3358      	adds	r3, #88	; 0x58
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4403      	add	r3, r0
 8002f62:	3358      	adds	r3, #88	; 0x58
 8002f64:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	2204      	movs	r2, #4
 8002f78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	2302      	movs	r3, #2
 8002f8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	b2d8      	uxtb	r0, r3
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	335c      	adds	r3, #92	; 0x5c
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f005 f862 	bl	8008070 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fac:	e0d1      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d13e      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3358      	adds	r3, #88	; 0x58
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4403      	add	r3, r0
 8003006:	3358      	adds	r3, #88	; 0x58
 8003008:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	335d      	adds	r3, #93	; 0x5d
 800301a:	2206      	movs	r2, #6
 800301c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fe7e 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	461a      	mov	r2, r3
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	6093      	str	r3, [r2, #8]
}
 8003040:	e087      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d17c      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	333f      	adds	r3, #63	; 0x3f
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d122      	bne.n	80030b4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3358      	adds	r3, #88	; 0x58
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	440a      	add	r2, r1
 8003098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fe3c 	bl	8005d2a <USB_HC_Halt>
 80030b2:	e045      	b.n	8003140 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	333f      	adds	r3, #63	; 0x3f
 80030da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d12f      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3358      	adds	r3, #88	; 0x58
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d121      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	335d      	adds	r3, #93	; 0x5d
 800310c:	2203      	movs	r2, #3
 800310e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	440a      	add	r2, r1
 8003126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f002 fdf5 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	2310      	movs	r3, #16
 8003150:	6093      	str	r3, [r2, #8]
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d119      	bne.n	80031be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	2304      	movs	r3, #4
 800319a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80031bc:	e33e      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d141      	bne.n	8003258 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	461a      	mov	r2, r3
 80031e2:	2320      	movs	r3, #32
 80031e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	333d      	adds	r3, #61	; 0x3d
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 831f 	bne.w	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	333d      	adds	r3, #61	; 0x3d
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	335c      	adds	r3, #92	; 0x5c
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fd6a 	bl	8005d2a <USB_HC_Halt>
}
 8003256:	e2f1      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d13f      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	335d      	adds	r3, #93	; 0x5d
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	333d      	adds	r3, #61	; 0x3d
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	3358      	adds	r3, #88	; 0x58
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	0151      	lsls	r1, r2, #5
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	440a      	add	r2, r1
 80032c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f002 fd28 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2340      	movs	r3, #64	; 0x40
 80032ea:	6093      	str	r3, [r2, #8]
}
 80032ec:	e2a6      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003304:	d122      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	440a      	add	r2, r1
 800331c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f002 fcfa 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003348:	6093      	str	r3, [r2, #8]
}
 800334a:	e277      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d135      	bne.n	80033ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	3358      	adds	r3, #88	; 0x58
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	0151      	lsls	r1, r2, #5
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	440a      	add	r2, r1
 800338c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fcc2 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	461a      	mov	r2, r3
 80033b4:	2301      	movs	r3, #1
 80033b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	440b      	add	r3, r1
 80033c6:	335d      	adds	r3, #93	; 0x5d
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
}
 80033cc:	e236      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d12b      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	461a      	mov	r2, r3
 80033f2:	2308      	movs	r3, #8
 80033f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	0151      	lsls	r1, r2, #5
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	440a      	add	r2, r1
 800340c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fc82 	bl	8005d2a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	335d      	adds	r3, #93	; 0x5d
 8003436:	2205      	movs	r2, #5
 8003438:	701a      	strb	r2, [r3, #0]
}
 800343a:	e1ff      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b10      	cmp	r3, #16
 8003450:	d155      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3358      	adds	r3, #88	; 0x58
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	335d      	adds	r3, #93	; 0x5d
 8003476:	2203      	movs	r2, #3
 8003478:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	333d      	adds	r3, #61	; 0x3d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d114      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	333c      	adds	r3, #60	; 0x3c
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	333d      	adds	r3, #61	; 0x3d
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fc20 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	6093      	str	r3, [r2, #8]
}
 80034fc:	e19e      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d12b      	bne.n	800356c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	440a      	add	r2, r1
 800352a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f002 fbf3 	bl	8005d2a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	335d      	adds	r3, #93	; 0x5d
 8003554:	2206      	movs	r2, #6
 8003556:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	461a      	mov	r2, r3
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	6093      	str	r3, [r2, #8]
}
 800356a:	e167      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d135      	bne.n	80035f0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	0151      	lsls	r1, r2, #5
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	440a      	add	r2, r1
 800359a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 fbbb 	bl	8005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	461a      	mov	r2, r3
 80035c2:	2310      	movs	r3, #16
 80035c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	335d      	adds	r3, #93	; 0x5d
 80035ea:	2208      	movs	r2, #8
 80035ec:	701a      	strb	r2, [r3, #0]
}
 80035ee:	e125      	b.n	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	f040 811a 	bne.w	800383c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	440a      	add	r2, r1
 800361e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003622:	f023 0302 	bic.w	r3, r3, #2
 8003626:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	335d      	adds	r3, #93	; 0x5d
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d137      	bne.n	80036ae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	335c      	adds	r3, #92	; 0x5c
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	333f      	adds	r3, #63	; 0x3f
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d00b      	beq.n	8003680 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	333f      	adds	r3, #63	; 0x3f
 8003678:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800367a:	2b03      	cmp	r3, #3
 800367c:	f040 80c5 	bne.w	800380a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	3351      	adds	r3, #81	; 0x51
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	f083 0301 	eor.w	r3, r3, #1
 8003696:	b2d8      	uxtb	r0, r3
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	3351      	adds	r3, #81	; 0x51
 80036a8:	4602      	mov	r2, r0
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e0ad      	b.n	800380a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	335d      	adds	r3, #93	; 0x5d
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d10a      	bne.n	80036da <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	335c      	adds	r3, #92	; 0x5c
 80036d4:	2202      	movs	r2, #2
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e097      	b.n	800380a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	335d      	adds	r3, #93	; 0x5d
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d10a      	bne.n	8003706 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	335c      	adds	r3, #92	; 0x5c
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e081      	b.n	800380a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	335d      	adds	r3, #93	; 0x5d
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d10a      	bne.n	8003732 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	335c      	adds	r3, #92	; 0x5c
 800372c:	2205      	movs	r2, #5
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e06b      	b.n	800380a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	335d      	adds	r3, #93	; 0x5d
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d00a      	beq.n	800375e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	335d      	adds	r3, #93	; 0x5d
 8003758:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800375a:	2b08      	cmp	r3, #8
 800375c:	d155      	bne.n	800380a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	3358      	adds	r3, #88	; 0x58
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4403      	add	r3, r0
 8003780:	3358      	adds	r3, #88	; 0x58
 8003782:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	3358      	adds	r3, #88	; 0x58
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d914      	bls.n	80037c4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3358      	adds	r3, #88	; 0x58
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	335c      	adds	r3, #92	; 0x5c
 80037be:	2204      	movs	r2, #4
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e009      	b.n	80037d8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	335c      	adds	r3, #92	; 0x5c
 80037d4:	2202      	movs	r2, #2
 80037d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003816:	461a      	mov	r2, r3
 8003818:	2302      	movs	r3, #2
 800381a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	b2d8      	uxtb	r0, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	335c      	adds	r3, #92	; 0x5c
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	4601      	mov	r1, r0
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f004 fc1a 	bl	8008070 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	0c5b      	lsrs	r3, r3, #17
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003878:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d003      	beq.n	8003888 <HCD_RXQLVL_IRQHandler+0x44>
 8003880:	2b05      	cmp	r3, #5
 8003882:	f000 8082 	beq.w	800398a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003886:	e083      	b.n	8003990 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d07f      	beq.n	800398e <HCD_RXQLVL_IRQHandler+0x14a>
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	3344      	adds	r3, #68	; 0x44
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d074      	beq.n	800398e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	3344      	adds	r3, #68	; 0x44
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	b292      	uxth	r2, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f001 fdd3 	bl	800546a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	3344      	adds	r3, #68	; 0x44
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	18d1      	adds	r1, r2, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4403      	add	r3, r0
 80038e8:	3344      	adds	r3, #68	; 0x44
 80038ea:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	334c      	adds	r3, #76	; 0x4c
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	18d1      	adds	r1, r2, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4403      	add	r3, r0
 8003910:	334c      	adds	r3, #76	; 0x4c
 8003912:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HCD_RXQLVL_IRQHandler+0x154>)
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d031      	beq.n	800398e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003940:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003948:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	3350      	adds	r3, #80	; 0x50
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2d8      	uxtb	r0, r3
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	3350      	adds	r3, #80	; 0x50
 8003984:	4602      	mov	r2, r0
 8003986:	701a      	strb	r2, [r3, #0]
      break;
 8003988:	e001      	b.n	800398e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800398e:	bf00      	nop
  }
}
 8003990:	bf00      	nop
 8003992:	3728      	adds	r7, #40	; 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	1ff80000 	.word	0x1ff80000

0800399c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d10b      	bne.n	80039ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d102      	bne.n	80039e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f004 fb2a 	bl	8008038 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d132      	bne.n	8003a5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d126      	bne.n	8003a56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d113      	bne.n	8003a38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1a:	d106      	bne.n	8003a2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fe5c 	bl	80056e0 <USB_InitFSLSPClkSel>
 8003a28:	e011      	b.n	8003a4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fe55 	bl	80056e0 <USB_InitFSLSPClkSel>
 8003a36:	e00a      	b.n	8003a4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a46:	461a      	mov	r2, r3
 8003a48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f004 fb1c 	bl	800808c <HAL_HCD_PortEnabled_Callback>
 8003a54:	e002      	b.n	8003a5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f004 fb26 	bl	80080a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d103      	bne.n	8003a6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6013      	str	r3, [r2, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e11f      	b.n	8003cd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fa9c 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f001 f9de 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8003aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a7b      	ldr	r2, [pc, #492]	; (8003ce0 <HAL_I2C_Init+0x25c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d807      	bhi.n	8003b08 <HAL_I2C_Init+0x84>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a7a      	ldr	r2, [pc, #488]	; (8003ce4 <HAL_I2C_Init+0x260>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e006      	b.n	8003b16 <HAL_I2C_Init+0x92>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a77      	ldr	r2, [pc, #476]	; (8003ce8 <HAL_I2C_Init+0x264>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0db      	b.n	8003cd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a72      	ldr	r2, [pc, #456]	; (8003cec <HAL_I2C_Init+0x268>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a64      	ldr	r2, [pc, #400]	; (8003ce0 <HAL_I2C_Init+0x25c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d802      	bhi.n	8003b58 <HAL_I2C_Init+0xd4>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3301      	adds	r3, #1
 8003b56:	e009      	b.n	8003b6c <HAL_I2C_Init+0xe8>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a63      	ldr	r2, [pc, #396]	; (8003cf0 <HAL_I2C_Init+0x26c>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4956      	ldr	r1, [pc, #344]	; (8003ce0 <HAL_I2C_Init+0x25c>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d80d      	bhi.n	8003ba8 <HAL_I2C_Init+0x124>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e59      	subs	r1, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	bf38      	it	cc
 8003ba4:	2304      	movcc	r3, #4
 8003ba6:	e04f      	b.n	8003c48 <HAL_I2C_Init+0x1c4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d111      	bne.n	8003bd4 <HAL_I2C_Init+0x150>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	440b      	add	r3, r1
 8003bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e012      	b.n	8003bfa <HAL_I2C_Init+0x176>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	0099      	lsls	r1, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Init+0x17e>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e022      	b.n	8003c48 <HAL_I2C_Init+0x1c4>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <HAL_I2C_Init+0x1a4>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1e58      	subs	r0, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	440b      	add	r3, r1
 8003c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c26:	e00f      	b.n	8003c48 <HAL_I2C_Init+0x1c4>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	0099      	lsls	r1, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6809      	ldr	r1, [r1, #0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6911      	ldr	r1, [r2, #16]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	4311      	orrs	r1, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	000186a0 	.word	0x000186a0
 8003ce4:	001e847f 	.word	0x001e847f
 8003ce8:	003d08ff 	.word	0x003d08ff
 8003cec:	431bde83 	.word	0x431bde83
 8003cf0:	10624dd3 	.word	0x10624dd3

08003cf4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e128      	b.n	8003f58 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a90      	ldr	r2, [pc, #576]	; (8003f60 <HAL_I2S_Init+0x26c>)
 8003d1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fd f9a9 	bl	8001078 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2202      	movs	r2, #2
 8003d48:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d060      	beq.n	8003e14 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d5a:	2310      	movs	r3, #16
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e001      	b.n	8003d64 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d802      	bhi.n	8003d72 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d72:	2001      	movs	r0, #1
 8003d74:	f001 f98e 	bl	8005094 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d78:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d82:	d125      	bne.n	8003dd0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	3305      	adds	r3, #5
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e01f      	b.n	8003dee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	3305      	adds	r3, #5
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e00e      	b.n	8003dee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	3305      	adds	r3, #5
 8003dec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4a5c      	ldr	r2, [pc, #368]	; (8003f64 <HAL_I2S_Init+0x270>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	08db      	lsrs	r3, r3, #3
 8003df8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e003      	b.n	8003e1c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e14:	2302      	movs	r3, #2
 8003e16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d902      	bls.n	8003e28 <HAL_I2S_Init+0x134>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2bff      	cmp	r3, #255	; 0xff
 8003e26:	d907      	bls.n	8003e38 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	f043 0210 	orr.w	r2, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e08f      	b.n	8003f58 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	ea42 0103 	orr.w	r1, r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e56:	f023 030f 	bic.w	r3, r3, #15
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6851      	ldr	r1, [r2, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68d2      	ldr	r2, [r2, #12]
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6992      	ldr	r2, [r2, #24]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d161      	bne.n	8003f48 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <HAL_I2S_Init+0x274>)
 8003e88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <HAL_I2S_Init+0x278>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_I2S_Init+0x1a4>
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_I2S_Init+0x27c>)
 8003e96:	e001      	b.n	8003e9c <HAL_I2S_Init+0x1a8>
 8003e98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4932      	ldr	r1, [pc, #200]	; (8003f6c <HAL_I2S_Init+0x278>)
 8003ea4:	428a      	cmp	r2, r1
 8003ea6:	d101      	bne.n	8003eac <HAL_I2S_Init+0x1b8>
 8003ea8:	4a31      	ldr	r2, [pc, #196]	; (8003f70 <HAL_I2S_Init+0x27c>)
 8003eaa:	e001      	b.n	8003eb0 <HAL_I2S_Init+0x1bc>
 8003eac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003eb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003eb4:	f023 030f 	bic.w	r3, r3, #15
 8003eb8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <HAL_I2S_Init+0x278>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2S_Init+0x1d4>
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_I2S_Init+0x27c>)
 8003ec6:	e001      	b.n	8003ecc <HAL_I2S_Init+0x1d8>
 8003ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ecc:	2202      	movs	r2, #2
 8003ece:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <HAL_I2S_Init+0x278>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_I2S_Init+0x1ea>
 8003eda:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_I2S_Init+0x27c>)
 8003edc:	e001      	b.n	8003ee2 <HAL_I2S_Init+0x1ee>
 8003ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eee:	d003      	beq.n	8003ef8 <HAL_I2S_Init+0x204>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	e001      	b.n	8003f04 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	b299      	uxth	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f1a:	4303      	orrs	r3, r0
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f22:	4313      	orrs	r3, r2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f30:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <HAL_I2S_Init+0x278>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2S_Init+0x24c>
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <HAL_I2S_Init+0x27c>)
 8003f3e:	e001      	b.n	8003f44 <HAL_I2S_Init+0x250>
 8003f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f44:	897a      	ldrh	r2, [r7, #10]
 8003f46:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	0800406b 	.word	0x0800406b
 8003f64:	cccccccd 	.word	0xcccccccd
 8003f68:	08004181 	.word	0x08004181
 8003f6c:	40003800 	.word	0x40003800
 8003f70:	40003400 	.word	0x40003400

08003f74 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10e      	bne.n	8004004 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ffb8 	bl	8003f74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	b292      	uxth	r2, r2
 8004020:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10e      	bne.n	8004062 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004052:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff93 	bl	8003f88 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b04      	cmp	r3, #4
 8004084:	d13a      	bne.n	80040fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d109      	bne.n	80040a4 <I2S_IRQHandler+0x3a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d102      	bne.n	80040a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ffb4 	bl	800400c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d126      	bne.n	80040fc <I2S_IRQHandler+0x92>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d11f      	bne.n	80040fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f043 0202 	orr.w	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff50 	bl	8003f9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b03      	cmp	r3, #3
 8004106:	d136      	bne.n	8004176 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d109      	bne.n	8004126 <I2S_IRQHandler+0xbc>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d102      	bne.n	8004126 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff45 	bl	8003fb0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d122      	bne.n	8004176 <I2S_IRQHandler+0x10c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b20      	cmp	r3, #32
 800413c:	d11b      	bne.n	8004176 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800414c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	f043 0204 	orr.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff13 	bl	8003f9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4aa2      	ldr	r2, [pc, #648]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800419a:	4ba2      	ldr	r3, [pc, #648]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800419c:	e001      	b.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800419e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a9b      	ldr	r2, [pc, #620]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041b8:	4b9a      	ldr	r3, [pc, #616]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041ba:	e001      	b.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041cc:	d004      	beq.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 8099 	bne.w	800430a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f925 	bl	800443c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d107      	bne.n	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f9c8 	bl	800459c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d13a      	bne.n	800428c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d035      	beq.n	800428c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a7e      	ldr	r2, [pc, #504]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800422a:	4b7e      	ldr	r3, [pc, #504]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800422c:	e001      	b.n	8004232 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800422e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4979      	ldr	r1, [pc, #484]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800423a:	428b      	cmp	r3, r1
 800423c:	d101      	bne.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800423e:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004240:	e001      	b.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004246:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800424a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800425a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f043 0202 	orr.w	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fe88 	bl	8003f9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	f040 80be 	bne.w	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80b8 	beq.w	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a59      	ldr	r2, [pc, #356]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042be:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042c0:	e001      	b.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4954      	ldr	r1, [pc, #336]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042ce:	428b      	cmp	r3, r1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042d2:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042d4:	e001      	b.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f043 0204 	orr.w	r2, r3, #4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fe4a 	bl	8003f9c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004308:	e084      	b.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d107      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8be 	bl	80044a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8fd 	bl	8004538 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d12f      	bne.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02a      	beq.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004360:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2e      	ldr	r2, [pc, #184]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d101      	bne.n	8004370 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800436e:	e001      	b.n	8004374 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4929      	ldr	r1, [pc, #164]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800437c:	428b      	cmp	r3, r1
 800437e:	d101      	bne.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004382:	e001      	b.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800438c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f043 0202 	orr.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fdfa 	bl	8003f9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d131      	bne.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02c      	beq.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043c8:	e001      	b.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4912      	ldr	r1, [pc, #72]	; (8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043d6:	428b      	cmp	r3, r1
 80043d8:	d101      	bne.n	80043de <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043dc:	e001      	b.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80043de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043f6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fdc5 	bl	8003f9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004412:	e000      	b.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004414:	bf00      	nop
}
 8004416:	bf00      	nop
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40003800 	.word	0x40003800
 8004424:	40003400 	.word	0x40003400

08004428 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c99      	adds	r1, r3, #2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6251      	str	r1, [r2, #36]	; 0x24
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800447c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ffc9 	bl	8004428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	1c99      	adds	r1, r3, #2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6251      	str	r1, [r2, #36]	; 0x24
 80044b2:	8819      	ldrh	r1, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <I2SEx_TxISR_I2SExt+0x90>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <I2SEx_TxISR_I2SExt+0x22>
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <I2SEx_TxISR_I2SExt+0x94>)
 80044c0:	e001      	b.n	80044c6 <I2SEx_TxISR_I2SExt+0x26>
 80044c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c6:	460a      	mov	r2, r1
 80044c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d121      	bne.n	8004526 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a12      	ldr	r2, [pc, #72]	; (8004530 <I2SEx_TxISR_I2SExt+0x90>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <I2SEx_TxISR_I2SExt+0x50>
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <I2SEx_TxISR_I2SExt+0x94>)
 80044ee:	e001      	b.n	80044f4 <I2SEx_TxISR_I2SExt+0x54>
 80044f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	490d      	ldr	r1, [pc, #52]	; (8004530 <I2SEx_TxISR_I2SExt+0x90>)
 80044fc:	428b      	cmp	r3, r1
 80044fe:	d101      	bne.n	8004504 <I2SEx_TxISR_I2SExt+0x64>
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <I2SEx_TxISR_I2SExt+0x94>)
 8004502:	e001      	b.n	8004508 <I2SEx_TxISR_I2SExt+0x68>
 8004504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004508:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800450c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff81 	bl	8004428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40003800 	.word	0x40003800
 8004534:	40003400 	.word	0x40003400

08004538 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68d8      	ldr	r0, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	1c99      	adds	r1, r3, #2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004550:	b282      	uxth	r2, r0
 8004552:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d113      	bne.n	8004594 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800457a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff4a 	bl	8004428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <I2SEx_RxISR_I2SExt+0x90>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <I2SEx_RxISR_I2SExt+0x16>
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <I2SEx_RxISR_I2SExt+0x94>)
 80045b0:	e001      	b.n	80045b6 <I2SEx_RxISR_I2SExt+0x1a>
 80045b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b6:	68d8      	ldr	r0, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	1c99      	adds	r1, r3, #2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045c2:	b282      	uxth	r2, r0
 80045c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d121      	bne.n	8004622 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <I2SEx_RxISR_I2SExt+0x90>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <I2SEx_RxISR_I2SExt+0x50>
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <I2SEx_RxISR_I2SExt+0x94>)
 80045ea:	e001      	b.n	80045f0 <I2SEx_RxISR_I2SExt+0x54>
 80045ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	490d      	ldr	r1, [pc, #52]	; (800462c <I2SEx_RxISR_I2SExt+0x90>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d101      	bne.n	8004600 <I2SEx_RxISR_I2SExt+0x64>
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <I2SEx_RxISR_I2SExt+0x94>)
 80045fe:	e001      	b.n	8004604 <I2SEx_RxISR_I2SExt+0x68>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004608:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff03 	bl	8004428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40003800 	.word	0x40003800
 8004630:	40003400 	.word	0x40003400

08004634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e25b      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d075      	beq.n	800473e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004652:	4ba3      	ldr	r3, [pc, #652]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b04      	cmp	r3, #4
 800465c:	d00c      	beq.n	8004678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465e:	4ba0      	ldr	r3, [pc, #640]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004666:	2b08      	cmp	r3, #8
 8004668:	d112      	bne.n	8004690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b9d      	ldr	r3, [pc, #628]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004676:	d10b      	bne.n	8004690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	4b99      	ldr	r3, [pc, #612]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05b      	beq.n	800473c <HAL_RCC_OscConfig+0x108>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d157      	bne.n	800473c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e236      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_OscConfig+0x74>
 800469a:	4b91      	ldr	r3, [pc, #580]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a90      	ldr	r2, [pc, #576]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0xb0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x98>
 80046b2:	4b8b      	ldr	r3, [pc, #556]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a8a      	ldr	r2, [pc, #552]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a87      	ldr	r2, [pc, #540]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0xb0>
 80046cc:	4b84      	ldr	r3, [pc, #528]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a83      	ldr	r2, [pc, #524]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a80      	ldr	r2, [pc, #512]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fc fe7e 	bl	80013ec <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fc fe7a 	bl	80013ec <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1fb      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0xc0>
 8004712:	e014      	b.n	800473e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fc fe6a 	bl	80013ec <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471c:	f7fc fe66 	bl	80013ec <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e1e7      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0xe8>
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800474a:	4b65      	ldr	r3, [pc, #404]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004756:	4b62      	ldr	r3, [pc, #392]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475e:	2b08      	cmp	r3, #8
 8004760:	d11c      	bne.n	800479c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b5f      	ldr	r3, [pc, #380]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4b5c      	ldr	r3, [pc, #368]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x152>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1bb      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	4b56      	ldr	r3, [pc, #344]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4952      	ldr	r1, [pc, #328]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	e03a      	b.n	8004812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a4:	4b4f      	ldr	r3, [pc, #316]	; (80048e4 <HAL_RCC_OscConfig+0x2b0>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fc fe1f 	bl	80013ec <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fc fe1b 	bl	80013ec <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e19c      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b43      	ldr	r3, [pc, #268]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4940      	ldr	r1, [pc, #256]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <HAL_RCC_OscConfig+0x2b0>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fc fdfe 	bl	80013ec <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fc fdfa 	bl	80013ec <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e17b      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d030      	beq.n	8004880 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_RCC_OscConfig+0x2b4>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fc fdde 	bl	80013ec <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004834:	f7fc fdda 	bl	80013ec <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e15b      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x200>
 8004852:	e015      	b.n	8004880 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCC_OscConfig+0x2b4>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485a:	f7fc fdc7 	bl	80013ec <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004862:	f7fc fdc3 	bl	80013ec <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e144      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f0      	bne.n	8004862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80a0 	beq.w	80049ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004892:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_OscConfig+0x2b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d121      	bne.n	800490e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_RCC_OscConfig+0x2b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <HAL_RCC_OscConfig+0x2b8>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d6:	f7fc fd89 	bl	80013ec <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	e011      	b.n	8004902 <HAL_RCC_OscConfig+0x2ce>
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	42470000 	.word	0x42470000
 80048e8:	42470e80 	.word	0x42470e80
 80048ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f0:	f7fc fd7c 	bl	80013ec <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0fd      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b81      	ldr	r3, [pc, #516]	; (8004b08 <HAL_RCC_OscConfig+0x4d4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x2f0>
 8004916:	4b7d      	ldr	r3, [pc, #500]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a7c      	ldr	r2, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
 8004922:	e01c      	b.n	800495e <HAL_RCC_OscConfig+0x32a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d10c      	bne.n	8004946 <HAL_RCC_OscConfig+0x312>
 800492c:	4b77      	ldr	r3, [pc, #476]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	4a76      	ldr	r2, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6713      	str	r3, [r2, #112]	; 0x70
 8004938:	4b74      	ldr	r3, [pc, #464]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	4a73      	ldr	r2, [pc, #460]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6713      	str	r3, [r2, #112]	; 0x70
 8004944:	e00b      	b.n	800495e <HAL_RCC_OscConfig+0x32a>
 8004946:	4b71      	ldr	r3, [pc, #452]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a70      	ldr	r2, [pc, #448]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a6d      	ldr	r2, [pc, #436]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004958:	f023 0304 	bic.w	r3, r3, #4
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d015      	beq.n	8004992 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fc fd41 	bl	80013ec <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fc fd3d 	bl	80013ec <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	; 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0bc      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ee      	beq.n	800496e <HAL_RCC_OscConfig+0x33a>
 8004990:	e014      	b.n	80049bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004992:	f7fc fd2b 	bl	80013ec <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fc fd27 	bl	80013ec <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e0a6      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ee      	bne.n	800499a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c2:	4b52      	ldr	r3, [pc, #328]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a51      	ldr	r2, [pc, #324]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 80049c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8092 	beq.w	8004afc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d8:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d05c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d141      	bne.n	8004a70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <HAL_RCC_OscConfig+0x4dc>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fc fcfb 	bl	80013ec <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fc fcf7 	bl	80013ec <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e078      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0c:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	019b      	lsls	r3, r3, #6
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	4933      	ldr	r1, [pc, #204]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a42:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <HAL_RCC_OscConfig+0x4dc>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fc fcd0 	bl	80013ec <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fc fccc 	bl	80013ec <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e04d      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x41c>
 8004a6e:	e045      	b.n	8004afc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_OscConfig+0x4dc>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a76:	f7fc fcb9 	bl	80013ec <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fc fcb5 	bl	80013ec <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e036      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a90:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x44a>
 8004a9c:	e02e      	b.n	8004afc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e029      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_RCC_OscConfig+0x4d8>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d11c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d115      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	42470060 	.word	0x42470060

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0cc      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d90c      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b8      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	494d      	ldr	r1, [pc, #308]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d044      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e067      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4934      	ldr	r1, [pc, #208]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fc fbf2 	bl	80013ec <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7fc fbee 	bl	80013ec <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20c      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4916      	ldr	r1, [pc, #88]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	490e      	ldr	r1, [pc, #56]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c9a:	f000 f821 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	4601      	mov	r1, r0
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cac:	5cd3      	ldrb	r3, [r2, r3]
 8004cae:	fa21 f303 	lsr.w	r3, r1, r3
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fb52 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	080086c0 	.word	0x080086c0
 8004cd8:	20000090 	.word	0x20000090
 8004cdc:	20000094 	.word	0x20000094

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf6:	4b63      	ldr	r3, [pc, #396]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d007      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x32>
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d008      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x38>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 80b4 	bne.w	8004e74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d0e:	60bb      	str	r3, [r7, #8]
       break;
 8004d10:	e0b3      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d12:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d14:	60bb      	str	r3, [r7, #8]
      break;
 8004d16:	e0b0      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d18:	4b5a      	ldr	r3, [pc, #360]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d22:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04a      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	f04f 0400 	mov.w	r4, #0
 8004d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	ea03 0501 	and.w	r5, r3, r1
 8004d44:	ea04 0602 	and.w	r6, r4, r2
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f04f 0400 	mov.w	r4, #0
 8004d54:	0154      	lsls	r4, r2, #5
 8004d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d5a:	014b      	lsls	r3, r1, #5
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4622      	mov	r2, r4
 8004d60:	1b49      	subs	r1, r1, r5
 8004d62:	eb62 0206 	sbc.w	r2, r2, r6
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f04f 0400 	mov.w	r4, #0
 8004d6e:	0194      	lsls	r4, r2, #6
 8004d70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d74:	018b      	lsls	r3, r1, #6
 8004d76:	1a5b      	subs	r3, r3, r1
 8004d78:	eb64 0402 	sbc.w	r4, r4, r2
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	00e2      	lsls	r2, r4, #3
 8004d86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d8a:	00d9      	lsls	r1, r3, #3
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4614      	mov	r4, r2
 8004d90:	195b      	adds	r3, r3, r5
 8004d92:	eb44 0406 	adc.w	r4, r4, r6
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	0262      	lsls	r2, r4, #9
 8004da0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004da4:	0259      	lsls	r1, r3, #9
 8004da6:	460b      	mov	r3, r1
 8004da8:	4614      	mov	r4, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	4621      	mov	r1, r4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f04f 0400 	mov.w	r4, #0
 8004db4:	461a      	mov	r2, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	f7fb fa06 	bl	80001c8 <__aeabi_uldivmod>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e049      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	f04f 0400 	mov.w	r4, #0
 8004dce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	ea03 0501 	and.w	r5, r3, r1
 8004dda:	ea04 0602 	and.w	r6, r4, r2
 8004dde:	4629      	mov	r1, r5
 8004de0:	4632      	mov	r2, r6
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	0154      	lsls	r4, r2, #5
 8004dec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004df0:	014b      	lsls	r3, r1, #5
 8004df2:	4619      	mov	r1, r3
 8004df4:	4622      	mov	r2, r4
 8004df6:	1b49      	subs	r1, r1, r5
 8004df8:	eb62 0206 	sbc.w	r2, r2, r6
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	f04f 0400 	mov.w	r4, #0
 8004e04:	0194      	lsls	r4, r2, #6
 8004e06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e0a:	018b      	lsls	r3, r1, #6
 8004e0c:	1a5b      	subs	r3, r3, r1
 8004e0e:	eb64 0402 	sbc.w	r4, r4, r2
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	00e2      	lsls	r2, r4, #3
 8004e1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e20:	00d9      	lsls	r1, r3, #3
 8004e22:	460b      	mov	r3, r1
 8004e24:	4614      	mov	r4, r2
 8004e26:	195b      	adds	r3, r3, r5
 8004e28:	eb44 0406 	adc.w	r4, r4, r6
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	02a2      	lsls	r2, r4, #10
 8004e36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e3a:	0299      	lsls	r1, r3, #10
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4614      	mov	r4, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	4621      	mov	r1, r4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f04f 0400 	mov.w	r4, #0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	f7fb f9bb 	bl	80001c8 <__aeabi_uldivmod>
 8004e52:	4603      	mov	r3, r0
 8004e54:	460c      	mov	r4, r1
 8004e56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	3301      	adds	r3, #1
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	60bb      	str	r3, [r7, #8]
      break;
 8004e72:	e002      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e76:	60bb      	str	r3, [r7, #8]
      break;
 8004e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	00f42400 	.word	0x00f42400
 8004e8c:	007a1200 	.word	0x007a1200

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000090 	.word	0x20000090

08004ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eac:	f7ff fff0 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0a9b      	lsrs	r3, r3, #10
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	080086d0 	.word	0x080086d0

08004ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d035      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef8:	4b62      	ldr	r3, [pc, #392]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004efe:	f7fc fa75 	bl	80013ec <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f06:	f7fc fa71 	bl	80013ec <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e0b0      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f18:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	019a      	lsls	r2, r3, #6
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	071b      	lsls	r3, r3, #28
 8004f30:	4955      	ldr	r1, [pc, #340]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f38:	4b52      	ldr	r3, [pc, #328]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f3e:	f7fc fa55 	bl	80013ec <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f46:	f7fc fa51 	bl	80013ec <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e090      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f58:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8083 	beq.w	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	4b44      	ldr	r3, [pc, #272]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	4a43      	ldr	r2, [pc, #268]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6413      	str	r3, [r2, #64]	; 0x40
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a3e      	ldr	r2, [pc, #248]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9a:	f7fc fa27 	bl	80013ec <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fa2:	f7fc fa23 	bl	80013ec <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e062      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fb4:	4b35      	ldr	r3, [pc, #212]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fc0:	4b31      	ldr	r3, [pc, #196]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d02f      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d028      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fe8:	4b29      	ldr	r3, [pc, #164]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fee:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ff4:	4a24      	ldr	r2, [pc, #144]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ffa:	4b23      	ldr	r3, [pc, #140]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d114      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005006:	f7fc f9f1 	bl	80013ec <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	e00a      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fc f9ed 	bl	80013ec <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e02a      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005024:	4b18      	ldr	r3, [pc, #96]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ee      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503c:	d10d      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	490d      	ldr	r1, [pc, #52]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]
 8005058:	e005      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005060:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005064:	6093      	str	r3, [r2, #8]
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005068:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005072:	4905      	ldr	r1, [pc, #20]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	42470068 	.word	0x42470068
 8005088:	40023800 	.word	0x40023800
 800508c:	40007000 	.word	0x40007000
 8005090:	42470e40 	.word	0x42470e40

08005094 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d13d      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050b2:	4b22      	ldr	r3, [pc, #136]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d12f      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050c6:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050c8:	617b      	str	r3, [r7, #20]
          break;
 80050ca:	e02f      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d8:	d108      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050da:	4b18      	ldr	r3, [pc, #96]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	e007      	b.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050ec:	4b13      	ldr	r3, [pc, #76]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f4:	4a14      	ldr	r2, [pc, #80]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005116:	0f1b      	lsrs	r3, r3, #28
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	617b      	str	r3, [r7, #20]
          break;
 8005124:	e002      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
          break;
 800512a:	bf00      	nop
        }
      }
      break;
 800512c:	bf00      	nop
    }
  }
  return frequency;
 800512e:	697b      	ldr	r3, [r7, #20]
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40023800 	.word	0x40023800
 8005140:	00bb8000 	.word	0x00bb8000
 8005144:	007a1200 	.word	0x007a1200
 8005148:	00f42400 	.word	0x00f42400

0800514c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e056      	b.n	800520c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7fb ffe5 	bl	8001148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005194:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	ea42 0103 	orr.w	r1, r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	f003 0104 	and.w	r1, r3, #4
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69da      	ldr	r2, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 001c 	add.w	r0, r7, #28
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	d122      	bne.n	8005272 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f94a 	bl	8005500 <USB_CoreReset>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e01a      	b.n	80052a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f93e 	bl	8005500 <USB_CoreReset>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
 800529a:	e005      	b.n	80052a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10b      	bne.n	80052c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f043 0206 	orr.w	r2, r3, #6
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d2:	b004      	add	sp, #16
 80052d4:	4770      	bx	lr

080052d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 0201 	bic.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d106      	bne.n	8005346 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	e00b      	b.n	800535e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
 8005358:	e001      	b.n	800535e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e003      	b.n	8005366 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800535e:	2032      	movs	r0, #50	; 0x32
 8005360:	f7fc f850 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a09      	ldr	r2, [pc, #36]	; (80053b8 <USB_FlushTxFifo+0x48>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e006      	b.n	80053aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d0f0      	beq.n	800538a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2210      	movs	r2, #16
 80053cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a09      	ldr	r2, [pc, #36]	; (80053fc <USB_FlushRxFifo+0x40>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e006      	b.n	80053ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d0f0      	beq.n	80053ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	00030d40 	.word	0x00030d40

08005400 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	460b      	mov	r3, r1
 8005410:	71fb      	strb	r3, [r7, #7]
 8005412:	4613      	mov	r3, r2
 8005414:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800541e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d11a      	bne.n	800545c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005426:	88bb      	ldrh	r3, [r7, #4]
 8005428:	3303      	adds	r3, #3
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e00f      	b.n	8005454 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	031a      	lsls	r2, r3, #12
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005440:	461a      	mov	r2, r3
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3304      	adds	r3, #4
 800544c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	3301      	adds	r3, #1
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	429a      	cmp	r2, r3
 800545a:	d3eb      	bcc.n	8005434 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3724      	adds	r7, #36	; 0x24
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800546a:	b480      	push	{r7}
 800546c:	b089      	sub	sp, #36	; 0x24
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	4613      	mov	r3, r2
 8005476:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	3303      	adds	r3, #3
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e00b      	b.n	80054a6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	601a      	str	r2, [r3, #0]
    pDest++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3304      	adds	r3, #4
 800549e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3ef      	bcc.n	800548e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80054ae:	69fb      	ldr	r3, [r7, #28]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054d4:	68fb      	ldr	r3, [r7, #12]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <USB_CoreReset+0x64>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e01b      	b.n	8005556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	daf2      	bge.n	800550c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <USB_CoreReset+0x64>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e006      	b.n	8005556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d0f0      	beq.n	8005536 <USB_CoreReset+0x36>

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	00030d40 	.word	0x00030d40

08005568 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005568:	b084      	sub	sp, #16
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	f107 001c 	add.w	r0, r7, #28
 8005576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005584:	461a      	mov	r2, r3
 8005586:	2300      	movs	r3, #0
 8005588:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d018      	beq.n	80055ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10a      	bne.n	80055d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ce:	f043 0304 	orr.w	r3, r3, #4
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e014      	b.n	8005600 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e009      	b.n	8005600 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fa:	f023 0304 	bic.w	r3, r3, #4
 80055fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005600:	2110      	movs	r1, #16
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff feb4 	bl	8005370 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fed7 	bl	80053bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e015      	b.n	8005640 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	461a      	mov	r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d3e5      	bcc.n	8005614 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005648:	2101      	movs	r1, #1
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8ac 	bl	80057a8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005650:	20c8      	movs	r0, #200	; 0xc8
 8005652:	f7fb fed7 	bl	8001404 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f04f 32ff 	mov.w	r2, #4294967295
 8005662:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a14      	ldr	r2, [pc, #80]	; (80056cc <USB_HostInit+0x164>)
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <USB_HostInit+0x168>)
 8005682:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005686:	e009      	b.n	800569c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <USB_HostInit+0x16c>)
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <USB_HostInit+0x170>)
 8005698:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f043 0210 	orr.w	r2, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <USB_HostInit+0x174>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c6:	b004      	add	sp, #16
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	01000200 	.word	0x01000200
 80056d0:	00e00300 	.word	0x00e00300
 80056d4:	00600080 	.word	0x00600080
 80056d8:	004000e0 	.word	0x004000e0
 80056dc:	a3200008 	.word	0xa3200008

080056e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d107      	bne.n	8005732 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005728:	461a      	mov	r2, r3
 800572a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800572e:	6053      	str	r3, [r2, #4]
 8005730:	e009      	b.n	8005746 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d106      	bne.n	8005746 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573e:	461a      	mov	r2, r3
 8005740:	f241 7370 	movw	r3, #6000	; 0x1770
 8005744:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005774:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800577e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005782:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005784:	2064      	movs	r0, #100	; 0x64
 8005786:	f7fb fe3d 	bl	8001404 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005796:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005798:	200a      	movs	r0, #10
 800579a:	f7fb fe33 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <USB_DriveVbus+0x44>
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d106      	bne.n	80057ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d109      	bne.n	800580c <USB_DriveVbus+0x64>
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800580a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	0c5b      	lsrs	r3, r3, #17
 8005838:	f003 0303 	and.w	r3, r3, #3
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	b29b      	uxth	r3, r3
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	4603      	mov	r3, r0
 800587c:	70fb      	strb	r3, [r7, #3]
 800587e:	460b      	mov	r3, r1
 8005880:	70bb      	strb	r3, [r7, #2]
 8005882:	4613      	mov	r3, r2
 8005884:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589a:	461a      	mov	r2, r3
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80058a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d87e      	bhi.n	80059a8 <USB_HC_Init+0x13c>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <USB_HC_Init+0x44>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058c1 	.word	0x080058c1
 80058b4:	0800596b 	.word	0x0800596b
 80058b8:	080058c1 	.word	0x080058c1
 80058bc:	0800592d 	.word	0x0800592d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058cc:	461a      	mov	r2, r3
 80058ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80058d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80058d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	da10      	bge.n	80058fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80058fc:	e057      	b.n	80059ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d051      	beq.n	80059ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	440a      	add	r2, r1
 8005920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005924:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005928:	60d3      	str	r3, [r2, #12]
      break;
 800592a:	e040      	b.n	80059ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4413      	add	r3, r2
 8005934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005938:	461a      	mov	r2, r3
 800593a:	f240 639d 	movw	r3, #1693	; 0x69d
 800593e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005940:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005944:	2b00      	cmp	r3, #0
 8005946:	da34      	bge.n	80059b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	440a      	add	r2, r1
 800595e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005966:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005968:	e023      	b.n	80059b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	f240 2325 	movw	r3, #549	; 0x225
 800597c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800597e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005982:	2b00      	cmp	r3, #0
 8005984:	da17      	bge.n	80059b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	440a      	add	r2, r1
 800599c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059a6:	e006      	b.n	80059b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
      break;
 80059ac:	e004      	b.n	80059b8 <USB_HC_Init+0x14c>
      break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <USB_HC_Init+0x14c>
      break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <USB_HC_Init+0x14c>
      break;
 80059b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	2101      	movs	r1, #1
 80059c8:	fa01 f303 	lsl.w	r3, r1, r3
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059d2:	4313      	orrs	r3, r2
 80059d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80059e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da03      	bge.n	80059f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e001      	b.n	80059f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80059f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d103      	bne.n	8005a06 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80059fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e001      	b.n	8005a0a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a0a:	787b      	ldrb	r3, [r7, #1]
 8005a0c:	059b      	lsls	r3, r3, #22
 8005a0e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a12:	78bb      	ldrb	r3, [r7, #2]
 8005a14:	02db      	lsls	r3, r3, #11
 8005a16:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a1a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a20:	049b      	lsls	r3, r3, #18
 8005a22:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a26:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	0159      	lsls	r1, r3, #5
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	440b      	add	r3, r1
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a46:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005a48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d10f      	bne.n	8005a70 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08c      	sub	sp, #48	; 0x30
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d028      	beq.n	8005afc <USB_HC_StartXfer+0x7c>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d124      	bne.n	8005afc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <USB_HC_StartXfer+0x50>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	795b      	ldrb	r3, [r3, #5]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fa2e 	bl	8005f28 <USB_DoPing>
      return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e112      	b.n	8005cf6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d112      	bne.n	8005afc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	6a3a      	ldr	r2, [r7, #32]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005af0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005af4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2200      	movs	r2, #0
 8005afa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d018      	beq.n	8005b36 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	8912      	ldrh	r2, [r2, #8]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	8912      	ldrh	r2, [r2, #8]
 8005b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b18:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005b1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b1c:	8b7b      	ldrh	r3, [r7, #26]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d90b      	bls.n	8005b3a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005b22:	8b7b      	ldrh	r3, [r7, #26]
 8005b24:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	8912      	ldrh	r2, [r2, #8]
 8005b2c:	fb02 f203 	mul.w	r2, r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	e001      	b.n	8005b3a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005b36:	2301      	movs	r3, #1
 8005b38:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	78db      	ldrb	r3, [r3, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	8912      	ldrh	r2, [r2, #8]
 8005b48:	fb02 f203 	mul.w	r2, r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b5a:	04d9      	lsls	r1, r3, #19
 8005b5c:	4b68      	ldr	r3, [pc, #416]	; (8005d00 <USB_HC_StartXfer+0x280>)
 8005b5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	7a9b      	ldrb	r3, [r3, #10]
 8005b66:	075b      	lsls	r3, r3, #29
 8005b68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b6c:	69f9      	ldr	r1, [r7, #28]
 8005b6e:	0148      	lsls	r0, r1, #5
 8005b70:	6a39      	ldr	r1, [r7, #32]
 8005b72:	4401      	add	r1, r0
 8005b74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68d9      	ldr	r1, [r3, #12]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	460a      	mov	r2, r1
 8005b94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bcc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	7e7b      	ldrb	r3, [r7, #25]
 8005bde:	075b      	lsls	r3, r3, #29
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	0148      	lsls	r0, r1, #5
 8005be4:	6a39      	ldr	r1, [r7, #32]
 8005be6:	4401      	add	r1, r0
 8005be8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a41      	ldr	r2, [pc, #260]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c00:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c02:	4b40      	ldr	r3, [pc, #256]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c0a:	4a3e      	ldr	r2, [pc, #248]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c0c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	78db      	ldrb	r3, [r3, #3]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d006      	beq.n	8005c24 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c16:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1e:	4a39      	ldr	r2, [pc, #228]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e005      	b.n	8005c30 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c2c:	4a35      	ldr	r2, [pc, #212]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c2e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	4a32      	ldr	r2, [pc, #200]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c3a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <USB_HC_StartXfer+0x284>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d14e      	bne.n	8005cf4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	78db      	ldrb	r3, [r3, #3]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d14a      	bne.n	8005cf4 <USB_HC_StartXfer+0x274>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d046      	beq.n	8005cf4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	79db      	ldrb	r3, [r3, #7]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d830      	bhi.n	8005cd0 <USB_HC_StartXfer+0x250>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <USB_HC_StartXfer+0x1f4>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005c85 	.word	0x08005c85
 8005c80:	08005ca9 	.word	0x08005ca9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	3303      	adds	r3, #3
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c8e:	8afa      	ldrh	r2, [r7, #22]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d91c      	bls.n	8005cd4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	619a      	str	r2, [r3, #24]
          }
          break;
 8005ca6:	e015      	b.n	8005cd4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	3303      	adds	r3, #3
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005cb2:	8afa      	ldrh	r2, [r7, #22]
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90a      	bls.n	8005cd8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	619a      	str	r2, [r3, #24]
          }
          break;
 8005cce:	e003      	b.n	8005cd8 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005cd0:	bf00      	nop
 8005cd2:	e002      	b.n	8005cda <USB_HC_StartXfer+0x25a>
          break;
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <USB_HC_StartXfer+0x25a>
          break;
 8005cd8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	68d9      	ldr	r1, [r3, #12]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	785a      	ldrb	r2, [r3, #1]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	b298      	uxth	r0, r3
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4603      	mov	r3, r0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fb86 	bl	8005400 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3728      	adds	r7, #40	; 0x28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	1ff80000 	.word	0x1ff80000
 8005d04:	20000140 	.word	0x20000140

08005d08 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	b29b      	uxth	r3, r3
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	0c9b      	lsrs	r3, r3, #18
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <USB_HC_Halt+0x3a>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d16c      	bne.n	8005e3e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d82:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d143      	bne.n	8005e18 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3301      	adds	r3, #1
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dfc:	d81d      	bhi.n	8005e3a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e14:	d0ec      	beq.n	8005df0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e16:	e080      	b.n	8005f1a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e38:	e06f      	b.n	8005f1a <USB_HC_Halt+0x1f0>
          break;
 8005e3a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e3c:	e06d      	b.n	8005f1a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e5c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d143      	bne.n	8005ef6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e8c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ecc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eda:	d81d      	bhi.n	8005f18 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef2:	d0ec      	beq.n	8005ece <USB_HC_Halt+0x1a4>
 8005ef4:	e011      	b.n	8005f1a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e000      	b.n	8005f1a <USB_HC_Halt+0x1f0>
          break;
 8005f18:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	04da      	lsls	r2, r3, #19
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <USB_DoPing+0x74>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	461a      	mov	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	1ff80000 	.word	0x1ff80000

08005fa0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff f9a1 	bl	80052f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005fb6:	2110      	movs	r1, #16
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff f9d9 	bl	8005370 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff f9fc 	bl	80053bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	e01f      	b.n	800600a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ff0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	461a      	mov	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3301      	adds	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b0f      	cmp	r3, #15
 800600e:	d9dc      	bls.n	8005fca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	e034      	b.n	8006080 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006034:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800603c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	461a      	mov	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3301      	adds	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605c:	d80c      	bhi.n	8006078 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006074:	d0ec      	beq.n	8006050 <USB_StopHost+0xb0>
 8006076:	e000      	b.n	800607a <USB_StopHost+0xda>
        break;
 8006078:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b0f      	cmp	r3, #15
 8006084:	d9c7      	bls.n	8006016 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608c:	461a      	mov	r2, r3
 800608e:	f04f 33ff 	mov.w	r3, #4294967295
 8006092:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff f91a 	bl	80052d6 <USB_EnableGlobalInt>

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060ac:	b590      	push	{r4, r7, lr}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060b4:	2301      	movs	r3, #1
 80060b6:	2202      	movs	r2, #2
 80060b8:	2102      	movs	r1, #2
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fc68 	bl	8006990 <USBH_FindInterface>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2bff      	cmp	r3, #255	; 0xff
 80060c8:	d002      	beq.n	80060d0 <USBH_CDC_InterfaceInit+0x24>
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d901      	bls.n	80060d4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060d0:	2302      	movs	r3, #2
 80060d2:	e13d      	b.n	8006350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fc3d 	bl	8006958 <USBH_SelectInterface>
 80060de:	4603      	mov	r3, r0
 80060e0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80060e8:	2302      	movs	r3, #2
 80060ea:	e131      	b.n	8006350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80060f2:	2050      	movs	r0, #80	; 0x50
 80060f4:	f002 fa04 	bl	8008500 <malloc>
 80060f8:	4603      	mov	r3, r0
 80060fa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800610c:	2302      	movs	r3, #2
 800610e:	e11f      	b.n	8006350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006110:	2250      	movs	r2, #80	; 0x50
 8006112:	2100      	movs	r1, #0
 8006114:	68b8      	ldr	r0, [r7, #8]
 8006116:	f002 fa03 	bl	8008520 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	211a      	movs	r1, #26
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	4413      	add	r3, r2
 8006126:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	b25b      	sxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	da15      	bge.n	800615e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	211a      	movs	r1, #26
 8006138:	fb01 f303 	mul.w	r3, r1, r3
 800613c:	4413      	add	r3, r2
 800613e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	211a      	movs	r1, #26
 800614e:	fb01 f303 	mul.w	r3, r1, r3
 8006152:	4413      	add	r3, r2
 8006154:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006158:	881a      	ldrh	r2, [r3, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fe36 	bl	8007dd6 <USBH_AllocPipe>
 800616a:	4603      	mov	r3, r0
 800616c:	461a      	mov	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	7819      	ldrb	r1, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	7858      	ldrb	r0, [r3, #1]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	8952      	ldrh	r2, [r2, #10]
 800618a:	9202      	str	r2, [sp, #8]
 800618c:	2203      	movs	r2, #3
 800618e:	9201      	str	r2, [sp, #4]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4623      	mov	r3, r4
 8006194:	4602      	mov	r2, r0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fdee 	bl	8007d78 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2200      	movs	r2, #0
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f002 f8fb 	bl	80083a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80061aa:	2300      	movs	r3, #0
 80061ac:	2200      	movs	r2, #0
 80061ae:	210a      	movs	r1, #10
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fbed 	bl	8006990 <USBH_FindInterface>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2bff      	cmp	r3, #255	; 0xff
 80061be:	d002      	beq.n	80061c6 <USBH_CDC_InterfaceInit+0x11a>
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d901      	bls.n	80061ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061c6:	2302      	movs	r3, #2
 80061c8:	e0c2      	b.n	8006350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	211a      	movs	r1, #26
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b25b      	sxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da16      	bge.n	8006210 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	211a      	movs	r1, #26
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	211a      	movs	r1, #26
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	835a      	strh	r2, [r3, #26]
 800620e:	e015      	b.n	800623c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	211a      	movs	r1, #26
 8006216:	fb01 f303 	mul.w	r3, r1, r3
 800621a:	4413      	add	r3, r2
 800621c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	211a      	movs	r1, #26
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	4413      	add	r3, r2
 8006232:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006236:	881a      	ldrh	r2, [r3, #0]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	211a      	movs	r1, #26
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	f203 3356 	addw	r3, r3, #854	; 0x356
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b25b      	sxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	da16      	bge.n	8006282 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	211a      	movs	r1, #26
 800625a:	fb01 f303 	mul.w	r3, r1, r3
 800625e:	4413      	add	r3, r2
 8006260:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	211a      	movs	r1, #26
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800627a:	881a      	ldrh	r2, [r3, #0]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	835a      	strh	r2, [r3, #26]
 8006280:	e015      	b.n	80062ae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	211a      	movs	r1, #26
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	4413      	add	r3, r2
 800628e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006292:	781a      	ldrb	r2, [r3, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	211a      	movs	r1, #26
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	7b9b      	ldrb	r3, [r3, #14]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fd8e 	bl	8007dd6 <USBH_AllocPipe>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	7bdb      	ldrb	r3, [r3, #15]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fd84 	bl	8007dd6 <USBH_AllocPipe>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	7b59      	ldrb	r1, [r3, #13]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	7b98      	ldrb	r0, [r3, #14]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	8b12      	ldrh	r2, [r2, #24]
 80062ee:	9202      	str	r2, [sp, #8]
 80062f0:	2202      	movs	r2, #2
 80062f2:	9201      	str	r2, [sp, #4]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4623      	mov	r3, r4
 80062f8:	4602      	mov	r2, r0
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fd3c 	bl	8007d78 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	7b19      	ldrb	r1, [r3, #12]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	7bd8      	ldrb	r0, [r3, #15]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	8b52      	ldrh	r2, [r2, #26]
 8006318:	9202      	str	r2, [sp, #8]
 800631a:	2202      	movs	r2, #2
 800631c:	9201      	str	r2, [sp, #4]
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4623      	mov	r3, r4
 8006322:	4602      	mov	r2, r0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fd27 	bl	8007d78 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	7b5b      	ldrb	r3, [r3, #13]
 8006336:	2200      	movs	r2, #0
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 f830 	bl	80083a0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	7b1b      	ldrb	r3, [r3, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 f829 	bl	80083a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	bd90      	pop	{r4, r7, pc}

08006358 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00e      	beq.n	8006390 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 fd1c 	bl	8007db6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fd47 	bl	8007e18 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	7b1b      	ldrb	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	7b1b      	ldrb	r3, [r3, #12]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fd09 	bl	8007db6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	7b1b      	ldrb	r3, [r3, #12]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fd34 	bl	8007e18 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	7b5b      	ldrb	r3, [r3, #13]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00e      	beq.n	80063dc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	7b5b      	ldrb	r3, [r3, #13]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fcf6 	bl	8007db6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	7b5b      	ldrb	r3, [r3, #13]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 fd21 	bl	8007e18 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f002 f88d 	bl	8008510 <free>
    phost->pActiveClass->pData = 0U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063fc:	2200      	movs	r2, #0
 80063fe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3340      	adds	r3, #64	; 0x40
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f8b1 	bl	800658a <GetLineCoding>
 8006428:	4603      	mov	r3, r0
 800642a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d105      	bne.n	800643e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006438:	2102      	movs	r1, #2
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800643e:	7afb      	ldrb	r3, [r7, #11]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006468:	2b04      	cmp	r3, #4
 800646a:	d877      	bhi.n	800655c <USBH_CDC_Process+0x114>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <USBH_CDC_Process+0x2c>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006489 	.word	0x08006489
 8006478:	0800648f 	.word	0x0800648f
 800647c:	080064bf 	.word	0x080064bf
 8006480:	08006533 	.word	0x08006533
 8006484:	08006541 	.word	0x08006541
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e06d      	b.n	800656a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f897 	bl	80065c8 <SetLineCoding>
 800649a:	4603      	mov	r3, r0
 800649c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064ac:	e058      	b.n	8006560 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d055      	beq.n	8006560 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2204      	movs	r2, #4
 80064b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064bc:	e050      	b.n	8006560 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3340      	adds	r3, #64	; 0x40
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f860 	bl	800658a <GetLineCoding>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d126      	bne.n	8006522 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e6:	791b      	ldrb	r3, [r3, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d13b      	bne.n	8006564 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d133      	bne.n	8006564 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006506:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006508:	429a      	cmp	r2, r3
 800650a:	d12b      	bne.n	8006564 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006514:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006516:	429a      	cmp	r2, r3
 8006518:	d124      	bne.n	8006564 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f95a 	bl	80067d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006520:	e020      	b.n	8006564 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d01d      	beq.n	8006564 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2204      	movs	r2, #4
 800652c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006530:	e018      	b.n	8006564 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f867 	bl	8006606 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f8dc 	bl	80066f6 <CDC_ProcessReception>
      break;
 800653e:	e014      	b.n	800656a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006540:	2100      	movs	r1, #0
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 ffe5 	bl	8007512 <USBH_ClrFeature>
 8006548:	4603      	mov	r3, r0
 800654a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800655a:	e005      	b.n	8006568 <USBH_CDC_Process+0x120>

    default:
      break;
 800655c:	bf00      	nop
 800655e:	e004      	b.n	800656a <USBH_CDC_Process+0x122>
      break;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <USBH_CDC_Process+0x122>
      break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <USBH_CDC_Process+0x122>
      break;
 8006568:	bf00      	nop

  }

  return status;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	22a1      	movs	r2, #161	; 0xa1
 8006598:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2221      	movs	r2, #33	; 0x21
 800659e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2207      	movs	r2, #7
 80065b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2207      	movs	r2, #7
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f98a 	bl	80078d2 <USBH_CtlReq>
 80065be:	4603      	mov	r3, r0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2221      	movs	r2, #33	; 0x21
 80065d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2207      	movs	r2, #7
 80065ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2207      	movs	r2, #7
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f96b 	bl	80078d2 <USBH_CtlReq>
 80065fc:	4603      	mov	r3, r0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af02      	add	r7, sp, #8
 800660c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006618:	2300      	movs	r3, #0
 800661a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006622:	2b01      	cmp	r3, #1
 8006624:	d002      	beq.n	800662c <CDC_ProcessTransmission+0x26>
 8006626:	2b02      	cmp	r3, #2
 8006628:	d025      	beq.n	8006676 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800662a:	e060      	b.n	80066ee <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	8b12      	ldrh	r2, [r2, #24]
 8006634:	4293      	cmp	r3, r2
 8006636:	d90c      	bls.n	8006652 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	69d9      	ldr	r1, [r3, #28]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8b1a      	ldrh	r2, [r3, #24]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	7b58      	ldrb	r0, [r3, #13]
 8006644:	2301      	movs	r3, #1
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	4603      	mov	r3, r0
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fb51 	bl	8007cf2 <USBH_BulkSendData>
 8006650:	e00c      	b.n	800666c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	7b58      	ldrb	r0, [r3, #13]
 8006660:	2301      	movs	r3, #1
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4603      	mov	r3, r0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fb43 	bl	8007cf2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006674:	e03b      	b.n	80066ee <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	7b5b      	ldrb	r3, [r3, #13]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fe65 	bl	800834c <USBH_LL_GetURBState>
 8006682:	4603      	mov	r3, r0
 8006684:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d128      	bne.n	80066de <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	8b12      	ldrh	r2, [r2, #24]
 8006694:	4293      	cmp	r3, r2
 8006696:	d90e      	bls.n	80066b6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	8b12      	ldrh	r2, [r2, #24]
 80066a0:	1a9a      	subs	r2, r3, r2
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	8b12      	ldrh	r2, [r2, #24]
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	61da      	str	r2, [r3, #28]
 80066b4:	e002      	b.n	80066bc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066cc:	e00e      	b.n	80066ec <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f868 	bl	80067ac <USBH_CDC_TransmitCallback>
      break;
 80066dc:	e006      	b.n	80066ec <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d103      	bne.n	80066ec <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066ec:	bf00      	nop
  }
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006708:	2300      	movs	r3, #0
 800670a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006712:	2b03      	cmp	r3, #3
 8006714:	d002      	beq.n	800671c <CDC_ProcessReception+0x26>
 8006716:	2b04      	cmp	r3, #4
 8006718:	d00e      	beq.n	8006738 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800671a:	e043      	b.n	80067a4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	6a19      	ldr	r1, [r3, #32]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	8b5a      	ldrh	r2, [r3, #26]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	7b1b      	ldrb	r3, [r3, #12]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fb07 	bl	8007d3c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2204      	movs	r2, #4
 8006732:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006736:	e035      	b.n	80067a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	7b1b      	ldrb	r3, [r3, #12]
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fe04 	bl	800834c <USBH_LL_GetURBState>
 8006744:	4603      	mov	r3, r0
 8006746:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006748:	7cfb      	ldrb	r3, [r7, #19]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d129      	bne.n	80067a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	7b1b      	ldrb	r3, [r3, #12]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fd67 	bl	8008228 <USBH_LL_GetLastXferSize>
 800675a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	429a      	cmp	r2, r3
 8006764:	d016      	beq.n	8006794 <CDC_ProcessReception+0x9e>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	8b5b      	ldrh	r3, [r3, #26]
 800676a:	461a      	mov	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4293      	cmp	r3, r2
 8006770:	d910      	bls.n	8006794 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	6a1a      	ldr	r2, [r3, #32]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	441a      	add	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2203      	movs	r2, #3
 800678e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006792:	e006      	b.n	80067a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f80f 	bl	80067c0 <USBH_CDC_ReceiveCallback>
      break;
 80067a2:	bf00      	nop
  }
}
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e029      	b.n	8006854 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f81f 	bl	800685c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f001 fc39 	bl	80080c4 <USBH_LL_Init>

  return USBH_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e009      	b.n	8006882 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	33e0      	adds	r3, #224	; 0xe0
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b0e      	cmp	r3, #14
 8006886:	d9f2      	bls.n	800686e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e009      	b.n	80068a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a8:	d3f1      	bcc.n	800688e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2240      	movs	r2, #64	; 0x40
 80068ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d016      	beq.n	8006946 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10e      	bne.n	8006940 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	33de      	adds	r3, #222	; 0xde
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
 800693e:	e004      	b.n	800694a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006940:	2302      	movs	r3, #2
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e001      	b.n	800694a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006946:	2302      	movs	r3, #2
 8006948:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	429a      	cmp	r2, r3
 8006972:	d204      	bcs.n	800697e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800697c:	e001      	b.n	8006982 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800697e:	2302      	movs	r3, #2
 8006980:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	70fb      	strb	r3, [r7, #3]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70bb      	strb	r3, [r7, #2]
 80069a6:	4613      	mov	r3, r2
 80069a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069ba:	e025      	b.n	8006a08 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	221a      	movs	r2, #26
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	3308      	adds	r3, #8
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	3302      	adds	r3, #2
 80069cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	795b      	ldrb	r3, [r3, #5]
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d002      	beq.n	80069de <USBH_FindInterface+0x4e>
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	2bff      	cmp	r3, #255	; 0xff
 80069dc:	d111      	bne.n	8006a02 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069e2:	78ba      	ldrb	r2, [r7, #2]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d002      	beq.n	80069ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069e8:	78bb      	ldrb	r3, [r7, #2]
 80069ea:	2bff      	cmp	r3, #255	; 0xff
 80069ec:	d109      	bne.n	8006a02 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069f2:	787a      	ldrb	r2, [r7, #1]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d002      	beq.n	80069fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069f8:	787b      	ldrb	r3, [r7, #1]
 80069fa:	2bff      	cmp	r3, #255	; 0xff
 80069fc:	d101      	bne.n	8006a02 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	e006      	b.n	8006a10 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	3301      	adds	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d9d6      	bls.n	80069bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a0e:	23ff      	movs	r3, #255	; 0xff
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fb89 	bl	800813c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fca0 	bl	8008372 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a44:	2302      	movs	r3, #2
 8006a46:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d102      	bne.n	8006a5e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b0b      	cmp	r3, #11
 8006a66:	f200 81b3 	bhi.w	8006dd0 <USBH_Process+0x394>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <USBH_Process+0x34>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006ad3 	.word	0x08006ad3
 8006a78:	08006b3b 	.word	0x08006b3b
 8006a7c:	08006d6b 	.word	0x08006d6b
 8006a80:	08006dd1 	.word	0x08006dd1
 8006a84:	08006bdf 	.word	0x08006bdf
 8006a88:	08006d11 	.word	0x08006d11
 8006a8c:	08006c15 	.word	0x08006c15
 8006a90:	08006c35 	.word	0x08006c35
 8006a94:	08006c55 	.word	0x08006c55
 8006a98:	08006c83 	.word	0x08006c83
 8006a9c:	08006d53 	.word	0x08006d53
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8193 	beq.w	8006dd4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ab4:	20c8      	movs	r0, #200	; 0xc8
 8006ab6:	f001 fca6 	bl	8008406 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fb99 	bl	80081f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ad0:	e180      	b.n	8006dd4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d107      	bne.n	8006aec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006aea:	e182      	b.n	8006df2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af6:	d914      	bls.n	8006b22 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006afe:	3301      	adds	r3, #1
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d903      	bls.n	8006b1a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	220d      	movs	r2, #13
 8006b16:	701a      	strb	r2, [r3, #0]
      break;
 8006b18:	e16b      	b.n	8006df2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
      break;
 8006b20:	e167      	b.n	8006df2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b28:	f103 020a 	add.w	r2, r3, #10
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b32:	200a      	movs	r0, #10
 8006b34:	f001 fc67 	bl	8008406 <USBH_Delay>
      break;
 8006b38:	e15b      	b.n	8006df2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b4a:	2104      	movs	r1, #4
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b50:	2064      	movs	r0, #100	; 0x64
 8006b52:	f001 fc58 	bl	8008406 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fb26 	bl	80081a8 <USBH_LL_GetSpeed>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2205      	movs	r2, #5
 8006b6a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f931 	bl	8007dd6 <USBH_AllocPipe>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b7c:	2180      	movs	r1, #128	; 0x80
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f929 	bl	8007dd6 <USBH_AllocPipe>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	7919      	ldrb	r1, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ba0:	b292      	uxth	r2, r2
 8006ba2:	9202      	str	r2, [sp, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	4603      	mov	r3, r0
 8006bac:	2280      	movs	r2, #128	; 0x80
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f8e2 	bl	8007d78 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7959      	ldrb	r1, [r3, #5]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bc8:	b292      	uxth	r2, r2
 8006bca:	9202      	str	r2, [sp, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	9201      	str	r2, [sp, #4]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f8ce 	bl	8007d78 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bdc:	e109      	b.n	8006df2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f90c 	bl	8006dfc <USBH_HandleEnum>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 80f3 	bne.w	8006dd8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d103      	bne.n	8006c0c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2208      	movs	r2, #8
 8006c08:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c0a:	e0e5      	b.n	8006dd8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2207      	movs	r2, #7
 8006c10:	701a      	strb	r2, [r3, #0]
      break;
 8006c12:	e0e1      	b.n	8006dd8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80de 	beq.w	8006ddc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c26:	2101      	movs	r1, #1
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c32:	e0d3      	b.n	8006ddc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fc20 	bl	8007484 <USBH_SetCfg>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 80ca 	bne.w	8006de0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2209      	movs	r2, #9
 8006c50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c52:	e0c5      	b.n	8006de0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00b      	beq.n	8006c7a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006c62:	2101      	movs	r1, #1
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fc30 	bl	80074ca <USBH_SetFeature>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 80b9 	bne.w	8006de4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	220a      	movs	r2, #10
 8006c76:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c78:	e0b4      	b.n	8006de4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	701a      	strb	r2, [r3, #0]
      break;
 8006c80:	e0b0      	b.n	8006de4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80ad 	beq.w	8006de8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	e016      	b.n	8006cca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32de      	adds	r2, #222	; 0xde
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	791a      	ldrb	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d108      	bne.n	8006cc4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006cb2:	7bfa      	ldrb	r2, [r7, #15]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	32de      	adds	r2, #222	; 0xde
 8006cb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006cc2:	e005      	b.n	8006cd0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	73fb      	strb	r3, [r7, #15]
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0e5      	beq.n	8006c9c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d016      	beq.n	8006d08 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2206      	movs	r2, #6
 8006cf0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cf8:	2103      	movs	r1, #3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cfe:	e073      	b.n	8006de8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	220d      	movs	r2, #13
 8006d04:	701a      	strb	r2, [r3, #0]
      break;
 8006d06:	e06f      	b.n	8006de8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220d      	movs	r2, #13
 8006d0c:	701a      	strb	r2, [r3, #0]
      break;
 8006d0e:	e06b      	b.n	8006de8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d017      	beq.n	8006d4a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d103      	bne.n	8006d3a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	220b      	movs	r2, #11
 8006d36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d38:	e058      	b.n	8006dec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d154      	bne.n	8006dec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	220d      	movs	r2, #13
 8006d46:	701a      	strb	r2, [r3, #0]
      break;
 8006d48:	e050      	b.n	8006dec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	220d      	movs	r2, #13
 8006d4e:	701a      	strb	r2, [r3, #0]
      break;
 8006d50:	e04c      	b.n	8006dec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d049      	beq.n	8006df0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
      }
      break;
 8006d68:	e042      	b.n	8006df0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff fd72 	bl	800685c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006da6:	2105      	movs	r1, #5
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d107      	bne.n	8006dc8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fe2b 	bl	8006a1c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dc6:	e014      	b.n	8006df2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f9b7 	bl	800813c <USBH_LL_Start>
      break;
 8006dce:	e010      	b.n	8006df2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006dd0:	bf00      	nop
 8006dd2:	e00e      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006dd4:	bf00      	nop
 8006dd6:	e00c      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006dd8:	bf00      	nop
 8006dda:	e00a      	b.n	8006df2 <USBH_Process+0x3b6>
    break;
 8006ddc:	bf00      	nop
 8006dde:	e008      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006de0:	bf00      	nop
 8006de2:	e006      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006de4:	bf00      	nop
 8006de6:	e004      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006de8:	bf00      	nop
 8006dea:	e002      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <USBH_Process+0x3b6>
      break;
 8006df0:	bf00      	nop
  }
  return USBH_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af04      	add	r7, sp, #16
 8006e02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b07      	cmp	r3, #7
 8006e12:	f200 81c1 	bhi.w	8007198 <USBH_HandleEnum+0x39c>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBH_HandleEnum+0x20>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e3d 	.word	0x08006e3d
 8006e20:	08006efb 	.word	0x08006efb
 8006e24:	08006f65 	.word	0x08006f65
 8006e28:	08006ff3 	.word	0x08006ff3
 8006e2c:	0800705d 	.word	0x0800705d
 8006e30:	080070cd 	.word	0x080070cd
 8006e34:	08007113 	.word	0x08007113
 8006e38:	08007159 	.word	0x08007159
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e3c:	2108      	movs	r1, #8
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa50 	bl	80072e4 <USBH_Get_DevDesc>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d130      	bne.n	8006eb0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7919      	ldrb	r1, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e72:	b292      	uxth	r2, r2
 8006e74:	9202      	str	r2, [sp, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	9201      	str	r2, [sp, #4]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2280      	movs	r2, #128	; 0x80
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 ff79 	bl	8007d78 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7959      	ldrb	r1, [r3, #5]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	9202      	str	r2, [sp, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	9201      	str	r2, [sp, #4]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 ff65 	bl	8007d78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006eae:	e175      	b.n	800719c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	f040 8172 	bne.w	800719c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d903      	bls.n	8006eda <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	220d      	movs	r2, #13
 8006ed6:	701a      	strb	r2, [r3, #0]
      break;
 8006ed8:	e160      	b.n	800719c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	795b      	ldrb	r3, [r3, #5]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 ff99 	bl	8007e18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ff93 	bl	8007e18 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
      break;
 8006ef8:	e150      	b.n	800719c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006efa:	2112      	movs	r1, #18
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9f1 	bl	80072e4 <USBH_Get_DevDesc>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f12:	e145      	b.n	80071a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	f040 8142 	bne.w	80071a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f22:	3301      	adds	r3, #1
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d903      	bls.n	8006f3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	220d      	movs	r2, #13
 8006f3a:	701a      	strb	r2, [r3, #0]
      break;
 8006f3c:	e130      	b.n	80071a0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	795b      	ldrb	r3, [r3, #5]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 ff67 	bl	8007e18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	791b      	ldrb	r3, [r3, #4]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 ff61 	bl	8007e18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
      break;
 8006f62:	e11d      	b.n	80071a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f64:	2101      	movs	r1, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa68 	bl	800743c <USBH_SetAddress>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d132      	bne.n	8006fdc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f76:	2002      	movs	r0, #2
 8006f78:	f001 fa45 	bl	8008406 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2203      	movs	r2, #3
 8006f88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7919      	ldrb	r1, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	9202      	str	r2, [sp, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	9201      	str	r2, [sp, #4]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fee3 	bl	8007d78 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7959      	ldrb	r1, [r3, #5]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	9202      	str	r2, [sp, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fecf 	bl	8007d78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006fda:	e0e3      	b.n	80071a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	f040 80e0 	bne.w	80071a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	220d      	movs	r2, #13
 8006fe8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	705a      	strb	r2, [r3, #1]
      break;
 8006ff0:	e0d8      	b.n	80071a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ff2:	2109      	movs	r1, #9
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f99d 	bl	8007334 <USBH_Get_CfgDesc>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2204      	movs	r2, #4
 8007008:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800700a:	e0cd      	b.n	80071a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b03      	cmp	r3, #3
 8007010:	f040 80ca 	bne.w	80071a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800702a:	2b03      	cmp	r3, #3
 800702c:	d903      	bls.n	8007036 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220d      	movs	r2, #13
 8007032:	701a      	strb	r2, [r3, #0]
      break;
 8007034:	e0b8      	b.n	80071a8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	795b      	ldrb	r3, [r3, #5]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 feeb 	bl	8007e18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	791b      	ldrb	r3, [r3, #4]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fee5 	bl	8007e18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
      break;
 800705a:	e0a5      	b.n	80071a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f965 	bl	8007334 <USBH_Get_CfgDesc>
 800706a:	4603      	mov	r3, r0
 800706c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d103      	bne.n	800707c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2205      	movs	r2, #5
 8007078:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800707a:	e097      	b.n	80071ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b03      	cmp	r3, #3
 8007080:	f040 8094 	bne.w	80071ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800708a:	3301      	adds	r3, #1
 800708c:	b2da      	uxtb	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800709a:	2b03      	cmp	r3, #3
 800709c:	d903      	bls.n	80070a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	220d      	movs	r2, #13
 80070a2:	701a      	strb	r2, [r3, #0]
      break;
 80070a4:	e082      	b.n	80071ac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	795b      	ldrb	r3, [r3, #5]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 feb3 	bl	8007e18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	791b      	ldrb	r3, [r3, #4]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fead 	bl	8007e18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
      break;
 80070ca:	e06f      	b.n	80071ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d019      	beq.n	800710a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070e2:	23ff      	movs	r3, #255	; 0xff
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f949 	bl	800737c <USBH_Get_StringDesc>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d103      	bne.n	80070fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2206      	movs	r2, #6
 80070f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070fa:	e059      	b.n	80071b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d156      	bne.n	80071b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2206      	movs	r2, #6
 8007106:	705a      	strb	r2, [r3, #1]
      break;
 8007108:	e052      	b.n	80071b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2206      	movs	r2, #6
 800710e:	705a      	strb	r2, [r3, #1]
      break;
 8007110:	e04e      	b.n	80071b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007118:	2b00      	cmp	r3, #0
 800711a:	d019      	beq.n	8007150 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007128:	23ff      	movs	r3, #255	; 0xff
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f926 	bl	800737c <USBH_Get_StringDesc>
 8007130:	4603      	mov	r3, r0
 8007132:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2207      	movs	r2, #7
 800713e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007140:	e038      	b.n	80071b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d135      	bne.n	80071b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2207      	movs	r2, #7
 800714c:	705a      	strb	r2, [r3, #1]
      break;
 800714e:	e031      	b.n	80071b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2207      	movs	r2, #7
 8007154:	705a      	strb	r2, [r3, #1]
      break;
 8007156:	e02d      	b.n	80071b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800715e:	2b00      	cmp	r3, #0
 8007160:	d017      	beq.n	8007192 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800716e:	23ff      	movs	r3, #255	; 0xff
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f903 	bl	800737c <USBH_Get_StringDesc>
 8007176:	4603      	mov	r3, r0
 8007178:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007184:	e018      	b.n	80071b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d115      	bne.n	80071b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
      break;
 8007190:	e012      	b.n	80071b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
      break;
 8007196:	e00f      	b.n	80071b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007198:	bf00      	nop
 800719a:	e00e      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 800719c:	bf00      	nop
 800719e:	e00c      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071a0:	bf00      	nop
 80071a2:	e00a      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071a4:	bf00      	nop
 80071a6:	e008      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071a8:	bf00      	nop
 80071aa:	e006      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071ac:	bf00      	nop
 80071ae:	e004      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <USBH_HandleEnum+0x3be>
      break;
 80071b8:	bf00      	nop
  }
  return Status;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f804 	bl	8007206 <USBH_HandleSof>
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b0b      	cmp	r3, #11
 8007216:	d10a      	bne.n	800722e <USBH_HandleSof+0x28>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
  }
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007246:	bf00      	nop
}
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007262:	bf00      	nop
}
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 ff58 	bl	8008172 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	791b      	ldrb	r3, [r3, #4]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fda5 	bl	8007e18 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	795b      	ldrb	r3, [r3, #5]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fd9f 	bl	8007e18 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007302:	2100      	movs	r1, #0
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f864 	bl	80073d2 <USBH_GetDescriptor>
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f203 3026 	addw	r0, r3, #806	; 0x326
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	b292      	uxth	r2, r2
 8007324:	4619      	mov	r1, r3
 8007326:	f000 f918 	bl	800755a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	331c      	adds	r3, #28
 8007344:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007350:	2100      	movs	r1, #0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f83d 	bl	80073d2 <USBH_GetDescriptor>
 8007358:	4603      	mov	r3, r0
 800735a:	72fb      	strb	r3, [r7, #11]
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f964 	bl	800763a <USBH_ParseCfgDesc>
  }

  return status;
 8007372:	7afb      	ldrb	r3, [r7, #11]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	461a      	mov	r2, r3
 8007388:	460b      	mov	r3, r1
 800738a:	72fb      	strb	r3, [r7, #11]
 800738c:	4613      	mov	r3, r2
 800738e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007398:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80073a0:	893b      	ldrh	r3, [r7, #8]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	460b      	mov	r3, r1
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f812 	bl	80073d2 <USBH_GetDescriptor>
 80073ae:	4603      	mov	r3, r0
 80073b0:	75fb      	strb	r3, [r7, #23]
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d107      	bne.n	80073c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073be:	893a      	ldrh	r2, [r7, #8]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa37 	bl	8007836 <USBH_ParseStringDesc>
  }

  return status;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	607b      	str	r3, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	72fb      	strb	r3, [r7, #11]
 80073e0:	4613      	mov	r3, r2
 80073e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11c      	bne.n	8007426 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2206      	movs	r2, #6
 80073fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	893a      	ldrh	r2, [r7, #8]
 8007402:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800740a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740e:	d104      	bne.n	800741a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f240 4209 	movw	r2, #1033	; 0x409
 8007416:	829a      	strh	r2, [r3, #20]
 8007418:	e002      	b.n	8007420 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8b3a      	ldrh	r2, [r7, #24]
 8007424:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007426:	8b3b      	ldrh	r3, [r7, #24]
 8007428:	461a      	mov	r2, r3
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa50 	bl	80078d2 <USBH_CtlReq>
 8007432:	4603      	mov	r3, r0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	789b      	ldrb	r3, [r3, #2]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d10f      	bne.n	8007470 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2205      	movs	r2, #5
 800745a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007470:	2200      	movs	r2, #0
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa2c 	bl	80078d2 <USBH_CtlReq>
 800747a:	4603      	mov	r3, r0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10e      	bne.n	80074b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2209      	movs	r2, #9
 80074a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074b6:	2200      	movs	r2, #0
 80074b8:	2100      	movs	r1, #0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa09 	bl	80078d2 <USBH_CtlReq>
 80074c0:	4603      	mov	r3, r0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	789b      	ldrb	r3, [r3, #2]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10f      	bne.n	80074fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2203      	movs	r2, #3
 80074e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074fe:	2200      	movs	r2, #0
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f9e5 	bl	80078d2 <USBH_CtlReq>
 8007508:	4603      	mov	r3, r0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	789b      	ldrb	r3, [r3, #2]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10f      	bne.n	8007546 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	b29a      	uxth	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9c1 	bl	80078d2 <USBH_CtlReq>
 8007550:	4603      	mov	r3, r0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	785a      	ldrb	r2, [r3, #1]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	3302      	adds	r3, #2
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b29a      	uxth	r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3303      	adds	r3, #3
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	021b      	lsls	r3, r3, #8
 800758a:	b29b      	uxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	791a      	ldrb	r2, [r3, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	795a      	ldrb	r2, [r3, #5]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	799a      	ldrb	r2, [r3, #6]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	79da      	ldrb	r2, [r3, #7]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80075b4:	88fb      	ldrh	r3, [r7, #6]
 80075b6:	2b08      	cmp	r3, #8
 80075b8:	d939      	bls.n	800762e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3308      	adds	r3, #8
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3309      	adds	r3, #9
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	021b      	lsls	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	330a      	adds	r3, #10
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	330b      	adds	r3, #11
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	330c      	adds	r3, #12
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	330d      	adds	r3, #13
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	b29b      	uxth	r3, r3
 8007606:	4313      	orrs	r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	7b9a      	ldrb	r2, [r3, #14]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7bda      	ldrb	r2, [r3, #15]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	7c1a      	ldrb	r2, [r3, #16]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	7c5a      	ldrb	r2, [r3, #17]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	745a      	strb	r2, [r3, #17]
  }
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b08a      	sub	sp, #40	; 0x28
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	4613      	mov	r3, r2
 8007646:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	785a      	ldrb	r2, [r3, #1]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	3302      	adds	r3, #2
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b29a      	uxth	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	3303      	adds	r3, #3
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	b29b      	uxth	r3, r3
 8007680:	4313      	orrs	r3, r2
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	791a      	ldrb	r2, [r3, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	795a      	ldrb	r2, [r3, #5]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	799a      	ldrb	r2, [r3, #6]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	79da      	ldrb	r2, [r3, #7]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	7a1a      	ldrb	r2, [r3, #8]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d95f      	bls.n	8007776 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80076b6:	2309      	movs	r3, #9
 80076b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076be:	e051      	b.n	8007764 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076c0:	f107 0316 	add.w	r3, r7, #22
 80076c4:	4619      	mov	r1, r3
 80076c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076c8:	f000 f8e8 	bl	800789c <USBH_GetNextDesc>
 80076cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d146      	bne.n	8007764 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80076d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076da:	221a      	movs	r2, #26
 80076dc:	fb02 f303 	mul.w	r3, r2, r3
 80076e0:	3308      	adds	r3, #8
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	3302      	adds	r3, #2
 80076e8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80076ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ec:	69f8      	ldr	r0, [r7, #28]
 80076ee:	f000 f846 	bl	800777e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076fc:	e022      	b.n	8007744 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076fe:	f107 0316 	add.w	r3, r7, #22
 8007702:	4619      	mov	r1, r3
 8007704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007706:	f000 f8c9 	bl	800789c <USBH_GetNextDesc>
 800770a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b05      	cmp	r3, #5
 8007712:	d117      	bne.n	8007744 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007718:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800771c:	3201      	adds	r2, #1
 800771e:	00d2      	lsls	r2, r2, #3
 8007720:	211a      	movs	r1, #26
 8007722:	fb01 f303 	mul.w	r3, r1, r3
 8007726:	4413      	add	r3, r2
 8007728:	3308      	adds	r3, #8
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	3304      	adds	r3, #4
 8007730:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007734:	69b8      	ldr	r0, [r7, #24]
 8007736:	f000 f851 	bl	80077dc <USBH_ParseEPDesc>
            ep_ix++;
 800773a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800773e:	3301      	adds	r3, #1
 8007740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800774c:	429a      	cmp	r2, r3
 800774e:	d204      	bcs.n	800775a <USBH_ParseCfgDesc+0x120>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	885a      	ldrh	r2, [r3, #2]
 8007754:	8afb      	ldrh	r3, [r7, #22]
 8007756:	429a      	cmp	r2, r3
 8007758:	d8d1      	bhi.n	80076fe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800775a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800775e:	3301      	adds	r3, #1
 8007760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007768:	2b01      	cmp	r3, #1
 800776a:	d804      	bhi.n	8007776 <USBH_ParseCfgDesc+0x13c>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	885a      	ldrh	r2, [r3, #2]
 8007770:	8afb      	ldrh	r3, [r7, #22]
 8007772:	429a      	cmp	r2, r3
 8007774:	d8a4      	bhi.n	80076c0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007776:	bf00      	nop
 8007778:	3728      	adds	r7, #40	; 0x28
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785a      	ldrb	r2, [r3, #1]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	789a      	ldrb	r2, [r3, #2]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	78da      	ldrb	r2, [r3, #3]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	791a      	ldrb	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	795a      	ldrb	r2, [r3, #5]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	799a      	ldrb	r2, [r3, #6]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	79da      	ldrb	r2, [r3, #7]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	7a1a      	ldrb	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	721a      	strb	r2, [r3, #8]
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785a      	ldrb	r2, [r3, #1]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	789a      	ldrb	r2, [r3, #2]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	78da      	ldrb	r2, [r3, #3]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	3304      	adds	r3, #4
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	3305      	adds	r3, #5
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	b29b      	uxth	r3, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	799a      	ldrb	r2, [r3, #6]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	719a      	strb	r2, [r3, #6]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007836:	b480      	push	{r7}
 8007838:	b087      	sub	sp, #28
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	4613      	mov	r3, r2
 8007842:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d120      	bne.n	8007890 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	1e9a      	subs	r2, r3, #2
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	4293      	cmp	r3, r2
 8007858:	bf28      	it	cs
 800785a:	4613      	movcs	r3, r2
 800785c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3302      	adds	r3, #2
 8007862:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007864:	2300      	movs	r3, #0
 8007866:	82fb      	strh	r3, [r7, #22]
 8007868:	e00b      	b.n	8007882 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800786a:	8afb      	ldrh	r3, [r7, #22]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	3301      	adds	r3, #1
 800787a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800787c:	8afb      	ldrh	r3, [r7, #22]
 800787e:	3302      	adds	r3, #2
 8007880:	82fb      	strh	r3, [r7, #22]
 8007882:	8afa      	ldrh	r2, [r7, #22]
 8007884:	8abb      	ldrh	r3, [r7, #20]
 8007886:	429a      	cmp	r2, r3
 8007888:	d3ef      	bcc.n	800786a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
  }
}
 8007890:	bf00      	nop
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	881a      	ldrh	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4413      	add	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078c4:	68fb      	ldr	r3, [r7, #12]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	789b      	ldrb	r3, [r3, #2]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d002      	beq.n	80078f2 <USBH_CtlReq+0x20>
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d00f      	beq.n	8007910 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80078f0:	e027      	b.n	8007942 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	88fa      	ldrh	r2, [r7, #6]
 80078fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2202      	movs	r2, #2
 8007908:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
      break;
 800790e:	e018      	b.n	8007942 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f81b 	bl	800794c <USBH_HandleControl>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <USBH_CtlReq+0x54>
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	2b03      	cmp	r3, #3
 8007924:	d106      	bne.n	8007934 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	761a      	strb	r2, [r3, #24]
      break;
 8007932:	e005      	b.n	8007940 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d102      	bne.n	8007940 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	709a      	strb	r2, [r3, #2]
      break;
 8007940:	bf00      	nop
  }
  return status;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af02      	add	r7, sp, #8
 8007952:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007954:	2301      	movs	r3, #1
 8007956:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7e1b      	ldrb	r3, [r3, #24]
 8007960:	3b01      	subs	r3, #1
 8007962:	2b0a      	cmp	r3, #10
 8007964:	f200 8158 	bhi.w	8007c18 <USBH_HandleControl+0x2cc>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <USBH_HandleControl+0x24>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	0800799d 	.word	0x0800799d
 8007974:	080079b7 	.word	0x080079b7
 8007978:	08007a21 	.word	0x08007a21
 800797c:	08007a47 	.word	0x08007a47
 8007980:	08007a7f 	.word	0x08007a7f
 8007984:	08007aab 	.word	0x08007aab
 8007988:	08007afd 	.word	0x08007afd
 800798c:	08007b1f 	.word	0x08007b1f
 8007990:	08007b5b 	.word	0x08007b5b
 8007994:	08007b83 	.word	0x08007b83
 8007998:	08007bc1 	.word	0x08007bc1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f103 0110 	add.w	r1, r3, #16
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	461a      	mov	r2, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f945 	bl	8007c38 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	761a      	strb	r2, [r3, #24]
      break;
 80079b4:	e13b      	b.n	8007c2e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	795b      	ldrb	r3, [r3, #5]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fcc5 	bl	800834c <USBH_LL_GetURBState>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d11e      	bne.n	8007a0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7c1b      	ldrb	r3, [r3, #16]
 80079d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8adb      	ldrh	r3, [r3, #22]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80079de:	7b7b      	ldrb	r3, [r7, #13]
 80079e0:	2b80      	cmp	r3, #128	; 0x80
 80079e2:	d103      	bne.n	80079ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2203      	movs	r2, #3
 80079e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079ea:	e117      	b.n	8007c1c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2205      	movs	r2, #5
 80079f0:	761a      	strb	r2, [r3, #24]
      break;
 80079f2:	e113      	b.n	8007c1c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80079f4:	7b7b      	ldrb	r3, [r7, #13]
 80079f6:	2b80      	cmp	r3, #128	; 0x80
 80079f8:	d103      	bne.n	8007a02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2209      	movs	r2, #9
 80079fe:	761a      	strb	r2, [r3, #24]
      break;
 8007a00:	e10c      	b.n	8007c1c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2207      	movs	r2, #7
 8007a06:	761a      	strb	r2, [r3, #24]
      break;
 8007a08:	e108      	b.n	8007c1c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d003      	beq.n	8007a18 <USBH_HandleControl+0xcc>
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	f040 8102 	bne.w	8007c1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	220b      	movs	r2, #11
 8007a1c:	761a      	strb	r2, [r3, #24]
      break;
 8007a1e:	e0fd      	b.n	8007c1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6899      	ldr	r1, [r3, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	899a      	ldrh	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	791b      	ldrb	r3, [r3, #4]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f93c 	bl	8007cb6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2204      	movs	r2, #4
 8007a42:	761a      	strb	r2, [r3, #24]
      break;
 8007a44:	e0f3      	b.n	8007c2e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc7d 	bl	800834c <USBH_LL_GetURBState>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2209      	movs	r2, #9
 8007a60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b05      	cmp	r3, #5
 8007a66:	d102      	bne.n	8007a6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a6c:	e0d8      	b.n	8007c20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	f040 80d5 	bne.w	8007c20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	220b      	movs	r2, #11
 8007a7a:	761a      	strb	r2, [r3, #24]
      break;
 8007a7c:	e0d0      	b.n	8007c20 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6899      	ldr	r1, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	899a      	ldrh	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7958      	ldrb	r0, [r3, #5]
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8eb 	bl	8007c6c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2206      	movs	r2, #6
 8007aa6:	761a      	strb	r2, [r3, #24]
      break;
 8007aa8:	e0c1      	b.n	8007c2e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	795b      	ldrb	r3, [r3, #5]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fc4b 	bl	800834c <USBH_LL_GetURBState>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d103      	bne.n	8007ac8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2207      	movs	r2, #7
 8007ac4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ac6:	e0ad      	b.n	8007c24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d105      	bne.n	8007ada <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	220c      	movs	r2, #12
 8007ad2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad8:	e0a4      	b.n	8007c24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d103      	bne.n	8007ae8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	761a      	strb	r2, [r3, #24]
      break;
 8007ae6:	e09d      	b.n	8007c24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	f040 809a 	bne.w	8007c24 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	220b      	movs	r2, #11
 8007af4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007af6:	2302      	movs	r3, #2
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e093      	b.n	8007c24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	791b      	ldrb	r3, [r3, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8d6 	bl	8007cb6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	761a      	strb	r2, [r3, #24]

      break;
 8007b1c:	e087      	b.n	8007c2e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	791b      	ldrb	r3, [r3, #4]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc11 	bl	800834c <USBH_LL_GetURBState>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d105      	bne.n	8007b40 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	220d      	movs	r2, #13
 8007b38:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b3e:	e073      	b.n	8007c28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d103      	bne.n	8007b4e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	220b      	movs	r2, #11
 8007b4a:	761a      	strb	r2, [r3, #24]
      break;
 8007b4c:	e06c      	b.n	8007c28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d169      	bne.n	8007c28 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007b54:	2303      	movs	r3, #3
 8007b56:	73fb      	strb	r3, [r7, #15]
      break;
 8007b58:	e066      	b.n	8007c28 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	795a      	ldrb	r2, [r3, #5]
 8007b5e:	2301      	movs	r3, #1
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	2200      	movs	r2, #0
 8007b66:	2100      	movs	r1, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f87f 	bl	8007c6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220a      	movs	r2, #10
 8007b7e:	761a      	strb	r2, [r3, #24]
      break;
 8007b80:	e055      	b.n	8007c2e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	795b      	ldrb	r3, [r3, #5]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbdf 	bl	800834c <USBH_LL_GetURBState>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d105      	bne.n	8007ba4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	220d      	movs	r2, #13
 8007ba0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ba2:	e043      	b.n	8007c2c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d103      	bne.n	8007bb2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2209      	movs	r2, #9
 8007bae:	761a      	strb	r2, [r3, #24]
      break;
 8007bb0:	e03c      	b.n	8007c2c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d139      	bne.n	8007c2c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220b      	movs	r2, #11
 8007bbc:	761a      	strb	r2, [r3, #24]
      break;
 8007bbe:	e035      	b.n	8007c2c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7e5b      	ldrb	r3, [r3, #25]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	765a      	strb	r2, [r3, #25]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7e5b      	ldrb	r3, [r3, #25]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d806      	bhi.n	8007be2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007be0:	e025      	b.n	8007c2e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007be8:	2106      	movs	r1, #6
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	795b      	ldrb	r3, [r3, #5]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f90c 	bl	8007e18 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	791b      	ldrb	r3, [r3, #4]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f906 	bl	8007e18 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c12:	2302      	movs	r3, #2
 8007c14:	73fb      	strb	r3, [r7, #15]
      break;
 8007c16:	e00a      	b.n	8007c2e <USBH_HandleControl+0x2e2>

    default:
      break;
 8007c18:	bf00      	nop
 8007c1a:	e008      	b.n	8007c2e <USBH_HandleControl+0x2e2>
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e006      	b.n	8007c2e <USBH_HandleControl+0x2e2>
      break;
 8007c20:	bf00      	nop
 8007c22:	e004      	b.n	8007c2e <USBH_HandleControl+0x2e2>
      break;
 8007c24:	bf00      	nop
 8007c26:	e002      	b.n	8007c2e <USBH_HandleControl+0x2e2>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e000      	b.n	8007c2e <USBH_HandleControl+0x2e2>
      break;
 8007c2c:	bf00      	nop
  }

  return status;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af04      	add	r7, sp, #16
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c46:	79f9      	ldrb	r1, [r7, #7]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9303      	str	r3, [sp, #12]
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	9302      	str	r3, [sp, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	2300      	movs	r3, #0
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fb44 	bl	80082ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af04      	add	r7, sp, #16
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4611      	mov	r1, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	80fb      	strh	r3, [r7, #6]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c90:	7979      	ldrb	r1, [r7, #5]
 8007c92:	7e3b      	ldrb	r3, [r7, #24]
 8007c94:	9303      	str	r3, [sp, #12]
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	9302      	str	r3, [sp, #8]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fb1f 	bl	80082ea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b088      	sub	sp, #32
 8007cba:	af04      	add	r7, sp, #16
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	80fb      	strh	r3, [r7, #6]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ccc:	7979      	ldrb	r1, [r7, #5]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	9302      	str	r3, [sp, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	2301      	movs	r3, #1
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fb01 	bl	80082ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ce8:	2300      	movs	r3, #0

}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b088      	sub	sp, #32
 8007cf6:	af04      	add	r7, sp, #16
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	461a      	mov	r2, r3
 8007d00:	460b      	mov	r3, r1
 8007d02:	80fb      	strh	r3, [r7, #6]
 8007d04:	4613      	mov	r3, r2
 8007d06:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d16:	7979      	ldrb	r1, [r7, #5]
 8007d18:	7e3b      	ldrb	r3, [r7, #24]
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	2301      	movs	r3, #1
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	2302      	movs	r3, #2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fadc 	bl	80082ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af04      	add	r7, sp, #16
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4611      	mov	r1, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	80fb      	strh	r3, [r7, #6]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d52:	7979      	ldrb	r1, [r7, #5]
 8007d54:	2300      	movs	r3, #0
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	9302      	str	r3, [sp, #8]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	2301      	movs	r3, #1
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2302      	movs	r3, #2
 8007d66:	2201      	movs	r2, #1
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fabe 	bl	80082ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af04      	add	r7, sp, #16
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	4608      	mov	r0, r1
 8007d82:	4611      	mov	r1, r2
 8007d84:	461a      	mov	r2, r3
 8007d86:	4603      	mov	r3, r0
 8007d88:	70fb      	strb	r3, [r7, #3]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70bb      	strb	r3, [r7, #2]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d92:	7878      	ldrb	r0, [r7, #1]
 8007d94:	78ba      	ldrb	r2, [r7, #2]
 8007d96:	78f9      	ldrb	r1, [r7, #3]
 8007d98:	8b3b      	ldrh	r3, [r7, #24]
 8007d9a:	9302      	str	r3, [sp, #8]
 8007d9c:	7d3b      	ldrb	r3, [r7, #20]
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	7c3b      	ldrb	r3, [r7, #16]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4603      	mov	r3, r0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa51 	bl	800824e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa70 	bl	80082ac <USBH_LL_ClosePipe>

  return USBH_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f836 	bl	8007e54 <USBH_GetFreePipe>
 8007de8:	4603      	mov	r3, r0
 8007dea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007dec:	89fb      	ldrh	r3, [r7, #14]
 8007dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00a      	beq.n	8007e0c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	89fb      	ldrh	r3, [r7, #14]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	33e0      	adds	r3, #224	; 0xe0
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	b2db      	uxtb	r3, r3
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	2b0a      	cmp	r3, #10
 8007e28:	d80d      	bhi.n	8007e46 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	33e0      	adds	r3, #224	; 0xe0
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	33e0      	adds	r3, #224	; 0xe0
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	e00f      	b.n	8007e86 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	33e0      	adds	r3, #224	; 0xe0
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	e007      	b.n	8007e90 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	3301      	adds	r3, #1
 8007e84:	73fb      	strb	r3, [r7, #15]
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	2b0a      	cmp	r3, #10
 8007e8a:	d9ec      	bls.n	8007e66 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	490e      	ldr	r1, [pc, #56]	; (8007edc <MX_USB_HOST_Init+0x40>)
 8007ea4:	480e      	ldr	r0, [pc, #56]	; (8007ee0 <MX_USB_HOST_Init+0x44>)
 8007ea6:	f7fe fc9f 	bl	80067e8 <USBH_Init>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007eb0:	f7f9 f826 	bl	8000f00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007eb4:	490b      	ldr	r1, [pc, #44]	; (8007ee4 <MX_USB_HOST_Init+0x48>)
 8007eb6:	480a      	ldr	r0, [pc, #40]	; (8007ee0 <MX_USB_HOST_Init+0x44>)
 8007eb8:	f7fe fd24 	bl	8006904 <USBH_RegisterClass>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ec2:	f7f9 f81d 	bl	8000f00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ec6:	4806      	ldr	r0, [pc, #24]	; (8007ee0 <MX_USB_HOST_Init+0x44>)
 8007ec8:	f7fe fda8 	bl	8006a1c <USBH_Start>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ed2:	f7f9 f815 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007ed6:	bf00      	nop
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	08007efd 	.word	0x08007efd
 8007ee0:	20000294 	.word	0x20000294
 8007ee4:	2000009c 	.word	0x2000009c

08007ee8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007eec:	4802      	ldr	r0, [pc, #8]	; (8007ef8 <MX_USB_HOST_Process+0x10>)
 8007eee:	f7fe fda5 	bl	8006a3c <USBH_Process>
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000294 	.word	0x20000294

08007efc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d819      	bhi.n	8007f44 <USBH_UserProcess+0x48>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <USBH_UserProcess+0x1c>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f45 	.word	0x08007f45
 8007f1c:	08007f35 	.word	0x08007f35
 8007f20:	08007f45 	.word	0x08007f45
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f2d 	.word	0x08007f2d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <USBH_UserProcess+0x58>)
 8007f2e:	2203      	movs	r2, #3
 8007f30:	701a      	strb	r2, [r3, #0]
  break;
 8007f32:	e008      	b.n	8007f46 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f34:	4b07      	ldr	r3, [pc, #28]	; (8007f54 <USBH_UserProcess+0x58>)
 8007f36:	2202      	movs	r2, #2
 8007f38:	701a      	strb	r2, [r3, #0]
  break;
 8007f3a:	e004      	b.n	8007f46 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <USBH_UserProcess+0x58>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
  break;
 8007f42:	e000      	b.n	8007f46 <USBH_UserProcess+0x4a>

  default:
  break;
 8007f44:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20000144 	.word	0x20000144

08007f58 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f78:	d147      	bne.n	800800a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	4b25      	ldr	r3, [pc, #148]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	4a24      	ldr	r2, [pc, #144]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6313      	str	r3, [r2, #48]	; 0x30
 8007f8a:	4b22      	ldr	r3, [pc, #136]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007fa4:	f107 0314 	add.w	r3, r7, #20
 8007fa8:	4619      	mov	r1, r3
 8007faa:	481b      	ldr	r0, [pc, #108]	; (8008018 <HAL_HCD_MspInit+0xc0>)
 8007fac:	f7f9 fec6 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007fb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fc6:	f107 0314 	add.w	r3, r7, #20
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4812      	ldr	r0, [pc, #72]	; (8008018 <HAL_HCD_MspInit+0xc0>)
 8007fce:	f7f9 feb5 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fd2:	4b10      	ldr	r3, [pc, #64]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fdc:	6353      	str	r3, [r2, #52]	; 0x34
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe6:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fec:	6453      	str	r3, [r2, #68]	; 0x44
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_HCD_MspInit+0xbc>)
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	2043      	movs	r0, #67	; 0x43
 8008000:	f7f9 fe65 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008004:	2043      	movs	r0, #67	; 0x43
 8008006:	f7f9 fe7e 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800800a:	bf00      	nop
 800800c:	3728      	adds	r7, #40	; 0x28
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	40023800 	.word	0x40023800
 8008018:	40020000 	.word	0x40020000

0800801c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff f8d9 	bl	80071e2 <USBH_LL_IncTimer>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff f911 	bl	800726e <USBH_LL_Connect>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff f91a 	bl	800729c <USBH_LL_Disconnect>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
 800807c:	4613      	mov	r3, r2
 800807e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff f8cb 	bl	8007236 <USBH_LL_PortEnabled>
} 
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff f8cb 	bl	8007252 <USBH_LL_PortDisabled>
} 
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d12a      	bne.n	800812c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <USBH_LL_Init+0x74>)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a15      	ldr	r2, [pc, #84]	; (8008138 <USBH_LL_Init+0x74>)
 80080e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <USBH_LL_Init+0x74>)
 80080e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80080ee:	4b12      	ldr	r3, [pc, #72]	; (8008138 <USBH_LL_Init+0x74>)
 80080f0:	2208      	movs	r2, #8
 80080f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80080f4:	4b10      	ldr	r3, [pc, #64]	; (8008138 <USBH_LL_Init+0x74>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080fa:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <USBH_LL_Init+0x74>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <USBH_LL_Init+0x74>)
 8008102:	2202      	movs	r2, #2
 8008104:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008106:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <USBH_LL_Init+0x74>)
 8008108:	2200      	movs	r2, #0
 800810a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800810c:	480a      	ldr	r0, [pc, #40]	; (8008138 <USBH_LL_Init+0x74>)
 800810e:	f7f9 ffc8 	bl	80020a2 <HAL_HCD_Init>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008118:	f7f8 fef2 	bl	8000f00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800811c:	4806      	ldr	r0, [pc, #24]	; (8008138 <USBH_LL_Init+0x74>)
 800811e:	f7fa fbcb 	bl	80028b8 <HAL_HCD_GetCurrentFrame>
 8008122:	4603      	mov	r3, r0
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff f84c 	bl	80071c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	2000066c 	.word	0x2000066c

0800813c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008152:	4618      	mov	r0, r3
 8008154:	f7fa fb38 	bl	80027c8 <HAL_HCD_Start>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 f95c 	bl	800841c <USBH_Get_USB_Status>
 8008164:	4603      	mov	r3, r0
 8008166:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008168:	7bbb      	ldrb	r3, [r7, #14]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008188:	4618      	mov	r0, r3
 800818a:	f7fa fb40 	bl	800280e <HAL_HCD_Stop>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f941 	bl	800841c <USBH_Get_USB_Status>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80081b0:	2301      	movs	r3, #1
 80081b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fa fb8a 	bl	80028d4 <HAL_HCD_GetCurrentSpeed>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d007      	beq.n	80081d6 <USBH_LL_GetSpeed+0x2e>
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d302      	bcc.n	80081d0 <USBH_LL_GetSpeed+0x28>
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d006      	beq.n	80081dc <USBH_LL_GetSpeed+0x34>
 80081ce:	e008      	b.n	80081e2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
    break;
 80081d4:	e008      	b.n	80081e8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80081d6:	2301      	movs	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
    break;
 80081da:	e005      	b.n	80081e8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80081dc:	2302      	movs	r3, #2
 80081de:	73fb      	strb	r3, [r7, #15]
    break;
 80081e0:	e002      	b.n	80081e8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80081e2:	2301      	movs	r3, #1
 80081e4:	73fb      	strb	r3, [r7, #15]
    break;
 80081e6:	bf00      	nop
  }
  return  speed;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008208:	4618      	mov	r0, r3
 800820a:	f7fa fb1d 	bl	8002848 <HAL_HCD_ResetPort>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f901 	bl	800841c <USBH_Get_USB_Status>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800821e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800823a:	78fa      	ldrb	r2, [r7, #3]
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f7fa fb25 	bl	800288e <HAL_HCD_HC_GetXferCount>
 8008244:	4603      	mov	r3, r0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800824e:	b590      	push	{r4, r7, lr}
 8008250:	b089      	sub	sp, #36	; 0x24
 8008252:	af04      	add	r7, sp, #16
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	461a      	mov	r2, r3
 800825c:	4603      	mov	r3, r0
 800825e:	70fb      	strb	r3, [r7, #3]
 8008260:	460b      	mov	r3, r1
 8008262:	70bb      	strb	r3, [r7, #2]
 8008264:	4613      	mov	r3, r2
 8008266:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008276:	787c      	ldrb	r4, [r7, #1]
 8008278:	78ba      	ldrb	r2, [r7, #2]
 800827a:	78f9      	ldrb	r1, [r7, #3]
 800827c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800827e:	9302      	str	r3, [sp, #8]
 8008280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	4623      	mov	r3, r4
 800828e:	f7f9 ff6a 	bl	8002166 <HAL_HCD_HC_Init>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f8bf 	bl	800841c <USBH_Get_USB_Status>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd90      	pop	{r4, r7, pc}

080082ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f9 ffe3 	bl	8002296 <HAL_HCD_HC_Halt>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f8a0 	bl	800841c <USBH_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80082ea:	b590      	push	{r4, r7, lr}
 80082ec:	b089      	sub	sp, #36	; 0x24
 80082ee:	af04      	add	r7, sp, #16
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	70fb      	strb	r3, [r7, #3]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70bb      	strb	r3, [r7, #2]
 8008300:	4613      	mov	r3, r2
 8008302:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008312:	787c      	ldrb	r4, [r7, #1]
 8008314:	78ba      	ldrb	r2, [r7, #2]
 8008316:	78f9      	ldrb	r1, [r7, #3]
 8008318:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4623      	mov	r3, r4
 800832e:	f7f9 ffd5 	bl	80022dc <HAL_HCD_HC_SubmitRequest>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 f86f 	bl	800841c <USBH_Get_USB_Status>
 800833e:	4603      	mov	r3, r0
 8008340:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008342:	7bbb      	ldrb	r3, [r7, #14]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bd90      	pop	{r4, r7, pc}

0800834c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f7fa fa7e 	bl	8002864 <HAL_HCD_HC_GetURBState>
 8008368:	4603      	mov	r3, r0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008384:	2b01      	cmp	r3, #1
 8008386:	d103      	bne.n	8008390 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f872 	bl	8008474 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008390:	20c8      	movs	r0, #200	; 0xc8
 8008392:	f7f9 f837 	bl	8001404 <HAL_Delay>
  return USBH_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
 80083ac:	4613      	mov	r3, r2
 80083ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80083b8:	78fa      	ldrb	r2, [r7, #3]
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	440b      	add	r3, r1
 80083c6:	333b      	adds	r3, #59	; 0x3b
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	68f9      	ldr	r1, [r7, #12]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	440b      	add	r3, r1
 80083dc:	3350      	adds	r3, #80	; 0x50
 80083de:	78ba      	ldrb	r2, [r7, #2]
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	e009      	b.n	80083f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	440b      	add	r3, r1
 80083f2:	3351      	adds	r3, #81	; 0x51
 80083f4:	78ba      	ldrb	r2, [r7, #2]
 80083f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7f8 fff8 	bl	8001404 <HAL_Delay>
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d817      	bhi.n	8008460 <USBH_Get_USB_Status+0x44>
 8008430:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <USBH_Get_USB_Status+0x1c>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	08008449 	.word	0x08008449
 800843c:	0800844f 	.word	0x0800844f
 8008440:	08008455 	.word	0x08008455
 8008444:	0800845b 	.word	0x0800845b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
    break;
 800844c:	e00b      	b.n	8008466 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800844e:	2302      	movs	r3, #2
 8008450:	73fb      	strb	r3, [r7, #15]
    break;
 8008452:	e008      	b.n	8008466 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	e005      	b.n	8008466 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800845a:	2302      	movs	r3, #2
 800845c:	73fb      	strb	r3, [r7, #15]
    break;
 800845e:	e002      	b.n	8008466 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008460:	2302      	movs	r3, #2
 8008462:	73fb      	strb	r3, [r7, #15]
    break;
 8008464:	bf00      	nop
  }
  return usb_status;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
 800848c:	e001      	b.n	8008492 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	461a      	mov	r2, r3
 8008496:	2101      	movs	r1, #1
 8008498:	4803      	ldr	r0, [pc, #12]	; (80084a8 <MX_DriverVbusFS+0x34>)
 800849a:	f7f9 fde9 	bl	8002070 <HAL_GPIO_WritePin>
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	40020800 	.word	0x40020800

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	; (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	200000bc 	.word	0x200000bc

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4e0d      	ldr	r6, [pc, #52]	; (80084f0 <__libc_init_array+0x38>)
 80084bc:	4c0d      	ldr	r4, [pc, #52]	; (80084f4 <__libc_init_array+0x3c>)
 80084be:	1ba4      	subs	r4, r4, r6
 80084c0:	10a4      	asrs	r4, r4, #2
 80084c2:	2500      	movs	r5, #0
 80084c4:	42a5      	cmp	r5, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	4e0b      	ldr	r6, [pc, #44]	; (80084f8 <__libc_init_array+0x40>)
 80084ca:	4c0c      	ldr	r4, [pc, #48]	; (80084fc <__libc_init_array+0x44>)
 80084cc:	f000 f8ea 	bl	80086a4 <_init>
 80084d0:	1ba4      	subs	r4, r4, r6
 80084d2:	10a4      	asrs	r4, r4, #2
 80084d4:	2500      	movs	r5, #0
 80084d6:	42a5      	cmp	r5, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084e0:	4798      	blx	r3
 80084e2:	3501      	adds	r5, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084ea:	4798      	blx	r3
 80084ec:	3501      	adds	r5, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	080086e0 	.word	0x080086e0
 80084f4:	080086e0 	.word	0x080086e0
 80084f8:	080086e0 	.word	0x080086e0
 80084fc:	080086e4 	.word	0x080086e4

08008500 <malloc>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <malloc+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f000 b861 	b.w	80085cc <_malloc_r>
 800850a:	bf00      	nop
 800850c:	200000bc 	.word	0x200000bc

08008510 <free>:
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <free+0xc>)
 8008512:	4601      	mov	r1, r0
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f000 b80b 	b.w	8008530 <_free_r>
 800851a:	bf00      	nop
 800851c:	200000bc 	.word	0x200000bc

08008520 <memset>:
 8008520:	4402      	add	r2, r0
 8008522:	4603      	mov	r3, r0
 8008524:	4293      	cmp	r3, r2
 8008526:	d100      	bne.n	800852a <memset+0xa>
 8008528:	4770      	bx	lr
 800852a:	f803 1b01 	strb.w	r1, [r3], #1
 800852e:	e7f9      	b.n	8008524 <memset+0x4>

08008530 <_free_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4605      	mov	r5, r0
 8008534:	2900      	cmp	r1, #0
 8008536:	d045      	beq.n	80085c4 <_free_r+0x94>
 8008538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853c:	1f0c      	subs	r4, r1, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	18e4      	addlt	r4, r4, r3
 8008544:	f000 f8ac 	bl	80086a0 <__malloc_lock>
 8008548:	4a1f      	ldr	r2, [pc, #124]	; (80085c8 <_free_r+0x98>)
 800854a:	6813      	ldr	r3, [r2, #0]
 800854c:	4610      	mov	r0, r2
 800854e:	b933      	cbnz	r3, 800855e <_free_r+0x2e>
 8008550:	6063      	str	r3, [r4, #4]
 8008552:	6014      	str	r4, [r2, #0]
 8008554:	4628      	mov	r0, r5
 8008556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855a:	f000 b8a2 	b.w	80086a2 <__malloc_unlock>
 800855e:	42a3      	cmp	r3, r4
 8008560:	d90c      	bls.n	800857c <_free_r+0x4c>
 8008562:	6821      	ldr	r1, [r4, #0]
 8008564:	1862      	adds	r2, r4, r1
 8008566:	4293      	cmp	r3, r2
 8008568:	bf04      	itt	eq
 800856a:	681a      	ldreq	r2, [r3, #0]
 800856c:	685b      	ldreq	r3, [r3, #4]
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	bf04      	itt	eq
 8008572:	1852      	addeq	r2, r2, r1
 8008574:	6022      	streq	r2, [r4, #0]
 8008576:	6004      	str	r4, [r0, #0]
 8008578:	e7ec      	b.n	8008554 <_free_r+0x24>
 800857a:	4613      	mov	r3, r2
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	b10a      	cbz	r2, 8008584 <_free_r+0x54>
 8008580:	42a2      	cmp	r2, r4
 8008582:	d9fa      	bls.n	800857a <_free_r+0x4a>
 8008584:	6819      	ldr	r1, [r3, #0]
 8008586:	1858      	adds	r0, r3, r1
 8008588:	42a0      	cmp	r0, r4
 800858a:	d10b      	bne.n	80085a4 <_free_r+0x74>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	4401      	add	r1, r0
 8008590:	1858      	adds	r0, r3, r1
 8008592:	4282      	cmp	r2, r0
 8008594:	6019      	str	r1, [r3, #0]
 8008596:	d1dd      	bne.n	8008554 <_free_r+0x24>
 8008598:	6810      	ldr	r0, [r2, #0]
 800859a:	6852      	ldr	r2, [r2, #4]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	4401      	add	r1, r0
 80085a0:	6019      	str	r1, [r3, #0]
 80085a2:	e7d7      	b.n	8008554 <_free_r+0x24>
 80085a4:	d902      	bls.n	80085ac <_free_r+0x7c>
 80085a6:	230c      	movs	r3, #12
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	e7d3      	b.n	8008554 <_free_r+0x24>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	1821      	adds	r1, r4, r0
 80085b0:	428a      	cmp	r2, r1
 80085b2:	bf04      	itt	eq
 80085b4:	6811      	ldreq	r1, [r2, #0]
 80085b6:	6852      	ldreq	r2, [r2, #4]
 80085b8:	6062      	str	r2, [r4, #4]
 80085ba:	bf04      	itt	eq
 80085bc:	1809      	addeq	r1, r1, r0
 80085be:	6021      	streq	r1, [r4, #0]
 80085c0:	605c      	str	r4, [r3, #4]
 80085c2:	e7c7      	b.n	8008554 <_free_r+0x24>
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	20000148 	.word	0x20000148

080085cc <_malloc_r>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	1ccd      	adds	r5, r1, #3
 80085d0:	f025 0503 	bic.w	r5, r5, #3
 80085d4:	3508      	adds	r5, #8
 80085d6:	2d0c      	cmp	r5, #12
 80085d8:	bf38      	it	cc
 80085da:	250c      	movcc	r5, #12
 80085dc:	2d00      	cmp	r5, #0
 80085de:	4606      	mov	r6, r0
 80085e0:	db01      	blt.n	80085e6 <_malloc_r+0x1a>
 80085e2:	42a9      	cmp	r1, r5
 80085e4:	d903      	bls.n	80085ee <_malloc_r+0x22>
 80085e6:	230c      	movs	r3, #12
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	2000      	movs	r0, #0
 80085ec:	bd70      	pop	{r4, r5, r6, pc}
 80085ee:	f000 f857 	bl	80086a0 <__malloc_lock>
 80085f2:	4a21      	ldr	r2, [pc, #132]	; (8008678 <_malloc_r+0xac>)
 80085f4:	6814      	ldr	r4, [r2, #0]
 80085f6:	4621      	mov	r1, r4
 80085f8:	b991      	cbnz	r1, 8008620 <_malloc_r+0x54>
 80085fa:	4c20      	ldr	r4, [pc, #128]	; (800867c <_malloc_r+0xb0>)
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	b91b      	cbnz	r3, 8008608 <_malloc_r+0x3c>
 8008600:	4630      	mov	r0, r6
 8008602:	f000 f83d 	bl	8008680 <_sbrk_r>
 8008606:	6020      	str	r0, [r4, #0]
 8008608:	4629      	mov	r1, r5
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f838 	bl	8008680 <_sbrk_r>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d124      	bne.n	800865e <_malloc_r+0x92>
 8008614:	230c      	movs	r3, #12
 8008616:	6033      	str	r3, [r6, #0]
 8008618:	4630      	mov	r0, r6
 800861a:	f000 f842 	bl	80086a2 <__malloc_unlock>
 800861e:	e7e4      	b.n	80085ea <_malloc_r+0x1e>
 8008620:	680b      	ldr	r3, [r1, #0]
 8008622:	1b5b      	subs	r3, r3, r5
 8008624:	d418      	bmi.n	8008658 <_malloc_r+0x8c>
 8008626:	2b0b      	cmp	r3, #11
 8008628:	d90f      	bls.n	800864a <_malloc_r+0x7e>
 800862a:	600b      	str	r3, [r1, #0]
 800862c:	50cd      	str	r5, [r1, r3]
 800862e:	18cc      	adds	r4, r1, r3
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f836 	bl	80086a2 <__malloc_unlock>
 8008636:	f104 000b 	add.w	r0, r4, #11
 800863a:	1d23      	adds	r3, r4, #4
 800863c:	f020 0007 	bic.w	r0, r0, #7
 8008640:	1ac3      	subs	r3, r0, r3
 8008642:	d0d3      	beq.n	80085ec <_malloc_r+0x20>
 8008644:	425a      	negs	r2, r3
 8008646:	50e2      	str	r2, [r4, r3]
 8008648:	e7d0      	b.n	80085ec <_malloc_r+0x20>
 800864a:	428c      	cmp	r4, r1
 800864c:	684b      	ldr	r3, [r1, #4]
 800864e:	bf16      	itet	ne
 8008650:	6063      	strne	r3, [r4, #4]
 8008652:	6013      	streq	r3, [r2, #0]
 8008654:	460c      	movne	r4, r1
 8008656:	e7eb      	b.n	8008630 <_malloc_r+0x64>
 8008658:	460c      	mov	r4, r1
 800865a:	6849      	ldr	r1, [r1, #4]
 800865c:	e7cc      	b.n	80085f8 <_malloc_r+0x2c>
 800865e:	1cc4      	adds	r4, r0, #3
 8008660:	f024 0403 	bic.w	r4, r4, #3
 8008664:	42a0      	cmp	r0, r4
 8008666:	d005      	beq.n	8008674 <_malloc_r+0xa8>
 8008668:	1a21      	subs	r1, r4, r0
 800866a:	4630      	mov	r0, r6
 800866c:	f000 f808 	bl	8008680 <_sbrk_r>
 8008670:	3001      	adds	r0, #1
 8008672:	d0cf      	beq.n	8008614 <_malloc_r+0x48>
 8008674:	6025      	str	r5, [r4, #0]
 8008676:	e7db      	b.n	8008630 <_malloc_r+0x64>
 8008678:	20000148 	.word	0x20000148
 800867c:	2000014c 	.word	0x2000014c

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4c06      	ldr	r4, [pc, #24]	; (800869c <_sbrk_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4605      	mov	r5, r0
 8008688:	4608      	mov	r0, r1
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	f7f8 fddc 	bl	8001248 <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20000930 	.word	0x20000930

080086a0 <__malloc_lock>:
 80086a0:	4770      	bx	lr

080086a2 <__malloc_unlock>:
 80086a2:	4770      	bx	lr

080086a4 <_init>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	bf00      	nop
 80086a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086aa:	bc08      	pop	{r3}
 80086ac:	469e      	mov	lr, r3
 80086ae:	4770      	bx	lr

080086b0 <_fini>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr
